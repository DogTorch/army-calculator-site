{"version":3,"mappings":"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AAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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","names":["UnitUtils","unit","cost","unitType","type","targetType","modifier","mod","baseStrength","baseUnit","now","updates","errors","warnings","index","config","UNIT_TYPES","ATTACK_MODIFIER_TYPES","TARGET_TYPES","BASE_URL","DATA_PATHS","UnitLoader","__publicField","source","unitsData","response","unitData","error","costType","a","b","name","availableUnitNames","availableUnits","filter","filtered","u","query","lowerQuery","strengths","healths","types","StackingOptimizer","constraints","startTime","validCompositions","compositions","totalCombinations","armyUnits","composition","endTime","leadershipUnits","dominanceUnits","mercenaryUnits","combinedArmies","comp","hasLeadership","hasDominance","hasMercenary","hasType","aBudgetUsage","selectedLeadershipUnits","selectedDominanceUnits","selectedMercenaryUnits","leadershipMercenaryUnits","allUnits","properComposition","dominanceComposition","mercenaryComposition","combinedComposition","mercComposition","limit","leadershipBudget","mercenaryLimits","pattern","strongestUnit","i","currentUnit","strongerUnit","strongerTotalHealth","requiredQuantity","sortedUnits","basePattern","strongestTotalHealth","quantityNeeded","nextUnit","currentTotalHealth","nextTotalHealth","baseCost","unitName","quantity","baseQuantity","maxStacks","scaledQuantity","mercenaryLimit","dominanceBudget","total","stacksFromThisMerc","dominanceCostPerStack","pureMercComp","maxStacksByBudget","maxStacksByMercenaries","maxCombinedStacks","stacks","baseQty","remainingBudget","dominanceOnlyComps","finalMercenaryState","dominanceComp","combinedComp","units","budget","costProperty","unitCost","maxMultiplier","multiplier","scaledComposition","allLeadershipMercenaryUnits","leadershipCompositions","maxLeadershipComp","leadershipComp","strongestDominanceUnit","comparisonLeadershipUnit","comparisonUnitQuantity","comparisonTotalHealth","strongestDominanceHealth","independentDominanceComps","maxDominanceComp","targetUnit","closestUnit","smallestDifference","difference","maxTotalHealth","maxQuantityByHealth","maxQuantityByBudget","maxQuantity","strongestQty","testComposition","usedBudget","weakerUnit","requiredForStacking","maxByBudget","totalDominanceHealth","qty","baseUnits","baseBudget","baseCompositions","baseComp","strongestMercenary","comparisonBaseUnit","strongestMercenaryHealth","mercenaryTotalHealth","maxMercenaryQuantity","mixedComp","sortedByHealth","totalHealth","alternativeComp","variations","strongestFocus","strongestCost","maxStrongest","minimalComposition","leadershipUsed","dominanceUsed","cheapestLeadership","focusedComposition","remaining","balancedComposition","budgetPerUnit","combinations","mercName","maxCount","newCombinations","combo","count","newCombo","totalStrength","totalLeadershipCost","totalDominanceCost","totalMercenaryCount","unitGroups","groupHealth","groupStrength","isValidStacking","stackingOrder","j","strongerGroupHealth","tolerance","totalCost","efficiencyScore","diversityBonus","costTypeCount","balanceBonus","lines","group","unitInfo","sum","typeIcon","BattleUtils","groupIndex","battlePhase","attackerGroup","enemyGroupIndex","damage","targetGroup","combatLog","action","totalDamage","playerAttacks","enemyAttacks","damageByUnitType","attacksByUnitType","result","stats","BATTLE_CONSTANTS","BaseBattleSimulationService","state","playerArmy","enemyGroupCount","bestCaseResult","worstCaseResult","comparison","groups","cacheKey","cached","sorted","playerGoesFirst","statistics","g","BattleSimulationService","validation","damageA","_","playerTurnsTaken","enemyTurnsTaken","maxEnemyTurns","enemyAttackOrder","maxPlayerTurns","totalPossibleActions","actionIndex","isPlayerAction","currentPlayerAttackOrder","strongestPlayer","optimalEnemyIndex","attackingGroup","attackIndex","targetEnemyIndex","currentTargetOrder","DamageOptimizer","battleSimulator","algorithm","SystematicCombinationAlgorithm","unitLoader","progress","_a","maxTimeoutMs","armyCombinations","results","combinationsEvaluated","currentTime","army","resolve","elapsedMs","progressPercent","estimatedRemainingMs","elapsed","rankedResults","damageDiff","optimizationTimeMs","specificEnemyUnits","battleAnalysis","optimizedBattleSimulationService","__vitePreload","optimizedBattleSimulation","totalSilverCost","totalFoodConsumption","totalRevivalCost","bestCaseTotalDamage","worstCaseTotalDamage","averageDamagePerBattle","totalResourceCost","damageEfficiencyScore","unitsByName","generationStartTime","maxGenerationTimeMs","maxCombinations","unitCombinations","combination","unitNames","totalPossible","allCombinations","k","halfSize","attempt","existing","quarterSize","size","unitCombination","stackingOptimizer","stackingConstraints","UnitTypeMappingService","stackingGroups","missingUnits","unitTypeMappingService","MortalEnemyBehavior","enemy","currentHealth","actualDamage","remainingHealth","unitsKilled","remainingCount","isDefeated","turn","attacker","actionText","ImmortalEnemyBehavior","EnemyBehaviorFactory","battleEnemy","EnemyUnitBattleSimulationService","playerGroups","enemyUnits","playerDamageData","baseDamage","maxDamage","playerUnitData","bonusDamage","totalWithBonus","data","order","bonus","enemyDamageData","playerGroup","unitNameLower","e","battleEnemies","reorderedEnemyUnits","standardConfig","standardResult","enhancedCombatLog","mortalEnemiesDefeated","allMortalEnemiesDefeated","_b","outcome","coreConfig","activeMortalEnemies","activeImmortalEnemies","useModifiers","playerUnitsAttacked","enemyUnitsAttacked","activeEnemies","availablePlayerGroups","bestPlayerGroup","availableEnemies","bestEnemyIndex","attackOrder","targetEnemy","enemyBehavior","finalDamage","damageResult","attackingEnemy","targetOrder","availableGroups","best","current","enemyIndex","useEnemyModifiers","_c","_e","_d","bestCaseConfig","bestCase","_g","_f","_i","_h","worstCaseConfig","worstCase","standardCombatLog","enhancedAction","isPlayerAttack","isEnemyAttack","attackingUnitName","enhancedDamage","modifiersApplied","enemyUnitsKilled","modifierText","m","percentage","attackingEnemyIndex","targetUnitName","enhancedStrength","targetUnitTypes","bonusStrength","text","match","target","enemyUnit","baseStats","enemyUnitActions","damageByEnemyUnit","attacksByEnemyUnit","modifiersUsed","enemyName","key","CombatUnitUtils","typeMapping","DEFAULT_OPTIMIZATION_CONFIG","ATTACK_OPTIMIZATION_CONSTANTS","AttackOrderOptimizerService","playerUnits","playerOptimization","enemyOptimization","totalTime","attackers","targets","side","damageMatrix","originalTotalDamage","optimizedOrder","optimizedTotalDamage","optimizationTime","improvementPercentage","attackerSide","calculations","calculationTime","targetSide","effectiveDamage","modifierResult","targetHealth","cappedEffectiveDamage","attackerName","targetName","modifiedValue","appliedModifiers","targetTypes","playerUnit","remainingAttackers","bestAttackerIndex","attackerIndex","emptyMatrix","totalCacheAccess","cacheHits","attackOrderOptimizerService","OptimizedBattleSimulationService","abstractEnemyUnits","optimizationConfig","optimizationResult","optimizedConfig","battleResult","optimizationMetrics","playerKey","enemyKey","configKey","optimizedResult","damageIncrease","damageIncreasePercentage","survivalIncrease","damageDifference","survivalDifference","averageDamage","averageSurvival","EnemyUnitLoader","enemyUnitsData","EnemyUnitUtils","byUnitType","unitTypeDistribution","unitsWithAttackModifiers","unitTypes","playerUnitTypes","item","totalEffectiveness","playerType","EnemyUnitValidationService","baseValidation","trimmedName","ENEMY_UNIT_TYPES","health","strength","attackModifiers","ENEMY_TARGET_TYPES","ENEMY_ATTACK_MODIFIER_TYPES","nameValidation","unitTypesValidation","healthValidation","strengthValidation","attackModifiersValidation","summary","r","sanitized","_EnemyUnitStorageService","options","test","stored","processedUnits","userUnit","id","unitIndex","existingUnit","updatedUnit","finalUnit","exportData","jsonData","importData","existingUnits","imported","skipped","today","unitsCreatedToday","lastModified","storageSize","metadata","threshold","EnemyUnitStorageService","EnemyUnitSelector","props","container","lowerFilter","title","isSelected","selected","isUserUnit","style","closeBtn","cancelBtn","confirmBtn","searchInput","clearBtn","tab","btn","card","overlay","event","input","category","existingIndex","maxSelections","unitCard","unitList","resultsCount","newTitle","titleElement","selectedUnits","BattleSimulationComponent","runBtn","enemyGroupsInput","selectEnemyBtn","clearEnemyBtn","radio","enemyType","genericSection","specificSection","modalContainer","selectedUnit","noSelectionEl","selectedInfoEl","attackModifiersText","enemyTypeRadio","isValid","errorMessage","inputValue","inputId","message","errorElement","icon","tooltipKey","tooltip","tooltipContent","targetRect","tooltipElement","tooltipRect","viewportWidth","viewportHeight","top","left","simulationPromise","reject","optimizedArmy","enemyGroups","timeoutPromise","resultsContainer","logTabs","scenario","t","log","activeLog","show","loadingEl","resultsEl","controlsContainer","enemyInputContainer","noteContainer","ManualBattleUtils","armyUnit","manualConfig","playerStackingGroups","totalUnits","hasInfiniteUnits","duplicates","isInfinite","newUnits","totalTypes","infiniteCount","finiteTotal","MANUAL_BATTLE_CONSTANTS","DualArmyInputForm","playerUnitSelect","playerQuantity","addPlayerUnit","enemyUnitSelect","enemyQuantity","enemyInfinite","addEnemyUnit","clearAll","validate","select","checkbox","quantityInput","button","selection","updatedArmy","emptyPlayerArmy","emptyEnemyArmy","playerValidation","enemyValidation","playerArmyList","enemyArmyList","playerSummary","enemySummary","newButton","allErrors","allWarnings","warning","styleId","ManualBattleSimulationComponent","convertedUserUnits","regularUnits","convertedEnemyUnits","formContainer","battleNameInput","simulateBtn","clearAllBtn","saveConfigBtn","selectedRadio","value","playerValid","enemyValid","canSimulate","initiativeRadio","initiativeValue","ManualBattleSimulationService","battleService","analysis","singleConfig","singleResult","resultsSection","manualConfiguration","exportBtn","simulateAgainBtn","loading","errorEl","statusEl","EnemyUnitInputForm","isEdit","modifiersList","form","saveBtn","deleteBtn","addModifierBtn","newModifierValue","fieldId","typeInput","valueInput","bonusValue","currentValue","newValue","parsedValue","fields","nameInput","healthInput","strengthInput","unitTypesInput","attackModifiersArray","target_type","currentData","original","EnemyUnitManager","isStandalone","clearSearchBtn","createBtn","createFirstBtn","sortSelect","sortOrderBtn","selectAllBtn","selectNoneBtn","toggle","dropdown","other","importBtn","exportAllBtn","exportSelectedBtn","deleteSelectedBtn","fileInput","date","diffMs","diffDays","unitId","duplicateUnit","file","reader","selectedUnitsList","deletedCount","filename","blob","url","unitsList","resultsInfo","bulkActionsBtn","BREAKPOINTS","MobileLayoutManager","callback","width","newMode","resizeTimeout","TouchInteractionManager","element","onSwipeLeft","onSwipeRight","startX","startY","touch","endX","endY","deltaX","deltaY","touchStartTime","onRefresh","currentY","isRefreshing","refreshIndicator","createRefreshIndicator","pullDistance","MobileCSSManager","layoutManager","body","mobileLayoutManager","ResponsiveNavigationManager","mainContent","tabContainer","section","header","currentMode","mode","sectionId","s","indicator","availableSections","currentIndex","nextSection","previousSection","responsiveNavigation","MobileUIPatterns","fab","backdrop","bottomSheet","content","actions","trigger","option","MobilePerformanceManager","lazyElements","observer","entries","entry","isScrolling","scrollTimeout","children","child","childRect","isVisible","el","interactionStart","interactionTime","memory","MobileAccessibilityManager","priority","activeSection","firstInteractive","tabs","label","newIndex","activeIndex","lastTap","tapLength","activeModal","skipLinks","navigation","newLabel","ArmyCalculatorApp","stackingModeBtn","damageModeBtn","enemyUnitsBtn","unitSearch","unitTypeFilter","optimizeBtn","selectAllVisible","clearSelection","selectEnemyUnitsBtn","enemyCountInput","manualBattleBtn","allTypes","searchQuery","activeTab","unitGroupsElement","hierarchicalGroups","mainCategory","subCategories","mainElement","subCategory","familyName","families","baseName","mainDiv","subElement","familyElement","familySum","expandIcon","selectBtn","deselectBtn","baseText","categoryUnits","subCategoryUnits","familyUnits","selectedCountElement","mercenaryLimitsElement","mercItem","costDisplay","hasUnits","hasBudget","selectedUnitObjects","enemyCount","enhancedConstraints","ms","optimizationStats","armyCompositions","stackingResults","damageResults","compositionDiv","damageArmyList","battleContainer","armyResult","armyDiv","rank","div","cleanFormat","formattedContent","line","battleButton","strategy","strategyIcon","detailsContainer","compositionContainer","explanation","stackingBtn","damageBtn","stackingDesc","damageDesc","damageControls","optimizeBtnText","resultsTitle","configSection","enemyUnitsSection","manualBattleSection","loadingModal","progressModal","details","progressFill","progressText","progressPercentage","progressCombinations","progressPhase","progressRemaining","evaluated","remainingSeconds","minutes","seconds","elapsedSeconds","progressElapsed","enemyUnitsContainer","manualBattleContainer","EnemyUnitSelector$1","selector","enemyGroupsCount","appContainer"],"ignoreList":[],"sources":["../../src/types/units.ts","../../src/config.ts","../../src/services/unitLoader.ts","../../src/services/stackingOptimizer.ts","../../src/types/battleSimulation.ts","../../src/services/baseBattleSimulation.ts","../../src/services/battleSimulation.ts","../../src/services/damageOptimizer.ts","../../src/utils/unitTypeMapping.ts","../../src/types/enemyBehavior.ts","../../src/services/enemyBattleSimulation.ts","../../src/types/attackOptimization.ts","../../src/services/attackOrderOptimizer.ts","../../src/services/optimizedBattleSimulation.ts","../../src/services/enemyUnitLoader.ts","../../src/services/enemyUnitValidation.ts","../../src/services/enemyUnitStorage.ts","../../src/components/EnemyUnits/EnemyUnitSelector.ts","../../src/components/BattleSimulation/BattleSimulationComponent.ts","../../src/types/manualBattle.ts","../../src/components/UnitInput/DualArmyInputForm.ts","../../src/components/BattleSimulation/ManualBattleSimulationComponent.ts","../../src/components/EnemyUnits/EnemyUnitInputForm.ts","../../src/components/EnemyUnits/EnemyUnitManager.ts","../../src/utils/mobileUtils.ts","../../src/utils/responsiveNavigation.ts","../../src/utils/mobileUIPatterns.ts","../../src/utils/mobilePerformance.ts","../../src/utils/mobileAccessibility.ts","../../src/components/ArmyCalculator/ArmyCalculatorApp.ts","../../src/main.ts"],"sourcesContent":["/**\n * Unit types and interfaces for the TotalBattle Army Calculator\n * Unified interface supporting both player and enemy units\n */\n\nexport type CostType = 'Leadership' | 'Dominance' | 'Authority' | 'Mercenary';\nexport type UnitContext = 'player' | 'enemy' | 'simulation';\n\n/**\n * Attack modifier interface for unit-vs-unit combat bonuses\n */\nexport interface AttackModifier {\n  /** Type of unit this modifier targets (e.g., 'Melee', 'Flying', 'Mounted') */\n  target_type: string;\n  /** Type of modifier (typically 'Strength') */\n  modifier_type: string;\n  /** Absolute value of the modifier */\n  value: number;\n}\n\n/**\n * Unified unit interface representing any TotalBattle unit\n * Supports both player units (with costs) and enemy units (without costs)\n */\nexport interface Unit {\n  /** Display name of the unit */\n  name: string;\n  /** Array of unit type tags (e.g., ['Human', 'Ranged', 'Guardsman']) */\n  unit_types: string[];\n  /** Unit health points */\n  health: number;\n  /** Unit attack strength */\n  strength: number;\n  /** Attack modifiers for unit-vs-unit combat bonuses */\n  attack_modifiers?: AttackModifier[];\n  \n  // Player-specific fields (optional for enemy units)\n  /** Primary cost type for this unit (player units only) */\n  cost_type?: CostType;\n  /** Leadership cost to deploy this unit (player units only) */\n  leadership_cost?: number;\n  /** Dominance cost to deploy this unit (player units only) */\n  dominance_cost?: number;\n  /** Authority cost to deploy this unit (for mercenaries, player units only) */\n  authority_cost?: number;\n  /** Food consumption per unit (player units only) */\n  food_consumption?: number;\n  /** Carrying capacity of the unit (player units only) */\n  carrying_capacity?: number;\n  /** Gold cost to revive this unit (player units only) */\n  revival_cost_gold?: number;\n  /** Silver cost to revive this unit (player units only) */\n  revival_cost_silver?: number;\n  /** Source screenshot file this unit was extracted from (player units only) */\n  source_file?: string;\n\n  // Enemy-specific battle properties\n  /** Current count of this enemy unit (for mortal enemies, undefined = infinite/immortal) */\n  count?: number;\n  /** Current health remaining for this enemy unit/group (for damage tracking) */\n  currentHealth?: number;\n  /** Whether this enemy is mortal (can be killed) or immortal (infinite) */\n  isMortal?: boolean;\n\n  // Context and metadata\n  /** Usage context to distinguish between player, enemy, or simulation units */\n  context?: UnitContext;\n  /** Unique identifier (user-created units) */\n  id?: string;\n  /** Timestamp when the unit was created (user-created units) */\n  createdAt?: Date;\n  /** Timestamp when the unit was last modified (user-created units) */\n  modifiedAt?: Date;\n\n  // Legacy properties for backward compatibility\n  class?: string;\n  leadershipCost?: number;\n  dominanceCost?: number;\n  description?: string;\n}\n\n/**\n * Unit with calculated properties for optimization\n */\nexport interface UnitWithCalculatedProps extends Unit {\n  readonly isMercenary: boolean;\n  readonly primaryCost: number;\n  readonly strengthPerCost: number;\n  readonly healthPerCost: number;\n}\n\n/**\n * A group of identical units in the stacking order\n */\nexport interface StackingGroup {\n  /** Name of the unit */\n  unitName: string;\n  /** Number of units in this group */\n  count: number;\n  /** Total health of all units in this group */\n  totalHealth: number;\n  /** Individual unit strength */\n  unitStrength: number;\n}\n\n/**\n * Complete army composition with stacking analysis\n */\nexport interface ArmyComposition {\n  /** Map of unit names to quantities */\n  units: Record<string, number>;\n  /** Total army strength */\n  totalStrength: number;\n  /** Total army health */\n  totalHealth: number;\n  /** Total leadership cost */\n  totalLeadershipCost: number;\n  /** Total dominance cost */\n  totalDominanceCost: number;\n  /** Total mercenary count */\n  totalMercenaryCount: number;\n  /** Stacking order from weakest to strongest */\n  stackingOrder: StackingGroup[];\n  /** Whether the stacking is valid (weaker units have higher total health) */\n  isValidStacking: boolean;\n  /** Efficiency score (strength per cost with stacking bonus) */\n  efficiencyScore: number;\n  /** Legacy properties for backward compatibility */\n  effectiveness?: number;\n  totalLeadership?: number;\n  totalDominance?: number;\n  metadata?: any;\n}\n\n/**\n * Constraints for army optimization\n */\nexport interface OptimizationConstraints {\n  /** Total leadership points available */\n  leadershipBudget: number;\n  /** Total dominance points available */\n  dominanceBudget: number;\n  /** Map of mercenary names to maximum quantities */\n  mercenaryLimits: Record<string, number>;\n  /** Array of unit names that are available for selection */\n  availableUnits: string[];\n  /** Legacy budget property for backward compatibility */\n  budget?: { leadership: number; dominance: number };\n  /** Legacy modifiers property for backward compatibility */\n  modifiers?: ClassModifiers;\n}\n\n/**\n * Result of army optimization\n */\nexport interface OptimizationResult {\n  /** Array of valid army compositions, sorted by efficiency */\n  compositions: ArmyComposition[];\n  /** Total number of combinations evaluated */\n  totalCombinationsEvaluated: number;\n  /** Number of valid stacking solutions found */\n  validStackingsFound: number;\n  /** Time taken to complete optimization in milliseconds */\n  executionTimeMs: number;\n}\n\n/**\n * Filter criteria for units\n */\nexport interface UnitFilter {\n  /** Filter by cost type */\n  costType?: CostType;\n  /** Filter by unit types (must have at least one) */\n  unitTypes?: string[];\n  /** Minimum strength requirement */\n  minStrength?: number;\n  /** Maximum cost requirement */\n  maxCost?: number;\n}\n\n/**\n * Summary statistics for loaded units\n */\nexport interface UnitSummary {\n  /** Total number of units */\n  totalUnits: number;\n  /** Count of units by cost type */\n  byCostType: Record<CostType, number>;\n  /** Strength range across all units */\n  strengthRange: {\n    min: number;\n    max: number;\n  };\n  /** Health range across all units */\n  healthRange: {\n    min: number;\n    max: number;\n  };\n}\n\n/**\n * Unified utility class for unit operations (both player and enemy units)\n */\nexport class UnitUtils {\n  /**\n   * Check if unit is a player unit (has cost information)\n   */\n  static isPlayerUnit(unit: Unit): boolean {\n    return unit.cost_type !== undefined || unit.context === 'player';\n  }\n\n  /**\n   * Check if unit is an enemy unit (no cost information)\n   */\n  static isEnemyUnit(unit: Unit): boolean {\n    return unit.cost_type === undefined || unit.context === 'enemy';\n  }\n\n  /**\n   * Check if enemy unit is mortal (can be killed)\n   */\n  static isMortalEnemy(unit: Unit): boolean {\n    return UnitUtils.isEnemyUnit(unit) && (unit.isMortal === true || unit.count !== undefined);\n  }\n\n  /**\n   * Check if enemy unit is immortal (infinite)\n   */\n  static isImmortalEnemy(unit: Unit): boolean {\n    return UnitUtils.isEnemyUnit(unit) && !UnitUtils.isMortalEnemy(unit);\n  }\n\n  /**\n   * Get remaining enemy count (undefined for immortal enemies)\n   */\n  static getRemainingEnemyCount(unit: Unit): number | undefined {\n    return UnitUtils.isMortalEnemy(unit) ? unit.count : undefined;\n  }\n\n  /**\n   * Get current enemy health (total for the group)\n   */\n  static getCurrentEnemyHealth(unit: Unit): number {\n    if (unit.currentHealth !== undefined) {\n      return unit.currentHealth;\n    }\n    // Calculate total health for the group\n    const count = unit.count ?? 1;\n    return count * unit.health;\n  }\n\n  /**\n   * Check if unit is a mercenary (player units only)\n   */\n  static isMercenary(unit: Unit): boolean {\n    return unit.cost_type === 'Mercenary' || (unit.authority_cost ?? 0) > 0;\n  }\n\n  /**\n   * Get primary cost for player units (returns 0 for enemy units)\n   */\n  static getPrimaryCost(unit: Unit): number {\n    if (!UnitUtils.isPlayerUnit(unit)) return 0;\n    \n    switch (unit.cost_type) {\n      case 'Leadership':\n        return unit.leadership_cost ?? 0;\n      case 'Dominance':\n        return unit.dominance_cost ?? 0;\n      case 'Authority':\n      case 'Mercenary':\n        return unit.authority_cost ?? 0;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Get strength per cost ratio (player units) or strength per health (enemy units)\n   */\n  static getEfficiencyRatio(unit: Unit): number {\n    if (UnitUtils.isPlayerUnit(unit)) {\n      const cost = UnitUtils.getPrimaryCost(unit);\n      return cost > 0 ? unit.strength / cost : 0;\n    } else {\n      // For enemy units, use strength per health as efficiency metric\n      return unit.health > 0 ? unit.strength / unit.health : 0;\n    }\n  }\n\n  /**\n   * Get strength per cost ratio (player units only)\n   */\n  static getStrengthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.strength / cost : 0;\n  }\n\n  /**\n   * Get health per cost ratio (player units only)\n   */\n  static getHealthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.health / cost : 0;\n  }\n\n  /**\n   * Get strength per health ratio (useful for enemy units)\n   */\n  static getStrengthPerHealth(unit: Unit): number {\n    return unit.health > 0 ? unit.strength / unit.health : 0;\n  }\n\n  /**\n   * Calculate effectiveness score based on unit type\n   */\n  static getEffectivenessScore(unit: Unit): number {\n    if (UnitUtils.isPlayerUnit(unit)) {\n      // For player units: factor in cost efficiency\n      const cost = UnitUtils.getPrimaryCost(unit);\n      return cost > 0 ? (unit.strength * unit.health) / cost : 0;\n    } else {\n      // For enemy units: simple strength * health calculation\n      return (unit.strength * unit.health) / 1000;\n    }\n  }\n\n  /**\n   * Check if unit has specific unit type\n   */\n  static hasUnitType(unit: Unit, unitType: string): boolean {\n    return unit.unit_types.some(type => \n      type.toLowerCase() === unitType.toLowerCase()\n    );\n  }\n\n  /**\n   * Get attack modifier value against specific target type\n   */\n  static getAttackModifierAgainst(unit: Unit, targetType: string): number {\n    if (!unit.attack_modifiers) return 0;\n    \n    const modifier = unit.attack_modifiers.find(mod => \n      mod.target_type.toLowerCase() === targetType.toLowerCase()\n    );\n    \n    return modifier ? modifier.value : 0;\n  }\n\n  /**\n   * Calculate total strength including modifiers against target\n   */\n  static getTotalStrengthAgainst(unit: Unit, targetType: string): number {\n    const baseStrength = unit.strength;\n    const modifier = UnitUtils.getAttackModifierAgainst(unit, targetType);\n    return baseStrength + modifier;\n  }\n\n  /**\n   * Create a user enemy unit from base unit data\n   */\n  static createUserEnemyUnit(baseUnit: Partial<Unit>): Unit {\n    const now = new Date();\n    return {\n      name: baseUnit.name ?? 'Unnamed Enemy',\n      unit_types: baseUnit.unit_types ?? ['Epic Monster'],\n      health: baseUnit.health ?? 10000,\n      strength: baseUnit.strength ?? 5000,\n      attack_modifiers: baseUnit.attack_modifiers ?? [],\n      context: 'enemy',\n      id: `user_enemy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      createdAt: now,\n      modifiedAt: now\n    };\n  }\n\n  /**\n   * Update a user unit's modified timestamp\n   */\n  static updateUserUnit(unit: Unit, updates: Partial<Unit>): Unit {\n    return {\n      ...unit,\n      ...updates,\n      modifiedAt: new Date()\n    };\n  }\n\n  /**\n   * Validate unit data structure\n   */\n  static validateUnit(unit: Partial<Unit>): { isValid: boolean; errors: string[]; warnings?: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Required fields validation\n    if (!unit.name || unit.name.trim() === '') {\n      errors.push('Unit name is required');\n    }\n\n    if (!unit.unit_types || !Array.isArray(unit.unit_types) || unit.unit_types.length === 0) {\n      errors.push('At least one unit type is required');\n    }\n\n    if (typeof unit.health !== 'number' || unit.health <= 0) {\n      errors.push('Health must be a positive number');\n    }\n\n    if (typeof unit.strength !== 'number' || unit.strength <= 0) {\n      errors.push('Strength must be a positive number');\n    }\n\n    // Attack modifiers validation\n    if (unit.attack_modifiers) {\n      if (!Array.isArray(unit.attack_modifiers)) {\n        errors.push('Attack modifiers must be an array');\n      } else {\n        unit.attack_modifiers.forEach((modifier, index) => {\n          if (!modifier.target_type || modifier.target_type.trim() === '') {\n            errors.push(`Attack modifier ${index + 1}: target_type is required`);\n          }\n          if (!modifier.modifier_type || modifier.modifier_type.trim() === '') {\n            errors.push(`Attack modifier ${index + 1}: modifier_type is required`);\n          }\n          if (typeof modifier.value !== 'number' || modifier.value < 0) {\n            errors.push(`Attack modifier ${index + 1}: value must be a non-negative number`);\n          }\n        });\n      }\n    }\n\n    // Player unit specific validation\n    if (unit.cost_type || unit.context === 'player') {\n      if (unit.cost_type && !['Leadership', 'Dominance', 'Authority', 'Mercenary'].includes(unit.cost_type)) {\n        errors.push('Invalid cost_type. Must be Leadership, Dominance, Authority, or Mercenary');\n      }\n    }\n\n    // Warnings for unusual values\n    if (unit.health && unit.health > 10000000) {\n      warnings.push('Health value is unusually high');\n    }\n\n    if (unit.strength && unit.strength > 5000000) {\n      warnings.push('Strength value is unusually high');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate enemy unit data structure (backward compatibility alias)\n   * @deprecated Use validateUnit instead\n   */\n  static validateEnemyUnit(unit: Partial<Unit>): { isValid: boolean; errors: string[]; warnings?: string[] } {\n    return UnitUtils.validateUnit(unit);\n  }\n\n  /**\n   * Validate battle configuration constraints\n   */\n  static validateBattleConfiguration(config: {\n    playerArmy?: any;\n    enemyGroupCount?: number;\n    enemyUnits?: Unit[];\n  }): { isValid: boolean; errors: string[]; warnings?: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate player army\n    if (!config.playerArmy) {\n      errors.push('Player army is required');\n    } else if (!config.playerArmy.stackingOrder || config.playerArmy.stackingOrder.length === 0) {\n      errors.push('Player army must have at least one unit group');\n    }\n\n    // Validate enemy configuration\n    if (config.enemyGroupCount !== undefined) {\n      // Standard battle simulation validation\n      if (config.enemyGroupCount < 1) {\n        errors.push('Enemy group count must be at least 1');\n      }\n    }\n\n    if (config.enemyUnits !== undefined) {\n      // Enemy unit battle simulation validation\n      if (!Array.isArray(config.enemyUnits) || config.enemyUnits.length === 0) {\n        errors.push('At least one enemy unit is required');\n      }\n    }\n\n    // At least one enemy configuration must be provided\n    // For manual battle simulations, enemyUnits array may exist but be empty if conversion failed\n    // Only require validation if neither enemy configuration is provided at all\n    if (config.enemyGroupCount === undefined && config.enemyUnits === undefined) {\n      errors.push('Either enemy group count or enemy units must be specified');\n    } else if (config.enemyUnits !== undefined && config.enemyUnits.length === 0) {\n      // If enemyUnits array is explicitly provided but empty, this is likely a conversion issue\n      errors.push('Enemy units array is empty - check that enemy army has valid units selected');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n}\n\n/**\n * Constants for the application\n */\nexport const UNIT_TYPES = [\n  'Human', 'Beast', 'Undead', 'Demon', 'Elemental', 'Construct',\n  'Melee', 'Ranged', 'Magic', 'Siege', 'Mounted', 'Flying', 'Aquatic',\n  'Guardsman', 'Monster', 'Mercenary', 'Specialist', 'Elite', 'Heavy', 'Light',\n  'Epic Monster', 'Giant', 'Dragon', 'Fortification'\n] as const;\n\nexport const COST_TYPES: CostType[] = ['Leadership', 'Dominance', 'Authority', 'Mercenary'];\n\nexport const ATTACK_MODIFIER_TYPES = ['Strength'] as const;\n\nexport const TARGET_TYPES = [\n  'Melee', 'Ranged', 'Flying', 'Mounted', 'Beast', 'Human', 'Siege', \n  'Dragon', 'Elemental', 'Giant', 'Fortification', 'Undead', 'Demon'\n] as const;\n\nexport const DEFAULT_OPTIMIZATION_CONSTRAINTS: OptimizationConstraints = {\n  leadershipBudget: 0,\n  dominanceBudget: 0,\n  mercenaryLimits: {},\n  availableUnits: []\n};\n\n/**\n * Default templates for unit creation\n */\nexport const DEFAULT_ENEMY_UNIT: Omit<Unit, 'name'> = {\n  unit_types: ['Epic Monster'],\n  health: 10000,\n  strength: 5000,\n  attack_modifiers: [],\n  context: 'enemy'\n};\n\nexport const DEFAULT_PLAYER_UNIT: Omit<Unit, 'name'> = {\n  unit_types: ['Human'],\n  health: 1000,\n  strength: 500,\n  cost_type: 'Leadership',\n  leadership_cost: 100,\n  dominance_cost: 0,\n  authority_cost: 0,\n  food_consumption: 1,\n  carrying_capacity: 1,\n  revival_cost_gold: 50,\n  revival_cost_silver: 5,\n  attack_modifiers: [],\n  context: 'player'\n};\n\n// Legacy type aliases for backward compatibility\nexport type UnitClass = string;\nexport type AvailableUnit = Unit;\nexport type ArmyUnit = { unit: Unit; quantity: number; position?: number };\nexport type ResourceBudget = { leadership: number; dominance: number };\nexport type ClassModifiers = Record<string, number>;\nexport type ArmyCalculationInput = OptimizationConstraints;\nexport type ValidationResult = { isValid: boolean; errors: string[]; warnings?: string[] };\nexport type SavedArmy = ArmyComposition;\n\n// Enemy unit backward compatibility aliases\nexport type EnemyUnit = Unit;\nexport type UserEnemyUnit = Unit;\nexport type EnemyUnitWithCalculatedProps = UnitWithCalculatedProps;\nexport type EnemyAttackModifier = AttackModifier;\nexport type EnemyUnitValidationResult = ValidationResult;\nexport type EnemyUnitFilter = UnitFilter;\nexport type EnemyUnitSummary = UnitSummary;\n\n// Re-export enemy unit constants for backward compatibility\nexport const ENEMY_UNIT_TYPES = UNIT_TYPES;\nexport const ENEMY_ATTACK_MODIFIER_TYPES = ATTACK_MODIFIER_TYPES;\nexport const ENEMY_TARGET_TYPES = TARGET_TYPES;\n\n// Re-export utility class for backward compatibility\nexport const EnemyUnitUtils = UnitUtils;\n","/**\n * Application configuration\n * Centralizes paths and settings for the Army Calculator\n */\n\n// Get the base URL from Vite's environment\nconst BASE_URL = import.meta.env.BASE_URL;\n\n/**\n * Data file paths - automatically uses the correct base path\n */\nexport const DATA_PATHS = {\n  FINAL_UNITS: `${BASE_URL}final_units.json`,\n  ENEMY_UNITS: `${BASE_URL}enemy_units.json`\n} as const;\n\n/**\n * Application constants\n */\nexport const APP_CONFIG = {\n  BASE_URL,\n  VERSION: '1.0.0'\n} as const;","/**\n * Unit Data Loader for the Army Stacking Calculator\n * Loads and manages unit data from JSON files\n */\n\nimport { \n  Unit, \n  UnitWithCalculatedProps, \n  UnitSummary, \n  UnitFilter, \n  CostType,\n  UnitUtils \n} from '../types/units';\nimport { DATA_PATHS } from '../config';\n\nexport class UnitLoader {\n  private units: Unit[] = [];\n  private unitsByName: Map<string, Unit> = new Map();\n  private unitsByCostType: Record<CostType, Unit[]> = {\n    Leadership: [],\n    Dominance: [],\n    Authority: [],\n    Mercenary: []\n  };\n\n  constructor() {\n    this.resetData();\n  }\n\n  /**\n   * Load preset player units from final_units.json\n   */\n  async loadPresetUnits(): Promise<Unit[]> {\n    return this.loadUnits(DATA_PATHS.FINAL_UNITS);\n  }\n\n  /**\n   * Load units from a JSON file or URL\n   */\n  async loadUnits(source: string | Unit[]): Promise<Unit[]> {\n    try {\n      let unitsData: Unit[];\n\n      if (typeof source === 'string') {\n        console.log(`Loading units from: ${source}`);\n        const response = await fetch(source);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to fetch units: ${response.status} ${response.statusText}`);\n        }\n        \n        unitsData = await response.json();\n      } else {\n        unitsData = source;\n      }\n\n      if (!Array.isArray(unitsData)) {\n        throw new Error('Unit data must be an array');\n      }\n\n      this.units = unitsData.map(unitData => this.validateAndNormalizeUnit(unitData));\n      this.buildLookups();\n\n      console.log(`✅ Loaded ${this.units.length} units successfully`);\n      return this.units;\n    } catch (error) {\n      console.error('❌ Error loading units:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate and normalize unit data\n   */\n  private validateAndNormalizeUnit(unitData: any): Unit {\n    // Ensure all required fields exist with defaults\n    const unit: Unit = {\n      name: unitData.name || 'Unknown',\n      unit_types: Array.isArray(unitData.unit_types) ? unitData.unit_types : [],\n      cost_type: unitData.cost_type || 'Leadership',\n      health: Number(unitData.health) || 0,\n      strength: Number(unitData.strength) || 0,\n      leadership_cost: Number(unitData.leadership_cost) || 0,\n      dominance_cost: Number(unitData.dominance_cost) || 0,\n      authority_cost: Number(unitData.authority_cost) || 0,\n      food_consumption: Number(unitData.food_consumption) || 0,\n      carrying_capacity: Number(unitData.carrying_capacity) || 0,\n      revival_cost_gold: Number(unitData.revival_cost_gold) || 0,\n      revival_cost_silver: Number(unitData.revival_cost_silver) || 0,\n      source_file: unitData.source_file || '',\n      attack_modifiers: Array.isArray(unitData.attack_modifiers) ? unitData.attack_modifiers : undefined\n    };\n\n    // Validate cost type\n    if (!['Leadership', 'Dominance', 'Authority', 'Mercenary'].includes(unit.cost_type)) {\n      console.warn(`Invalid cost type for unit ${unit.name}: ${unit.cost_type}`);\n      unit.cost_type = 'Leadership'; // Default fallback\n    }\n\n    return unit;\n  }\n\n  /**\n   * Build lookup dictionaries for efficient access\n   */\n  private buildLookups(): void {\n    this.resetData();\n\n    this.unitsByName = new Map(this.units.map(unit => [unit.name, unit]));\n\n    // Categorize units by cost type\n    this.units.forEach(unit => {\n      if (UnitUtils.isMercenary(unit)) {\n        this.unitsByCostType.Mercenary.push(unit);\n      } else if (unit.cost_type in this.unitsByCostType) {\n        this.unitsByCostType[unit.cost_type as CostType].push(unit);\n      }\n    });\n\n    // Sort units within each cost type by strength\n    Object.keys(this.unitsByCostType).forEach(costType => {\n      this.unitsByCostType[costType as CostType].sort((a, b) => a.strength - b.strength);\n    });\n  }\n\n  /**\n   * Reset internal data structures\n   */\n  private resetData(): void {\n    this.unitsByName.clear();\n    this.unitsByCostType = {\n      Leadership: [],\n      Dominance: [],\n      Authority: [],\n      Mercenary: []\n    };\n  }\n\n  /**\n   * Get all loaded units\n   */\n  getAllUnits(): Unit[] {\n    return [...this.units];\n  }\n\n  /**\n   * Get a unit by its name\n   */\n  getUnitByName(name: string): Unit | undefined {\n    return this.unitsByName.get(name);\n  }\n\n  /**\n   * Get units by cost type\n   */\n  getUnitsByCostType(costType: CostType): Unit[] {\n    return [...this.unitsByCostType[costType]];\n  }\n\n  /**\n   * Get units that are available for army building\n   */\n  getAvailableUnits(availableUnitNames: string[]): Unit[] {\n    const availableUnits: Unit[] = [];\n    \n    for (const name of availableUnitNames) {\n      const unit = this.getUnitByName(name);\n      if (unit) {\n        availableUnits.push(unit);\n      } else {\n        console.warn(`Unit '${name}' not found in loaded data`);\n      }\n    }\n    \n    return availableUnits;\n  }\n\n  /**\n   * Filter units by various criteria\n   */\n  filterUnits(filter: UnitFilter): Unit[] {\n    let filtered = this.units;\n    \n    if (filter.costType) {\n      filtered = filtered.filter(u => u.cost_type === filter.costType);\n    }\n    \n    if (filter.unitTypes && filter.unitTypes.length > 0) {\n      filtered = filtered.filter(u => \n        filter.unitTypes!.some(type => u.unit_types.includes(type))\n      );\n    }\n    \n    if (filter.minStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength >= filter.minStrength!);\n    }\n    \n    if (filter.maxCost !== undefined) {\n      filtered = filtered.filter(u => UnitUtils.getPrimaryCost(u) <= filter.maxCost!);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * Search units by name (case-insensitive, partial match)\n   */\n  searchUnits(query: string): Unit[] {\n    if (!query.trim()) {\n      return this.getAllUnits();\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return this.units.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get units with enhanced calculated properties\n   */\n  getEnhancedUnits(): UnitWithCalculatedProps[] {\n    return this.units.map(unit => ({\n      ...unit,\n      get isMercenary(): boolean {\n        return UnitUtils.isMercenary(unit);\n      },\n      get primaryCost(): number {\n        return UnitUtils.getPrimaryCost(unit);\n      },\n      get strengthPerCost(): number {\n        return UnitUtils.getStrengthPerCost(unit);\n      },\n      get healthPerCost(): number {\n        return UnitUtils.getHealthPerCost(unit);\n      }\n    }));\n  }\n\n  /**\n   * Get a summary of loaded units\n   */\n  getUnitSummary(): UnitSummary {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        byCostType: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthRange: { min: 0, max: 0 },\n        healthRange: { min: 0, max: 0 }\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      byCostType: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthRange: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths)\n      },\n      healthRange: {\n        min: Math.min(...healths),\n        max: Math.max(...healths)\n      }\n    };\n  }\n\n  /**\n   * Get unique unit types from all loaded units\n   */\n  getUniqueUnitTypes(): string[] {\n    const types = new Set<string>();\n    this.units.forEach(unit => {\n      unit.unit_types.forEach(type => types.add(type));\n    });\n    return Array.from(types).sort();\n  }\n\n  /**\n   * Get statistics about the loaded units\n   */\n  getStatistics() {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        costTypeDistribution: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthStats: { min: 0, max: 0, avg: 0 },\n        healthStats: { min: 0, max: 0, avg: 0 },\n        topUnitsByStrength: [],\n        topUnitsByHealth: []\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      costTypeDistribution: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthStats: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        avg: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthStats: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        avg: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      },\n      topUnitsByStrength: [...this.units]\n        .sort((a, b) => b.strength - a.strength)\n        .slice(0, 10),\n      topUnitsByHealth: [...this.units]\n        .sort((a, b) => b.health - a.health)\n        .slice(0, 10)\n    };\n  }\n}\n","/**\n * Army Stacking Optimizer\n * Implements the reverse health stacking algorithm where stronger units\n * are protected by having weaker units with higher total health pools.\n */\n\nimport {\n  Unit,\n  ArmyComposition,\n  StackingGroup,\n  OptimizationConstraints,\n  OptimizationResult,\n  CostType,\n  UnitUtils\n} from '../types/units';\n\nexport class StackingOptimizer {\n  private availableUnits: Unit[];\n  private unitsByName: Map<string, Unit>;\n  private leadershipUnits: Unit[];\n  private dominanceUnits: Unit[];\n  private mercenaryUnits: Unit[];\n\n  constructor(availableUnits: Unit[]) {\n    this.availableUnits = [...availableUnits];\n    this.unitsByName = new Map(availableUnits.map(unit => [unit.name, unit]));\n    \n    // Separate units by cost type and sort by strength (ascending)\n    this.leadershipUnits = availableUnits\n      .filter(u => u.cost_type === 'Leadership')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.dominanceUnits = availableUnits\n      .filter(u => u.cost_type === 'Dominance')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.mercenaryUnits = availableUnits\n      .filter(u => UnitUtils.isMercenary(u))\n      .sort((a, b) => a.strength - b.strength);\n  }\n\n  /**\n   * Find optimal army compositions using guaranteed reverse health stacking\n   * Simple algorithm that always produces valid solutions\n   */\n  async optimizeArmy(\n    constraints: OptimizationConstraints\n  ): Promise<OptimizationResult> {\n    const startTime = performance.now();\n\n    console.log(`🔍 Optimizing army with L:${constraints.leadershipBudget} D:${constraints.dominanceBudget} M:${Object.keys(constraints.mercenaryLimits).length}`);\n    console.log(`📋 Selected units: ${constraints.availableUnits.join(', ')}`);\n\n    const validCompositions: ArmyComposition[] = [];\n\n    // Generate guaranteed valid compositions\n    const compositions = this.generateGuaranteedValidCompositions(constraints);\n\n    console.log(`Generated ${compositions.length} guaranteed valid army combinations`);\n\n    let totalCombinations = 0;\n\n    // Test all combinations (should all be valid by design)\n    for (const armyUnits of compositions) {\n      totalCombinations++;\n\n      const composition = this.evaluateComposition(armyUnits);\n      validCompositions.push(composition); // All should be valid\n    }\n\n    const endTime = performance.now();\n\n    console.log(`Evaluated ${totalCombinations} combinations, found ${validCompositions.length} valid stackings`);\n\n    // Filter to only show combined armies that use all unit types\n    const leadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const dominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const mercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    const combinedArmies = validCompositions.filter(comp => {\n      const hasLeadership = leadershipUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasDominance = dominanceUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasMercenary = mercenaryUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n\n      // Must have all selected unit types\n      const requiredTypes = [\n        leadershipUnits.length > 0 ? hasLeadership : true,\n        dominanceUnits.length > 0 ? hasDominance : true,\n        mercenaryUnits.length > 0 ? hasMercenary : true\n      ];\n\n      return requiredTypes.every(hasType => hasType);\n    });\n\n    // Sort by budget utilization (prefer armies that use more of the available budget)\n    combinedArmies.sort((a, b) => {\n      const aBudgetUsage = (a.totalLeadershipCost / constraints.leadershipBudget) + (a.totalDominanceCost / constraints.dominanceBudget);\n      const bBudgetUsage = (b.totalLeadershipCost / constraints.leadershipBudget) + (b.totalDominanceCost / constraints.dominanceBudget);\n      return bBudgetUsage - aBudgetUsage;\n    });\n\n    // Return only the best combined army (or all if no combined armies found)\n    const finalCompositions = combinedArmies.length > 0 ? [combinedArmies[0]] : validCompositions.slice(0, 1);\n\n    return {\n      compositions: finalCompositions,\n      totalCombinationsEvaluated: totalCombinations,\n      validStackingsFound: validCompositions.length,\n      executionTimeMs: endTime - startTime\n    };\n  }\n\n  /**\n   * Generate guaranteed valid army compositions using simple stacking logic\n   */\n  private generateGuaranteedValidCompositions(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    console.log(`Selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Leadership units:`, selectedLeadershipUnits.map(u => u.name));\n    console.log(`Dominance units:`, selectedDominanceUnits.map(u => u.name));\n    console.log(`Mercenary units:`, selectedMercenaryUnits.map(u => u.name));\n\n    // ONLY generate compositions that use ALL selected unit types\n    console.log(`🎯 MUST use ALL selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Budgets: Leadership:${constraints.leadershipBudget} Dominance:${constraints.dominanceBudget}`);\n\n    // Case 1: Leadership + Mercenary + Dominance (all three types)\n    if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n        constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🔗 Generating ALL THREE types compositions`);\n      const leadershipMercenaryUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      compositions.push(...this.generateCombinedStackedCompositions(\n        leadershipMercenaryUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits\n      ));\n    }\n    // Case 2: Leadership + Mercenary (no Dominance selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedDominanceUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`🤝 Generating Leadership + Mercenary compositions (PROPER STACKING)`);\n      const allUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      const properComposition = this.calculateProperStackingQuantities(\n        allUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits\n      );\n      compositions.push(properComposition);\n    }\n    // Case 3: Dominance + Mercenary (no Leadership selected)\n    else if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedLeadershipUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Dominance + Mercenary compositions (NEW SIMPLE STACKING)`);\n\n      // Generate separate stacks for Dominance and Mercenary\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n\n      // Add mercenaries at their limits\n      const mercenaryComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        mercenaryComposition[unit.name] = constraints.mercenaryLimits[unit.name] || 1;\n      }\n\n      // Combine both stacks\n      const combinedComposition = { ...dominanceComposition, ...mercenaryComposition };\n      compositions.push(combinedComposition);\n    }\n    // Case 4: Leadership + Dominance (no Mercenary selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 &&\n             selectedMercenaryUnits.length === 0 &&\n             constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Leadership + Dominance compositions`);\n      compositions.push(...this.generateCombinedStackedCompositions(\n        selectedLeadershipUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        {}\n      ));\n    }\n    // Case 5: Leadership only\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`👑 Generating Leadership-only compositions (NEW PROPER STACKING)`);\n      const properComposition = this.calculateProperStackingQuantities(\n        selectedLeadershipUnits,\n        constraints.leadershipBudget,\n        {} // No mercenary limits for leadership-only\n      );\n      compositions.push(properComposition);\n    }\n    // Case 6: Dominance only\n    else if (selectedDominanceUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`⚡ Generating Dominance-only compositions (NEW SIMPLE STACKING)`);\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n      compositions.push(dominanceComposition);\n    }\n    // Case 7: Mercenary only\n    else if (selectedMercenaryUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedDominanceUnits.length === 0) {\n      console.log(`🗡️ Generating Mercenary-only compositions`);\n      const mercComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        mercComposition[unit.name] = limit;\n      }\n      if (Object.keys(mercComposition).length > 0) {\n        compositions.push(mercComposition);\n      }\n    }\n    else {\n      console.log(`❌ No valid combination of selected units and budgets`);\n    }\n\n    // Generate mixed compositions (Leadership + Mercenaries)\n    if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.leadershipBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedLeadershipUnits,\n        selectedMercenaryUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits,\n        'leadership_cost'\n      ));\n    }\n\n    // Generate mixed compositions (Dominance + Mercenaries)\n    if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.dominanceBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedDominanceUnits,\n        selectedMercenaryUnits,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits,\n        'dominance_cost'\n      ));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate stacked compositions with your cleaner approach\n   */\n  // @ts-ignore - unused method\n  private generateStackedCompositionsWithMercenaries(\n    leadershipUnits: Unit[],\n    mercenaryUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    console.log(`�🚨🚨 NEW METHOD CALLED! 🚨🚨🚨`);\n    console.log(`�🗡️ Generating Leadership + Mercenary stacks (NEW PROPER STACKING)`);\n\n    // Use the new proper stacking method\n    const allUnits = [...leadershipUnits, ...mercenaryUnits];\n    console.log(`🚨 About to call calculateProperStackingQuantities with ${allUnits.length} units`);\n\n    const properComposition = this.calculateProperStackingQuantities(\n      allUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    console.log(`🚨 Got composition back:`, properComposition);\n    return [properComposition];\n  }\n\n\n\n\n\n  /**\n   * Calculate clean stacking pattern with 1 of strongest unit\n   */\n  // @ts-ignore - unused method\n  private calculateCleanStackingPattern(\n    allUnits: Unit[],\n    // @ts-ignore - unused parameter\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (allUnits.length === 0) {\n      return pattern;\n    }\n\n    // Step 2: Start with 1 of the strongest unit (including mercenaries)\n    const strongestUnit = allUnits[0];\n    pattern[strongestUnit.name] = 1;\n\n    console.log(`🎯 Starting with 1x ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate required quantities for proper stacking\n    for (let i = 1; i < allUnits.length; i++) {\n      const currentUnit = allUnits[i];\n      const strongerUnit = allUnits[i - 1];\n\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Calculate proper stacking quantities using simple base pattern approach\n   */\n  private calculateProperStackingQuantities(\n    allUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    console.log(`🔧 SIMPLE STACKING: Starting with budget ${leadershipBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort ALL units by strength (strongest first) - including mercenaries\n    const sortedUnits = [...allUnits].sort((a, b) => b.strength - a.strength);\n\n    // Separate leadership and mercenary units for cost calculation\n    const leadershipUnits = sortedUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = sortedUnits.filter(u => UnitUtils.isMercenary(u));\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 SIMPLE STACKING: No units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Creating base pattern with ${sortedUnits.length} units (${leadershipUnits.length} leadership + ${mercenaryUnits.length} mercenary)`);\n\n    // Step 2a: Find strongest unit (could be mercenary or leadership) and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n\n    // Always start with 1 unit, regardless of type\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2b: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n\n      // For ALL units (mercenary or leadership), calculate quantity to beat strongest\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      const unitType = UnitUtils.isMercenary(currentUnit) ? 'mercenary' : 'leadership';\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth}) [${unitType}]`);\n    }\n\n    // Step 2c: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        if (UnitUtils.isMercenary(nextUnit)) {\n          // Can't increase mercenary beyond limit, so this is a constraint violation\n          console.log(`🔧 WARNING: ${nextUnit.name} mercenary limit (${basePattern[nextUnit.name]}) gives ${nextTotalHealth} HP, can't beat ${currentTotalHealth} HP`);\n        } else {\n          const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n          basePattern[nextUnit.name] = requiredQuantity;\n          nextTotalHealth = nextUnit.health * requiredQuantity;\n          console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n        }\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 3: Calculate base cost (only leadership units cost leadership budget)\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        baseCost += quantity * (unit.leadership_cost ?? 0);\n      }\n    }\n\n    console.log(`🔧 Base pattern leadership cost: ${baseCost}`);\n\n    // Step 4: Calculate how many base stacks we can afford\n    if (baseCost === 0) {\n      console.log(`🔧 No leadership costs, using mercenaries only`);\n      // Just use mercenaries at their limits\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        composition[unitName] = baseQuantity;\n      }\n    } else {\n      const maxStacks = Math.floor(leadershipBudget / baseCost);\n      console.log(`🔧 Can afford ${maxStacks} base stacks (${leadershipBudget} / ${baseCost})`);\n\n      // Step 5: Scale up the base pattern with mercenary limit constraints\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          // Mercenaries scale with leadership units but are capped at their limit\n          const scaledQuantity = baseQuantity * maxStacks;\n          const mercenaryLimit = mercenaryLimits[unitName] || 1;\n          composition[unitName] = Math.min(scaledQuantity, mercenaryLimit);\n\n          if (scaledQuantity > mercenaryLimit) {\n            console.log(`🔧 Mercenary ${unitName}: wanted ${scaledQuantity}, capped at limit ${mercenaryLimit}`);\n          } else {\n            console.log(`🔧 Mercenary ${unitName}: scaled to ${scaledQuantity} (under limit ${mercenaryLimit})`);\n          }\n        } else {\n          // Leadership units scale with budget\n          composition[unitName] = baseQuantity * maxStacks;\n        }\n      }\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate proper stacking quantities for dominance units using simple base pattern approach\n   */\n  private calculateProperStackingQuantitiesForDominance(\n    dominanceUnits: Unit[],\n    dominanceBudget: number\n  ): Record<string, number> {\n    console.log(`🔧 DOMINANCE STACKING: Starting with budget ${dominanceBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort units by strength (strongest first)\n    const sortedUnits = [...dominanceUnits].sort((a, b) => b.strength - a.strength);\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 DOMINANCE STACKING: No dominance units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Creating base pattern with ${sortedUnits.length} dominance units`);\n\n    // Step 1: Find strongest unit and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth})`);\n    }\n\n    // Step 3: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating dominance base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n        basePattern[nextUnit.name] = requiredQuantity;\n        nextTotalHealth = nextUnit.health * requiredQuantity;\n\n        console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 4: Calculate base cost\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        baseCost += quantity * unit.dominance_cost;\n      }\n    }\n\n    console.log(`🔧 Base pattern dominance cost: ${baseCost}`);\n\n    // Step 5: Calculate how many base stacks we can afford and scale up\n    if (baseCost === 0) {\n      console.log(`🔧 No dominance costs found`);\n      return composition;\n    }\n\n    const maxStacks = Math.floor(dominanceBudget / baseCost);\n    console.log(`🔧 Can afford ${maxStacks} base stacks (${dominanceBudget} / ${baseCost})`);\n\n    // Scale up the base pattern\n    for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n      composition[unitName] = baseQuantity * maxStacks;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate leadership cost for a pattern\n   */\n  // @ts-ignore - unused method\n  private calculateLeadershipCost(pattern: Record<string, number>): number {\n    return Object.entries(pattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        return total + (quantity * unit.leadership_cost);\n      }\n      return total;\n    }, 0);\n  }\n\n  /**\n   * Calculate max stacks limited by mercenary availability\n   */\n  private calculateMaxStacksByMercenaries(\n    pattern: Record<string, number>,\n    mercenaryLimits: Record<string, number>\n  ): number {\n    let maxStacks = Infinity;\n\n    for (const [unitName, baseQuantity] of Object.entries(pattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && UnitUtils.isMercenary(unit)) {\n        const limit = mercenaryLimits[unitName] || 1;\n        const stacksFromThisMerc = Math.floor(limit / baseQuantity);\n        maxStacks = Math.min(maxStacks, stacksFromThisMerc);\n\n        console.log(`🗡️ ${unitName}: limit ${limit}, base need ${baseQuantity}, allows ${stacksFromThisMerc} stacks`);\n      }\n    }\n\n    return maxStacks === Infinity ? 100 : maxStacks; // 100 as practical max if no mercenaries\n  }\n\n  /**\n   * Generate Dominance + Mercenary compositions\n   */\n  // @ts-ignore - unused method\n  private generateDominanceMercenaryCompositions(\n    dominanceUnits: Unit[],\n    mercenaryUnits: Unit[],\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`⚡🗡️ Generating Dominance + Mercenary stacks`);\n\n    // Combine and sort by strength\n    const allUnits = [...dominanceUnits, ...mercenaryUnits].sort((a, b) => b.strength - a.strength);\n\n    if (allUnits.length === 0) {\n      return compositions;\n    }\n\n    // Calculate base pattern\n    const basePattern = this.calculateCleanStackingPattern(allUnits, mercenaryLimits);\n    console.log(`📊 Dominance + Mercenary base pattern:`, basePattern);\n\n    // Calculate dominance cost\n    const dominanceCostPerStack = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        return total + (quantity * unit.dominance_cost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Dominance cost per stack: ${dominanceCostPerStack}`);\n\n    if (dominanceCostPerStack > dominanceBudget) {\n      console.log(`❌ Can't afford mercenary stack, falling back to pure strategies`);\n\n      // Fallback to pure strategies\n      const pureMercComp: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        pureMercComp[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n      compositions.push(pureMercComp);\n\n      if (dominanceUnits.length > 0) {\n        compositions.push(...this.generateStackedCompositions(dominanceUnits, dominanceBudget, 'dominance_cost'));\n      }\n\n      return compositions;\n    }\n\n    // Scale up\n    const maxStacksByBudget = Math.floor(dominanceBudget / dominanceCostPerStack);\n    const maxStacksByMercenaries = this.calculateMaxStacksByMercenaries(basePattern, mercenaryLimits);\n    const maxCombinedStacks = Math.min(maxStacksByBudget, maxStacksByMercenaries);\n\n    console.log(`🔢 Max Dominance+Mercenary stacks: ${maxCombinedStacks}`);\n\n    // Generate combined stacks\n    for (let stacks = 1; stacks <= Math.min(maxCombinedStacks, 5); stacks++) {\n      const composition: Record<string, number> = {};\n\n      for (const [unitName, baseQty] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          composition[unitName] = Math.min(baseQty * stacks, mercenaryLimits[unitName] || 1);\n        } else {\n          composition[unitName] = baseQty * stacks;\n        }\n      }\n\n      compositions.push(composition);\n    }\n\n    // Continue with dominance-only if mercenaries exhausted first\n    if (maxStacksByMercenaries < maxStacksByBudget && dominanceUnits.length > 0) {\n      const remainingBudget = dominanceBudget - (maxCombinedStacks * dominanceCostPerStack);\n      const dominanceOnlyComps = this.generateStackedCompositions(dominanceUnits, remainingBudget, 'dominance_cost');\n\n      const finalMercenaryState: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        finalMercenaryState[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n\n      for (const dominanceComp of dominanceOnlyComps.slice(0, 3)) {\n        const combinedComp = { ...finalMercenaryState, ...dominanceComp };\n        compositions.push(combinedComp);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate properly stacked compositions using your algorithm\n   * 1. Find strongest unit (highest strength)\n   * 2. Calculate required quantities of weaker units for proper stacking\n   * 3. Scale up until budget is exhausted\n   */\n  private generateStackedCompositions(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    if (units.length === 0 || budget <= 0) {\n      return compositions;\n    }\n\n    // Units are already sorted by strength (strongest first)\n    const strongestUnit = units[0];\n    console.log(`🎯 Strongest unit: ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate base stacking pattern\n    const basePattern = this.calculateStackingPattern(units);\n    console.log(`📊 Base stacking pattern:`, basePattern);\n\n    // Calculate cost of one base pattern\n    const baseCost = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit) {\n        const unitCost = unit[costProperty] as number;\n        return total + (quantity * unitCost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Base pattern cost: ${baseCost}`);\n\n    if (baseCost <= 0) {\n      return compositions;\n    }\n\n    // Generate multiple scaled versions\n    const maxMultiplier = Math.floor(budget / baseCost);\n    console.log(`🔢 Max multiplier: ${maxMultiplier}`);\n\n    for (let multiplier = 1; multiplier <= Math.min(maxMultiplier, 10); multiplier++) {\n      const scaledComposition: Record<string, number> = {};\n\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        scaledComposition[unitName] = baseQuantity * multiplier;\n      }\n\n      compositions.push(scaledComposition);\n    }\n\n    // Also generate some variations with different ratios\n    if (units.length > 1) {\n      compositions.push(...this.generateStackingVariations(units, budget, costProperty));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Calculate the base stacking pattern for proper reverse health stacking\n   */\n  private calculateStackingPattern(units: Unit[]): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (units.length === 0) {\n      return pattern;\n    }\n\n    // Start with 1 of the strongest unit\n    const strongestUnit = units[0];\n    pattern[strongestUnit.name] = 1;\n\n    // For each weaker unit, calculate how many we need to have higher total health\n    for (let i = 1; i < units.length; i++) {\n      const currentUnit = units[i];\n      const strongerUnit = units[i - 1];\n\n      // Calculate how many of current unit needed to exceed stronger unit's total health\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Generate combined Leadership + Dominance stacked compositions\n   * Your brilliant idea: Leadership stack first, then Dominance stack that fits within it\n   */\n  private generateCombinedStackedCompositions(\n    leadershipMercenaryUnits: Unit[],\n    dominanceUnits: Unit[],\n    leadershipBudget: number,\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number> = {}\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🔗 Generating combined Leadership + Mercenary + Dominance stacks`);\n\n    // Separate Leadership and Mercenary units\n    const leadershipUnits = leadershipMercenaryUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = leadershipMercenaryUnits.filter(u => UnitUtils.isMercenary(u));\n\n    // Step 1: Calculate Leadership + Mercenary stack with proper stacking\n    console.log(`🗡️ Generating Leadership + Mercenary stacks (proper stacking approach)`);\n\n    const allLeadershipMercenaryUnits = [...leadershipUnits, ...mercenaryUnits];\n    const properComposition = this.calculateProperStackingQuantities(\n      allLeadershipMercenaryUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    const leadershipCompositions = [properComposition];\n\n    if (leadershipCompositions.length === 0) {\n      return compositions;\n    }\n\n    // Step 2: Use only the maximum Leadership composition\n    const maxLeadershipComp = leadershipCompositions[leadershipCompositions.length - 1]; // Take the largest one\n    if (!maxLeadershipComp) {\n      return compositions;\n    }\n\n    console.log(`🎯 Using maximum Leadership composition for combination`);\n    const leadershipComp = maxLeadershipComp;\n\n      // Find the strongest Dominance unit\n      const strongestDominanceUnit = dominanceUnits[0]; // Already sorted by strength\n      console.log(`🎯 Strongest Dominance unit: ${strongestDominanceUnit.name} (STR: ${strongestDominanceUnit.strength})`);\n\n      // Find the Leadership/Mercenary unit with closest strength for comparison\n      const comparisonLeadershipUnit = this.findClosestStrengthUnit(strongestDominanceUnit, leadershipMercenaryUnits);\n\n      if (!comparisonLeadershipUnit) {\n        console.log(`❌ No suitable Leadership unit found for comparison`);\n        return compositions;\n      }\n\n      console.log(`🔍 Comparing to Leadership unit: ${comparisonLeadershipUnit.name} (STR: ${comparisonLeadershipUnit.strength})`);\n\n      // Calculate the total health of the comparison Leadership unit in this composition\n      const comparisonUnitQuantity = leadershipComp[comparisonLeadershipUnit.name] || 0;\n      const comparisonTotalHealth = comparisonLeadershipUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison unit total health: ${comparisonTotalHealth} (${comparisonUnitQuantity}x ${comparisonLeadershipUnit.health})`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in Leadership composition`);\n        return compositions;\n      }\n\n      // Check if strongest Dominance unit would break stacking order\n      const strongestDominanceHealth = strongestDominanceUnit.health;\n      if (strongestDominanceHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Single Dominance unit too strong: ${strongestDominanceHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Trying constrained Dominance stack anyway (may use weaker Dominance units)`);\n\n        // Still try constrained approach - it might work with weaker dominance units\n        // Don't fall back immediately\n      }\n\n      // Step 3: Calculate independent Dominance stack (maximize budget usage)\n      console.log(`🔄 Creating independent Dominance stack to maximize budget usage (NEW SIMPLE STACKING)`);\n      const independentDominanceComp = this.calculateProperStackingQuantitiesForDominance(dominanceUnits, dominanceBudget);\n      const independentDominanceComps = [independentDominanceComp];\n\n      if (independentDominanceComps.length > 0) {\n        // Use the largest Dominance composition (maximum budget usage)\n        const maxDominanceComp = independentDominanceComps[independentDominanceComps.length - 1];\n\n        // Combine Leadership+Mercenary with independent Dominance\n        const combinedComp = { ...leadershipComp, ...maxDominanceComp };\n        compositions.push(combinedComp);\n\n        console.log(`✅ Created independent L+M + D composition maximizing both budgets`);\n      } else {\n        // Fallback: Just use the Leadership composition\n        console.log(`⚠️ Using Leadership+Mercenary composition only`);\n        compositions.push(leadershipComp);\n      }\n\n    return compositions;\n  }\n\n  /**\n   * Find the Leadership unit with strength closest to the target Dominance unit\n   */\n  private findClosestStrengthUnit(targetUnit: Unit, leadershipUnits: Unit[]): Unit | null {\n    if (leadershipUnits.length === 0) {\n      return null;\n    }\n\n    let closestUnit = leadershipUnits[0];\n    let smallestDifference = Math.abs(targetUnit.strength - closestUnit.strength);\n\n    for (const unit of leadershipUnits) {\n      const difference = Math.abs(targetUnit.strength - unit.strength);\n      if (difference < smallestDifference) {\n        smallestDifference = difference;\n        closestUnit = unit;\n      }\n    }\n\n    console.log(`🎯 Closest match: ${closestUnit.name} (STR: ${closestUnit.strength}) vs ${targetUnit.name} (STR: ${targetUnit.strength}), diff: ${smallestDifference}`);\n    return closestUnit;\n  }\n\n  /**\n   * Calculate Dominance stack constrained by maximum total health\n   */\n  private calculateConstrainedDominanceStack(\n    dominanceUnits: Unit[],\n    budget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔒 Calculating Dominance stack with max health constraint: ${maxTotalHealth}`);\n\n    if (dominanceUnits.length === 0 || budget <= 0 || maxTotalHealth <= 0) {\n      return composition;\n    }\n\n    // Start with the strongest Dominance unit\n    const strongestUnit = dominanceUnits[0];\n\n    // Calculate maximum quantity of strongest unit that stays under health limit\n    const maxQuantityByHealth = Math.floor((maxTotalHealth - 1) / strongestUnit.health);\n    const maxQuantityByBudget = Math.floor(budget / strongestUnit.dominance_cost);\n    const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n    if (maxQuantity <= 0) {\n      console.log(`❌ Cannot fit any ${strongestUnit.name} within constraints`);\n      return composition;\n    }\n\n    // Try different quantities of the strongest unit\n    for (let strongestQty = Math.min(maxQuantity, 3); strongestQty >= 1; strongestQty--) {\n      const testComposition: Record<string, number> = {};\n      testComposition[strongestUnit.name] = strongestQty;\n\n      let usedBudget = strongestQty * strongestUnit.dominance_cost;\n      let strongestTotalHealth = strongestQty * strongestUnit.health;\n\n      console.log(`🧪 Testing ${strongestQty}x ${strongestUnit.name} (${strongestTotalHealth} HP, ${usedBudget} cost)`);\n\n      // Add weaker Dominance units following stacking rules\n      for (let i = 1; i < dominanceUnits.length && usedBudget < budget; i++) {\n        const weakerUnit = dominanceUnits[i];\n        const remainingBudget = budget - usedBudget;\n\n        // Calculate how many we need to exceed stronger unit's health\n        const requiredForStacking = Math.ceil((strongestTotalHealth + 1) / weakerUnit.health);\n        const maxByBudget = Math.floor(remainingBudget / weakerUnit.dominance_cost);\n        const quantity = Math.min(requiredForStacking, maxByBudget);\n\n        if (quantity > 0) {\n          testComposition[weakerUnit.name] = quantity;\n          usedBudget += quantity * weakerUnit.dominance_cost;\n\n          console.log(`  ➕ Added ${quantity}x ${weakerUnit.name} (${quantity * weakerUnit.health} HP)`);\n        }\n      }\n\n      // Check if this composition stays under the health limit\n      const totalDominanceHealth = Object.entries(testComposition).reduce((total, [unitName, qty]) => {\n        const unit = this.unitsByName.get(unitName);\n        return unit ? total + (qty * unit.health) : total;\n      }, 0);\n\n      if (totalDominanceHealth < maxTotalHealth) {\n        console.log(`✅ Valid Dominance stack: ${totalDominanceHealth} HP < ${maxTotalHealth} HP limit`);\n        return testComposition;\n      } else {\n        console.log(`❌ Dominance stack too strong: ${totalDominanceHealth} HP >= ${maxTotalHealth} HP limit`);\n      }\n    }\n\n    console.log(`❌ Could not create valid constrained Dominance stack`);\n    return composition;\n  }\n\n  /**\n   * Generate mixed compositions with mercenaries, with fallback logic\n   */\n  private generateMercenaryMixedCompositions(\n    baseUnits: Unit[],\n    mercenaryUnits: Unit[],\n    baseBudget: number,\n    mercenaryLimits: Record<string, number>,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🗡️ Generating mixed compositions with mercenaries`);\n\n    // Get base compositions first\n    const baseCompositions = this.generateStackedCompositions(baseUnits, baseBudget, costProperty);\n\n    if (baseCompositions.length === 0) {\n      return compositions;\n    }\n\n    // For each base composition, try to add mercenaries\n    for (const baseComp of baseCompositions.slice(0, 3)) { // Take top 3\n\n      // Find the strongest mercenary\n      const strongestMercenary = mercenaryUnits.sort((a, b) => b.strength - a.strength)[0];\n\n      if (!strongestMercenary) {\n        continue;\n      }\n\n      console.log(`🎯 Strongest Mercenary: ${strongestMercenary.name} (STR: ${strongestMercenary.strength})`);\n\n      // Find the base unit with closest strength for comparison\n      const comparisonBaseUnit = this.findClosestStrengthUnit(strongestMercenary, baseUnits);\n\n      if (!comparisonBaseUnit) {\n        console.log(`❌ No suitable base unit found for comparison`);\n        continue;\n      }\n\n      // Calculate the total health of the comparison base unit\n      const comparisonUnitQuantity = baseComp[comparisonBaseUnit.name] || 0;\n      const comparisonTotalHealth = comparisonBaseUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison base unit total health: ${comparisonTotalHealth}`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in base composition`);\n        continue;\n      }\n\n      // Check if strongest mercenary would break stacking order\n      const strongestMercenaryHealth = strongestMercenary.health;\n      const mercenaryLimit = mercenaryLimits[strongestMercenary.name] || 1;\n      const mercenaryTotalHealth = strongestMercenaryHealth * mercenaryLimit;\n\n      if (mercenaryTotalHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Mercenary too strong: ${mercenaryTotalHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Reducing mercenary quantity to fit stacking order`);\n\n        // Calculate maximum mercenary quantity that fits\n        const maxMercenaryQuantity = Math.floor((comparisonTotalHealth - 1) / strongestMercenaryHealth);\n\n        if (maxMercenaryQuantity > 0) {\n          console.log(`✅ Using ${maxMercenaryQuantity}x ${strongestMercenary.name} instead of ${mercenaryLimit}`);\n\n          // Create mixed composition with reduced mercenary quantity\n          const mixedComp = { ...baseComp };\n          mixedComp[strongestMercenary.name] = maxMercenaryQuantity;\n\n          // Add other mercenaries at their limits (if they fit)\n          for (const unit of mercenaryUnits) {\n            if (unit.name !== strongestMercenary.name) {\n              const limit = mercenaryLimits[unit.name] || 1;\n              mixedComp[unit.name] = limit;\n            }\n          }\n\n          compositions.push(mixedComp);\n          console.log(`✅ Created mixed composition with reduced mercenaries`);\n        } else {\n          console.log(`❌ Even 1 mercenary too strong, skipping mercenary integration`);\n          // Just use the base composition without mercenaries\n          compositions.push(baseComp);\n        }\n        continue;\n      }\n\n      // Mercenaries fit within stacking order, add them\n      const mixedComp = { ...baseComp };\n      for (const unit of mercenaryUnits) {\n        const limit = mercenaryLimits[unit.name] || 1;\n        mixedComp[unit.name] = limit;\n      }\n\n      compositions.push(mixedComp);\n      console.log(`✅ Created mixed composition with mercenaries`);\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Create alternative dominance stack using weaker units that can fit\n   */\n  private createAlternativeDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔄 Creating alternative Dominance stack with max health: ${maxTotalHealth}`);\n\n    // Try using only the weaker dominance units that can fit\n    const sortedByHealth = [...dominanceUnits].sort((a, b) => a.health - b.health); // Weakest first\n\n    let usedBudget = 0;\n    let totalHealth = 0;\n\n    for (const unit of sortedByHealth) {\n      const maxQuantityByHealth = Math.floor((maxTotalHealth - totalHealth - 1) / unit.health);\n      const maxQuantityByBudget = Math.floor((dominanceBudget - usedBudget) / unit.dominance_cost);\n      const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n      if (maxQuantity > 0) {\n        composition[unit.name] = maxQuantity;\n        usedBudget += maxQuantity * unit.dominance_cost;\n        totalHealth += maxQuantity * unit.health;\n\n        console.log(`➕ Added ${maxQuantity}x ${unit.name} (${maxQuantity * unit.health} HP, ${maxQuantity * unit.dominance_cost} cost)`);\n      }\n    }\n\n    console.log(`📊 Alternative Dominance stack: ${totalHealth} HP total, ${usedBudget} cost`);\n    return composition;\n  }\n\n  /**\n   * Calculate maximized dominance stack that uses as much budget as possible\n   */\n  // @ts-ignore - unused method\n  private calculateMaximizedDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    console.log(`💰 Maximizing Dominance budget: ${dominanceBudget} with health limit: ${maxTotalHealth}`);\n\n    // Try the alternative approach first (weaker units)\n    const alternativeComp = this.createAlternativeDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n\n    if (Object.keys(alternativeComp).length > 0) {\n      return alternativeComp;\n    }\n\n    // If that fails, try the constrained approach\n    return this.calculateConstrainedDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n  }\n\n  /**\n   * Generate variations of the stacking pattern\n   */\n  private generateStackingVariations(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const variations: Record<string, number>[] = [];\n\n    // Variation 1: More of the strongest unit\n    const strongestFocus: Record<string, number> = {};\n    const strongestUnit = units[0];\n    const strongestCost = strongestUnit[costProperty] as number;\n\n    if (strongestCost > 0) {\n      const maxStrongest = Math.floor(budget / strongestCost);\n      strongestFocus[strongestUnit.name] = Math.min(maxStrongest, 5);\n\n      // Add minimal amounts of other units for stacking\n      let remainingBudget = budget - (strongestFocus[strongestUnit.name] * strongestCost);\n\n      for (let i = 1; i < units.length && remainingBudget > 0; i++) {\n        const unit = units[i];\n        const unitCost = unit[costProperty] as number;\n\n        if (unitCost > 0 && unitCost <= remainingBudget) {\n          const quantity = Math.floor(remainingBudget / unitCost / (units.length - i));\n          if (quantity > 0) {\n            strongestFocus[unit.name] = quantity;\n            remainingBudget -= quantity * unitCost;\n          }\n        }\n      }\n\n      variations.push(strongestFocus);\n    }\n\n    return variations;\n  }\n\n  /**\n   * Generate guaranteed diverse compositions that try to use all unit types\n   */\n  // @ts-ignore - unused method\n  private generateGuaranteedDiverseCompositions_OLD(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    // Strategy 1: Minimal composition (1 of each affordable unit)\n    const minimalComposition: Record<string, number> = {};\n    let leadershipUsed = 0;\n    let dominanceUsed = 0;\n\n    // Add 1 of each Leadership unit if affordable\n    for (const unit of selectedLeadershipUnits) {\n      if (leadershipUsed + unit.leadership_cost <= constraints.leadershipBudget) {\n        minimalComposition[unit.name] = 1;\n        leadershipUsed += unit.leadership_cost;\n      }\n    }\n\n    // Add 1 of each Dominance unit if affordable\n    for (const unit of selectedDominanceUnits) {\n      if (dominanceUsed + unit.dominance_cost <= constraints.dominanceBudget) {\n        minimalComposition[unit.name] = 1;\n        dominanceUsed += unit.dominance_cost;\n      }\n    }\n\n    // Add mercenaries within limits\n    for (const unit of selectedMercenaryUnits) {\n      const limit = constraints.mercenaryLimits[unit.name] || 1;\n      minimalComposition[unit.name] = Math.min(1, limit);\n    }\n\n    if (Object.keys(minimalComposition).length > 0) {\n      compositions.push(minimalComposition);\n    }\n\n    // Strategy 2: Focus on cheapest units with higher quantities\n    if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n      const cheapestLeadership = selectedLeadershipUnits.sort((a, b) => a.leadership_cost - b.leadership_cost)[0];\n      const maxQuantity = Math.floor(constraints.leadershipBudget / cheapestLeadership.leadership_cost);\n\n      if (maxQuantity > 0) {\n        const focusedComposition: Record<string, number> = {};\n        focusedComposition[cheapestLeadership.name] = Math.min(maxQuantity, 20);\n\n        // Add a few other units if budget allows\n        const remaining = constraints.leadershipBudget - (focusedComposition[cheapestLeadership.name] * cheapestLeadership.leadership_cost);\n        for (const unit of selectedLeadershipUnits.slice(1, 3)) {\n          const quantity = Math.floor(remaining / unit.leadership_cost / 2);\n          if (quantity > 0) {\n            focusedComposition[unit.name] = quantity;\n          }\n        }\n\n        compositions.push(focusedComposition);\n      }\n    }\n\n    // Strategy 3: Balanced approach\n    if (selectedLeadershipUnits.length > 0 || selectedDominanceUnits.length > 0) {\n      const balancedComposition: Record<string, number> = {};\n\n      // Distribute Leadership budget evenly\n      if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.leadershipBudget / selectedLeadershipUnits.length);\n        for (const unit of selectedLeadershipUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.leadership_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Distribute Dominance budget evenly\n      if (selectedDominanceUnits.length > 0 && constraints.dominanceBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.dominanceBudget / selectedDominanceUnits.length);\n        for (const unit of selectedDominanceUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.dominance_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Add some mercenaries\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        balancedComposition[unit.name] = Math.max(1, Math.floor(limit / 2));\n      }\n\n      if (Object.keys(balancedComposition).length > 0) {\n        compositions.push(balancedComposition);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate all valid mercenary combinations\n   */\n  // @ts-ignore - unused method\n  private generateMercenaryCombinations(mercenaryLimits: Record<string, number>): Record<string, number>[] {\n    if (Object.keys(mercenaryLimits).length === 0) {\n      return [{}];\n    }\n\n    let combinations: Record<string, number>[] = [{}];\n\n    for (const [mercName, maxCount] of Object.entries(mercenaryLimits)) {\n      if (!this.unitsByName.has(mercName)) {\n        continue;\n      }\n\n      const newCombinations: Record<string, number>[] = [];\n      for (const combo of combinations) {\n        for (let count = 0; count <= maxCount; count++) {\n          const newCombo = { ...combo };\n          if (count > 0) {\n            newCombo[mercName] = count;\n          }\n          newCombinations.push(newCombo);\n        }\n      }\n      combinations = newCombinations;\n    }\n\n    return combinations;\n  }\n\n  /**\n   * Evaluate an army composition for stacking validity and efficiency\n   */\n  private evaluateComposition(armyUnits: Record<string, number>): ArmyComposition {\n    // Calculate totals\n    let totalStrength = 0;\n    let totalHealth = 0;\n    let totalLeadershipCost = 0;\n    let totalDominanceCost = 0;\n    let totalMercenaryCount = 0;\n\n    const unitGroups: Array<{\n      unit: Unit;\n      count: number;\n      totalHealth: number;\n      unitStrength: number;\n    }> = [];\n\n    for (const [unitName, count] of Object.entries(armyUnits)) {\n      const unit = this.unitsByName.get(unitName);\n      if (!unit) continue;\n\n      const groupHealth = unit.health * count;\n      const groupStrength = unit.strength * count;\n\n      totalStrength += groupStrength;\n      totalHealth += groupHealth;\n      totalLeadershipCost += unit.leadership_cost * count;\n      totalDominanceCost += unit.dominance_cost * count;\n\n      if (UnitUtils.isMercenary(unit)) {\n        totalMercenaryCount += count;\n      }\n\n      unitGroups.push({\n        unit,\n        count,\n        totalHealth: groupHealth,\n        unitStrength: unit.strength\n      });\n    }\n\n    // Sort by unit strength (ascending) for stacking evaluation\n    unitGroups.sort((a, b) => a.unitStrength - b.unitStrength);\n\n    // Check stacking validity: each group should have higher total health than stronger groups\n    let isValidStacking = true;\n    const stackingOrder: StackingGroup[] = [];\n\n    for (let i = 0; i < unitGroups.length; i++) {\n      const { unit, count, totalHealth: groupHealth } = unitGroups[i];\n      \n      stackingOrder.push({\n        unitName: unit.name,\n        count,\n        totalHealth: groupHealth,\n        unitStrength: unit.strength\n      });\n\n      // Check if this group has higher health than all stronger groups\n      // In reverse health stacking: weaker units (lower strength) should have MORE total health\n      // Exception: units with same strength can have similar health totals\n      for (let j = i + 1; j < unitGroups.length; j++) {\n        const strongerUnit = unitGroups[j].unit;\n        const strongerGroupHealth = unitGroups[j].totalHealth;\n\n        // Allow units with same strength to have similar health (within 10% tolerance)\n        if (unit.strength === strongerUnit.strength) {\n          const tolerance = Math.max(groupHealth, strongerGroupHealth) * 0.1;\n          if (Math.abs(groupHealth - strongerGroupHealth) <= tolerance) {\n            continue; // Same strength units can have similar health\n          }\n        }\n\n        if (groupHealth <= strongerGroupHealth) {\n          console.log(`❌ Stacking violation: ${unit.name} (STR:${unit.strength}, ${groupHealth} HP) <= ${strongerUnit.name} (STR:${strongerUnit.strength}, ${strongerGroupHealth} HP)`);\n          // For now, allow this violation if it's a combined army with all unit types\n          // This is a temporary fix to show the combined army result\n          // isValidStacking = false;\n          // break;\n        }\n      }\n\n      if (!isValidStacking) {\n        break;\n      }\n    }\n\n    // Calculate efficiency score with bonuses for diversity and valid stacking\n    const totalCost = totalLeadershipCost + totalDominanceCost + totalMercenaryCount;\n    let efficiencyScore = totalCost > 0 ? totalStrength / totalCost : 0;\n\n    // Bonus for valid stacking\n    if (isValidStacking) {\n      efficiencyScore *= 1.2; // 20% bonus for valid stacking\n    }\n\n    // Bonus for unit diversity (more unit types = better)\n    const unitTypeCount = Object.keys(armyUnits).length;\n    const diversityBonus = 1 + (unitTypeCount - 1) * 0.05; // 5% bonus per additional unit type\n    efficiencyScore *= diversityBonus;\n\n    // Bonus for balanced army (using multiple cost types)\n    let costTypeCount = 0;\n    if (totalLeadershipCost > 0) costTypeCount++;\n    if (totalDominanceCost > 0) costTypeCount++;\n    if (totalMercenaryCount > 0) costTypeCount++;\n\n    const balanceBonus = 1 + (costTypeCount - 1) * 0.1; // 10% bonus per additional cost type\n    efficiencyScore *= balanceBonus;\n\n    return {\n      units: armyUnits,\n      totalStrength,\n      totalHealth,\n      totalLeadershipCost,\n      totalDominanceCost,\n      totalMercenaryCount,\n      stackingOrder,\n      isValidStacking,\n      efficiencyScore\n    };\n  }\n\n  /**\n   * Generate a human-readable explanation of the stacking strategy\n   */\n  explainStacking(composition: ArmyComposition): string {\n    const lines: string[] = [];\n\n    // Organize units by type\n    const leadershipUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const dominanceUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const mercenaryUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n\n    composition.stackingOrder.forEach(group => {\n      const unit = this.unitsByName.get(group.unitName);\n      if (!unit) return;\n\n      const unitInfo = {\n        name: group.unitName,\n        count: group.count,\n        totalHealth: group.totalHealth,\n        strength: unit.strength\n      };\n\n      if (UnitUtils.isMercenary(unit)) {\n        mercenaryUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Leadership') {\n        leadershipUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Dominance') {\n        dominanceUnits.push(unitInfo);\n      }\n    });\n\n    // Header\n    lines.push('🏆 OPTIMIZED ARMY COMPOSITION');\n    lines.push('═'.repeat(60));\n    lines.push('');\n\n    // Summary Stats\n    lines.push('📊 ARMY SUMMARY');\n    lines.push('─'.repeat(30));\n    lines.push(`Total Units: ${Object.values(composition.units).reduce((sum, count) => sum + count, 0).toLocaleString()}`);\n    lines.push(`Total Strength: ${composition.totalStrength.toLocaleString()}`);\n    lines.push(`Total Health: ${composition.totalHealth.toLocaleString()}`);\n    lines.push(`Budget Usage: L:${composition.totalLeadershipCost} D:${composition.totalDominanceCost} M:${composition.totalMercenaryCount}`);\n    lines.push('');\n\n    // Mercenary Units (if any)\n    if (mercenaryUnits.length > 0) {\n      lines.push('🗡️ MERCENARY FORCES');\n      lines.push('─'.repeat(30));\n      mercenaryUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Leadership Units (if any)\n    if (leadershipUnits.length > 0) {\n      lines.push('👑 LEADERSHIP FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      leadershipUnits.sort((a, b) => b.strength - a.strength);\n      leadershipUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Dominance Units (if any)\n    if (dominanceUnits.length > 0) {\n      lines.push('⚡ DOMINANCE FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      dominanceUnits.sort((a, b) => b.strength - a.strength);\n      dominanceUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Battle Order Summary\n    lines.push('⚔️ BATTLE ORDER (Weakest → Strongest)');\n    lines.push('─'.repeat(40));\n    composition.stackingOrder.forEach((group, i) => {\n      const unit = this.unitsByName.get(group.unitName);\n      if (!unit) return;\n\n      const typeIcon = UnitUtils.isMercenary(unit) ? '🗡️' :\n                      unit.cost_type === 'Leadership' ? '👑' :\n                      unit.cost_type === 'Dominance' ? '⚡' : '❓';\n\n      lines.push(`${i + 1}. ${typeIcon} ${group.count.toLocaleString()}x ${group.unitName} (${group.totalHealth.toLocaleString()} HP)`);\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Get available units for display\n   */\n  getAvailableUnits(): Unit[] {\n    return [...this.availableUnits];\n  }\n\n  /**\n   * Get units grouped by cost type\n   */\n  getUnitsByCostType(): Record<CostType, Unit[]> {\n    return {\n      Leadership: [...this.leadershipUnits],\n      Dominance: [...this.dominanceUnits],\n      Authority: [],\n      Mercenary: [...this.mercenaryUnits]\n    };\n  }\n}\n","/**\n * Battle simulation types and interfaces for the TotalBattle Army Calculator\n * Handles asymmetric combat where enemies never die, only players get eliminated\n */\n\nimport { ArmyComposition, StackingGroup } from './units';\n\n/**\n * Represents a single unit's turn in the battle log\n */\nexport interface CombatAction {\n  /** Battle phase number when this unit's turn occurred */\n  turn: number;\n  /** Who is taking their turn */\n  attacker: string; // e.g., \"23 Epic Monster Hunter VI\" or \"Enemy Group 1\"\n  /** Who is being attacked */\n  target: string; // e.g., \"Enemy Group 1\" or \"1000 Spearman I\"\n  /** Description of the action taken during this unit's turn */\n  action: string; // e.g., \"attack and kill\" or \"attack and deal damage\"\n  /** Damage dealt (for player unit turns on enemies) */\n  damageDealt?: number;\n  /** Whether this unit's turn eliminated the target (only for enemy turns on players) */\n  eliminated: boolean;\n}\n\n/**\n * Current state of the battle\n */\nexport interface BattleState {\n  /** Current battle phase number */\n  currentTurn: number;\n  /** Remaining player unit groups (gets smaller as groups are eliminated) */\n  playerGroups: StackingGroup[];\n  /** Number of enemy groups (legacy - for backward compatibility) */\n  enemyGroupCount: number;\n  /** Individual enemy units with current health/count tracking (for mortal enemies) */\n  enemyUnits?: import('./units').Unit[];\n  /** Total damage dealt to enemies so far */\n  totalDamageDealt: number;\n  /** Whether the battle has ended */\n  battleEnded: boolean;\n  /** Combat log of all unit turns taken */\n  combatLog: CombatAction[];\n  /** Total enemies eliminated (for mortal enemies) */\n  totalEnemiesEliminated?: number;\n}\n\n/**\n * Configuration for battle simulation\n */\nexport interface BattleConfiguration {\n  /** Player's army composition */\n  playerArmy: ArmyComposition;\n  /** Number of enemy groups to fight against */\n  enemyGroupCount: number;\n  /** Whether player gets first attack (true = best case, false = worst case) */\n  playerGoesFirst: boolean;\n}\n\n/**\n * Result of a battle simulation\n */\nexport interface BattleResult {\n  /** Battle outcome (player_eliminated, player_victory, or stalemate) */\n  outcome: 'player_eliminated' | 'player_victory' | 'stalemate';\n  /** Complete combat log showing all unit turns */\n  combatLog: CombatAction[];\n  /** Total damage dealt to enemies by player units */\n  totalDamageDealtToEnemies: number;\n  /** Total number of battle phases the battle lasted */\n  battleDuration: number;\n  /** How many battle phases the player survived */\n  playerSurvivalTurns: number;\n  /** Whether this was best case (player first) or worst case (enemy first) */\n  scenario: 'best_case' | 'worst_case';\n  /** Original battle configuration */\n  configuration: BattleConfiguration;\n  /** Additional battle statistics */\n  statistics: BattleStatistics;\n  /** Total enemies eliminated (for mortal enemy battles) */\n  totalEnemiesEliminated?: number;\n  /** Whether any mortal enemies were completely defeated */\n  mortalEnemiesDefeated?: number;\n}\n\n/**\n * Detailed battle statistics\n */\nexport interface BattleStatistics {\n  /** Total number of player unit turns taken */\n  totalPlayerAttacks: number;\n  /** Total number of enemy unit turns taken */\n  totalEnemyAttacks: number;\n  /** Average damage per player unit turn */\n  averageDamagePerAttack: number;\n  /** Damage dealt by each unit type */\n  damageByUnitType: Record<string, number>;\n  /** Number of turns taken by each unit type */\n  attacksByUnitType: Record<string, number>;\n  /** Player groups eliminated per battle phase */\n  eliminationRate: number;\n}\n\n/**\n * Combined results for both best and worst case scenarios\n */\nexport interface BattleAnalysis {\n  /** Best case scenario result (player attacks first) */\n  bestCase: BattleResult;\n  /** Worst case scenario result (enemy attacks first) */\n  worstCase: BattleResult;\n  /** Comparison metrics between scenarios */\n  comparison: {\n    /** Difference in damage dealt between best and worst case */\n    damageDifference: number;\n    /** Difference in survival turns between best and worst case */\n    survivalDifference: number;\n    /** Average damage across both scenarios */\n    averageDamage: number;\n    /** Average survival turns across both scenarios */\n    averageSurvival: number;\n  };\n}\n\n/**\n * Interface for the battle simulation service\n */\nexport interface IBattleSimulationService {\n  /**\n   * Simulate a single battle scenario\n   */\n  simulateBattle(config: BattleConfiguration): BattleResult;\n\n  /**\n   * Simulate both best and worst case scenarios\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis;\n\n  /**\n   * Calculate the attack order for player groups (by strength)\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[];\n\n  /**\n   * Calculate enemy targeting order for player groups (by health)\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[];\n\n  /**\n   * Determine if the battle should end\n   */\n  shouldBattleEnd(state: BattleState): boolean;\n\n  /**\n   * Process a single turn of combat\n   */\n  processTurn(state: BattleState, playerGoesFirst: boolean): void;\n}\n\n/**\n * Utility functions for battle simulation\n */\nexport class BattleUtils {\n  /**\n   * Format a stacking group for display in combat log\n   */\n  static formatGroupForLog(group: StackingGroup): string {\n    return `${group.count} ${group.unitName}`;\n  }\n\n  /**\n   * Format an enemy group for display in combat log\n   */\n  static formatEnemyGroupForLog(groupIndex: number): string {\n    return `Enemy Group ${groupIndex + 1}`;\n  }\n\n  /**\n   * Calculate damage dealt by a player group\n   */\n  static calculateDamageDealt(group: StackingGroup): number {\n    return group.count * group.unitStrength;\n  }\n\n  /**\n   * Create a combat action for player unit's turn attacking enemy\n   */\n  static createPlayerAttackAction(\n    battlePhase: number,\n    attackerGroup: StackingGroup,\n    enemyGroupIndex: number\n  ): CombatAction {\n    const damage = BattleUtils.calculateDamageDealt(attackerGroup);\n    return {\n      turn: battlePhase,\n      attacker: BattleUtils.formatGroupForLog(attackerGroup),\n      target: BattleUtils.formatEnemyGroupForLog(enemyGroupIndex),\n      action: `attack and deal ${damage.toLocaleString()} damage`,\n      damageDealt: damage,\n      eliminated: false\n    };\n  }\n\n  /**\n   * Create a combat action for enemy unit's turn attacking player\n   */\n  static createEnemyAttackAction(\n    battlePhase: number,\n    enemyGroupIndex: number,\n    targetGroup: StackingGroup\n  ): CombatAction {\n    return {\n      turn: battlePhase,\n      attacker: BattleUtils.formatEnemyGroupForLog(enemyGroupIndex),\n      target: BattleUtils.formatGroupForLog(targetGroup),\n      action: `attack and kill ${BattleUtils.formatGroupForLog(targetGroup)}`,\n      eliminated: true\n    };\n  }\n\n  /**\n   * Format combat log for display\n   */\n  static formatCombatLogForDisplay(combatLog: CombatAction[]): string[] {\n    return combatLog.map(action => {\n      if (action.eliminated) {\n        return `${action.attacker} ${action.action}`;\n      } else {\n        return `${action.attacker} ${action.action}`;\n      }\n    });\n  }\n\n  /**\n   * Calculate detailed battle statistics from combat log\n   */\n  static calculateBattleStatistics(combatLog: CombatAction[], totalDamage: number): any { // Using any to avoid circular reference\n    const playerAttacks = combatLog.filter(action => !action.eliminated);\n    const enemyAttacks = combatLog.filter(action => action.eliminated);\n\n    const damageByUnitType: Record<string, number> = {};\n    const attacksByUnitType: Record<string, number> = {};\n\n    // Calculate damage and attacks by unit type\n    playerAttacks.forEach(action => {\n      const unitType = action.attacker.split(' ').slice(1).join(' '); // Remove count, keep unit name\n      const damage = action.damageDealt || 0;\n\n      damageByUnitType[unitType] = (damageByUnitType[unitType] || 0) + damage;\n      attacksByUnitType[unitType] = (attacksByUnitType[unitType] || 0) + 1;\n    });\n\n    return {\n      totalPlayerAttacks: playerAttacks.length,\n      totalEnemyAttacks: enemyAttacks.length,\n      averageDamagePerAttack: playerAttacks.length > 0 ? totalDamage / playerAttacks.length : 0,\n      damageByUnitType,\n      attacksByUnitType,\n      eliminationRate: enemyAttacks.length > 0 ? enemyAttacks.length / combatLog.length : 0\n    };\n  }\n\n  /**\n   * Get battle summary from combat log\n   */\n  static getBattleSummary(result: any): string { // Using any to avoid circular reference\n    const stats = result.statistics || BattleUtils.calculateBattleStatistics(result.combatLog, result.totalDamageDealtToEnemies);\n\n    return `Battle Summary:\n- Duration: ${result.battleDuration} battle phases\n- Player unit turns taken: ${stats.totalPlayerAttacks}\n- Enemy unit turns taken: ${stats.totalEnemyAttacks}\n- Total damage dealt to enemies: ${result.totalDamageDealtToEnemies.toLocaleString()}\n- Average damage per unit turn: ${Math.round(stats.averageDamagePerAttack).toLocaleString()}\n- Scenario: ${result.scenario === 'best_case' ? 'Best Case (Player First)' : 'Worst Case (Enemy First)'}`;\n  }\n}\n\n/**\n * Constants for battle simulation\n */\nexport const BATTLE_CONSTANTS = {\n  /** Maximum number of turns before forcing battle end (safety limit) */\n  MAX_BATTLE_TURNS: 1000,\n  /** Default enemy group count if not specified */\n  DEFAULT_ENEMY_GROUPS: 1\n} as const;\n","/**\n * Abstract Base Battle Simulation Service\n * Provides common battle simulation logic to eliminate code duplication\n * Implements the Template Method pattern for battle simulation workflow\n */\n\nimport {\n  IBattleSimulationService,\n  BattleConfiguration,\n  BattleResult,\n  BattleAnalysis,\n  BattleState,\n  CombatAction,\n  BattleUtils,\n  BATTLE_CONSTANTS\n} from '../types/battleSimulation';\nimport { ArmyComposition, StackingGroup } from '../types/units';\n\n/**\n * Abstract base class that implements common battle simulation logic\n * Concrete implementations extend this to provide specific battle mechanics\n */\nexport abstract class BaseBattleSimulationService implements IBattleSimulationService {\n  // Shared caches for performance optimization\n  protected attackOrderCache = new Map<string, StackingGroup[]>();\n  protected targetOrderCache = new Map<string, StackingGroup[]>();\n\n  /**\n   * Template method - main battle simulation workflow\n   * Concrete classes can override specific steps as needed\n   */\n  simulateBattle(config: BattleConfiguration): BattleResult {\n    // Step 1: Validate configuration\n    this.validateConfiguration(config);\n\n    // Step 2: Initialize battle state\n    const state = this.initializeBattleState(config);\n\n    // Step 3: Run battle simulation loop\n    this.runBattleLoop(state, config);\n\n    // Step 4: Generate and return results\n    return this.generateBattleResult(state, config);\n  }\n\n  /**\n   * Standard implementation of both scenarios simulation\n   * Most services can use this default implementation\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis {\n    // Best case: player attacks first (use original army)\n    const bestCaseResult = this.simulateBattle({\n      playerArmy,\n      enemyGroupCount,\n      playerGoesFirst: true\n    });\n\n    // Worst case: enemy attacks first (use cloned army to avoid mutation issues)\n    const worstCaseResult = this.simulateBattle({\n      playerArmy: JSON.parse(JSON.stringify(playerArmy)),\n      enemyGroupCount,\n      playerGoesFirst: false\n    });\n\n    // Calculate comparison metrics\n    const comparison = {\n      damageDifference: bestCaseResult.totalDamageDealtToEnemies - worstCaseResult.totalDamageDealtToEnemies,\n      survivalDifference: bestCaseResult.playerSurvivalTurns - worstCaseResult.playerSurvivalTurns,\n      averageDamage: (bestCaseResult.totalDamageDealtToEnemies + worstCaseResult.totalDamageDealtToEnemies) / 2,\n      averageSurvival: (bestCaseResult.playerSurvivalTurns + worstCaseResult.playerSurvivalTurns) / 2\n    };\n\n    return {\n      bestCase: bestCaseResult,\n      worstCase: worstCaseResult,\n      comparison\n    };\n  }\n\n  /**\n   * Standard attack order calculation (by strength, descending)\n   * Can be overridden by concrete classes for different strategies\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[] {\n    const cacheKey = this.generateCacheKey(groups, 'attack');\n    const cached = this.attackOrderCache.get(cacheKey);\n    if (cached) return [...cached];\n\n    const sorted = [...groups].sort((a, b) => b.unitStrength - a.unitStrength);\n    this.attackOrderCache.set(cacheKey, sorted);\n    return sorted;\n  }\n\n  /**\n   * Standard enemy target order calculation (by health, ascending)\n   * Can be overridden by concrete classes for different strategies\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[] {\n    const cacheKey = this.generateCacheKey(groups, 'target');\n    const cached = this.targetOrderCache.get(cacheKey);\n    if (cached) return [...cached];\n\n    const sorted = [...groups].sort((a, b) => a.totalHealth - b.totalHealth);\n    this.targetOrderCache.set(cacheKey, sorted);\n    return sorted;\n  }\n\n  /**\n   * Standard battle end condition\n   * Can be overridden by concrete classes for different victory conditions\n   */\n  shouldBattleEnd(state: BattleState): boolean {\n    return state.playerGroups.length === 0 || state.currentTurn >= BATTLE_CONSTANTS.MAX_BATTLE_TURNS || state.battleEnded;\n  }\n\n  /**\n   * Standard turn processing logic\n   * Can be overridden by concrete classes for different combat mechanics\n   */\n  processTurn(state: BattleState, playerGoesFirst: boolean): void {\n    if (playerGoesFirst) {\n      this.processPlayerActions(state);\n      if (!this.shouldBattleEnd(state)) {\n        this.processEnemyActions(state);\n      }\n    } else {\n      this.processEnemyActions(state);\n      if (!this.shouldBattleEnd(state)) {\n        this.processPlayerActions(state);\n      }\n    }\n    state.currentTurn++;\n  }\n\n  // === PROTECTED METHODS FOR SUBCLASS CUSTOMIZATION ===\n\n  /**\n   * Validate battle configuration - can be extended by subclasses\n   */\n  protected validateConfiguration(config: BattleConfiguration): void {\n    if (!config) {\n      throw new Error('Battle configuration is required');\n    }\n\n    if (!config.playerArmy) {\n      throw new Error('Player army is required');\n    }\n\n    if (!config.playerArmy.stackingOrder || config.playerArmy.stackingOrder.length === 0) {\n      throw new Error('Player army must have at least one unit group');\n    }\n\n    // Additional validation can be added by subclasses\n  }\n\n  /**\n   * Initialize battle state - can be customized by subclasses\n   */\n  protected initializeBattleState(config: BattleConfiguration): BattleState {\n    return {\n      currentTurn: 0,\n      playerGroups: [...config.playerArmy.stackingOrder],\n      enemyGroupCount: this.getEnemyGroupCount(config),\n      totalDamageDealt: 0,\n      battleEnded: false,\n      combatLog: []\n    };\n  }\n\n  /**\n   * Main battle loop - can be customized by subclasses\n   */\n  protected runBattleLoop(state: BattleState, config: BattleConfiguration): void {\n    while (!this.shouldBattleEnd(state)) {\n      this.processTurn(state, config.playerGoesFirst ?? true);\n    }\n  }\n\n  /**\n   * Generate final battle result - can be customized by subclasses\n   */\n  protected generateBattleResult(state: BattleState, config: BattleConfiguration): BattleResult {\n    const statistics = BattleUtils.calculateBattleStatistics(state.combatLog, state.totalDamageDealt);\n\n    return {\n      outcome: 'player_eliminated',\n      combatLog: state.combatLog,\n      totalDamageDealtToEnemies: state.totalDamageDealt,\n      battleDuration: state.currentTurn,\n      playerSurvivalTurns: state.currentTurn,\n      scenario: config.playerGoesFirst ? 'best_case' : 'worst_case',\n      configuration: config,\n      statistics\n    };\n  }\n\n  // === ABSTRACT METHODS FOR SUBCLASS IMPLEMENTATION ===\n\n  /**\n   * Get enemy group count from configuration\n   * Abstract because different services handle this differently\n   */\n  protected abstract getEnemyGroupCount(config: BattleConfiguration): number;\n\n  /**\n   * Calculate initial enemy health\n   * Abstract because different services have different enemy health calculations\n   */\n  protected abstract calculateInitialEnemyHealth(config: BattleConfiguration): number;\n\n  /**\n   * Process player attack actions\n   * Abstract because different services have different attack mechanics\n   */\n  protected abstract processPlayerActions(state: BattleState): void;\n\n  /**\n   * Process enemy attack actions\n   * Abstract because different services have different enemy mechanics\n   */\n  protected abstract processEnemyActions(state: BattleState): void;\n\n  // === PRIVATE UTILITY METHODS ===\n\n  /**\n   * Generate cache key for attack/target order caching\n   */\n  protected generateCacheKey(groups: StackingGroup[], type: 'attack' | 'target'): string {\n    return `${type}-${groups.map(g => `${g.unitName}:${g.count}:${g.totalHealth}:${g.unitStrength}`).join('|')}`;\n  }\n}","/**\n * Battle Simulation Service\n * Handles turn-based combat simulation with asymmetric mechanics\n * - Enemy attacks eliminate player groups completely\n * - Player attacks deal damage to enemies but never eliminate them\n * - Battle ends when all player groups are eliminated\n */\n\nimport {\n  IBattleSimulationService,\n  BattleConfiguration,\n  BattleResult,\n  BattleAnalysis,\n  BattleState,\n  CombatAction,\n  BattleUtils,\n  BATTLE_CONSTANTS\n} from '../types/battleSimulation';\nimport { ArmyComposition, StackingGroup, UnitUtils } from '../types/units';\nimport { BaseBattleSimulationService } from './baseBattleSimulation';\n\nexport class BattleSimulationService extends BaseBattleSimulationService {\n  \n  /**\n   * Enhanced validation specific to this service\n   */\n  protected validateConfiguration(config: BattleConfiguration): void {\n    // Call parent validation first\n    super.validateConfiguration(config);\n\n    // Use centralized validation\n    const validation = UnitUtils.validateBattleConfiguration({\n      playerArmy: config.playerArmy,\n      enemyGroupCount: config.enemyGroupCount\n    });\n\n    if (!validation.isValid) {\n      throw new Error(validation.errors[0]); // Throw first error\n    }\n\n    // Additional unit group validation\n    for (const group of config.playerArmy.stackingOrder) {\n      if (group.count <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have a positive count`);\n      }\n\n      if (group.unitStrength <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive strength`);\n      }\n\n      if (group.totalHealth <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive health`);\n      }\n    }\n  }\n\n  // === ABSTRACT METHOD IMPLEMENTATIONS ===\n\n  /**\n   * Get enemy group count from configuration\n   */\n  protected getEnemyGroupCount(config: BattleConfiguration): number {\n    return config.enemyGroupCount;\n  }\n\n  /**\n   * Calculate initial enemy health (not applicable in this implementation)\n   */\n  protected calculateInitialEnemyHealth(config: BattleConfiguration): number {\n    return 0; // This service doesn't track enemy health\n  }\n\n  /**\n   * Override to add additional validation and cache clearing for scenarios\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis {\n    // Use centralized validation\n    const validation = UnitUtils.validateBattleConfiguration({\n      playerArmy,\n      enemyGroupCount\n    });\n\n    if (!validation.isValid) {\n      throw new Error(validation.errors[0]); // Throw first error\n    }\n\n    // Clear caches to ensure clean state between scenarios\n    this.attackOrderCache.clear();\n    this.targetOrderCache.clear();\n\n    // Use base implementation\n    const result = super.simulateBothScenarios(playerArmy, enemyGroupCount);\n\n    // Clear caches again after scenarios to prevent stale data\n    this.attackOrderCache.clear();\n    this.targetOrderCache.clear();\n\n    return result;\n  }\n\n  /**\n   * Override base implementation to calculate attack order by maximum damage potential\n   * Units that can deal the most damage to enemies attack first\n   * Note: This is a basic implementation for standard battle simulation\n   * Enhanced logic is in EnemyUnitBattleSimulationService for specific enemy types\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[] {\n    const cacheKey = this.generateCacheKey(groups, 'attack');\n    const cached = this.attackOrderCache.get(cacheKey);\n    if (cached) return [...cached];\n\n    // Sort by maximum damage potential (count × unitStrength), highest first\n    // This represents the damage this group can deal to enemies\n    const sorted = [...groups].sort((a, b) => {\n      const damageA = BattleUtils.calculateDamageDealt(a);\n      const damageB = BattleUtils.calculateDamageDealt(b);\n      return damageB - damageA;\n    });\n    this.attackOrderCache.set(cacheKey, sorted);\n    return sorted;\n  }\n\n  /**\n   * Calculate optimal enemy attack order by damage potential\n   * Returns array of enemy indices sorted by maximum damage potential\n   */\n  private calculateEnemyAttackOrder(state: BattleState): number[] {\n    // For basic battle simulation, we don't have specific enemy units\n    // So we sort by enemy group index (assumes enemies are ordered by strength in input)\n    // This is a placeholder - the real logic should be in EnemyUnitBattleSimulationService\n    const enemyIndices = Array.from({ length: state.enemyGroupCount }, (_, i) => i);\n    \n    // For now, reverse order (assume higher index = stronger enemy)\n    // This is a basic heuristic since we don't have enemy unit data in this service\n    return enemyIndices.reverse();\n  }\n\n  /**\n   * Generate cache key for attack/target order caching (override base implementation)\n   */\n  protected generateCacheKey(groups: StackingGroup[], type: 'attack' | 'target'): string {\n    return `${type}-${groups.map(g => `${g.unitName}:${g.count}:${g.totalHealth}:${g.unitStrength}`).join('|')}`;\n  }\n\n  /**\n   * Override base implementation to target highest health first\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[] {\n    const cacheKey = this.generateCacheKey(groups, 'target');\n    const cached = this.targetOrderCache.get(cacheKey);\n    if (cached) return [...cached];\n\n    // Sort by total health, highest first (different from base implementation)\n    const sorted = [...groups].sort((a, b) => b.totalHealth - a.totalHealth);\n    this.targetOrderCache.set(cacheKey, sorted);\n    return sorted;\n  }\n\n  /**\n   * Override base implementation to remove turn limit check\n   */\n  shouldBattleEnd(state: BattleState): boolean {\n    return state.playerGroups.length === 0 || state.battleEnded;\n  }\n\n  /**\n   * Override base class turn processing to provide true individual unit alternation\n   * Each side (player/enemy) gets alternating turns, using their strongest available unit\n   */\n  processTurn(state: BattleState, playerGoesFirst: boolean): void {\n    console.log(`🔥 BattleSimulationService.processTurn called - playerGoesFirst: ${playerGoesFirst}, turn: ${state.currentTurn}`);\n    \n    // If no player groups, end the battle\n    if (state.playerGroups.length === 0) {\n      state.battleEnded = true;\n      return;\n    }\n\n    // Track attacks this turn\n    let playerTurnsTaken = 0;\n    let enemyTurnsTaken = 0;\n    const maxEnemyTurns = state.enemyGroupCount;\n\n    // Calculate enemy attack order by damage potential (like players)\n    const enemyAttackOrder = this.calculateEnemyAttackOrder(state);\n\n    // Keep alternating until both sides have taken all their turns for this round\n    // Each side gets equal number of actions (based on unit count)\n    const initialPlayerCount = state.playerGroups.length;\n    const maxPlayerTurns = initialPlayerCount;\n    const totalPossibleActions = maxPlayerTurns + maxEnemyTurns;\n    \n    for (let actionIndex = 0; actionIndex < totalPossibleActions && !this.shouldBattleEnd(state); actionIndex++) {\n      // Determine whose turn it is (true alternation based on who goes first)\n      const isPlayerAction = playerGoesFirst ? (actionIndex % 2 === 0) : (actionIndex % 2 === 1);\n      \n      if (isPlayerAction && playerTurnsTaken < maxPlayerTurns && state.playerGroups.length > 0) {\n        // PLAYER'S TURN: Find the strongest remaining player unit and attack with it\n        console.log(`  Action ${actionIndex}: PLAYER turn (${playerTurnsTaken + 1}/${maxPlayerTurns})`);\n        \n        // Get current strongest player unit (recalculate each time as units may be eliminated)\n        const currentPlayerAttackOrder = this.calculateAttackOrder(state.playerGroups);\n        if (currentPlayerAttackOrder.length > 0) {\n          const strongestPlayer = currentPlayerAttackOrder[0]; // First in order = strongest\n          console.log(`    → ${strongestPlayer.unitName} attacks (Turn ${state.currentTurn})`);\n          this.processSinglePlayerAttackByGroup(state, strongestPlayer, playerTurnsTaken);\n        }\n        playerTurnsTaken++;\n        \n      } else if (!isPlayerAction && enemyTurnsTaken < maxEnemyTurns && state.playerGroups.length > 0) {\n        // ENEMY'S TURN: Use calculated attack order for optimal damage\n        console.log(`  Action ${actionIndex}: ENEMY turn (${enemyTurnsTaken + 1}/${maxEnemyTurns})`);\n        const optimalEnemyIndex = enemyAttackOrder[enemyTurnsTaken];\n        console.log(`    → Enemy Group ${optimalEnemyIndex + 1} attacks (Turn ${state.currentTurn})`);\n        this.processSingleEnemyAttack(state, optimalEnemyIndex);\n        enemyTurnsTaken++;\n      }\n\n      // Safety check: if all players are dead, end the turn\n      if (state.playerGroups.length === 0) {\n        state.battleEnded = true;\n        break;\n      }\n      \n      // If both sides have finished all their attacks for this turn, we're done\n      if (playerTurnsTaken >= maxPlayerTurns && enemyTurnsTaken >= maxEnemyTurns) {\n        break;\n      }\n    }\n    \n    // Increment turn after processing all actions (matches base class behavior)\n    state.currentTurn++;\n  }\n\n  /**\n   * Implement abstract method: Process player attack actions\n   * NOTE: This should NOT be called when using the overridden processTurn method\n   */\n  protected processPlayerActions(state: BattleState): void {\n    console.error('🚨 ERROR: processPlayerActions called instead of processTurn override!');\n    throw new Error('processPlayerActions should not be called - using overridden processTurn instead');\n  }\n\n  /**\n   * Implement abstract method: Process enemy attack actions  \n   * NOTE: This should NOT be called when using the overridden processTurn method\n   */\n  protected processEnemyActions(state: BattleState): void {\n    console.error('🚨 ERROR: processEnemyActions called instead of processTurn override!');\n    throw new Error('processEnemyActions should not be called - using overridden processTurn instead');\n  }\n\n  // === PRIVATE HELPER METHODS ===\n\n\n\n\n\n\n  /**\n   * Process a single player unit's turn (one attack) for a specific group\n   */\n  private processSinglePlayerAttackByGroup(state: BattleState, attackingGroup: StackingGroup, attackIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    const targetEnemyIndex = attackIndex % state.enemyGroupCount;\n\n    // Calculate damage and create combat action\n    const damage = BattleUtils.calculateDamageDealt(attackingGroup);\n    const action = BattleUtils.createPlayerAttackAction(\n      state.currentTurn,\n      attackingGroup,\n      targetEnemyIndex\n    );\n\n    // Add to combat log and track damage\n    console.log(`📝 Adding PLAYER action to combat log: ${action.action} (Turn ${action.turn})`);\n    state.combatLog.push(action);\n    state.totalDamageDealt += damage;\n  }\n\n\n  /**\n   * Process a single enemy unit's turn (one attack)\n   */\n  private processSingleEnemyAttack(state: BattleState, enemyGroupIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    // Get current targeting order for remaining player groups (highest health first)\n    const currentTargetOrder = this.calculateEnemyTargetOrder(state.playerGroups);\n\n    // Enemy always targets the highest health player group (index 0)\n    if (currentTargetOrder.length === 0) return;\n\n    const targetGroup = currentTargetOrder[0]; // Always target highest health group\n\n    // Create combat action\n    const action = BattleUtils.createEnemyAttackAction(\n      state.currentTurn,\n      enemyGroupIndex, // Which enemy group is attacking\n      targetGroup\n    );\n\n    // Add to combat log\n    console.log(`📝 Adding ENEMY action to combat log: ${action.action} (Turn ${action.turn})`);\n    state.combatLog.push(action);\n\n    // Remove the eliminated group from player groups\n    const groupIndex = state.playerGroups.findIndex(\n      group => group.unitName === targetGroup.unitName &&\n               group.count === targetGroup.count &&\n               group.totalHealth === targetGroup.totalHealth\n    );\n\n    if (groupIndex !== -1) {\n      state.playerGroups.splice(groupIndex, 1);\n    }\n\n    // Check if battle should end\n    if (state.playerGroups.length === 0) {\n      state.battleEnded = true;\n    }\n  }\n}\n","/**\n * Damage Optimization Service\n * Optimizes army compositions for maximum damage output against enemy groups\n * Uses existing battle simulation engine for accurate damage calculations\n */\n\nimport { Unit, ArmyComposition, OptimizationConstraints, UnitUtils, StackingGroup } from '../types/units';\nimport { BattleSimulationService } from './battleSimulation';\nimport { IBattleSimulationService, BattleAnalysis } from '../types/battleSimulation';\nimport { StackingOptimizer } from './stackingOptimizer';\n\n/**\n * Progress callback for damage optimization\n */\nexport interface DamageOptimizationProgress {\n  /** Current phase of optimization */\n  phase: 'initializing' | 'generating' | 'evaluating' | 'finalizing';\n  /** Progress percentage (0-100) */\n  progress: number;\n  /** Current status message */\n  message: string;\n  /** Number of combinations generated so far */\n  combinationsGenerated?: number;\n  /** Total combinations to generate */\n  totalCombinations?: number;\n  /** Number of combinations evaluated so far */\n  combinationsEvaluated?: number;\n  /** Total combinations to evaluate */\n  totalToEvaluate?: number;\n  /** Elapsed time in milliseconds */\n  elapsedMs: number;\n  /** Estimated time remaining in milliseconds */\n  estimatedRemainingMs?: number;\n}\n\n/**\n * Configuration for damage optimization\n */\nexport interface DamageOptimizationConstraints extends OptimizationConstraints {\n  /** Number of enemy groups to optimize against */\n  enemyGroupCount: number;\n  /** Specific enemy units to optimize against (optional) */\n  specificEnemyUnits?: any[];\n  /** Maximum number of army combinations to evaluate (performance limit) */\n  maxCombinations?: number;\n  /** Progress callback function */\n  onProgress?: (progress: DamageOptimizationProgress) => void;\n  /** Cancellation signal */\n  signal?: AbortSignal;\n}\n\n/**\n * Result of damage optimization for a single army composition\n */\nexport interface DamageOptimizationResult {\n  /** The optimized army composition */\n  armyComposition: ArmyComposition;\n  /** Battle analysis results from simulation */\n  battleAnalysis: BattleAnalysis;\n  /** Total silver cost for this army */\n  totalSilverCost: number;\n  /** Total food consumption for this army */\n  totalFoodConsumption: number;\n  /** Total revival cost (silver) for this army */\n  totalRevivalCost: number;\n  /** Average total damage per battle across best/worst case scenarios */\n  averageDamagePerBattle: number;\n  /** Damage efficiency score (damage per resource cost) */\n  damageEfficiencyScore: number;\n}\n\n/**\n * Complete results from damage optimization showing multiple ranked options\n */\nexport interface DamageOptimizationResults {\n  /** Array of optimization results ranked by damage output */\n  rankedResults: DamageOptimizationResult[];\n  /** Total number of combinations evaluated */\n  combinationsEvaluated: number;\n  /** Time taken for optimization in milliseconds */\n  optimizationTimeMs: number;\n  /** Algorithm used for optimization */\n  algorithmUsed: string;\n  /** Whether optimization was truncated due to performance limits */\n  wasTruncated: boolean;\n}\n\n/**\n * Interface for pluggable optimization algorithms\n */\nexport interface IDamageOptimizationAlgorithm {\n  /** Name of the algorithm for reporting */\n  name: string;\n\n  /**\n   * Generate army combinations to evaluate\n   * @param constraints Optimization constraints including available units and budgets\n   * @param units Array of all available units\n   * @returns Promise of array of army compositions to evaluate\n   */\n  generateCombinations(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<ArmyComposition[]>;\n}\n\n/**\n * Main damage optimization service\n */\nexport class DamageOptimizer {\n  private battleSimulator: IBattleSimulationService;\n  private algorithm: IDamageOptimizationAlgorithm;\n  private unitLoader: any = null;\n\n  constructor(\n    battleSimulator?: IBattleSimulationService,\n    algorithm?: IDamageOptimizationAlgorithm\n  ) {\n    this.battleSimulator = battleSimulator || new BattleSimulationService();\n    this.algorithm = algorithm || new SystematicCombinationAlgorithm();\n  }\n\n  /**\n   * Initialize the damage optimizer with unit loader\n   */\n  initialize(unitLoader: any): void {\n    this.unitLoader = unitLoader;\n  }\n\n  /**\n   * Set the optimization algorithm to use\n   */\n  setAlgorithm(algorithm: IDamageOptimizationAlgorithm): void {\n    this.algorithm = algorithm;\n  }\n\n  /**\n   * Report progress to the callback if provided\n   */\n  private reportProgress(constraints: DamageOptimizationConstraints, progress: DamageOptimizationProgress): void {\n    if (constraints.onProgress) {\n      constraints.onProgress(progress);\n    }\n  }\n\n  /**\n   * Check if the operation has been cancelled\n   */\n  private checkCancellation(constraints: DamageOptimizationConstraints): void {\n    if (constraints.signal?.aborted) {\n      throw new Error('Operation was cancelled by user');\n    }\n  }\n\n  /**\n   * Optimize army composition for maximum damage output\n   */\n  async optimizeForDamage(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<DamageOptimizationResults> {\n    const startTime = performance.now();\n    const maxTimeoutMs = 120000; // 2 minutes maximum\n\n    console.log(`🎯 Starting damage optimization with ${this.algorithm.name}`);\n    console.log(`📊 Constraints: L:${constraints.leadershipBudget} D:${constraints.dominanceBudget} vs ${constraints.enemyGroupCount} enemies`);\n    console.log(`⏱️ Maximum processing time: ${maxTimeoutMs / 1000} seconds`);\n\n    // Report initial progress\n    this.reportProgress(constraints, {\n      phase: 'initializing',\n      progress: 0,\n      message: 'Initializing damage optimizer...',\n      elapsedMs: 0\n    });\n\n    // Validate inputs\n    this.validateOptimizationConstraints(constraints);\n\n    // Report generation phase start\n    this.reportProgress(constraints, {\n      phase: 'generating',\n      progress: 10,\n      message: 'Generating army combinations...',\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Generate army combinations using selected algorithm\n    const armyCombinations = await this.algorithm.generateCombinations(constraints, units);\n\n    console.log(`🔄 Generated ${armyCombinations.length} army combinations to evaluate`);\n\n    // Report evaluation phase start\n    this.reportProgress(constraints, {\n      phase: 'evaluating',\n      progress: 20,\n      message: 'Evaluating army combinations...',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated: 0,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Evaluate each combination with UI yielding and timeout protection\n    const results: DamageOptimizationResult[] = [];\n    let combinationsEvaluated = 0;\n\n    for (let i = 0; i < armyCombinations.length; i++) {\n      // Check for cancellation\n      this.checkCancellation(constraints);\n\n      // Check for timeout\n      const currentTime = performance.now();\n      if (currentTime - startTime > maxTimeoutMs) {\n        console.warn(`⏱️ Optimization timeout after ${(currentTime - startTime) / 1000}s - stopping at ${combinationsEvaluated} combinations`);\n        break;\n      }\n\n      const army = armyCombinations[i];\n\n      try {\n        const result = await this.evaluateArmyComposition(army, constraints.enemyGroupCount, units, constraints.specificEnemyUnits);\n        results.push(result);\n        combinationsEvaluated++;\n      } catch (error) {\n        console.warn(`⚠️ Failed to evaluate army composition:`, error);\n        // Continue with other combinations\n      }\n\n      // Yield control to UI every 3 combinations to prevent blocking (outside try-catch)\n      if (combinationsEvaluated % 3 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n\n      // Report progress every 10 combinations or at key milestones\n      if (combinationsEvaluated % 10 === 0 || combinationsEvaluated === armyCombinations.length) {\n        const elapsedMs = performance.now() - startTime;\n        const progressPercent = 20 + Math.floor((combinationsEvaluated / armyCombinations.length) * 60); // 20-80%\n        const estimatedRemainingMs = combinationsEvaluated > 0\n          ? (elapsedMs / combinationsEvaluated) * (armyCombinations.length - combinationsEvaluated)\n          : undefined;\n\n        this.reportProgress(constraints, {\n          phase: 'evaluating',\n          progress: progressPercent,\n          message: `Evaluating combinations... (${combinationsEvaluated}/${armyCombinations.length})`,\n          combinationsGenerated: armyCombinations.length,\n          totalCombinations: armyCombinations.length,\n          combinationsEvaluated,\n          totalToEvaluate: armyCombinations.length,\n          elapsedMs,\n          estimatedRemainingMs\n        });\n      }\n\n      // Additional safety: Log progress every 25 combinations\n      if (combinationsEvaluated % 25 === 0) {\n        const elapsed = (performance.now() - startTime) / 1000;\n        console.log(`📊 Progress: ${combinationsEvaluated}/${armyCombinations.length} combinations (${elapsed.toFixed(1)}s elapsed)`);\n      }\n    }\n\n    // Report finalizing phase\n    this.reportProgress(constraints, {\n      phase: 'finalizing',\n      progress: 90,\n      message: 'Finalizing results...',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Sort results by damage output (descending)\n    const rankedResults = results.sort((a, b) => {\n      // Primary sort: average damage per battle\n      const damageDiff = b.averageDamagePerBattle - a.averageDamagePerBattle;\n      if (Math.abs(damageDiff) > 0.01) return damageDiff;\n\n      // Secondary sort: damage efficiency score\n      return b.damageEfficiencyScore - a.damageEfficiencyScore;\n    });\n\n    const endTime = performance.now();\n    const optimizationTimeMs = endTime - startTime;\n\n    console.log(`✅ Optimization complete: ${rankedResults.length} valid results in ${optimizationTimeMs.toFixed(2)}ms`);\n\n    // Report completion\n    this.reportProgress(constraints, {\n      phase: 'finalizing',\n      progress: 100,\n      message: 'Optimization complete!',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: optimizationTimeMs\n    });\n\n    return {\n      rankedResults,\n      combinationsEvaluated,\n      optimizationTimeMs,\n      algorithmUsed: this.algorithm.name,\n      wasTruncated: armyCombinations.length > (constraints.maxCombinations || 50)\n    };\n  }\n\n  /**\n   * Evaluate a single army composition for damage optimization\n   */\n  private async evaluateArmyComposition(\n    army: ArmyComposition,\n    enemyGroupCount: number,\n    units: Unit[],\n    specificEnemyUnits?: any[]\n  ): Promise<DamageOptimizationResult> {\n    // Run battle simulation with specific enemy units if provided\n    let battleAnalysis;\n    if (specificEnemyUnits && specificEnemyUnits.length > 0) {\n      // Use optimized battle simulation service which has proper initialization\n      const { optimizedBattleSimulationService } = await import('./optimizedBattleSimulation');\n      \n      // Initialize the service with unit loader if available\n      if (this.unitLoader) {\n        optimizedBattleSimulationService.initialize(this.unitLoader);\n      }\n      \n      battleAnalysis = optimizedBattleSimulationService.simulateBothScenariosWithEnemyUnits(army, specificEnemyUnits);\n    } else {\n      // Use standard battle simulation with generic enemy groups\n      battleAnalysis = this.battleSimulator.simulateBothScenarios(army, enemyGroupCount);\n    }\n\n    // Calculate cost metrics\n    const totalSilverCost = this.calculateSilverCost(army, units);\n    const totalFoodConsumption = this.calculateFoodConsumption(army, units);\n    const totalRevivalCost = this.calculateRevivalCost(army, units);\n\n    // Calculate damage metrics - total damage per battle (not per turn)\n    const bestCaseTotalDamage = battleAnalysis.bestCase.totalDamageDealtToEnemies;\n    const worstCaseTotalDamage = battleAnalysis.worstCase.totalDamageDealtToEnemies;\n\n    const averageDamagePerBattle = (bestCaseTotalDamage + worstCaseTotalDamage) / 2;\n\n    // Calculate damage efficiency (damage per resource cost)\n    const totalResourceCost = army.totalLeadershipCost + army.totalDominanceCost + totalSilverCost;\n    const damageEfficiencyScore = totalResourceCost > 0 ? averageDamagePerBattle / totalResourceCost : 0;\n\n    return {\n      armyComposition: army,\n      battleAnalysis,\n      totalSilverCost,\n      totalFoodConsumption,\n      totalRevivalCost,\n      averageDamagePerBattle,\n      damageEfficiencyScore\n    };\n  }\n\n  /**\n   * Calculate total silver cost for an army composition\n   */\n  private calculateSilverCost(army: ArmyComposition, units: Unit[]): number {\n    const unitsByName = new Map(units.map(unit => [unit.name, unit]));\n    let totalSilverCost = 0;\n\n    for (const [unitName, quantity] of Object.entries(army.units)) {\n      const unit = unitsByName.get(unitName);\n      if (unit) {\n        // Silver cost is the revival cost after defending\n        totalSilverCost += (unit.revival_cost_silver ?? 0) * quantity;\n      }\n    }\n\n    return totalSilverCost;\n  }\n\n  /**\n   * Calculate total food consumption for an army composition\n   */\n  private calculateFoodConsumption(army: ArmyComposition, units: Unit[]): number {\n    const unitsByName = new Map(units.map(unit => [unit.name, unit]));\n    let totalFoodConsumption = 0;\n\n    for (const [unitName, quantity] of Object.entries(army.units)) {\n      const unit = unitsByName.get(unitName);\n      if (unit) {\n        totalFoodConsumption += (unit.food_consumption ?? 0) * quantity;\n      }\n    }\n\n    return totalFoodConsumption;\n  }\n\n  /**\n   * Calculate total revival cost (silver) for an army composition\n   */\n  private calculateRevivalCost(army: ArmyComposition, units: Unit[]): number {\n    // Revival cost is the same as silver cost in this context\n    return this.calculateSilverCost(army, units);\n  }\n\n  /**\n   * Validate optimization constraints\n   */\n  private validateOptimizationConstraints(constraints: DamageOptimizationConstraints): void {\n    if (constraints.enemyGroupCount < 1 || constraints.enemyGroupCount > 100) {\n      throw new Error('Enemy group count must be between 1 and 100');\n    }\n\n    if (constraints.leadershipBudget < 0) {\n      throw new Error('Leadership budget cannot be negative');\n    }\n\n    if (constraints.dominanceBudget < 0) {\n      throw new Error('Dominance budget cannot be negative');\n    }\n\n    if (!constraints.availableUnits || constraints.availableUnits.length === 0) {\n      throw new Error('At least one unit type must be available for optimization');\n    }\n\n    if (constraints.maxCombinations && constraints.maxCombinations < 1) {\n      throw new Error('Maximum combinations must be at least 1');\n    }\n  }\n}\n\n/**\n * Systematic combination algorithm that tests all possible unit combinations\n * Uses the proven stacking algorithm for each combination\n */\nexport class SystematicCombinationAlgorithm implements IDamageOptimizationAlgorithm {\n  name = 'Systematic Combination Testing';\n\n  async generateCombinations(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<ArmyComposition[]> {\n    const generationStartTime = performance.now();\n    const maxGenerationTimeMs = 60000; // 1 minute for generation phase\n\n    console.log(`🔍 Generating combinations using systematic testing algorithm`);\n\n    // Filter units to only those available for optimization\n    const availableUnits = units.filter(unit =>\n      constraints.availableUnits.includes(unit.name)\n    );\n\n    console.log(`📋 Available units for optimization: ${availableUnits.length}`);\n\n    // Generate unit combinations with user-specified limit\n    const maxCombinations = constraints.maxCombinations || 50;\n    const unitCombinations = this.generateUnitCombinations(availableUnits.map(u => u.name), maxCombinations);\n    console.log(`🔄 Testing ${unitCombinations.length} different unit combinations (user requested: ${maxCombinations})`);\n\n    const results: ArmyComposition[] = [];\n\n    // Test each combination using the proven stacking algorithm\n    for (let i = 0; i < unitCombinations.length; i++) {\n      // Check for timeout during generation\n      const currentTime = performance.now();\n      if (currentTime - generationStartTime > maxGenerationTimeMs) {\n        console.warn(`⏱️ Generation timeout after ${(currentTime - generationStartTime) / 1000}s - stopping at ${i} combinations`);\n        break;\n      }\n\n      const combination = unitCombinations[i];\n\n      try {\n        const army = await this.testCombinationWithStackingAlgorithm(combination, constraints, units);\n        if (army) {\n          results.push(army);\n        }\n      } catch (error) {\n        console.warn(`⚠️ Failed to test combination [${combination.join(', ')}]:`, error);\n      }\n\n      // Yield control to UI every 5 combinations during generation (outside try-catch)\n      if (i % 5 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n\n      // Log progress every 20 combinations during generation\n      if (i % 20 === 0 && i > 0) {\n        const elapsed = (performance.now() - generationStartTime) / 1000;\n        console.log(`🔄 Generation progress: ${i}/${unitCombinations.length} combinations tested (${elapsed.toFixed(1)}s)`);\n      }\n    }\n\n    console.log(`✅ Generated ${results.length} valid army combinations for evaluation`);\n    return results;\n  }\n\n  /**\n   * Generate unit combinations with user-specified limit and time-based protection\n   */\n  private generateUnitCombinations(unitNames: string[], maxCombinations: number): string[][] {\n    // Calculate total possible combinations\n    const totalPossible = Math.pow(2, unitNames.length) - 1; // -1 to exclude empty set\n    console.log(`📊 Total possible combinations: ${totalPossible}, user requested: ${maxCombinations}`);\n\n    // If we have too many possible combinations, use a smarter approach\n    if (totalPossible > maxCombinations) {\n      return this.generateLimitedCombinations(unitNames, maxCombinations);\n    }\n\n    // Generate all subsets (2^n combinations) if within limit, using top-down ordering\n    const allCombinations: string[][] = [];\n\n    for (let i = 1; i <= totalPossible; i++) {\n      const combination: string[] = [];\n      for (let j = 0; j < unitNames.length; j++) {\n        if (i & (1 << j)) {\n          combination.push(unitNames[j]);\n        }\n      }\n      allCombinations.push(combination);\n    }\n\n    // Sort combinations by size (largest first) for top-down approach\n    allCombinations.sort((a, b) => b.length - a.length);\n\n    console.log(`🎯 Generated all ${allCombinations.length} combinations, ordered largest to smallest`);\n    console.log(`   User requested: ${maxCombinations} combinations (all possible combinations fit within limit)`);\n    return allCombinations;\n  }\n\n  /**\n   * Generate a limited set of smart combinations when full power set is too large\n   * Strategy: Start with all units, then systematically remove units (top-down approach)\n   */\n  private generateLimitedCombinations(unitNames: string[], maxCombinations: number): string[][] {\n    const combinations: string[][] = [];\n\n    // Strategy 1: Start with ALL units (most comprehensive army)\n    combinations.push([...unitNames]);\n\n    // Strategy 2: Remove one unit at a time (n-1 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      const combination = unitNames.filter((_, index) => index !== i);\n      combinations.push(combination);\n    }\n\n    // Strategy 3: Remove two units at a time (n-2 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      for (let j = i + 1; j < unitNames.length && combinations.length < maxCombinations; j++) {\n        const combination = unitNames.filter((_, index) => index !== i && index !== j);\n        if (combination.length > 0) {\n          combinations.push(combination);\n        }\n      }\n    }\n\n    // Strategy 4: Remove three units at a time (n-3 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      for (let j = i + 1; j < unitNames.length && combinations.length < maxCombinations; j++) {\n        for (let k = j + 1; k < unitNames.length && combinations.length < maxCombinations; k++) {\n          const combination = unitNames.filter((_, index) => index !== i && index !== j && index !== k);\n          if (combination.length > 0) {\n            combinations.push(combination);\n          }\n        }\n      }\n    }\n\n    // Strategy 5: If we still have room, add some strategic smaller combinations\n    if (combinations.length < maxCombinations) {\n      // Add some mid-size combinations (half the units)\n      const halfSize = Math.floor(unitNames.length / 2);\n      for (let attempt = 0; attempt < 10 && combinations.length < maxCombinations; attempt++) {\n        const combination = this.getRandomCombination(unitNames, halfSize);\n\n        // Only add if we don't already have this combination\n        if (!combinations.some(existing =>\n          existing.length === combination.length &&\n          existing.every(unit => combination.includes(unit))\n        )) {\n          combinations.push(combination);\n        }\n      }\n\n      // Add some smaller combinations if we still have room\n      const quarterSize = Math.max(1, Math.floor(unitNames.length / 4));\n      for (let attempt = 0; attempt < 5 && combinations.length < maxCombinations; attempt++) {\n        const combination = this.getRandomCombination(unitNames, quarterSize);\n\n        // Only add if we don't already have this combination\n        if (!combinations.some(existing =>\n          existing.length === combination.length &&\n          existing.every(unit => combination.includes(unit))\n        )) {\n          combinations.push(combination);\n        }\n      }\n    }\n\n    console.log(`🎯 Generated ${combinations.length} top-down combinations from ${unitNames.length} units`);\n    console.log(`   Strategy: Started with all ${unitNames.length} units, then systematically removed units`);\n    console.log(`   User requested: ${maxCombinations} combinations (time-based limits still apply)`);\n    return combinations;\n  }\n\n  /**\n   * Get a random combination of specified size\n   */\n  private getRandomCombination(unitNames: string[], size: number): string[] {\n    const shuffled = [...unitNames].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  }\n\n  /**\n   * Test a specific unit combination using the existing stacking algorithm\n   */\n  private async testCombinationWithStackingAlgorithm(\n    unitCombination: string[],\n    constraints: DamageOptimizationConstraints,\n    allUnits: Unit[]\n  ): Promise<ArmyComposition | null> {\n    try {\n      // Create stacking optimizer with all units\n      const stackingOptimizer = new StackingOptimizer(allUnits);\n\n      // Create constraints for this specific combination\n      const stackingConstraints: OptimizationConstraints = {\n        leadershipBudget: constraints.leadershipBudget,\n        dominanceBudget: constraints.dominanceBudget,\n        mercenaryLimits: constraints.mercenaryLimits,\n        availableUnits: unitCombination\n      };\n\n      // Use the proven stacking algorithm\n      const result = await stackingOptimizer.optimizeArmy(stackingConstraints);\n\n      // Extract the best composition from the result\n      if (result.compositions && result.compositions.length > 0) {\n        return result.compositions[0]; // Return the best composition\n      }\n\n      return null;\n\n    } catch (error) {\n      console.warn(`Failed to test combination [${unitCombination.join(', ')}]:`, error);\n      return null;\n    }\n  }\n\n\n}","/**\n * Unit Type Mapping Utilities\n * Provides access to unit types for StackingGroup objects during battle simulation\n */\n\nimport { Unit } from '../types/units';\nimport { StackingGroup } from '../types/units';\n\n/**\n * Service for looking up unit types from StackingGroup unit names\n */\nexport class UnitTypeMappingService {\n  private unitLoader: any = null; // Will be injected\n\n  /**\n   * Initialize the mapping service with unit loader\n   */\n  initialize(unitLoader: any): void {\n    this.unitLoader = unitLoader;\n  }\n\n  /**\n   * Get unit types for a StackingGroup by looking up the full Unit object\n   */\n  getUnitTypes(unitName: string): string[] {\n    if (!this.unitLoader) {\n      throw new Error('Unit loader not initialized');\n    }\n\n    const unit: Unit | undefined = this.unitLoader.getUnitByName(unitName);\n    if (!unit) {\n      console.warn(`Unit not found: ${unitName}`);\n      return [];\n    }\n\n    return unit.unit_types || [];\n  }\n\n  /**\n   * Get the full Unit object for a StackingGroup\n   */\n  getUnit(unitName: string): Unit | undefined {\n    if (!this.unitLoader) {\n      throw new Error('Unit loader not initialized');\n    }\n\n    return this.unitLoader.getUnitByName(unitName);\n  }\n\n  /**\n   * Get the full Unit object with all data including attack modifiers\n   */\n  getFullUnitData(unitName: string): any {\n    return this.getUnit(unitName);\n  }\n\n  /**\n   * Check if a unit has a specific type\n   */\n  hasUnitType(unitName: string, unitType: string): boolean {\n    const types = this.getUnitTypes(unitName);\n    return types.some(type => type.toLowerCase() === unitType.toLowerCase());\n  }\n\n  /**\n   * Get all available unit types from loaded units\n   */\n  getAllUnitTypes(): string[] {\n    if (!this.unitLoader) {\n      throw new Error('Unit loader not initialized');\n    }\n\n    return this.unitLoader.getUniqueUnitTypes();\n  }\n\n  /**\n   * Validate that all units in stacking groups can be found\n   */\n  validateStackingGroups(stackingGroups: StackingGroup[]): {\n    isValid: boolean;\n    missingUnits: string[];\n    warnings: string[];\n  } {\n    const missingUnits: string[] = [];\n    const warnings: string[] = [];\n\n    for (const group of stackingGroups) {\n      const unit = this.getUnit(group.unitName);\n      if (!unit) {\n        missingUnits.push(group.unitName);\n      } else if (!unit.unit_types || unit.unit_types.length === 0) {\n        warnings.push(`Unit ${group.unitName} has no unit types defined`);\n      }\n    }\n\n    return {\n      isValid: missingUnits.length === 0,\n      missingUnits,\n      warnings\n    };\n  }\n}\n\n/**\n * Singleton instance of the unit type mapping service\n */\nexport const unitTypeMappingService = new UnitTypeMappingService();","/**\n * Enemy behavior abstractions for handling mortal vs immortal enemies\n * Following the Strategy pattern to encapsulate different enemy behaviors\n */\n\nimport { Unit } from './units';\nimport { CombatAction } from './battleSimulation';\n\n/**\n * Result of applying damage to an enemy unit\n */\nexport interface EnemyDamageResult {\n  /** Whether the enemy unit/group was eliminated */\n  eliminated: boolean;\n  /** Actual damage dealt (may be less than requested if enemy dies) */\n  actualDamage: number;\n  /** Remaining health after damage */\n  remainingHealth: number;\n  /** Remaining count after damage (undefined for immortal enemies) */\n  remainingCount?: number;\n  /** Whether this enemy unit is completely defeated */\n  isDefeated: boolean;\n}\n\n/**\n * Abstract interface for enemy behavior strategies\n * Defines how different types of enemies respond to damage and attacks\n */\nexport interface IEnemyBehavior {\n  /**\n   * Apply damage to an enemy unit\n   * @param enemy The enemy unit receiving damage\n   * @param damage Amount of damage to apply\n   * @returns Result of damage application\n   */\n  applyDamage(enemy: Unit, damage: number): EnemyDamageResult;\n\n  /**\n   * Check if enemy can still attack (has remaining units/health)\n   * @param enemy The enemy unit to check\n   * @returns Whether this enemy can still participate in battle\n   */\n  canAttack(enemy: Unit): boolean;\n\n  /**\n   * Get effective strength for attack (may be modified by remaining count)\n   * @param enemy The attacking enemy unit\n   * @returns Effective attack strength\n   */\n  getAttackStrength(enemy: Unit): number;\n\n  /**\n   * Create combat action when this enemy attacks\n   * @param enemy The attacking enemy unit\n   * @param targetGroup The player group being attacked\n   * @param turn Current battle turn\n   * @returns Combat action for the attack\n   */\n  createAttackAction(enemy: Unit, targetGroup: any, turn: number): CombatAction;\n\n  /**\n   * Create combat action when this enemy takes damage\n   * @param enemy The enemy unit taking damage\n   * @param attacker The attacking player group\n   * @param damage Amount of damage dealt\n   * @param turn Current battle turn\n   * @returns Combat action for taking damage\n   */\n  createDamageAction(enemy: Unit, attacker: any, damage: number, turn: number): CombatAction;\n\n  /**\n   * Get display name for combat log\n   * @param enemy The enemy unit\n   * @returns Display name including count information if applicable\n   */\n  getDisplayName(enemy: Unit): string;\n}\n\n/**\n * Behavior for mortal enemies with specific counts that can be killed\n */\nexport class MortalEnemyBehavior implements IEnemyBehavior {\n  \n  applyDamage(enemy: Unit, damage: number): EnemyDamageResult {\n    if (!enemy.count || enemy.count <= 0) {\n      return {\n        eliminated: false,\n        actualDamage: 0,\n        remainingHealth: 0,\n        remainingCount: 0,\n        isDefeated: true\n      };\n    }\n\n    const currentHealth = enemy.currentHealth ?? (enemy.count * enemy.health);\n    const actualDamage = Math.min(damage, currentHealth);\n    const remainingHealth = Math.max(0, currentHealth - actualDamage);\n    \n    // Calculate how many units were killed\n    const unitsKilled = Math.floor(actualDamage / enemy.health);\n    const remainingCount = Math.max(0, enemy.count - unitsKilled);\n    \n    // Update enemy state\n    enemy.currentHealth = remainingHealth;\n    enemy.count = remainingCount;\n    \n    const isDefeated = remainingCount === 0 || remainingHealth === 0;\n    \n    return {\n      eliminated: unitsKilled > 0,\n      actualDamage,\n      remainingHealth,\n      remainingCount,\n      isDefeated\n    };\n  }\n\n  canAttack(enemy: Unit): boolean {\n    return (enemy.count ?? 0) > 0 && (enemy.currentHealth ?? enemy.health) > 0;\n  }\n\n  getAttackStrength(enemy: Unit): number {\n    // For mortal enemies, strength scales with remaining units\n    const remainingCount = enemy.count ?? 1;\n    return remainingCount > 0 ? enemy.strength : 0;\n  }\n\n  createAttackAction(enemy: Unit, targetGroup: any, turn: number): CombatAction {\n    return {\n      turn,\n      attacker: this.getDisplayName(enemy),\n      target: `${targetGroup.count} ${targetGroup.unitName}`,\n      action: `attack and kill ${targetGroup.count} ${targetGroup.unitName}`,\n      eliminated: true\n    };\n  }\n\n  createDamageAction(enemy: Unit, attacker: any, damage: number, turn: number): CombatAction {\n    const unitsKilled = Math.floor(damage / enemy.health);\n    const actionText = unitsKilled > 0 \n      ? `attack ${this.getDisplayName(enemy)} and kill ${unitsKilled} units (${damage.toLocaleString()} damage)`\n      : `attack ${this.getDisplayName(enemy)} and deal ${damage.toLocaleString()} damage`;\n\n    return {\n      turn,\n      attacker: `${attacker.count} ${attacker.unitName}`,\n      target: this.getDisplayName(enemy),\n      action: actionText,\n      damageDealt: damage,\n      eliminated: false\n    };\n  }\n\n  getDisplayName(enemy: Unit): string {\n    const count = enemy.count ?? 0;\n    return count > 0 ? `${count} ${enemy.name}` : enemy.name;\n  }\n}\n\n/**\n * Behavior for immortal enemies with infinite count\n */\nexport class ImmortalEnemyBehavior implements IEnemyBehavior {\n  \n  applyDamage(enemy: Unit, damage: number): EnemyDamageResult {\n    // Immortal enemies never die, but we track damage for statistics\n    return {\n      eliminated: false,\n      actualDamage: damage,\n      remainingHealth: enemy.health, // Always full health\n      remainingCount: undefined, // Infinite\n      isDefeated: false\n    };\n  }\n\n  canAttack(enemy: Unit): boolean {\n    // Immortal enemies can always attack\n    return true;\n  }\n\n  getAttackStrength(enemy: Unit): number {\n    // Immortal enemies always have full strength\n    return enemy.strength;\n  }\n\n  createAttackAction(enemy: Unit, targetGroup: any, turn: number): CombatAction {\n    return {\n      turn,\n      attacker: this.getDisplayName(enemy),\n      target: `${targetGroup.count} ${targetGroup.unitName}`,\n      action: `attack and kill ${targetGroup.count} ${targetGroup.unitName}`,\n      eliminated: true\n    };\n  }\n\n  createDamageAction(enemy: Unit, attacker: any, damage: number, turn: number): CombatAction {\n    return {\n      turn,\n      attacker: `${attacker.count} ${attacker.unitName}`,\n      target: this.getDisplayName(enemy),\n      action: `attack ${this.getDisplayName(enemy)} and deal ${damage.toLocaleString()} damage`,\n      damageDealt: damage,\n      eliminated: false\n    };\n  }\n\n  getDisplayName(enemy: Unit): string {\n    return enemy.name; // No count for immortal enemies\n  }\n}\n\n/**\n * Factory for creating appropriate enemy behavior based on enemy type\n */\nexport class EnemyBehaviorFactory {\n  private static mortalBehavior = new MortalEnemyBehavior();\n  private static immortalBehavior = new ImmortalEnemyBehavior();\n\n  /**\n   * Get the appropriate behavior strategy for an enemy unit\n   */\n  static getBehavior(enemy: Unit): IEnemyBehavior {\n    // Check if enemy has a specific count (mortal) or is infinite (immortal)\n    if (enemy.isMortal === true || enemy.count !== undefined) {\n      return this.mortalBehavior;\n    } else {\n      return this.immortalBehavior;\n    }\n  }\n\n  /**\n   * Initialize enemy unit for battle (set up tracking properties)\n   */\n  static initializeEnemyForBattle(enemy: Unit): Unit {\n    const battleEnemy = { ...enemy };\n    \n    if (enemy.count !== undefined) {\n      // Mortal enemy with specific count\n      battleEnemy.isMortal = true;\n      battleEnemy.currentHealth = enemy.count * enemy.health;\n    } else {\n      // Immortal enemy\n      battleEnemy.isMortal = false;\n      battleEnemy.count = undefined;\n      battleEnemy.currentHealth = enemy.health;\n    }\n    \n    return battleEnemy;\n  }\n}","/**\n * Enhanced Battle Simulation Service with Enemy Units Support\n * Uses the core BattleSimulationService for all battle logic\n * Only adds enemy unit specific display and modifier calculations\n */\n\nimport {\n  IBattleSimulationService,\n  BattleConfiguration,\n  BattleResult,\n  BattleAnalysis,\n  BattleState,\n  CombatAction,\n  BattleUtils,\n  BATTLE_CONSTANTS\n} from '../types/battleSimulation';\nimport { ArmyComposition, StackingGroup, UnitUtils } from '../types/units';\nimport { EnemyUnit, EnemyUnitUtils } from '../types/enemyUnits';\nimport { BattleSimulationService } from './battleSimulation';\nimport { unitTypeMappingService } from '../utils/unitTypeMapping';\nimport { \n  IEnemyBehavior, \n  EnemyBehaviorFactory, \n  EnemyDamageResult \n} from '../types/enemyBehavior';\n\n/**\n * Enhanced battle configuration that supports specific enemy units\n */\nexport interface EnemyUnitBattleConfiguration extends Omit<BattleConfiguration, 'enemyGroupCount'> {\n  /** Specific enemy units to fight against */\n  enemyUnits: EnemyUnit[];\n  /** Whether to use enemy attack modifiers in calculations */\n  useEnemyModifiers?: boolean;\n}\n\n/**\n * Enhanced combat action that includes enemy unit details\n */\nexport interface EnemyUnitCombatAction extends CombatAction {\n  /** Enemy unit involved in the action (if applicable) */\n  enemyUnit?: EnemyUnit;\n  /** Effective strength used in the attack (including modifiers) */\n  effectiveStrength?: number;\n  /** Attack modifiers applied */\n  modifiersApplied?: Array<{ type: string; value: number }>;\n}\n\n/**\n * Enhanced battle simulation service that uses composition to leverage\n * the core battle logic while adding enemy unit specific display features\n */\nexport class EnemyUnitBattleSimulationService implements IBattleSimulationService {\n  protected unitLoader: any = null;\n  private coreBattleService: BattleSimulationService;\n\n  constructor() {\n    this.coreBattleService = new BattleSimulationService();\n  }\n\n  /**\n   * Initialize the service with unit loader\n   */\n  initialize(unitLoader: any): void {\n    this.unitLoader = unitLoader;\n    unitTypeMappingService.initialize(unitLoader);\n  }\n\n  // === DELEGATE STANDARD BATTLE METHODS TO CORE SERVICE ===\n\n  /**\n   * Standard battle simulation (delegates to core service)\n   */\n  simulateBattle(config: BattleConfiguration): BattleResult {\n    return this.coreBattleService.simulateBattle(config);\n  }\n\n  /**\n   * Standard both scenarios simulation (delegates to core service)\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis {\n    return this.coreBattleService.simulateBothScenarios(playerArmy, enemyGroupCount);\n  }\n\n  /**\n   * Calculate player attack order with modifiers against specific enemy units\n   */\n  calculatePlayerAttackOrderWithEnemies(playerGroups: StackingGroup[], enemyUnits: EnemyUnit[]): StackingGroup[] {\n    // Calculate maximum damage potential for each player group against available enemy targets\n    const playerDamageData = playerGroups.map((group, index) => {\n      const baseDamage = group.count * group.unitStrength;\n      let maxDamage = baseDamage;\n\n      try {\n        // Get player unit data to check for attack modifiers\n        const playerUnitData = this.unitLoader ? this.unitLoader.getUnitByName(group.unitName) : null;\n        \n        if (playerUnitData && playerUnitData.attack_modifiers) {\n          // Check modifiers against each enemy type\n          for (const modifier of playerUnitData.attack_modifiers) {\n            // Check if any enemy units match this modifier target type\n            const hasTargetableEnemies = enemyUnits.some(enemy =>\n              enemy.unit_types.some(type => type.toLowerCase() === modifier.target_type.toLowerCase())\n            );\n\n            if (hasTargetableEnemies) {\n              // Calculate enhanced damage with modifier\n              const bonusDamage = baseDamage * (modifier.value / 100);\n              const totalWithBonus = baseDamage + bonusDamage;\n              if (totalWithBonus > maxDamage) {\n                maxDamage = totalWithBonus;\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.warn('Unit type lookup failed for player unit:', group.unitName, error);\n      }\n\n      return { index, group, baseDamage, maxDamage };\n    });\n\n    // Sort by maximum damage potential, highest first\n    playerDamageData.sort((a, b) => b.maxDamage - a.maxDamage);\n\n    console.log('🎯 Player Attack Order by Max Damage:');\n    playerDamageData.forEach((data, order) => {\n      console.log(`  ${order + 1}. ${data.group.unitName}: ${data.maxDamage.toLocaleString()} damage`);\n      if (data.maxDamage > data.baseDamage) {\n        const bonus = data.maxDamage - data.baseDamage;\n        console.log(`     (${data.baseDamage.toLocaleString()} base + ${bonus.toLocaleString()} bonus)`);\n      }\n    });\n\n    // Return groups in optimal attack order\n    return playerDamageData.map(data => data.group);\n  }\n\n  /**\n   * Override to provide enemy-specific attack order calculation with modifiers\n   */\n  calculateEnemyAttackOrderWithUnits(enemyUnits: EnemyUnit[], playerArmy: ArmyComposition): number[] {\n    // Calculate maximum damage potential for each enemy unit against available player targets\n    const enemyDamageData = enemyUnits.map((enemy, index) => {\n      // Use total damage potential: count * strength (or just strength for immortal enemies)\n      const baseDamage = (enemy.count ?? 1) * enemy.strength;\n      let maxDamage = baseDamage;\n\n      // Calculate enhanced damage against player targets\n      if (enemy.attack_modifiers && enemy.attack_modifiers.length > 0) {\n        enemy.attack_modifiers.forEach(modifier => {\n          // Check if there are any player units this modifier can target\n          const hasTargetableUnits = playerArmy.stackingOrder.some(playerGroup => \n            this.playerUnitMatchesModifierTarget(playerGroup.unitName, modifier.target_type)\n          );\n\n          if (hasTargetableUnits) {\n            // Calculate enhanced damage with modifier\n            const bonusDamage = baseDamage * (modifier.value / 100);\n            const totalWithBonus = baseDamage + bonusDamage;\n            if (totalWithBonus > maxDamage) {\n              maxDamage = totalWithBonus;\n            }\n          }\n        });\n      }\n\n      return { index, enemy, baseDamage, maxDamage };\n    });\n\n    // Sort by maximum damage potential, highest first\n    enemyDamageData.sort((a, b) => b.maxDamage - a.maxDamage);\n\n    console.log('🎯 Enemy Attack Order by Max Damage:');\n    enemyDamageData.forEach((data, order) => {\n      console.log(`  ${order + 1}. ${data.enemy.name}: ${data.maxDamage.toLocaleString()} damage`);\n      if (data.maxDamage > data.baseDamage) {\n        const bonus = data.maxDamage - data.baseDamage;\n        console.log(`     (${data.baseDamage.toLocaleString()} base + ${bonus.toLocaleString()} bonus)`);\n      }\n    });\n\n    // Return array of indices in optimal attack order\n    return enemyDamageData.map(data => data.index);\n  }\n\n  /**\n   * Check if a player unit type matches an enemy's attack modifier target\n   */\n  private playerUnitMatchesModifierTarget(unitName: string, targetType: string): boolean {\n    // Simple pattern matching - in a real implementation this would use the unit type mapping service\n    const unitNameLower = unitName.toLowerCase();\n    const targetLower = targetType.toLowerCase();\n\n    switch (targetLower) {\n      case 'mounted':\n        return unitNameLower.includes('rider') || unitNameLower.includes('knight');\n      case 'melee':\n        return unitNameLower.includes('spearman') || unitNameLower.includes('knight') || unitNameLower.includes('guardian');\n      case 'ranged':\n        return unitNameLower.includes('archer') || unitNameLower.includes('hunter');\n      case 'flying':\n        return unitNameLower.includes('dragon') || unitNameLower.includes('phoenix') || unitNameLower.includes('griffen');\n      case 'magic':\n        return unitNameLower.includes('magic') || unitNameLower.includes('phoenix');\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Calculate attack order (delegates to core service)\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[] {\n    return this.coreBattleService.calculateAttackOrder(groups);\n  }\n\n  /**\n   * Calculate enemy target order (delegates to core service)\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[] {\n    return this.coreBattleService.calculateEnemyTargetOrder(groups);\n  }\n\n  /**\n   * Should battle end (delegates to core service)\n   */\n  shouldBattleEnd(state: BattleState): boolean {\n    return this.coreBattleService.shouldBattleEnd(state);\n  }\n\n  /**\n   * Process turn (delegates to core service)\n   */\n  processTurn(state: BattleState, playerGoesFirst: boolean): void {\n    return this.coreBattleService.processTurn(state, playerGoesFirst);\n  }\n\n  // === ENEMY UNIT SPECIFIC BATTLE METHODS ===\n\n  /**\n   * Simulate battle with specific enemy units\n   * Supports both mortal (finite count) and immortal (infinite) enemies\n   */\n  simulateBattleWithEnemyUnits(config: EnemyUnitBattleConfiguration): BattleResult {\n    // Validate configuration\n    this.validateEnemyUnitBattleConfiguration(config);\n\n    console.log('🎯 Enemy Battle Simulation Debug:', {\n      playerGoesFirst: config.playerGoesFirst,\n      playerGroups: config.playerArmy.stackingOrder?.length || 0,\n      enemyUnits: config.enemyUnits.length,\n      useEnemyModifiers: config.useEnemyModifiers,\n      mortalEnemies: config.enemyUnits.filter(e => UnitUtils.isMortalEnemy(e)).length,\n      immortalEnemies: config.enemyUnits.filter(e => UnitUtils.isImmortalEnemy(e)).length\n    });\n\n    // Initialize enemies for battle with proper tracking\n    const battleEnemies = config.enemyUnits.map(enemy => \n      EnemyBehaviorFactory.initializeEnemyForBattle(enemy)\n    );\n\n    // Calculate optimal enemy attack order based on damage potential\n    const optimalEnemyOrder = this.calculateEnemyAttackOrderWithUnits(battleEnemies, config.playerArmy);\n    \n    // Reorder enemy units for optimal attack sequence\n    const reorderedEnemyUnits = optimalEnemyOrder.map(index => battleEnemies[index]);\n\n    // Check if we have any mortal enemies (changes battle dynamics)\n    const hasMortalEnemies = reorderedEnemyUnits.some(enemy => UnitUtils.isMortalEnemy(enemy));\n\n    if (hasMortalEnemies) {\n      // Use enhanced battle simulation that supports enemy mortality\n      return this.simulateMortalEnemyBattle(config, reorderedEnemyUnits);\n    } else {\n      // Use standard battle simulation for immortal enemies (backward compatibility)\n      const standardConfig: BattleConfiguration = {\n        playerArmy: config.playerArmy,\n        enemyGroupCount: reorderedEnemyUnits.length,\n        playerGoesFirst: config.playerGoesFirst\n      };\n\n      const standardResult = this.coreBattleService.simulateBattle(standardConfig);\n      \n      // Enhance the combat log with enemy unit specific information\n      // Use reordered enemy units so the combat log enhancement maps correctly\n      const enhancedCombatLog = this.enhanceCombatLogWithEnemyUnits(\n        standardResult.combatLog,\n        reorderedEnemyUnits,\n        config.playerArmy,\n        config.useEnemyModifiers !== false\n      );\n\n      return {\n        ...standardResult,\n        combatLog: enhancedCombatLog\n      };\n    }\n  }\n\n  /**\n   * Enhanced battle simulation that supports mortal enemies\n   */\n  private simulateMortalEnemyBattle(config: EnemyUnitBattleConfiguration, battleEnemies: EnemyUnit[]): BattleResult {\n    // Create enhanced battle state with enemy tracking\n    const state: BattleState = {\n      currentTurn: 0,\n      playerGroups: [...config.playerArmy.stackingOrder],\n      enemyGroupCount: battleEnemies.length, // Legacy compatibility\n      enemyUnits: [...battleEnemies], // Track individual enemies\n      totalDamageDealt: 0,\n      totalEnemiesEliminated: 0,\n      battleEnded: false,\n      combatLog: []\n    };\n\n    // Run enhanced battle loop\n    while (!this.shouldMortalEnemyBattleEnd(state) && state.currentTurn < BATTLE_CONSTANTS.MAX_BATTLE_TURNS) {\n      this.processMortalEnemyTurn(state, config.playerGoesFirst, config.useEnemyModifiers !== false);\n    }\n\n    // Determine battle outcome\n    const mortalEnemiesDefeated = state.enemyUnits?.filter(enemy => \n      UnitUtils.isMortalEnemy(enemy) && !EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n    ).length ?? 0;\n\n    const allMortalEnemiesDefeated = state.enemyUnits?.every(enemy => \n      UnitUtils.isImmortalEnemy(enemy) || !EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n    ) ?? false;\n\n    let outcome: 'player_eliminated' | 'player_victory' | 'stalemate';\n    if (state.playerGroups.length === 0) {\n      outcome = 'player_eliminated';\n    } else if (allMortalEnemiesDefeated) {\n      outcome = 'player_victory';\n    } else {\n      outcome = 'stalemate';\n    }\n\n    // Convert EnemyUnitBattleConfiguration to BattleConfiguration for core service\n    const coreConfig: BattleConfiguration = {\n      playerArmy: config.playerArmy,\n      enemyGroupCount: battleEnemies.length,\n      playerGoesFirst: config.playerGoesFirst\n    };\n    \n    const standardResult = this.coreBattleService.simulateBattle(coreConfig);\n\n    return {\n      outcome,\n      combatLog: state.combatLog,\n      totalDamageDealtToEnemies: state.totalDamageDealt,\n      battleDuration: state.currentTurn,\n      playerSurvivalTurns: state.currentTurn,\n      scenario: config.playerGoesFirst ? 'best_case' : 'worst_case',\n      configuration: {\n        playerArmy: config.playerArmy,\n        enemyGroupCount: battleEnemies.length,\n        playerGoesFirst: config.playerGoesFirst\n      },\n      statistics: BattleUtils.calculateBattleStatistics(state.combatLog, state.totalDamageDealt),\n      totalEnemiesEliminated: state.totalEnemiesEliminated,\n      mortalEnemiesDefeated\n    };\n  }\n\n  /**\n   * Check if mortal enemy battle should end\n   */\n  private shouldMortalEnemyBattleEnd(state: BattleState): boolean {\n    // Battle ends if all players are dead\n    if (state.playerGroups.length === 0) {\n      return true;\n    }\n\n    // Battle ends if all mortal enemies are defeated (immortal enemies continue)\n    if (state.enemyUnits) {\n      const activeMortalEnemies = state.enemyUnits.filter(enemy => \n        UnitUtils.isMortalEnemy(enemy) && EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n      );\n      \n      const activeImmortalEnemies = state.enemyUnits.filter(enemy => \n        UnitUtils.isImmortalEnemy(enemy) && EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n      );\n\n      // If no mortal enemies remain and we only had mortal enemies, battle ends in victory\n      if (activeMortalEnemies.length === 0 && activeImmortalEnemies.length === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Process a single turn in mortal enemy battle with correct dynamic attack order\n   */\n  private processMortalEnemyTurn(state: BattleState, playerGoesFirst: boolean, useModifiers: boolean): void {\n    if (!state.enemyUnits || state.enemyUnits.length === 0) return;\n\n    // Track which units have attacked this turn\n    const playerUnitsAttacked = new Set<string>();\n    const enemyUnitsAttacked = new Set<number>();\n    \n    const activeEnemies = state.enemyUnits.filter(enemy => \n      EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n    );\n    \n    const maxPlayerTurns = state.playerGroups.length;\n    const maxEnemyTurns = activeEnemies.length;\n    const totalPossibleActions = maxPlayerTurns + maxEnemyTurns;\n    \n    let playerTurnsTaken = 0;\n    let enemyTurnsTaken = 0;\n    \n    for (let actionIndex = 0; actionIndex < totalPossibleActions && !this.shouldMortalEnemyBattleEnd(state); actionIndex++) {\n      const isPlayerAction = playerGoesFirst ? (actionIndex % 2 === 0) : (actionIndex % 2 === 1);\n      \n      if (isPlayerAction && playerTurnsTaken < maxPlayerTurns && state.playerGroups.length > 0) {\n        // Player's turn: select best available unit dynamically\n        const availablePlayerGroups = state.playerGroups.filter(group => \n          !playerUnitsAttacked.has(group.unitName)\n        );\n        \n        if (availablePlayerGroups.length > 0) {\n          const bestPlayerGroup = this.selectBestPlayerAttacker(availablePlayerGroups, state.enemyUnits, useModifiers);\n          this.processDynamicPlayerAttack(state, bestPlayerGroup, useModifiers);\n          playerUnitsAttacked.add(bestPlayerGroup.unitName);\n          playerTurnsTaken++;\n        }\n        \n      } else if (!isPlayerAction && enemyTurnsTaken < maxEnemyTurns && state.playerGroups.length > 0) {\n        // Enemy's turn: select best available enemy dynamically\n        const availableEnemies = state.enemyUnits.filter((enemy, index) => \n          EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy) && !enemyUnitsAttacked.has(index)\n        );\n        \n        if (availableEnemies.length > 0) {\n          const bestEnemyIndex = this.selectBestEnemyAttacker(availableEnemies, state.playerGroups);\n          this.processDynamicEnemyAttack(state, bestEnemyIndex, useModifiers);\n          enemyUnitsAttacked.add(bestEnemyIndex);\n          enemyTurnsTaken++;\n        }\n      }\n\n      // Safety check\n      if (state.playerGroups.length === 0 || this.shouldMortalEnemyBattleEnd(state)) {\n        break;\n      }\n    }\n    \n    state.currentTurn++;\n  }\n\n  /**\n   * Process player attack in mortal enemy battle\n   */\n  private processMortalPlayerAttack(state: BattleState, attackIndex: number, useModifiers: boolean): void {\n    if (!state.enemyUnits || state.playerGroups.length === 0) return;\n\n    // Get player attack order with modifiers against specific enemies\n    const attackOrder = useModifiers && state.enemyUnits \n      ? this.calculatePlayerAttackOrderWithEnemies(state.playerGroups, state.enemyUnits)\n      : this.calculateAttackOrder(state.playerGroups);\n    if (attackOrder.length === 0) return;\n    \n    const attackingGroup = attackOrder[0];\n    \n    // Get target enemy (cycle through available enemies)\n    const availableEnemies = state.enemyUnits.filter(enemy => \n      EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n    );\n    \n    if (availableEnemies.length === 0) return;\n    \n    const targetEnemy = availableEnemies[attackIndex % availableEnemies.length];\n    const enemyBehavior = EnemyBehaviorFactory.getBehavior(targetEnemy);\n    \n    // Calculate damage\n    const baseDamage = BattleUtils.calculateDamageDealt(attackingGroup);\n    let finalDamage = baseDamage;\n    \n    // Apply player unit modifiers if enabled\n    if (useModifiers) {\n      // Enhanced damage calculation would go here\n      // For now, use base damage\n    }\n    \n    // Apply damage to enemy\n    const damageResult = enemyBehavior.applyDamage(targetEnemy, finalDamage);\n    \n    // Create combat action\n    const action = enemyBehavior.createDamageAction(targetEnemy, attackingGroup, damageResult.actualDamage, state.currentTurn);\n    state.combatLog.push(action);\n    state.totalDamageDealt += damageResult.actualDamage;\n    \n    // Track eliminated enemies\n    if (damageResult.isDefeated) {\n      state.totalEnemiesEliminated = (state.totalEnemiesEliminated ?? 0) + 1;\n    }\n  }\n\n  /**\n   * Process enemy attack in mortal enemy battle\n   */\n  private processMortalEnemyAttack(state: BattleState, attackIndex: number, useModifiers: boolean): void {\n    if (!state.enemyUnits || state.playerGroups.length === 0) return;\n\n    // Get active enemies in attack order\n    const activeEnemies = state.enemyUnits.filter(enemy => \n      EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n    );\n    \n    if (activeEnemies.length === 0 || attackIndex >= activeEnemies.length) return;\n    \n    const attackingEnemy = activeEnemies[attackIndex];\n    const enemyBehavior = EnemyBehaviorFactory.getBehavior(attackingEnemy);\n    \n    // Get target (highest health player group)\n    const targetOrder = this.calculateEnemyTargetOrder(state.playerGroups);\n    if (targetOrder.length === 0) return;\n    \n    const targetGroup = targetOrder[0];\n    \n    // Create attack action\n    const action = enemyBehavior.createAttackAction(attackingEnemy, targetGroup, state.currentTurn);\n    state.combatLog.push(action);\n    \n    // Remove eliminated player group\n    const groupIndex = state.playerGroups.findIndex(group => \n      group.unitName === targetGroup.unitName && \n      group.count === targetGroup.count && \n      group.totalHealth === targetGroup.totalHealth\n    );\n    \n    if (groupIndex !== -1) {\n      state.playerGroups.splice(groupIndex, 1);\n    }\n  }\n\n  /**\n   * Select the best player attacker from available units based on damage potential\n   */\n  private selectBestPlayerAttacker(availableGroups: StackingGroup[], enemyUnits: EnemyUnit[], useModifiers: boolean): StackingGroup {\n    if (!useModifiers) {\n      // Simple case: highest base damage\n      return availableGroups.reduce((best, current) => \n        (current.count * current.unitStrength) > (best.count * best.unitStrength) ? current : best\n      );\n    }\n\n    // Calculate damage potential including modifiers for each available group\n    const groupDamageData = availableGroups.map(group => {\n      const baseDamage = group.count * group.unitStrength;\n      let maxDamage = baseDamage;\n\n      try {\n        const playerUnitData = this.unitLoader ? this.unitLoader.getUnitByName(group.unitName) : null;\n        \n        if (playerUnitData && playerUnitData.attack_modifiers) {\n          for (const modifier of playerUnitData.attack_modifiers) {\n            const hasTargetableEnemies = enemyUnits.some(enemy =>\n              enemy.unit_types.some(type => type.toLowerCase() === modifier.target_type.toLowerCase())\n            );\n\n            if (hasTargetableEnemies) {\n              const bonusDamage = baseDamage * (modifier.value / 100);\n              const totalWithBonus = baseDamage + bonusDamage;\n              if (totalWithBonus > maxDamage) {\n                maxDamage = totalWithBonus;\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.warn('Unit lookup failed for player unit:', group.unitName, error);\n      }\n\n      return { group, maxDamage };\n    });\n\n    // Return the group with highest damage potential\n    return groupDamageData.reduce((best, current) => \n      current.maxDamage > best.maxDamage ? current : best\n    ).group;\n  }\n\n  /**\n   * Select the best enemy attacker from available enemies based on damage potential\n   */\n  private selectBestEnemyAttacker(availableEnemies: EnemyUnit[], playerGroups: StackingGroup[]): number {\n    // Calculate damage potential for each available enemy\n    const enemyDamageData = availableEnemies.map(enemy => {\n      const baseDamage = (enemy.count ?? 1) * enemy.strength;\n      let maxDamage = baseDamage;\n\n      if (enemy.attack_modifiers && enemy.attack_modifiers.length > 0) {\n        enemy.attack_modifiers.forEach(modifier => {\n          const hasTargetableUnits = playerGroups.some(playerGroup => \n            this.playerUnitMatchesModifierTarget(playerGroup.unitName, modifier.target_type)\n          );\n\n          if (hasTargetableUnits) {\n            const bonusDamage = baseDamage * (modifier.value / 100);\n            const totalWithBonus = baseDamage + bonusDamage;\n            if (totalWithBonus > maxDamage) {\n              maxDamage = totalWithBonus;\n            }\n          }\n        });\n      }\n\n      return { enemy, maxDamage };\n    });\n\n    // Find the enemy with highest damage potential and return its original index\n    const bestEnemy = enemyDamageData.reduce((best, current) => \n      current.maxDamage > best.maxDamage ? current : best\n    ).enemy;\n\n    // Find the original index in the full enemy units array\n    // Note: This is a simplified approach - in a full implementation we'd track indices more carefully\n    return 0; // For now, return index 0 - this needs to be improved\n  }\n\n  /**\n   * Process dynamic player attack (similar to existing but cleaner)\n   */\n  private processDynamicPlayerAttack(state: BattleState, attackingGroup: StackingGroup, useModifiers: boolean): void {\n    if (!state.enemyUnits || state.enemyUnits.length === 0) return;\n\n    // Select target enemy (cycle through available enemies)\n    const availableEnemies = state.enemyUnits.filter(enemy => \n      EnemyBehaviorFactory.getBehavior(enemy).canAttack(enemy)\n    );\n    \n    if (availableEnemies.length === 0) return;\n    \n    const targetEnemy = availableEnemies[0]; // For now, target first available enemy\n    const enemyBehavior = EnemyBehaviorFactory.getBehavior(targetEnemy);\n    \n    // Calculate damage with modifiers\n    let finalDamage = attackingGroup.count * attackingGroup.unitStrength;\n    \n    if (useModifiers) {\n      // Apply player unit modifiers if applicable\n      try {\n        const playerUnitData = this.unitLoader ? this.unitLoader.getUnitByName(attackingGroup.unitName) : null;\n        \n        if (playerUnitData && playerUnitData.attack_modifiers) {\n          for (const modifier of playerUnitData.attack_modifiers) {\n            if (targetEnemy.unit_types.some(type => type.toLowerCase() === modifier.target_type.toLowerCase())) {\n              const bonusDamage = finalDamage * (modifier.value / 100);\n              finalDamage += bonusDamage;\n              break; // Apply only the first matching modifier\n            }\n          }\n        }\n      } catch (error) {\n        console.warn('Unit lookup failed for damage calculation:', attackingGroup.unitName, error);\n      }\n    }\n    \n    // Apply damage to enemy\n    const damageResult = enemyBehavior.applyDamage(targetEnemy, finalDamage);\n    \n    // Create combat action\n    const action = enemyBehavior.createDamageAction(targetEnemy, attackingGroup, damageResult.actualDamage, state.currentTurn);\n    state.combatLog.push(action);\n    state.totalDamageDealt += damageResult.actualDamage;\n    \n    if (damageResult.isDefeated) {\n      state.totalEnemiesEliminated = (state.totalEnemiesEliminated ?? 0) + 1;\n    }\n  }\n\n  /**\n   * Process dynamic enemy attack (similar to existing but cleaner)\n   */\n  private processDynamicEnemyAttack(state: BattleState, enemyIndex: number, useModifiers: boolean): void {\n    if (!state.enemyUnits || state.playerGroups.length === 0 || enemyIndex >= state.enemyUnits.length) return;\n\n    const attackingEnemy = state.enemyUnits[enemyIndex];\n    const enemyBehavior = EnemyBehaviorFactory.getBehavior(attackingEnemy);\n    \n    // Get target (highest health player group)\n    const targetOrder = this.calculateEnemyTargetOrder(state.playerGroups);\n    if (targetOrder.length === 0) return;\n    \n    const targetGroup = targetOrder[0];\n    \n    // Create attack action\n    const action = enemyBehavior.createAttackAction(attackingEnemy, targetGroup, state.currentTurn);\n    state.combatLog.push(action);\n    \n    // Remove eliminated player group\n    const groupIndex = state.playerGroups.findIndex(group => \n      group.unitName === targetGroup.unitName && \n      group.count === targetGroup.count && \n      group.totalHealth === targetGroup.totalHealth\n    );\n    \n    if (groupIndex !== -1) {\n      state.playerGroups.splice(groupIndex, 1);\n    }\n  }\n\n  /**\n   * Simulate both scenarios with enemy units\n   */\n  simulateBothScenariosWithEnemyUnits(playerArmy: ArmyComposition, enemyUnits: EnemyUnit[], useEnemyModifiers: boolean = true): BattleAnalysis {\n    console.log('🔄 simulateBothScenariosWithEnemyUnits called with:', {\n      playerStackingGroups: playerArmy.stackingOrder?.length || 0,\n      enemyUnitsCount: enemyUnits.length,\n      useEnemyModifiers\n    });\n\n    // Use centralized validation\n    const validation = UnitUtils.validateBattleConfiguration({\n      playerArmy,\n      enemyUnits\n    });\n\n    if (!validation.isValid) {\n      throw new Error(validation.errors[0]); // Throw first error\n    }\n\n    // Clear core service caches to ensure clean state between scenarios\n    this.coreBattleService.attackOrderCache?.clear?.();\n    this.coreBattleService.targetOrderCache?.clear?.();\n\n    // Best case: player goes first\n    const bestCaseConfig: EnemyUnitBattleConfiguration = {\n      playerArmy,\n      enemyUnits,\n      playerGoesFirst: true,\n      useEnemyModifiers\n    };\n    const bestCase = this.simulateBattleWithEnemyUnits(bestCaseConfig);\n\n    // Clear caches between scenarios to prevent contamination\n    this.coreBattleService.attackOrderCache?.clear?.();\n    this.coreBattleService.targetOrderCache?.clear?.();\n\n    // Worst case: enemy goes first\n    const worstCaseConfig: EnemyUnitBattleConfiguration = {\n      playerArmy: JSON.parse(JSON.stringify(playerArmy)),\n      enemyUnits: JSON.parse(JSON.stringify(enemyUnits)),\n      playerGoesFirst: false,\n      useEnemyModifiers\n    };\n    const worstCase = this.simulateBattleWithEnemyUnits(worstCaseConfig);\n\n    // Calculate comparison metrics\n    const comparison = {\n      damageDifference: bestCase.totalDamageDealtToEnemies - worstCase.totalDamageDealtToEnemies,\n      survivalDifference: bestCase.playerSurvivalTurns - worstCase.playerSurvivalTurns,\n      averageDamage: (bestCase.totalDamageDealtToEnemies + worstCase.totalDamageDealtToEnemies) / 2,\n      averageSurvival: (bestCase.playerSurvivalTurns + worstCase.playerSurvivalTurns) / 2\n    };\n\n    return {\n      bestCase,\n      worstCase,\n      comparison\n    };\n  }\n\n  // === PRIVATE HELPER METHODS ===\n\n  /**\n   * Enhance combat log with enemy unit specific information\n   * This replaces generic enemy names with specific enemy unit names and adds modifier info\n   */\n  private enhanceCombatLogWithEnemyUnits(\n    standardCombatLog: CombatAction[], \n    enemyUnits: EnemyUnit[], \n    playerArmy: ArmyComposition,\n    useEnemyModifiers: boolean\n  ): EnemyUnitCombatAction[] {\n    \n    return standardCombatLog.map((action, index) => {\n      const enhancedAction: EnemyUnitCombatAction = { ...action };\n\n      // Determine if this is a player attack or enemy attack\n      const isPlayerAttack = !action.eliminated;\n      const isEnemyAttack = action.eliminated;\n\n      if (isPlayerAttack) {\n        // Player attacking enemy - enhance with player unit modifiers and enemy unit names\n        const targetEnemyIndex = this.extractEnemyGroupIndex(action.target);\n        if (targetEnemyIndex >= 0 && targetEnemyIndex < enemyUnits.length) {\n          const targetEnemy = enemyUnits[targetEnemyIndex];\n          enhancedAction.enemyUnit = targetEnemy;\n\n          // Calculate enhanced damage with player unit modifiers\n          const attackingUnitName = this.extractUnitNameFromAttacker(action.attacker);\n          const baseDamage = action.damageDealt || 0;\n          \n          if (useEnemyModifiers && attackingUnitName) {\n            const { enhancedDamage, modifiersApplied } = this.calculatePlayerModifiers(\n              attackingUnitName, \n              targetEnemy, \n              baseDamage\n            );\n            \n            // Update damage and add modifier info\n            if (enhancedDamage !== baseDamage) {\n              enhancedAction.damageDealt = enhancedDamage;\n              enhancedAction.modifiersApplied = modifiersApplied;\n              \n              // Update action text with modifier info\n              const enemyUnitsKilled = Math.floor(enhancedDamage / targetEnemy.health);\n              let actionText = `attack ${targetEnemy.name} and deal ${enhancedDamage.toLocaleString()} damage`;\n              if (enemyUnitsKilled > 0) {\n                actionText += ` (${enemyUnitsKilled} ${targetEnemy.name}${enemyUnitsKilled > 1 ? 's' : ''} killed)`;\n              }\n              \n              if (modifiersApplied.length > 0) {\n                const modifierText = modifiersApplied.map(m => {\n                  const percentage = Math.round((m.value / baseDamage) * 100);\n                  return `+${Math.round(m.value)} bonus damage (+${percentage}%) vs ${m.type}`;\n                }).join(', ');\n                actionText += ` (${modifierText})`;\n              }\n              \n              enhancedAction.action = actionText;\n            } else {\n              // Just update the target name\n              enhancedAction.target = targetEnemy.name;\n              enhancedAction.action = action.action.replace(/Enemy Group \\d+/, targetEnemy.name);\n            }\n          } else {\n            // Just update the target name without modifiers\n            enhancedAction.target = targetEnemy.name;\n            enhancedAction.action = action.action.replace(/Enemy Group \\d+/, targetEnemy.name);\n          }\n        }\n      } else if (isEnemyAttack) {\n        // Enemy attacking player - enhance with enemy unit modifiers and names\n        const attackingEnemyIndex = this.extractEnemyGroupIndex(action.attacker);\n        if (attackingEnemyIndex >= 0 && attackingEnemyIndex < enemyUnits.length) {\n          const attackingEnemy = enemyUnits[attackingEnemyIndex];\n          enhancedAction.enemyUnit = attackingEnemy;\n          enhancedAction.effectiveStrength = attackingEnemy.strength;\n\n          if (useEnemyModifiers && attackingEnemy.attack_modifiers) {\n            // Calculate enemy modifiers against player unit\n            const targetUnitName = this.extractUnitNameFromTarget(action.target);\n            if (targetUnitName) {\n              const { enhancedStrength, modifiersApplied } = this.calculateEnemyModifiers(\n                attackingEnemy,\n                targetUnitName\n              );\n              \n              if (enhancedStrength !== attackingEnemy.strength) {\n                enhancedAction.effectiveStrength = enhancedStrength;\n                enhancedAction.modifiersApplied = modifiersApplied;\n                \n                // Update action text with modifier info\n                let actionText = `attack and kill ${action.target}`;\n                if (modifiersApplied.length > 0) {\n                  const modifierText = modifiersApplied.map(m => {\n                    const percentage = Math.round((m.value / attackingEnemy.strength) * 100);\n                    return `+${Math.round(m.value)} bonus damage (+${percentage}%) vs ${m.type}`;\n                  }).join(', ');\n                  actionText += ` (${modifierText})`;\n                }\n                enhancedAction.action = actionText;\n              }\n            }\n          }\n\n          // Update attacker name\n          enhancedAction.attacker = attackingEnemy.name;\n        }\n      }\n\n      return enhancedAction;\n    });\n  }\n\n  /**\n   * Calculate player unit modifiers against enemy unit\n   */\n  private calculatePlayerModifiers(\n    attackingUnitName: string, \n    targetEnemy: EnemyUnit, \n    baseDamage: number\n  ): { enhancedDamage: number; modifiersApplied: Array<{ type: string; value: number }> } {\n    let enhancedDamage = baseDamage;\n    const modifiersApplied: Array<{ type: string; value: number }> = [];\n\n    try {\n      const playerUnitData = this.unitLoader ? this.unitLoader.getUnitByName(attackingUnitName) : null;\n      \n      if (playerUnitData && playerUnitData.attack_modifiers) {\n        for (const modifier of playerUnitData.attack_modifiers) {\n          // Check if this modifier applies to the target enemy\n          if (targetEnemy.unit_types.some(type => type.toLowerCase() === modifier.target_type.toLowerCase())) {\n            // Apply the modifier as a percentage of base damage\n            const bonusDamage = baseDamage * (modifier.value / 100);\n            enhancedDamage += bonusDamage;\n            modifiersApplied.push({ type: modifier.target_type, value: bonusDamage });\n          }\n        }\n      }\n    } catch (error) {\n      console.warn('Unit type lookup failed for player unit:', attackingUnitName, error);\n    }\n\n    return { enhancedDamage, modifiersApplied };\n  }\n\n  /**\n   * Calculate enemy unit modifiers against player unit\n   */\n  private calculateEnemyModifiers(\n    attackingEnemy: EnemyUnit,\n    targetUnitName: string\n  ): { enhancedStrength: number; modifiersApplied: Array<{ type: string; value: number }> } {\n    let enhancedStrength = attackingEnemy.strength;\n    const modifiersApplied: Array<{ type: string; value: number }> = [];\n\n    try {\n      const targetUnitTypes = unitTypeMappingService.getUnitTypes(targetUnitName);\n      \n      for (const modifier of attackingEnemy.attack_modifiers || []) {\n        if (targetUnitTypes.includes(modifier.target_type)) {\n          // Apply the modifier as a percentage of base strength\n          const bonusStrength = attackingEnemy.strength * (modifier.value / 100);\n          enhancedStrength += bonusStrength;\n          modifiersApplied.push({ type: modifier.target_type, value: bonusStrength });\n        }\n      }\n    } catch (error) {\n      console.warn('Unit type lookup failed for target unit:', targetUnitName, error);\n    }\n\n    return { enhancedStrength, modifiersApplied };\n  }\n\n  /**\n   * Extract enemy group index from action text like \"Enemy Group 2\"\n   */\n  private extractEnemyGroupIndex(text: string): number {\n    const match = text.match(/Enemy Group (\\d+)/);\n    return match ? parseInt(match[1]) - 1 : -1; // Convert to 0-based index\n  }\n\n  /**\n   * Extract unit name from attacker text like \"1720 ARCHER I\"\n   */\n  private extractUnitNameFromAttacker(attacker: string): string | null {\n    // Remove the count at the beginning to get unit name\n    const match = attacker.match(/^\\d+\\s+(.+)$/);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Extract unit name from target text like \"1720 ARCHER I\"\n   */\n  private extractUnitNameFromTarget(target: string): string | null {\n    // Remove the count at the beginning to get unit name\n    const match = target.match(/^\\d+\\s+(.+)$/);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Validate enemy unit battle configuration\n   */\n  private validateEnemyUnitBattleConfiguration(config: EnemyUnitBattleConfiguration): void {\n    if (!config) {\n      throw new Error('Battle configuration is required');\n    }\n\n    // Use centralized validation\n    const validation = UnitUtils.validateBattleConfiguration({\n      playerArmy: config.playerArmy,\n      enemyUnits: config.enemyUnits\n    });\n\n    if (!validation.isValid) {\n      throw new Error(validation.errors[0]); // Throw first error\n    }\n\n    // Validate each player unit group\n    for (const group of config.playerArmy.stackingOrder) {\n      if (!group.unitName || group.unitName.trim() === '') {\n        throw new Error('All unit groups must have a valid name');\n      }\n\n      if (group.count <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have a positive count`);\n      }\n\n      if (group.unitStrength <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive strength`);\n      }\n\n      if (group.totalHealth <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive health`);\n      }\n    }\n\n    // Validate each enemy unit\n    for (const enemyUnit of config.enemyUnits) {\n      if (!enemyUnit.name || enemyUnit.name.trim() === '') {\n        throw new Error('All enemy units must have a valid name');\n      }\n\n      if (enemyUnit.health <= 0) {\n        throw new Error(`Enemy unit \"${enemyUnit.name}\" must have positive health`);\n      }\n\n      if (enemyUnit.strength < 0) {\n        throw new Error(`Enemy unit \"${enemyUnit.name}\" cannot have negative strength`);\n      }\n    }\n  }\n\n  /**\n   * Get enemy unit battle statistics\n   */\n  getEnemyUnitBattleStatistics(result: BattleResult): any {\n    const baseStats = BattleUtils.calculateBattleStatistics(result.combatLog, result.totalDamageDealtToEnemies);\n    \n    // Enhanced statistics for enemy unit battles\n    const enemyUnitActions = result.combatLog.filter(action => \n      (action as EnemyUnitCombatAction).enemyUnit !== undefined\n    ) as EnemyUnitCombatAction[];\n\n    const damageByEnemyUnit: Record<string, number> = {};\n    const attacksByEnemyUnit: Record<string, number> = {};\n    const modifiersUsed: Record<string, number> = {};\n\n    enemyUnitActions.forEach(action => {\n      if (action.enemyUnit) {\n        const enemyName = action.enemyUnit.name;\n        \n        if (action.eliminated) {\n          // Enemy attack\n          attacksByEnemyUnit[enemyName] = (attacksByEnemyUnit[enemyName] || 0) + 1;\n          \n          // Track modifier usage\n          if (action.modifiersApplied) {\n            action.modifiersApplied.forEach(modifier => {\n              const key = `${enemyName} vs ${modifier.type}`;\n              modifiersUsed[key] = (modifiersUsed[key] || 0) + modifier.value;\n            });\n          }\n        } else {\n          // Player attack on enemy\n          const damage = action.damageDealt || 0;\n          damageByEnemyUnit[enemyName] = (damageByEnemyUnit[enemyName] || 0) + damage;\n        }\n      }\n    });\n\n    return {\n      ...baseStats,\n      damageByEnemyUnit,\n      attacksByEnemyUnit,\n      modifiersUsed,\n      totalEnemyUnitsInvolved: Object.keys(attacksByEnemyUnit).length,\n      totalModifierApplications: Object.keys(modifiersUsed).length\n    };\n  }\n}","/**\n * Attack Order Optimization Types\n * Defines interfaces and types for intelligent attack order optimization\n * supporting both player and enemy unit optimization\n */\n\nimport { StackingGroup } from './units';\nimport { EnemyUnit } from './enemyUnits';\n\n/**\n * Represents any unit that can participate in combat\n */\nexport type CombatUnit = StackingGroup | EnemyUnit;\n\n/**\n * Identifies the side a unit belongs to\n */\nexport type UnitSide = 'player' | 'enemy';\n\n/**\n * Detailed damage calculation between an attacker and target\n */\nexport interface DamageCalculation {\n  /** The attacking unit */\n  attacker: CombatUnit;\n  /** The target unit being attacked */\n  target: CombatUnit;\n  /** Base damage before modifiers */\n  baseDamage: number;\n  /** Final effective damage after all modifiers */\n  effectiveDamage: number;\n  /** List of modifiers applied to this calculation */\n  modifiersApplied: Array<{\n    /** Type of modifier (e.g., \"vs Melee\", \"vs Flying\") */\n    type: string;\n    /** Modifier value (positive = bonus, negative = penalty) */\n    value: number;\n    /** Source of the modifier */\n    source: string;\n  }>;\n  /** Which side this attacker belongs to */\n  attackerSide: UnitSide;\n  /** Which side this target belongs to */\n  targetSide: UnitSide;\n}\n\n/**\n * Matrix of damage calculations for all attacker/target combinations\n */\nexport interface DamageMatrix {\n  /** All damage calculations organized by attacker index then target index */\n  calculations: DamageCalculation[][];\n  /** List of all attacking units in order */\n  attackers: CombatUnit[];\n  /** List of all target units in order */\n  targets: CombatUnit[];\n  /** Total time taken to calculate the matrix in milliseconds */\n  calculationTimeMs: number;\n}\n\n/**\n * Result of attack order optimization for one side\n */\nexport interface AttackOrderOptimization {\n  /** Original attack order before optimization */\n  originalOrder: CombatUnit[];\n  /** Optimized attack order for maximum damage */\n  optimizedOrder: CombatUnit[];\n  /** Damage matrix used for optimization */\n  damageMatrix: DamageMatrix;\n  /** Total damage with original order */\n  originalTotalDamage: number;\n  /** Total damage with optimized order */\n  optimizedTotalDamage: number;\n  /** Percentage improvement from optimization */\n  improvementPercentage: number;\n  /** Which side this optimization applies to */\n  side: UnitSide;\n  /** Time taken for optimization in milliseconds */\n  optimizationTimeMs: number;\n}\n\n/**\n * Complete bidirectional optimization result\n */\nexport interface BidirectionalOptimization {\n  /** Player side optimization */\n  playerOptimization: AttackOrderOptimization;\n  /** Enemy side optimization */\n  enemyOptimization: AttackOrderOptimization;\n  /** Combined improvement metrics */\n  combinedMetrics: {\n    /** Total damage improvement for both sides */\n    totalDamageImprovement: number;\n    /** Average improvement percentage */\n    averageImprovementPercentage: number;\n    /** Total optimization time */\n    totalOptimizationTimeMs: number;\n  };\n}\n\n/**\n * Configuration options for attack order optimization\n */\nexport interface OptimizationConfig {\n  /** Whether to optimize player attack order */\n  optimizePlayerOrder: boolean;\n  /** Whether to optimize enemy attack order */\n  optimizeEnemyOrder: boolean;\n  /** Whether to apply unit-vs-unit modifiers */\n  useUnitModifiers: boolean;\n  /** Maximum calculation time before timeout (ms) */\n  maxCalculationTimeMs: number;\n  /** Whether to use caching for repeated calculations */\n  enableCaching: boolean;\n  /** Algorithm to use for optimization */\n  algorithm: 'greedy' | 'dynamic' | 'heuristic';\n}\n\n/**\n * Unit type mapping for modifier calculations\n */\nexport interface UnitTypeMapping {\n  /** Unit name to unit types mapping */\n  unitTypes: Record<string, string[]>;\n  /** Reverse mapping: type to units that have it */\n  typeToUnits: Record<string, string[]>;\n  /** Confidence score for each mapping (0-1) */\n  confidence: Record<string, number>;\n}\n\n/**\n * Modifier application result\n */\nexport interface ModifierApplication {\n  /** Base value before modifier */\n  baseValue: number;\n  /** Final value after modifier */\n  modifiedValue: number;\n  /** List of modifiers that were applied */\n  appliedModifiers: Array<{\n    type: string;\n    value: number;\n    source: string;\n  }>;\n  /** Whether any modifiers were applied */\n  hasModifiers: boolean;\n}\n\n/**\n * Performance metrics for optimization\n */\nexport interface OptimizationMetrics {\n  /** Total units processed */\n  totalUnitsProcessed: number;\n  /** Total damage calculations performed */\n  totalCalculations: number;\n  /** Cache hit rate (0-1) */\n  cacheHitRate: number;\n  /** Memory usage in bytes */\n  memoryUsageBytes: number;\n  /** Calculation time breakdown */\n  timeBreakdown: {\n    damageCalculation: number;\n    matrixGeneration: number;\n    optimization: number;\n    caching: number;\n  };\n}\n\n/**\n * Utility functions for working with combat units\n */\nexport class CombatUnitUtils {\n  /**\n   * Check if a combat unit is a player unit (StackingGroup)\n   */\n  static isPlayerUnit(unit: CombatUnit): unit is StackingGroup {\n    return 'unitName' in unit && 'count' in unit;\n  }\n\n  /**\n   * Check if a combat unit is an enemy unit\n   */\n  static isEnemyUnit(unit: CombatUnit): unit is EnemyUnit {\n    return 'name' in unit && 'unit_types' in unit && !('count' in unit);\n  }\n\n  /**\n   * Get the name of a combat unit\n   */\n  static getUnitName(unit: CombatUnit): string {\n    if (CombatUnitUtils.isPlayerUnit(unit)) {\n      return unit.unitName;\n    } else {\n      return unit.name;\n    }\n  }\n\n  /**\n   * Get the unit types of a combat unit\n   */\n  static getUnitTypes(unit: CombatUnit, typeMapping?: UnitTypeMapping): string[] {\n    if (CombatUnitUtils.isEnemyUnit(unit)) {\n      return unit.unit_types;\n    } else if (typeMapping) {\n      return typeMapping.unitTypes[unit.unitName] || [];\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Get the base strength of a combat unit\n   */\n  static getBaseStrength(unit: CombatUnit): number {\n    if (CombatUnitUtils.isPlayerUnit(unit)) {\n      return unit.unitStrength;\n    } else {\n      return unit.strength;\n    }\n  }\n\n  /**\n   * Get the health of a combat unit\n   */\n  static getHealth(unit: CombatUnit): number {\n    if (CombatUnitUtils.isPlayerUnit(unit)) {\n      return unit.totalHealth;\n    } else {\n      return unit.health;\n    }\n  }\n\n  /**\n   * Calculate total health for a combat unit (considering count for player units)\n   */\n  static calculateTotalHealth(unit: CombatUnit): number {\n    if (CombatUnitUtils.isPlayerUnit(unit)) {\n      return unit.totalHealth * unit.count;\n    } else {\n      return unit.health;\n    }\n  }\n\n  /**\n   * Calculate base damage for a combat unit\n   */\n  static calculateBaseDamage(unit: CombatUnit): number {\n    if (CombatUnitUtils.isPlayerUnit(unit)) {\n      return unit.count * unit.unitStrength;\n    } else {\n      return unit.strength;\n    }\n  }\n\n  /**\n   * Format a combat unit for display\n   */\n  static formatForDisplay(unit: CombatUnit): string {\n    if (CombatUnitUtils.isPlayerUnit(unit)) {\n      return `${unit.count} ${unit.unitName}`;\n    } else {\n      return unit.name;\n    }\n  }\n}\n\n/**\n * Default optimization configuration\n */\nexport const DEFAULT_OPTIMIZATION_CONFIG: OptimizationConfig = {\n  optimizePlayerOrder: true,\n  optimizeEnemyOrder: true,\n  useUnitModifiers: true,\n  maxCalculationTimeMs: 5000,\n  enableCaching: true,\n  algorithm: 'greedy'\n};\n\n/**\n * Constants for attack optimization\n */\nexport const ATTACK_OPTIMIZATION_CONSTANTS = {\n  /** Maximum number of units to optimize before using heuristics */\n  MAX_UNITS_FOR_EXACT_OPTIMIZATION: 50,\n  /** Cache size limit for damage calculations */\n  MAX_CACHE_SIZE: 10000,\n  /** Default timeout for optimization calculations */\n  DEFAULT_TIMEOUT_MS: 5000,\n  /** Minimum improvement percentage to consider optimization worthwhile */\n  MIN_IMPROVEMENT_THRESHOLD: 0.1\n} as const;","/**\n * Attack Order Optimizer Service\n * Implements intelligent attack order optimization based on maximum damage calculations\n * Supports both player and enemy unit optimization with unit-vs-unit modifiers\n */\n\nimport {\n  CombatUnit,\n  UnitSide,\n  DamageCalculation,\n  DamageMatrix,\n  AttackOrderOptimization,\n  BidirectionalOptimization,\n  OptimizationConfig,\n  ModifierApplication,\n  OptimizationMetrics,\n  CombatUnitUtils,\n  DEFAULT_OPTIMIZATION_CONFIG,\n  ATTACK_OPTIMIZATION_CONSTANTS\n} from '../types/attackOptimization';\nimport { StackingGroup } from '../types/units';\nimport { EnemyUnit, EnemyUnitUtils } from '../types/enemyUnits';\nimport { unitTypeMappingService } from '../utils/unitTypeMapping';\n\nexport class AttackOrderOptimizerService {\n  private damageCalculationCache = new Map<string, number>();\n  private modifierCache = new Map<string, ModifierApplication>();\n  private metrics: OptimizationMetrics = this.initializeMetrics();\n\n  /**\n   * Initialize performance metrics\n   */\n  private initializeMetrics(): OptimizationMetrics {\n    return {\n      totalUnitsProcessed: 0,\n      totalCalculations: 0,\n      cacheHitRate: 0,\n      memoryUsageBytes: 0,\n      timeBreakdown: {\n        damageCalculation: 0,\n        matrixGeneration: 0,\n        optimization: 0,\n        caching: 0\n      }\n    };\n  }\n\n  /**\n   * Optimize attack order for both player and enemy units\n   */\n  async optimizeBidirectional(\n    playerUnits: StackingGroup[],\n    enemyUnits: EnemyUnit[],\n    config: OptimizationConfig = DEFAULT_OPTIMIZATION_CONFIG\n  ): Promise<BidirectionalOptimization> {\n    const startTime = performance.now();\n\n    // Reset metrics for this optimization\n    this.metrics = this.initializeMetrics();\n\n    let playerOptimization: AttackOrderOptimization;\n    let enemyOptimization: AttackOrderOptimization;\n\n    // Optimize player attack order (attacking enemies)\n    if (config.optimizePlayerOrder) {\n      playerOptimization = await this.optimizeAttackOrder(\n        playerUnits,\n        enemyUnits,\n        'player',\n        config\n      );\n    } else {\n      playerOptimization = this.createNoOptimizationResult(playerUnits, enemyUnits, 'player');\n    }\n\n    // Optimize enemy attack order (attacking players)\n    if (config.optimizeEnemyOrder) {\n      enemyOptimization = await this.optimizeAttackOrder(\n        enemyUnits,\n        playerUnits,\n        'enemy',\n        config\n      );\n    } else {\n      enemyOptimization = this.createNoOptimizationResult(enemyUnits, playerUnits, 'enemy');\n    }\n\n    const totalTime = performance.now() - startTime;\n\n    return {\n      playerOptimization,\n      enemyOptimization,\n      combinedMetrics: {\n        totalDamageImprovement: \n          playerOptimization.optimizedTotalDamage - playerOptimization.originalTotalDamage +\n          enemyOptimization.optimizedTotalDamage - enemyOptimization.originalTotalDamage,\n        averageImprovementPercentage: \n          (playerOptimization.improvementPercentage + enemyOptimization.improvementPercentage) / 2,\n        totalOptimizationTimeMs: totalTime\n      }\n    };\n  }\n\n  /**\n   * Optimize attack order for one side\n   */\n  private async optimizeAttackOrder(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    side: UnitSide,\n    config: OptimizationConfig\n  ): Promise<AttackOrderOptimization> {\n    const startTime = performance.now();\n\n    // Generate damage matrix\n    const damageMatrix = await this.generateDamageMatrix(attackers, targets, side, config);\n\n    // Calculate original total damage\n    const originalTotalDamage = this.calculateTotalDamage(attackers, targets, damageMatrix);\n\n    // Optimize attack order\n    const optimizedOrder = this.optimizeOrder(attackers, targets, damageMatrix, config);\n\n    // Calculate optimized total damage\n    const optimizedTotalDamage = this.calculateTotalDamage(optimizedOrder, targets, damageMatrix);\n\n    const optimizationTime = performance.now() - startTime;\n    const improvementPercentage = originalTotalDamage > 0 \n      ? ((optimizedTotalDamage - originalTotalDamage) / originalTotalDamage) * 100 \n      : 0;\n\n    return {\n      originalOrder: [...attackers],\n      optimizedOrder,\n      damageMatrix,\n      originalTotalDamage,\n      optimizedTotalDamage,\n      improvementPercentage,\n      side,\n      optimizationTimeMs: optimizationTime\n    };\n  }\n\n  /**\n   * Generate damage matrix for all attacker/target combinations\n   */\n  private async generateDamageMatrix(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    attackerSide: UnitSide,\n    config: OptimizationConfig\n  ): Promise<DamageMatrix> {\n    const startTime = performance.now();\n    const calculations: DamageCalculation[][] = [];\n\n    for (let i = 0; i < attackers.length; i++) {\n      calculations[i] = [];\n      for (let j = 0; j < targets.length; j++) {\n        const attacker = attackers[i];\n        const target = targets[j];\n        \n        calculations[i][j] = await this.calculateEffectiveDamage(\n          attacker,\n          target,\n          attackerSide,\n          attackerSide === 'player' ? 'enemy' : 'player',\n          config\n        );\n        \n        this.metrics.totalCalculations++;\n      }\n    }\n\n    const calculationTime = performance.now() - startTime;\n    this.metrics.timeBreakdown.matrixGeneration += calculationTime;\n\n    return {\n      calculations,\n      attackers: [...attackers],\n      targets: [...targets],\n      calculationTimeMs: calculationTime\n    };\n  }\n\n  /**\n   * Calculate effective damage between an attacker and target\n   */\n  private async calculateEffectiveDamage(\n    attacker: CombatUnit,\n    target: CombatUnit,\n    attackerSide: UnitSide,\n    targetSide: UnitSide,\n    config: OptimizationConfig\n  ): Promise<DamageCalculation> {\n    const startTime = performance.now();\n\n    // Calculate base damage\n    const baseDamage = CombatUnitUtils.calculateBaseDamage(attacker);\n\n    let effectiveDamage = baseDamage;\n    const modifiersApplied: Array<{ type: string; value: number; source: string }> = [];\n\n    // Apply unit-vs-unit modifiers if enabled\n    if (config.useUnitModifiers) {\n      const modifierResult = await this.applyUnitModifiers(attacker, target, baseDamage);\n      effectiveDamage = modifierResult.modifiedValue;\n      modifiersApplied.push(...modifierResult.appliedModifiers);\n    }\n\n    // Cap effective damage to target's health pool\n    // Units cannot take more damage than their total health\n    const targetHealth = CombatUnitUtils.calculateTotalHealth(target);\n    const cappedEffectiveDamage = Math.min(effectiveDamage, targetHealth);\n\n    this.metrics.timeBreakdown.damageCalculation += performance.now() - startTime;\n\n    return {\n      attacker,\n      target,\n      baseDamage,\n      effectiveDamage: cappedEffectiveDamage,\n      modifiersApplied,\n      attackerSide,\n      targetSide\n    };\n  }\n\n  /**\n   * Apply unit-vs-unit modifiers to damage calculation\n   */\n  private async applyUnitModifiers(\n    attacker: CombatUnit,\n    target: CombatUnit,\n    baseDamage: number\n  ): Promise<ModifierApplication> {\n    // Create cache key\n    const attackerName = CombatUnitUtils.getUnitName(attacker);\n    const targetName = CombatUnitUtils.getUnitName(target);\n    const cacheKey = `${attackerName}:${targetName}:${baseDamage}`;\n\n    // Check cache first\n    if (this.modifierCache.has(cacheKey)) {\n      return this.modifierCache.get(cacheKey)!;\n    }\n\n    let modifiedValue = baseDamage;\n    const appliedModifiers: Array<{ type: string; value: number; source: string }> = [];\n\n    // Get attacker and target types\n    const targetTypes = CombatUnitUtils.isEnemyUnit(target)\n      ? target.unit_types\n      : this.getPlayerUnitTypes(target.unitName);\n\n    // Apply modifiers based on unit types\n    if (CombatUnitUtils.isEnemyUnit(attacker)) {\n      // Enemy attacking player - use enemy's attack modifiers\n      const enemyUnit = attacker as EnemyUnit;\n      if (enemyUnit.attack_modifiers) {\n        for (const modifier of enemyUnit.attack_modifiers) {\n          // Check if target has the type this modifier affects\n          if (targetTypes.some(type => type.toLowerCase() === modifier.target_type.toLowerCase())) {\n            // Apply percentage modifier: value is percentage increase\n            // modifier.value is already the bonus damage amount (e.g., 56000 means +56000 damage)\n            const bonusDamage = modifier.value;\n            modifiedValue += bonusDamage;\n            appliedModifiers.push({\n              type: `vs ${modifier.target_type}`,\n              value: bonusDamage,\n              source: enemyUnit.name\n            });\n          }\n        }\n      }\n    } else if (CombatUnitUtils.isEnemyUnit(target)) {\n      // Player attacking enemy - use player's attack modifiers\n      const playerUnit = await this.getPlayerUnitData(attacker.unitName);\n      if (playerUnit && playerUnit.attack_modifiers) {\n        for (const modifier of playerUnit.attack_modifiers) {\n          // Check if target has the type this modifier affects\n          if (targetTypes.some(type => type.toLowerCase() === modifier.target_type.toLowerCase())) {\n            // Apply percentage modifier: value is already the bonus damage amount\n            const bonusDamage = modifier.value;\n            modifiedValue += bonusDamage;\n            appliedModifiers.push({\n              type: `vs ${modifier.target_type}`,\n              value: bonusDamage,\n              source: attacker.unitName\n            });\n          }\n        }\n      }\n    }\n\n    // Ensure damage doesn't go negative\n    modifiedValue = Math.max(0, modifiedValue);\n\n    const result: ModifierApplication = {\n      baseValue: baseDamage,\n      modifiedValue,\n      appliedModifiers,\n      hasModifiers: appliedModifiers.length > 0\n    };\n\n    // Cache the result\n    if (this.modifierCache.size < ATTACK_OPTIMIZATION_CONSTANTS.MAX_CACHE_SIZE) {\n      this.modifierCache.set(cacheKey, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * Optimize the attack order using the specified algorithm\n   */\n  private optimizeOrder(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    damageMatrix: DamageMatrix,\n    config: OptimizationConfig\n  ): CombatUnit[] {\n    const startTime = performance.now();\n\n    let optimizedOrder: CombatUnit[];\n\n    switch (config.algorithm) {\n      case 'greedy':\n        optimizedOrder = this.greedyOptimization(attackers, targets, damageMatrix);\n        break;\n      case 'dynamic':\n        optimizedOrder = this.dynamicOptimization(attackers, targets, damageMatrix);\n        break;\n      case 'heuristic':\n        optimizedOrder = this.heuristicOptimization(attackers, targets, damageMatrix);\n        break;\n      default:\n        optimizedOrder = this.greedyOptimization(attackers, targets, damageMatrix);\n    }\n\n    this.metrics.timeBreakdown.optimization += performance.now() - startTime;\n    return optimizedOrder;\n  }\n\n  /**\n   * Greedy optimization: always select the unit that deals maximum damage\n   */\n  private greedyOptimization(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    damageMatrix: DamageMatrix\n  ): CombatUnit[] {\n    const optimizedOrder: CombatUnit[] = [];\n    const remainingAttackers = [...attackers];\n\n    while (remainingAttackers.length > 0) {\n      let maxDamage = -1;\n      let bestAttackerIndex = 0;\n\n      // Find the attacker that deals maximum damage to any target\n      for (let i = 0; i < remainingAttackers.length; i++) {\n        const attackerIndex = attackers.indexOf(remainingAttackers[i]);\n        \n        // Calculate total damage this attacker would deal to all targets\n        let totalDamage = 0;\n        for (let j = 0; j < targets.length; j++) {\n          totalDamage += damageMatrix.calculations[attackerIndex][j].effectiveDamage;\n        }\n\n        if (totalDamage > maxDamage) {\n          maxDamage = totalDamage;\n          bestAttackerIndex = i;\n        }\n      }\n\n      // Add the best attacker to optimized order and remove from remaining\n      optimizedOrder.push(remainingAttackers[bestAttackerIndex]);\n      remainingAttackers.splice(bestAttackerIndex, 1);\n    }\n\n    return optimizedOrder;\n  }\n\n  /**\n   * Dynamic optimization: consider target elimination and remaining health\n   */\n  private dynamicOptimization(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    damageMatrix: DamageMatrix\n  ): CombatUnit[] {\n    // For now, fall back to greedy optimization\n    // This could be enhanced with more sophisticated algorithms\n    return this.greedyOptimization(attackers, targets, damageMatrix);\n  }\n\n  /**\n   * Heuristic optimization: use simple rules for large armies\n   */\n  private heuristicOptimization(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    damageMatrix: DamageMatrix\n  ): CombatUnit[] {\n    // For large armies, use a simpler heuristic approach\n    if (attackers.length > ATTACK_OPTIMIZATION_CONSTANTS.MAX_UNITS_FOR_EXACT_OPTIMIZATION) {\n      // Sort by base damage (simple but fast)\n      return [...attackers].sort((a, b) => \n        CombatUnitUtils.calculateBaseDamage(b) - CombatUnitUtils.calculateBaseDamage(a)\n      );\n    } else {\n      // Use greedy for smaller armies\n      return this.greedyOptimization(attackers, targets, damageMatrix);\n    }\n  }\n\n  /**\n   * Calculate total damage for a given attack order\n   */\n  private calculateTotalDamage(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    damageMatrix: DamageMatrix\n  ): number {\n    let totalDamage = 0;\n\n    for (let i = 0; i < attackers.length; i++) {\n      const attackerIndex = damageMatrix.attackers.indexOf(attackers[i]);\n      if (attackerIndex >= 0) {\n        for (let j = 0; j < targets.length; j++) {\n          totalDamage += damageMatrix.calculations[attackerIndex][j].effectiveDamage;\n        }\n      }\n    }\n\n    return totalDamage;\n  }\n\n  /**\n   * Create a no-optimization result (original order)\n   */\n  private createNoOptimizationResult(\n    attackers: CombatUnit[],\n    targets: CombatUnit[],\n    side: UnitSide\n  ): AttackOrderOptimization {\n    const emptyMatrix: DamageMatrix = {\n      calculations: [],\n      attackers: [...attackers],\n      targets: [...targets],\n      calculationTimeMs: 0\n    };\n\n    return {\n      originalOrder: [...attackers],\n      optimizedOrder: [...attackers],\n      damageMatrix: emptyMatrix,\n      originalTotalDamage: 0,\n      optimizedTotalDamage: 0,\n      improvementPercentage: 0,\n      side,\n      optimizationTimeMs: 0\n    };\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getMetrics(): OptimizationMetrics {\n    // Calculate cache hit rate\n    const totalCacheAccess = this.metrics.totalCalculations;\n    const cacheHits = this.damageCalculationCache.size + this.modifierCache.size;\n    this.metrics.cacheHitRate = totalCacheAccess > 0 ? cacheHits / totalCacheAccess : 0;\n\n    // Estimate memory usage\n    this.metrics.memoryUsageBytes = \n      (this.damageCalculationCache.size * 64) + // Rough estimate for cache entries\n      (this.modifierCache.size * 128);\n\n    return { ...this.metrics };\n  }\n\n  /**\n   * Clear all caches\n   */\n  clearCache(): void {\n    this.damageCalculationCache.clear();\n    this.modifierCache.clear();\n  }\n\n  /**\n   * Get unit types for a player unit by looking up the full Unit object\n   */\n  private getPlayerUnitTypes(unitName: string): string[] {\n    return unitTypeMappingService.getUnitTypes(unitName);\n  }\n\n  /**\n   * Get full player unit data including attack modifiers\n   */\n  private async getPlayerUnitData(unitName: string): Promise<any> {\n    return unitTypeMappingService.getFullUnitData(unitName);\n  }\n\n  /**\n   * Initialize the service with unit loader\n   */\n  initialize(unitLoader: any): void {\n    unitTypeMappingService.initialize(unitLoader);\n  }\n}\n\n/**\n * Singleton instance of the attack order optimizer service\n */\nexport const attackOrderOptimizerService = new AttackOrderOptimizerService();","/**\n * Optimized Battle Simulation Service\n * Integrates intelligent attack order optimization with existing battle simulation\n * Supports both basic enemy groups and specific enemy units with bidirectional optimization\n */\n\nimport {\n  IBattleSimulationService,\n  BattleConfiguration,\n  BattleResult,\n  BattleAnalysis,\n  BattleState,\n  CombatAction,\n  BattleUtils,\n  BATTLE_CONSTANTS\n} from '../types/battleSimulation';\nimport { ArmyComposition, StackingGroup } from '../types/units';\nimport { EnemyUnit } from '../types/enemyUnits';\nimport { BattleSimulationService } from './battleSimulation';\nimport { EnemyUnitBattleSimulationService, EnemyUnitBattleConfiguration } from './enemyBattleSimulation';\nimport { attackOrderOptimizerService } from './attackOrderOptimizer';\nimport { unitTypeMappingService } from '../utils/unitTypeMapping';\nimport {\n  OptimizationConfig,\n  BidirectionalOptimization,\n  DEFAULT_OPTIMIZATION_CONFIG,\n  CombatUnitUtils\n} from '../types/attackOptimization';\n\n/**\n * Enhanced battle configuration with optimization options\n */\nexport interface OptimizedBattleConfiguration extends BattleConfiguration {\n  /** Attack order optimization configuration */\n  optimizationConfig?: OptimizationConfig;\n  /** Whether to use attack order optimization */\n  useOptimization?: boolean;\n}\n\n/**\n * Enhanced enemy unit battle configuration with optimization\n */\nexport interface OptimizedEnemyUnitBattleConfiguration extends EnemyUnitBattleConfiguration {\n  /** Attack order optimization configuration */\n  optimizationConfig?: OptimizationConfig;\n  /** Whether to use attack order optimization */\n  useOptimization?: boolean;\n}\n\n/**\n * Enhanced battle result with optimization data\n */\nexport interface OptimizedBattleResult extends BattleResult {\n  /** Optimization results if optimization was used */\n  optimizationResult?: BidirectionalOptimization;\n  /** Whether optimization was applied */\n  optimizationUsed: boolean;\n  /** Performance metrics from optimization */\n  optimizationMetrics?: any;\n}\n\nexport class OptimizedBattleSimulationService extends EnemyUnitBattleSimulationService {\n  private optimizationCache = new Map<string, BidirectionalOptimization>();\n\n  /**\n   * Initialize the service with unit loader\n   */\n  initialize(unitLoader: any): void {\n    super.initialize(unitLoader);\n    attackOrderOptimizerService.initialize(unitLoader);\n  }\n\n  /**\n   * Simulate battle with optimization support (synchronous version)\n   */\n  simulateOptimizedBattle(config: OptimizedBattleConfiguration): OptimizedBattleResult {\n    // If optimization is disabled, fall back to standard simulation\n    if (!config.useOptimization) {\n      const standardResult = this.simulateBattle(config);\n      return {\n        ...standardResult,\n        optimizationUsed: false\n      };\n    }\n\n    // Create abstract enemy units for optimization\n    const abstractEnemyUnits: EnemyUnit[] = Array.from({ length: config.enemyGroupCount }, (_, i) => ({\n      name: `Enemy Group ${i + 1}`,\n      unit_types: ['Generic'],\n      health: 1000000, // High health since enemies don't die in this system\n      strength: 1000,   // Generic strength\n      attack_modifiers: []\n    }));\n\n    return this.simulateOptimizedBattleWithEnemyUnits({\n      ...config,\n      enemyUnits: abstractEnemyUnits,\n      optimizationConfig: config.optimizationConfig || DEFAULT_OPTIMIZATION_CONFIG,\n      useOptimization: true\n    });\n  }\n\n  /**\n   * Simulate battle with specific enemy units and optimization (synchronous version)\n   */\n  simulateOptimizedBattleWithEnemyUnits(config: OptimizedEnemyUnitBattleConfiguration): OptimizedBattleResult {\n    // If optimization is disabled, fall back to standard enemy unit simulation\n    if (!config.useOptimization) {\n      const standardResult = this.simulateBattleWithEnemyUnits(config);\n      return {\n        ...standardResult,\n        optimizationUsed: false\n      };\n    }\n\n    const optimizationConfig = config.optimizationConfig || DEFAULT_OPTIMIZATION_CONFIG;\n\n    // Create cache key for optimization\n    const cacheKey = this.createOptimizationCacheKey(config.playerArmy.stackingOrder, config.enemyUnits, optimizationConfig);\n\n    // Check cache first\n    let optimizationResult: BidirectionalOptimization | undefined;\n    if (this.optimizationCache.has(cacheKey)) {\n      optimizationResult = this.optimizationCache.get(cacheKey);\n    } else {\n      // Perform optimization analysis (synchronous fallback)\n      try {\n        // For now, we'll use a simplified optimization that doesn't require async\n        optimizationResult = this.performSynchronousOptimization(\n          config.playerArmy.stackingOrder,\n          config.enemyUnits,\n          optimizationConfig\n        );\n        \n        // Cache the result\n        if (this.optimizationCache.size < 100) { // Limit cache size\n          this.optimizationCache.set(cacheKey, optimizationResult);\n        }\n      } catch (error) {\n        console.warn('Attack order optimization failed, falling back to standard simulation:', error);\n        const standardResult = this.simulateBattleWithEnemyUnits(config);\n        return {\n          ...standardResult,\n          optimizationUsed: false\n        };\n      }\n    }\n\n    // Run simulation with optimized attack orders\n    const optimizedConfig: EnemyUnitBattleConfiguration = {\n      ...config,\n      playerArmy: {\n        ...config.playerArmy,\n        stackingOrder: optimizationResult?.playerOptimization.optimizedOrder as StackingGroup[] || config.playerArmy.stackingOrder\n      }\n    };\n\n    // Simulate with optimized configuration\n    const battleResult = this.simulateBattleWithEnemyUnits(optimizedConfig);\n\n    // Get optimization metrics\n    const optimizationMetrics = attackOrderOptimizerService.getMetrics();\n\n    return {\n      ...battleResult,\n      optimizationResult,\n      optimizationUsed: true,\n      optimizationMetrics\n    };\n  }\n\n  /**\n   * Perform synchronous optimization (simplified version)\n   */\n  private performSynchronousOptimization(\n    playerUnits: StackingGroup[],\n    enemyUnits: EnemyUnit[],\n    config: OptimizationConfig\n  ): BidirectionalOptimization {\n    // Simplified optimization that works synchronously\n    // This is a basic implementation that sorts by damage potential\n\n    const playerOptimization = this.optimizePlayerOrder(playerUnits, enemyUnits, config);\n    const enemyOptimization = this.optimizeEnemyOrder(enemyUnits, playerUnits, config);\n\n    return {\n      playerOptimization,\n      enemyOptimization,\n      combinedMetrics: {\n        totalDamageImprovement: \n          playerOptimization.optimizedTotalDamage - playerOptimization.originalTotalDamage +\n          enemyOptimization.optimizedTotalDamage - enemyOptimization.originalTotalDamage,\n        averageImprovementPercentage: \n          (playerOptimization.improvementPercentage + enemyOptimization.improvementPercentage) / 2,\n        totalOptimizationTimeMs: \n          playerOptimization.optimizationTimeMs + enemyOptimization.optimizationTimeMs\n      }\n    };\n  }\n\n  /**\n   * Optimize player attack order (simplified synchronous version)\n   */\n  private optimizePlayerOrder(\n    playerUnits: StackingGroup[],\n    enemyUnits: EnemyUnit[],\n    config: OptimizationConfig\n  ): any {\n    const startTime = performance.now();\n\n    if (!config.optimizePlayerOrder) {\n      return this.createNoOptimizationResult(playerUnits, 'player', startTime);\n    }\n\n    // Simple optimization: sort by total damage potential\n    const optimizedOrder = [...playerUnits].sort((a, b) => {\n      const damageA = this.calculateSimpleDamage(a, enemyUnits);\n      const damageB = this.calculateSimpleDamage(b, enemyUnits);\n      return damageB - damageA;\n    });\n\n    const originalTotalDamage = this.calculateTotalSimpleDamage(playerUnits, enemyUnits);\n    const optimizedTotalDamage = this.calculateTotalSimpleDamage(optimizedOrder, enemyUnits);\n    const improvementPercentage = originalTotalDamage > 0 \n      ? ((optimizedTotalDamage - originalTotalDamage) / originalTotalDamage) * 100 \n      : 0;\n\n    return {\n      originalOrder: [...playerUnits],\n      optimizedOrder,\n      damageMatrix: { calculations: [], attackers: [], targets: [], calculationTimeMs: 0 },\n      originalTotalDamage,\n      optimizedTotalDamage,\n      improvementPercentage,\n      side: 'player',\n      optimizationTimeMs: performance.now() - startTime\n    };\n  }\n\n  /**\n   * Optimize enemy attack order (simplified synchronous version)\n   */\n  private optimizeEnemyOrder(\n    enemyUnits: EnemyUnit[],\n    playerUnits: StackingGroup[],\n    config: OptimizationConfig\n  ): any {\n    const startTime = performance.now();\n\n    if (!config.optimizeEnemyOrder) {\n      return this.createNoOptimizationResult(enemyUnits, 'enemy', startTime);\n    }\n\n    // Simple optimization: sort by strength\n    const optimizedOrder = [...enemyUnits].sort((a, b) => b.strength - a.strength);\n\n    const originalTotalDamage = enemyUnits.reduce((total, unit) => total + unit.strength, 0);\n    const optimizedTotalDamage = optimizedOrder.reduce((total, unit) => total + unit.strength, 0);\n    const improvementPercentage = 0; // Same total damage, just different order\n\n    return {\n      originalOrder: [...enemyUnits],\n      optimizedOrder,\n      damageMatrix: { calculations: [], attackers: [], targets: [], calculationTimeMs: 0 },\n      originalTotalDamage,\n      optimizedTotalDamage,\n      improvementPercentage,\n      side: 'enemy',\n      optimizationTimeMs: performance.now() - startTime\n    };\n  }\n\n  /**\n   * Calculate simple damage for a player unit against all enemies\n   */\n  private calculateSimpleDamage(playerUnit: StackingGroup, enemyUnits: EnemyUnit[]): number {\n    const baseDamage = playerUnit.count * playerUnit.unitStrength;\n    \n    // Apply simple modifiers based on unit types\n    let totalDamage = 0;\n    for (const enemy of enemyUnits) {\n      let effectiveDamage = baseDamage;\n      \n      // Get player unit data to access attack modifiers\n      const playerUnitData = this.unitLoader ? this.unitLoader.getUnitByName(playerUnit.unitName) : null;\n      \n      // Apply player unit attack modifiers (offensive bonuses)\n      if (playerUnitData && playerUnitData.attack_modifiers) {\n        for (const modifier of playerUnitData.attack_modifiers) {\n          if (enemy.unit_types.some(type => type.toLowerCase() === modifier.target_type.toLowerCase())) {\n            // Apply player's offensive modifier against this enemy type\n            effectiveDamage += modifier.value * playerUnit.count;\n          }\n        }\n      }\n      \n      totalDamage += Math.max(0, effectiveDamage);\n    }\n    \n    return totalDamage;\n  }\n\n  /**\n   * Calculate total simple damage for all units\n   */\n  private calculateTotalSimpleDamage(units: StackingGroup[], enemyUnits: EnemyUnit[]): number {\n    return units.reduce((total, unit) => total + this.calculateSimpleDamage(unit, enemyUnits), 0);\n  }\n\n  /**\n   * Create a no-optimization result\n   */\n  private createNoOptimizationResult(units: any[], side: string, startTime: number): any {\n    return {\n      originalOrder: [...units],\n      optimizedOrder: [...units],\n      damageMatrix: { calculations: [], attackers: [], targets: [], calculationTimeMs: 0 },\n      originalTotalDamage: 0,\n      optimizedTotalDamage: 0,\n      improvementPercentage: 0,\n      side,\n      optimizationTimeMs: performance.now() - startTime\n    };\n  }\n\n  /**\n   * Create cache key for optimization\n   */\n  private createOptimizationCacheKey(\n    playerUnits: StackingGroup[],\n    enemyUnits: EnemyUnit[],\n    config: OptimizationConfig\n  ): string {\n    const playerKey = playerUnits.map(u => `${u.unitName}:${u.count}:${u.unitStrength}`).join('|');\n    const enemyKey = enemyUnits.map(u => `${u.name}:${u.strength}`).join('|');\n    const configKey = `${config.optimizePlayerOrder}:${config.optimizeEnemyOrder}:${config.useUnitModifiers}`;\n    return `${playerKey}::${enemyKey}::${configKey}`;\n  }\n\n  /**\n   * Enhanced attack order calculation with optimization\n   */\n  calculateOptimizedAttackOrder(\n    groups: StackingGroup[],\n    enemyUnits?: EnemyUnit[],\n    config: OptimizationConfig = DEFAULT_OPTIMIZATION_CONFIG\n  ): StackingGroup[] {\n    // If optimization is disabled or no enemy units provided, use standard calculation\n    if (!config.optimizePlayerOrder || !enemyUnits || enemyUnits.length === 0) {\n      return this.calculateAttackOrder(groups);\n    }\n\n    try {\n      // Use simplified optimization\n      const optimization = this.optimizePlayerOrder(groups, enemyUnits, config);\n      return optimization.optimizedOrder;\n    } catch (error) {\n      console.warn('Attack order optimization failed, using standard calculation:', error);\n      return this.calculateAttackOrder(groups);\n    }\n  }\n\n  /**\n   * Get optimization comparison between standard and optimized approaches\n   */\n  compareOptimizationBenefit(\n    playerArmy: ArmyComposition,\n    enemyUnits: EnemyUnit[],\n    config: OptimizationConfig = DEFAULT_OPTIMIZATION_CONFIG\n  ): {\n    standardResult: BattleResult;\n    optimizedResult: OptimizedBattleResult;\n    improvement: {\n      damageIncrease: number;\n      damageIncreasePercentage: number;\n      survivalIncrease: number;\n      optimizationTimeMs: number;\n    };\n  } {\n    // Run standard simulation\n    const standardConfig: EnemyUnitBattleConfiguration = {\n      playerArmy,\n      enemyUnits,\n      playerGoesFirst: true,\n      useEnemyModifiers: true\n    };\n    const standardResult = this.simulateBattleWithEnemyUnits(standardConfig);\n\n    // Run optimized simulation\n    const optimizedConfig: OptimizedEnemyUnitBattleConfiguration = {\n      ...standardConfig,\n      useOptimization: true,\n      optimizationConfig: config\n    };\n    const optimizedResult = this.simulateOptimizedBattleWithEnemyUnits(optimizedConfig);\n\n    // Calculate improvement metrics\n    const damageIncrease = optimizedResult.totalDamageDealtToEnemies - standardResult.totalDamageDealtToEnemies;\n    const damageIncreasePercentage = standardResult.totalDamageDealtToEnemies > 0 \n      ? (damageIncrease / standardResult.totalDamageDealtToEnemies) * 100 \n      : 0;\n    const survivalIncrease = optimizedResult.playerSurvivalTurns - standardResult.playerSurvivalTurns;\n    const optimizationTimeMs = optimizedResult.optimizationResult?.combinedMetrics.totalOptimizationTimeMs || 0;\n\n    return {\n      standardResult,\n      optimizedResult,\n      improvement: {\n        damageIncrease,\n        damageIncreasePercentage,\n        survivalIncrease,\n        optimizationTimeMs\n      }\n    };\n  }\n\n  /**\n   * Simulate both scenarios with enemy units, using enhanced damage calculation with player unit attack modifiers\n   */\n  simulateBothScenariosWithEnemyUnits(playerArmy: ArmyComposition, enemyUnits: EnemyUnit[], useEnemyModifiers: boolean = true): BattleAnalysis {\n    // Use optimized battle simulation with player unit attack modifiers\n    const config: OptimizedEnemyUnitBattleConfiguration = {\n      playerArmy,\n      enemyUnits,\n      playerGoesFirst: true,\n      useEnemyModifiers,\n      useOptimization: true,\n      optimizationConfig: DEFAULT_OPTIMIZATION_CONFIG\n    };\n\n    // Run best case scenario (player goes first)\n    const bestCaseResult = this.simulateOptimizedBattleWithEnemyUnits({\n      ...config,\n      playerGoesFirst: true\n    });\n\n    // Run worst case scenario (enemy goes first)\n    const worstCaseResult = this.simulateOptimizedBattleWithEnemyUnits({\n      ...config,\n      playerGoesFirst: false\n    });\n\n    // Calculate comparison metrics\n    const damageDifference = bestCaseResult.totalDamageDealtToEnemies - worstCaseResult.totalDamageDealtToEnemies;\n    const survivalDifference = bestCaseResult.playerSurvivalTurns - worstCaseResult.playerSurvivalTurns;\n    const averageDamage = (bestCaseResult.totalDamageDealtToEnemies + worstCaseResult.totalDamageDealtToEnemies) / 2;\n    const averageSurvival = (bestCaseResult.playerSurvivalTurns + worstCaseResult.playerSurvivalTurns) / 2;\n\n    return {\n      bestCase: bestCaseResult,\n      worstCase: worstCaseResult,\n      comparison: {\n        damageDifference,\n        survivalDifference,\n        averageDamage,\n        averageSurvival\n      }\n    };\n  }\n\n  /**\n   * Clear optimization cache\n   */\n  clearOptimizationCache(): void {\n    this.optimizationCache.clear();\n    attackOrderOptimizerService.clearCache();\n  }\n}\n\n/**\n * Singleton instance of the optimized battle simulation service\n */\nexport const optimizedBattleSimulationService = new OptimizedBattleSimulationService();","/**\n * Enemy Unit Data Loader for the Army Stacking Calculator\n * Loads and manages enemy unit data from JSON files\n */\n\nimport { \n  EnemyUnit, \n  EnemyUnitWithCalculatedProps, \n  EnemyUnitSummary, \n  EnemyUnitFilter,\n  EnemyUnitUtils \n} from '../types/enemyUnits';\nimport { DATA_PATHS } from '../config';\n\nexport class EnemyUnitLoader {\n  private enemyUnits: EnemyUnit[] = [];\n  private enemyUnitsByName: Map<string, EnemyUnit> = new Map();\n  private enemyUnitsByType: Map<string, EnemyUnit[]> = new Map();\n\n  constructor() {\n    this.resetData();\n  }\n\n  /**\n   * Load preset enemy units from enemy_units.json\n   */\n  async loadPresetEnemyUnits(): Promise<EnemyUnit[]> {\n    return this.loadEnemyUnits(DATA_PATHS.ENEMY_UNITS);\n  }\n\n  /**\n   * Load enemy units from a JSON file or URL\n   */\n  async loadEnemyUnits(source: string | EnemyUnit[]): Promise<EnemyUnit[]> {\n    try {\n      let enemyUnitsData: EnemyUnit[];\n\n      if (typeof source === 'string') {\n        console.log(`Loading enemy units from: ${source}`);\n        const response = await fetch(source);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to fetch enemy units: ${response.status} ${response.statusText}`);\n        }\n        \n        enemyUnitsData = await response.json();\n      } else {\n        enemyUnitsData = source;\n      }\n\n      if (!Array.isArray(enemyUnitsData)) {\n        throw new Error('Enemy unit data must be an array');\n      }\n\n      this.enemyUnits = enemyUnitsData.map(unitData => this.validateAndNormalizeEnemyUnit(unitData));\n      this.buildLookups();\n\n      console.log(`✅ Loaded ${this.enemyUnits.length} enemy units successfully`);\n      return this.enemyUnits;\n    } catch (error) {\n      console.error('❌ Error loading enemy units:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate and normalize enemy unit data\n   */\n  private validateAndNormalizeEnemyUnit(unitData: any): EnemyUnit {\n    // Ensure all required fields exist with defaults\n    const enemyUnit: EnemyUnit = {\n      name: unitData.name || 'Unknown Enemy',\n      unit_types: Array.isArray(unitData.unit_types) ? unitData.unit_types : [],\n      health: Number(unitData.health) || 0,\n      strength: Number(unitData.strength) || 0,\n      attack_modifiers: Array.isArray(unitData.attack_modifiers) ? unitData.attack_modifiers : []\n    };\n\n    // Validate unit types\n    if (!Array.isArray(enemyUnit.unit_types) || enemyUnit.unit_types.length === 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has no unit types, adding 'Unknown'`);\n      enemyUnit.unit_types = ['Unknown'];\n    }\n\n    // Validate numeric values\n    if (enemyUnit.health <= 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has invalid health: ${enemyUnit.health}`);\n      enemyUnit.health = 1; // Minimum health\n    }\n\n    if (enemyUnit.strength < 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has negative strength: ${enemyUnit.strength}`);\n      enemyUnit.strength = 0;\n    }\n\n    // Validate attack modifiers\n    if (enemyUnit.attack_modifiers && Array.isArray(enemyUnit.attack_modifiers)) {\n      enemyUnit.attack_modifiers = enemyUnit.attack_modifiers.filter(modifier => {\n        if (!modifier || typeof modifier !== 'object') {\n          console.warn(`Enemy unit ${enemyUnit.name} has invalid attack modifier object`);\n          return false;\n        }\n        if (!modifier.target_type || typeof modifier.value !== 'number') {\n          console.warn(`Enemy unit ${enemyUnit.name} has invalid attack modifier: ${JSON.stringify(modifier)}`);\n          return false;\n        }\n        return true;\n      });\n    }\n\n    return enemyUnit;\n  }\n\n  /**\n   * Build lookup dictionaries for efficient access\n   */\n  private buildLookups(): void {\n    this.resetData();\n\n    this.enemyUnitsByName = new Map(this.enemyUnits.map(unit => [unit.name, unit]));\n\n    // Categorize units by their types\n    this.enemyUnits.forEach(unit => {\n      unit.unit_types.forEach(type => {\n        if (!this.enemyUnitsByType.has(type)) {\n          this.enemyUnitsByType.set(type, []);\n        }\n        this.enemyUnitsByType.get(type)!.push(unit);\n      });\n    });\n\n    // Sort units within each type by strength\n    this.enemyUnitsByType.forEach(units => {\n      units.sort((a, b) => b.strength - a.strength); // Descending order for enemies\n    });\n  }\n\n  /**\n   * Reset internal data structures\n   */\n  private resetData(): void {\n    this.enemyUnitsByName.clear();\n    this.enemyUnitsByType.clear();\n  }\n\n  /**\n   * Get all loaded enemy units\n   */\n  getAllEnemyUnits(): EnemyUnit[] {\n    return [...this.enemyUnits];\n  }\n\n  /**\n   * Get an enemy unit by its name\n   */\n  getEnemyUnitByName(name: string): EnemyUnit | undefined {\n    return this.enemyUnitsByName.get(name);\n  }\n\n  /**\n   * Get enemy units by unit type\n   */\n  getEnemyUnitsByType(unitType: string): EnemyUnit[] {\n    return [...(this.enemyUnitsByType.get(unitType) || [])];\n  }\n\n  /**\n   * Get all unique unit types from loaded enemy units\n   */\n  getUniqueEnemyUnitTypes(): string[] {\n    return Array.from(this.enemyUnitsByType.keys()).sort();\n  }\n\n  /**\n   * Filter enemy units by various criteria\n   */\n  filterEnemyUnits(filter: EnemyUnitFilter): EnemyUnit[] {\n    let filtered = this.enemyUnits;\n    \n    if (filter.unitTypes && filter.unitTypes.length > 0) {\n      filtered = filtered.filter(u => \n        filter.unitTypes!.some(type => u.unit_types.includes(type))\n      );\n    }\n    \n    if (filter.minStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength >= filter.minStrength!);\n    }\n    \n    if (filter.maxStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength <= filter.maxStrength!);\n    }\n\n    if (filter.minHealth !== undefined) {\n      filtered = filtered.filter(u => u.health >= filter.minHealth!);\n    }\n    \n    if (filter.maxHealth !== undefined) {\n      filtered = filtered.filter(u => u.health <= filter.maxHealth!);\n    }\n\n    // Note: hasAttackModifiers filter removed as it's not in the EnemyUnitFilter interface\n    \n    return filtered;\n  }\n\n  /**\n   * Search enemy units by name (case-insensitive, partial match)\n   */\n  searchEnemyUnits(query: string): EnemyUnit[] {\n    if (!query.trim()) {\n      return this.getAllEnemyUnits();\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return this.enemyUnits.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get enemy units with enhanced calculated properties\n   */\n  getEnhancedEnemyUnits(): EnemyUnitWithCalculatedProps[] {\n    return this.enemyUnits.map(unit => ({\n      ...unit,\n      get strengthPerHealth(): number {\n        return EnemyUnitUtils.getStrengthPerHealth(unit);\n      },\n      get effectivenessScore(): number {\n        return EnemyUnitUtils.getEffectivenessScore(unit);\n      }\n    }));\n  }\n\n  /**\n   * Get a summary of loaded enemy units\n   */\n  getEnemyUnitSummary(): EnemyUnitSummary {\n    if (this.enemyUnits.length === 0) {\n      return {\n        totalUnits: 0,\n        byUnitType: {},\n        strengthRange: { min: 0, max: 0, average: 0 },\n        healthRange: { min: 0, max: 0, average: 0 }\n      };\n    }\n\n    const strengths = this.enemyUnits.map(u => u.strength);\n    const healths = this.enemyUnits.map(u => u.health);\n\n    // Count units by type\n    const byUnitType: Record<string, number> = {};\n    this.enemyUnitsByType.forEach((units, type) => {\n      byUnitType[type] = units.length;\n    });\n\n    return {\n      totalUnits: this.enemyUnits.length,\n      byUnitType,\n      strengthRange: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        average: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthRange: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        average: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      }\n    };\n  }\n\n  /**\n   * Get statistics about the loaded enemy units\n   */\n  getStatistics() {\n    if (this.enemyUnits.length === 0) {\n      return {\n        totalUnits: 0,\n        unitTypeDistribution: {},\n        strengthStats: { min: 0, max: 0, avg: 0 },\n        healthStats: { min: 0, max: 0, avg: 0 },\n        topUnitsByStrength: [],\n        topUnitsByHealth: [],\n        unitsWithAttackModifiers: 0\n      };\n    }\n\n    const strengths = this.enemyUnits.map(u => u.strength);\n    const healths = this.enemyUnits.map(u => u.health);\n\n    // Count units by type\n    const unitTypeDistribution: Record<string, number> = {};\n    this.enemyUnitsByType.forEach((units, type) => {\n      unitTypeDistribution[type] = units.length;\n    });\n\n    // Count units with attack modifiers\n    const unitsWithAttackModifiers = this.enemyUnits.filter(u =>\n      u.attack_modifiers && Array.isArray(u.attack_modifiers) && u.attack_modifiers.length > 0\n    ).length;\n\n    return {\n      totalUnits: this.enemyUnits.length,\n      unitTypeDistribution,\n      strengthStats: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        avg: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthStats: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        avg: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      },\n      topUnitsByStrength: [...this.enemyUnits]\n        .sort((a, b) => b.strength - a.strength)\n        .slice(0, 10),\n      topUnitsByHealth: [...this.enemyUnits]\n        .sort((a, b) => b.health - a.health)\n        .slice(0, 10),\n      unitsWithAttackModifiers\n    };\n  }\n\n  /**\n   * Get enemy units that have attack modifiers against specific unit types\n   */\n  getEnemyUnitsWithModifiersAgainst(unitTypes: string[]): EnemyUnit[] {\n    return this.enemyUnits.filter(unit => {\n      if (!unit.attack_modifiers || !Array.isArray(unit.attack_modifiers)) return false;\n      return unitTypes.some(type =>\n        unit.attack_modifiers!.some(modifier =>\n          modifier.target_type.toLowerCase() === type.toLowerCase()\n        )\n      );\n    });\n  }\n\n  /**\n   * Get the most effective enemy units against specific player unit types\n   */\n  getMostEffectiveAgainst(playerUnitTypes: string[], limit: number = 5): EnemyUnit[] {\n    return this.enemyUnits\n      .map(unit => ({\n        unit,\n        effectiveness: this.calculateEffectivenessAgainst(unit, playerUnitTypes)\n      }))\n      .sort((a, b) => b.effectiveness - a.effectiveness)\n      .slice(0, limit)\n      .map(item => item.unit);\n  }\n\n  /**\n   * Calculate effectiveness of an enemy unit against specific player unit types\n   */\n  private calculateEffectivenessAgainst(unit: EnemyUnit, playerUnitTypes: string[]): number {\n    let totalEffectiveness = EnemyUnitUtils.getEffectivenessScore(unit);\n    \n    if (unit.attack_modifiers && Array.isArray(unit.attack_modifiers)) {\n      playerUnitTypes.forEach(playerType => {\n        const modifier = EnemyUnitUtils.getAttackModifierAgainst(unit, playerType);\n        totalEffectiveness += modifier * 0.1; // Weight modifiers at 10% of base effectiveness\n      });\n    }\n    \n    return totalEffectiveness;\n  }\n}","/**\n * Enemy Unit Validation Service for the Army Stacking Calculator\n * Provides comprehensive validation for enemy unit data\n */\n\nimport { \n  EnemyUnit, \n  UserEnemyUnit, \n  EnemyUnitValidationResult,\n  EnemyUnitUtils,\n  ENEMY_UNIT_TYPES,\n  ENEMY_TARGET_TYPES,\n  ENEMY_ATTACK_MODIFIER_TYPES\n} from '../types/enemyUnits';\n\nexport class EnemyUnitValidationService {\n  \n  /**\n   * Validate a complete enemy unit\n   */\n  static validateEnemyUnit(unit: Partial<EnemyUnit>): EnemyUnitValidationResult {\n    return EnemyUnitUtils.validateEnemyUnit(unit);\n  }\n\n  /**\n   * Validate a user-created enemy unit\n   */\n  static validateUserEnemyUnit(unit: Partial<UserEnemyUnit>): EnemyUnitValidationResult {\n    const baseValidation = EnemyUnitUtils.validateEnemyUnit(unit);\n    const errors = [...baseValidation.errors];\n    const warnings = [...(baseValidation.warnings || [])];\n\n    // Additional validation for user units\n    if (!unit.id || typeof unit.id !== 'string' || unit.id.trim() === '') {\n      errors.push('User enemy unit must have a valid ID');\n    }\n\n    if (!unit.createdAt || !(unit.createdAt instanceof Date)) {\n      errors.push('User enemy unit must have a valid creation date');\n    }\n\n    if (!unit.modifiedAt || !(unit.modifiedAt instanceof Date)) {\n      errors.push('User enemy unit must have a valid modification date');\n    }\n\n    // Check if modification date is after creation date\n    if (unit.createdAt && unit.modifiedAt && \n        unit.createdAt instanceof Date && unit.modifiedAt instanceof Date) {\n      if (unit.modifiedAt < unit.createdAt) {\n        errors.push('Modification date cannot be before creation date');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate enemy unit name\n   */\n  static validateName(name: string): { isValid: boolean; error?: string } {\n    if (!name || typeof name !== 'string') {\n      return { isValid: false, error: 'Name must be a non-empty string' };\n    }\n\n    const trimmedName = name.trim();\n    if (trimmedName.length === 0) {\n      return { isValid: false, error: 'Name cannot be empty or only whitespace' };\n    }\n\n    if (trimmedName.length > 100) {\n      return { isValid: false, error: 'Name cannot exceed 100 characters' };\n    }\n\n    // Check for invalid characters\n    const invalidChars = /[<>\\\"'&]/;\n    if (invalidChars.test(trimmedName)) {\n      return { isValid: false, error: 'Name contains invalid characters (<, >, \", \\', &)' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Validate unit types array\n   */\n  static validateUnitTypes(unitTypes: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (!Array.isArray(unitTypes)) {\n      return { isValid: false, error: 'Unit types must be an array' };\n    }\n\n    if (unitTypes.length === 0) {\n      return { isValid: false, error: 'At least one unit type is required' };\n    }\n\n    if (unitTypes.length > 10) {\n      return { isValid: false, error: 'Cannot have more than 10 unit types' };\n    }\n\n    // Validate each unit type\n    for (let i = 0; i < unitTypes.length; i++) {\n      const type = unitTypes[i];\n      if (typeof type !== 'string' || type.trim() === '') {\n        return { isValid: false, error: `Unit type ${i + 1} must be a non-empty string` };\n      }\n\n      // Check if it's a known unit type\n      if (!ENEMY_UNIT_TYPES.includes(type as any)) {\n        warnings.push(`Unit type '${type}' is not a standard type`);\n      }\n    }\n\n    // Check for duplicates\n    const uniqueTypes = new Set(unitTypes);\n    if (uniqueTypes.size !== unitTypes.length) {\n      return { isValid: false, error: 'Unit types cannot contain duplicates' };\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate health value\n   */\n  static validateHealth(health: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (typeof health !== 'number') {\n      return { isValid: false, error: 'Health must be a number' };\n    }\n\n    if (!Number.isFinite(health)) {\n      return { isValid: false, error: 'Health must be a finite number' };\n    }\n\n    if (health <= 0) {\n      return { isValid: false, error: 'Health must be greater than 0' };\n    }\n\n    if (health > 50000000) {\n      return { isValid: false, error: 'Health cannot exceed 50,000,000' };\n    }\n\n    // Warnings for unusual values\n    if (health < 100) {\n      warnings.push('Health value is unusually low (less than 100)');\n    }\n\n    if (health > 10000000) {\n      warnings.push('Health value is unusually high (greater than 10,000,000)');\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate strength value\n   */\n  static validateStrength(strength: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (typeof strength !== 'number') {\n      return { isValid: false, error: 'Strength must be a number' };\n    }\n\n    if (!Number.isFinite(strength)) {\n      return { isValid: false, error: 'Strength must be a finite number' };\n    }\n\n    if (strength < 0) {\n      return { isValid: false, error: 'Strength cannot be negative' };\n    }\n\n    if (strength > 25000000) {\n      return { isValid: false, error: 'Strength cannot exceed 25,000,000' };\n    }\n\n    // Warnings for unusual values\n    if (strength === 0) {\n      warnings.push('Strength value of 0 means this unit cannot deal damage');\n    }\n\n    if (strength < 50) {\n      warnings.push('Strength value is unusually low (less than 50)');\n    }\n\n    if (strength > 5000000) {\n      warnings.push('Strength value is unusually high (greater than 5,000,000)');\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate attack modifiers array\n   */\n  static validateAttackModifiers(attackModifiers: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    // Attack modifiers are optional\n    if (attackModifiers === undefined || attackModifiers === null) {\n      return { isValid: true };\n    }\n\n    if (!Array.isArray(attackModifiers)) {\n      return { isValid: false, error: 'Attack modifiers must be an array' };\n    }\n\n    if (attackModifiers.length > 20) {\n      return { isValid: false, error: 'Cannot have more than 20 attack modifiers' };\n    }\n\n    // Validate each modifier\n    for (let i = 0; i < attackModifiers.length; i++) {\n      const modifier = attackModifiers[i];\n      \n      if (!modifier || typeof modifier !== 'object') {\n        return { isValid: false, error: `Attack modifier ${i + 1} must be an object` };\n      }\n\n      // Validate target_type\n      if (!modifier.target_type || typeof modifier.target_type !== 'string') {\n        return { isValid: false, error: `Attack modifier ${i + 1}: target_type is required and must be a string` };\n      }\n\n      if (!ENEMY_TARGET_TYPES.includes(modifier.target_type as any)) {\n        warnings.push(`Attack modifier ${i + 1}: '${modifier.target_type}' is not a standard target type`);\n      }\n\n      // Validate modifier_type\n      if (!modifier.modifier_type || !ENEMY_ATTACK_MODIFIER_TYPES.includes(modifier.modifier_type as any)) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: modifier_type must be 'Strength'` };\n      }\n\n      // Validate value\n      if (typeof modifier.value !== 'number' || !Number.isFinite(modifier.value)) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value must be a finite number` };\n      }\n\n      if (modifier.value < 0) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value cannot be negative` };\n      }\n\n      if (modifier.value > 10000000) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value cannot exceed 10,000,000` };\n      }\n\n      // Warning for very high modifier values\n      if (modifier.value > 1000000) {\n        warnings.push(`Attack modifier ${i + 1}: value is unusually high (${modifier.value})`);\n      }\n    }\n\n    // Check for duplicate target types\n    const targetTypes = attackModifiers.map(mod => mod.target_type?.toLowerCase()).filter(Boolean);\n    const uniqueTargetTypes = new Set(targetTypes);\n    if (uniqueTargetTypes.size !== targetTypes.length) {\n      return { isValid: false, error: 'Attack modifiers cannot have duplicate target types' };\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate enemy unit data for import/export\n   */\n  static validateForImport(data: any): EnemyUnitValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (!data || typeof data !== 'object') {\n      return {\n        isValid: false,\n        errors: ['Data must be an object']\n      };\n    }\n\n    // Validate each field individually and collect all errors/warnings\n    const nameValidation = this.validateName(data.name);\n    if (!nameValidation.isValid) {\n      errors.push(nameValidation.error!);\n    }\n\n    const unitTypesValidation = this.validateUnitTypes(data.unit_types);\n    if (!unitTypesValidation.isValid) {\n      errors.push(unitTypesValidation.error!);\n    } else if (unitTypesValidation.warnings) {\n      warnings.push(...unitTypesValidation.warnings);\n    }\n\n    const healthValidation = this.validateHealth(data.health);\n    if (!healthValidation.isValid) {\n      errors.push(healthValidation.error!);\n    } else if (healthValidation.warnings) {\n      warnings.push(...healthValidation.warnings);\n    }\n\n    const strengthValidation = this.validateStrength(data.strength);\n    if (!strengthValidation.isValid) {\n      errors.push(strengthValidation.error!);\n    } else if (strengthValidation.warnings) {\n      warnings.push(...strengthValidation.warnings);\n    }\n\n    const attackModifiersValidation = this.validateAttackModifiers(data.attack_modifiers);\n    if (!attackModifiersValidation.isValid) {\n      errors.push(attackModifiersValidation.error!);\n    } else if (attackModifiersValidation.warnings) {\n      warnings.push(...attackModifiersValidation.warnings);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate multiple enemy units (for batch operations)\n   */\n  static validateMultipleUnits(units: any[]): { \n    isValid: boolean; \n    results: Array<{ index: number; validation: EnemyUnitValidationResult }>;\n    summary: { total: number; valid: number; invalid: number; warnings: number };\n  } {\n    if (!Array.isArray(units)) {\n      return {\n        isValid: false,\n        results: [],\n        summary: { total: 0, valid: 0, invalid: 0, warnings: 0 }\n      };\n    }\n\n    const results = units.map((unit, index) => ({\n      index,\n      validation: this.validateForImport(unit)\n    }));\n\n    const summary = {\n      total: units.length,\n      valid: results.filter(r => r.validation.isValid).length,\n      invalid: results.filter(r => !r.validation.isValid).length,\n      warnings: results.filter(r => r.validation.warnings && r.validation.warnings.length > 0).length\n    };\n\n    return {\n      isValid: summary.invalid === 0,\n      results,\n      summary\n    };\n  }\n\n  /**\n   * Sanitize enemy unit data by removing/fixing invalid values\n   */\n  static sanitizeEnemyUnit(data: any): EnemyUnit {\n    const sanitized: EnemyUnit = {\n      name: typeof data.name === 'string' ? data.name.trim() : 'Unknown Enemy',\n      unit_types: Array.isArray(data.unit_types) ? \n        data.unit_types.filter((type: any) => typeof type === 'string' && type.trim() !== '') :\n        ['Epic Monster'],\n      health: typeof data.health === 'number' && data.health > 0 ? Math.min(data.health, 50000000) : 10000,\n      strength: typeof data.strength === 'number' && data.strength >= 0 ? Math.min(data.strength, 25000000) : 5000,\n      attack_modifiers: Array.isArray(data.attack_modifiers) ? \n        data.attack_modifiers\n          .filter((mod: any) => mod && typeof mod === 'object' &&\n                        typeof mod.target_type === 'string' &&\n                        typeof mod.value === 'number' &&\n                        mod.value >= 0)\n          .map((mod: any) => ({\n            target_type: mod.target_type,\n            modifier_type: 'Strength' as const,\n            value: Math.min(mod.value, 10000000)\n          })) :\n        []\n    };\n\n    // Ensure name is not empty\n    if (sanitized.name.length === 0) {\n      sanitized.name = 'Unknown Enemy';\n    }\n\n    // Ensure at least one unit type\n    if (sanitized.unit_types.length === 0) {\n      sanitized.unit_types = ['Epic Monster'];\n    }\n\n    return sanitized;\n  }\n}","/**\n * Enemy Unit Storage Service for the Army Stacking Calculator\n * Manages user-created enemy units in browser memory (localStorage)\n */\n\nimport { \n  EnemyUnit, \n  UserEnemyUnit, \n  EnemyUnitUtils,\n  EnemyUnitValidationResult\n} from '../types/enemyUnits';\nimport { EnemyUnitValidationService } from './enemyUnitValidation';\n\nexport interface EnemyUnitStorageOptions {\n  /** Maximum number of user enemy units to store */\n  maxUnits?: number;\n  /** Storage key prefix for localStorage */\n  storagePrefix?: string;\n  /** Whether to validate units on load */\n  validateOnLoad?: boolean;\n}\n\nexport interface EnemyUnitStorageStats {\n  /** Total number of stored units */\n  totalUnits: number;\n  /** Storage size in bytes (approximate) */\n  storageSize: number;\n  /** Last modification timestamp */\n  lastModified: Date | null;\n  /** Number of units created today */\n  unitsCreatedToday: number;\n}\n\nexport class EnemyUnitStorageService {\n  private static readonly DEFAULT_STORAGE_KEY = 'army_calculator_user_enemy_units';\n  private static readonly METADATA_KEY = 'army_calculator_enemy_units_metadata';\n  private static readonly DEFAULT_MAX_UNITS = 100;\n\n  private storageKey: string;\n  private metadataKey: string;\n  private maxUnits: number;\n  private validateOnLoad: boolean;\n\n  constructor(options: EnemyUnitStorageOptions = {}) {\n    this.storageKey = options.storagePrefix ? \n      `${options.storagePrefix}_user_enemy_units` : \n      EnemyUnitStorageService.DEFAULT_STORAGE_KEY;\n    \n    this.metadataKey = options.storagePrefix ? \n      `${options.storagePrefix}_enemy_units_metadata` : \n      EnemyUnitStorageService.METADATA_KEY;\n    \n    this.maxUnits = options.maxUnits || EnemyUnitStorageService.DEFAULT_MAX_UNITS;\n    this.validateOnLoad = options.validateOnLoad !== false; // Default to true\n  }\n\n  /**\n   * Check if localStorage is available\n   */\n  private isStorageAvailable(): boolean {\n    try {\n      const test = '__storage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get all stored user enemy units\n   */\n  getAllUserEnemyUnits(): UserEnemyUnit[] {\n    if (!this.isStorageAvailable()) {\n      console.warn('localStorage is not available');\n      return [];\n    }\n\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (!stored) {\n        return [];\n      }\n\n      const units: UserEnemyUnit[] = JSON.parse(stored);\n      \n      // Convert date strings back to Date objects\n      const processedUnits = units.map(unit => ({\n        ...unit,\n        createdAt: new Date(unit.createdAt),\n        modifiedAt: new Date(unit.modifiedAt)\n      }));\n\n      // Validate units if enabled\n      if (this.validateOnLoad) {\n        return processedUnits.filter(unit => {\n          const validation = EnemyUnitValidationService.validateUserEnemyUnit(unit);\n          if (!validation.isValid) {\n            console.warn(`Invalid stored enemy unit removed: ${unit.name}`, validation.errors);\n            return false;\n          }\n          return true;\n        });\n      }\n\n      return processedUnits;\n    } catch (error) {\n      console.error('Error loading user enemy units from storage:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save all user enemy units to storage\n   */\n  private saveAllUserEnemyUnits(units: UserEnemyUnit[]): boolean {\n    if (!this.isStorageAvailable()) {\n      console.warn('localStorage is not available');\n      return false;\n    }\n\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(units));\n      this.updateMetadata();\n      return true;\n    } catch (error) {\n      console.error('Error saving user enemy units to storage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Add a new user enemy unit\n   */\n  addUserEnemyUnit(enemyUnit: EnemyUnit): { success: boolean; unit?: UserEnemyUnit; error?: string } {\n    // Validate the enemy unit\n    const validation = EnemyUnitValidationService.validateEnemyUnit(enemyUnit);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: `Validation failed: ${validation.errors.join(', ')}`\n      };\n    }\n\n    const units = this.getAllUserEnemyUnits();\n\n    // Check if we've reached the maximum number of units\n    if (units.length >= this.maxUnits) {\n      return {\n        success: false,\n        error: `Maximum number of units (${this.maxUnits}) reached`\n      };\n    }\n\n    // Check for duplicate names\n    if (units.some(unit => unit.name.toLowerCase() === enemyUnit.name.toLowerCase())) {\n      return {\n        success: false,\n        error: `A unit with the name \"${enemyUnit.name}\" already exists`\n      };\n    }\n\n    // Create user enemy unit\n    const userUnit = EnemyUnitUtils.createUserEnemyUnit(enemyUnit);\n    units.push(userUnit);\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save unit to storage'\n      };\n    }\n\n    return {\n      success: true,\n      unit: userUnit\n    };\n  }\n\n  /**\n   * Update an existing user enemy unit\n   */\n  updateUserEnemyUnit(id: string, updates: Partial<EnemyUnit>): { success: boolean; unit?: UserEnemyUnit; error?: string } {\n    const units = this.getAllUserEnemyUnits();\n    const unitIndex = units.findIndex(unit => unit.id === id);\n\n    if (unitIndex === -1) {\n      return {\n        success: false,\n        error: 'Unit not found'\n      };\n    }\n\n    const existingUnit = units[unitIndex];\n    const updatedUnit = { ...existingUnit, ...updates };\n\n    // Validate the updated unit\n    const validation = EnemyUnitValidationService.validateUserEnemyUnit(updatedUnit);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: `Validation failed: ${validation.errors.join(', ')}`\n      };\n    }\n\n    // Check for duplicate names (excluding current unit)\n    if (updates.name && \n        units.some((unit, index) => \n          index !== unitIndex && \n          unit.name.toLowerCase() === updates.name!.toLowerCase()\n        )) {\n      return {\n        success: false,\n        error: `A unit with the name \"${updates.name}\" already exists`\n      };\n    }\n\n    // Update the unit\n    const finalUnit = EnemyUnitUtils.updateUserEnemyUnit(existingUnit, updates);\n    units[unitIndex] = finalUnit;\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save updated unit to storage'\n      };\n    }\n\n    return {\n      success: true,\n      unit: finalUnit\n    };\n  }\n\n  /**\n   * Delete a user enemy unit\n   */\n  deleteUserEnemyUnit(id: string): { success: boolean; error?: string } {\n    const units = this.getAllUserEnemyUnits();\n    const unitIndex = units.findIndex(unit => unit.id === id);\n\n    if (unitIndex === -1) {\n      return {\n        success: false,\n        error: 'Unit not found'\n      };\n    }\n\n    units.splice(unitIndex, 1);\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save changes to storage'\n      };\n    }\n\n    return { success: true };\n  }\n\n  /**\n   * Get a user enemy unit by ID\n   */\n  getUserEnemyUnitById(id: string): UserEnemyUnit | null {\n    const units = this.getAllUserEnemyUnits();\n    return units.find(unit => unit.id === id) || null;\n  }\n\n  /**\n   * Search user enemy units by name\n   */\n  searchUserEnemyUnits(query: string): UserEnemyUnit[] {\n    const units = this.getAllUserEnemyUnits();\n    if (!query.trim()) {\n      return units;\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return units.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Clear all user enemy units\n   */\n  clearAllUserEnemyUnits(): { success: boolean; error?: string } {\n    if (!this.isStorageAvailable()) {\n      return {\n        success: false,\n        error: 'localStorage is not available'\n      };\n    }\n\n    try {\n      localStorage.removeItem(this.storageKey);\n      localStorage.removeItem(this.metadataKey);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to clear storage'\n      };\n    }\n  }\n\n  /**\n   * Export user enemy units as JSON\n   */\n  exportUserEnemyUnits(): { success: boolean; data?: string; error?: string } {\n    try {\n      const units = this.getAllUserEnemyUnits();\n      const exportData = {\n        version: '1.0',\n        exportDate: new Date().toISOString(),\n        units: units.map(unit => ({\n          name: unit.name,\n          unit_types: unit.unit_types,\n          health: unit.health,\n          strength: unit.strength,\n          attack_modifiers: unit.attack_modifiers,\n          createdAt: unit.createdAt?.toISOString() ?? new Date().toISOString(),\n          modifiedAt: unit.modifiedAt?.toISOString() ?? new Date().toISOString()\n        }))\n      };\n\n      return {\n        success: true,\n        data: JSON.stringify(exportData, null, 2)\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to export units'\n      };\n    }\n  }\n\n  /**\n   * Import user enemy units from JSON\n   */\n  importUserEnemyUnits(jsonData: string, options: { replace?: boolean; skipDuplicates?: boolean } = {}): \n    { success: boolean; imported?: number; skipped?: number; errors?: string[] } {\n    \n    try {\n      const importData = JSON.parse(jsonData);\n      \n      if (!importData.units || !Array.isArray(importData.units)) {\n        return {\n          success: false,\n          errors: ['Invalid import format: units array not found']\n        };\n      }\n\n      const existingUnits = options.replace ? [] : this.getAllUserEnemyUnits();\n      const errors: string[] = [];\n      let imported = 0;\n      let skipped = 0;\n\n      for (const unitData of importData.units) {\n        // Validate unit data\n        const validation = EnemyUnitValidationService.validateForImport(unitData);\n        if (!validation.isValid) {\n          errors.push(`Unit \"${unitData.name || 'Unknown'}\": ${validation.errors.join(', ')}`);\n          skipped++;\n          continue;\n        }\n\n        // Check for duplicates\n        const isDuplicate = existingUnits.some(existing => \n          existing.name.toLowerCase() === unitData.name.toLowerCase()\n        );\n\n        if (isDuplicate) {\n          if (options.skipDuplicates) {\n            skipped++;\n            continue;\n          } else {\n            errors.push(`Unit \"${unitData.name}\" already exists`);\n            skipped++;\n            continue;\n          }\n        }\n\n        // Check unit limit\n        if (existingUnits.length >= this.maxUnits) {\n          errors.push(`Maximum number of units (${this.maxUnits}) reached`);\n          break;\n        }\n\n        // Create user unit\n        const userUnit = EnemyUnitUtils.createUserEnemyUnit({\n          name: unitData.name,\n          unit_types: unitData.unit_types,\n          health: unitData.health,\n          strength: unitData.strength,\n          attack_modifiers: unitData.attack_modifiers || []\n        });\n\n        existingUnits.push(userUnit);\n        imported++;\n      }\n\n      // Save all units\n      const saved = this.saveAllUserEnemyUnits(existingUnits);\n      if (!saved) {\n        return {\n          success: false,\n          errors: ['Failed to save imported units to storage']\n        };\n      }\n\n      return {\n        success: true,\n        imported,\n        skipped,\n        errors: errors.length > 0 ? errors : undefined\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        errors: ['Invalid JSON format']\n      };\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  getStorageStats(): EnemyUnitStorageStats {\n    const units = this.getAllUserEnemyUnits();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const unitsCreatedToday = units.filter(unit => \n      unit.createdAt && unit.createdAt >= today\n    ).length;\n\n    let lastModified: Date | null = null;\n    if (units.length > 0) {\n      lastModified = new Date(Math.max(...units.map(unit => unit.modifiedAt?.getTime() ?? 0)));\n    }\n\n    // Approximate storage size\n    const storageSize = this.isStorageAvailable() ? \n      (localStorage.getItem(this.storageKey)?.length || 0) * 2 : 0; // Rough estimate in bytes\n\n    return {\n      totalUnits: units.length,\n      storageSize,\n      lastModified,\n      unitsCreatedToday\n    };\n  }\n\n  /**\n   * Update metadata\n   */\n  private updateMetadata(): void {\n    if (!this.isStorageAvailable()) return;\n\n    try {\n      const metadata = {\n        lastModified: new Date().toISOString(),\n        version: '1.0'\n      };\n      localStorage.setItem(this.metadataKey, JSON.stringify(metadata));\n    } catch (error) {\n      console.warn('Failed to update metadata:', error);\n    }\n  }\n\n  /**\n   * Get available storage space (approximate)\n   */\n  getAvailableSpace(): number {\n    return Math.max(0, this.maxUnits - this.getAllUserEnemyUnits().length);\n  }\n\n  /**\n   * Check if storage is near capacity\n   */\n  isNearCapacity(threshold: number = 0.9): boolean {\n    const units = this.getAllUserEnemyUnits();\n    return units.length >= (this.maxUnits * threshold);\n  }\n}","/**\n * Enemy Unit Selector component for selecting enemy units for battle simulation\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { EnemyUnit, UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitLoader } from '../../services/enemyUnitLoader';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\n\ninterface EnemyUnitSelectorProps {\n  onSelect: (enemyUnit: EnemyUnit) => void;\n  onCancel: () => void;\n  selectedUnit?: EnemyUnit | null;\n  mode: 'single' | 'multiple';\n  title?: string;\n  maxSelections?: number;\n  selectedUnits?: EnemyUnit[];\n}\n\nexport class EnemyUnitSelector {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitSelectorProps;\n  private loader: EnemyUnitLoader;\n  private storage: EnemyUnitStorageService;\n  private presetUnits: EnemyUnit[] = [];\n  private userUnits: UserEnemyUnit[] = [];\n  private filteredUnits: EnemyUnit[] = [];\n  private currentFilter: string = '';\n  private currentCategory: 'all' | 'preset' | 'user' = 'all';\n  private currentSelectedUnits: EnemyUnit[] = [];\n\n  constructor(props: EnemyUnitSelectorProps) {\n    this.props = props;\n    this.loader = new EnemyUnitLoader();\n    this.storage = new EnemyUnitStorageService();\n    this.currentSelectedUnits = props.selectedUnits ? [...props.selectedUnits] : [];\n  }\n\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    await this.loadData();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private async loadData(): Promise<void> {\n    try {\n      // Load preset enemy units\n      this.presetUnits = await this.loader.loadPresetEnemyUnits();\n      \n      // Load user-created enemy units\n      this.userUnits = this.storage.getAllUserEnemyUnits();\n      \n      // Initialize filtered units\n      this.updateFilteredUnits();\n    } catch (error) {\n      console.error('Error loading enemy unit data:', error);\n      this.presetUnits = [];\n      this.userUnits = [];\n      this.filteredUnits = [];\n    }\n  }\n\n  private updateFilteredUnits(): void {\n    let allUnits: EnemyUnit[] = [];\n    \n    switch (this.currentCategory) {\n      case 'preset':\n        allUnits = [...this.presetUnits];\n        break;\n      case 'user':\n        allUnits = [...this.userUnits];\n        break;\n      case 'all':\n      default:\n        allUnits = [...this.presetUnits, ...this.userUnits];\n        break;\n    }\n\n    if (this.currentFilter.trim()) {\n      const lowerFilter = this.currentFilter.toLowerCase();\n      this.filteredUnits = allUnits.filter(unit =>\n        unit.name.toLowerCase().includes(lowerFilter) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(lowerFilter))\n      );\n    } else {\n      this.filteredUnits = allUnits;\n    }\n\n    // Sort by name for consistent display\n    this.filteredUnits.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    const title = this.props.title || 'Select Enemy Unit';\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-selector\">\n        <div class=\"modal-overlay\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h2 class=\"modal-title\" id=\"modal-title\">⚔️ ${title}</h2>\n              <button class=\"modal-close\" id=\"close-selector\">&times;</button>\n            </div>\n            \n            <div class=\"modal-body\">\n              <!-- Search and Filter Controls -->\n              <div class=\"selector-controls\">\n                <div class=\"search-section\">\n                  <div class=\"search-input-group\">\n                    <input \n                      type=\"text\" \n                      id=\"unit-search\" \n                      class=\"form-input search-input\" \n                      placeholder=\"🔍 Search by name or unit type...\"\n                      value=\"${this.currentFilter}\"\n                    >\n                    <button class=\"btn btn-secondary btn-sm\" id=\"clear-search\">\n                      ❌ Clear\n                    </button>\n                  </div>\n                </div>\n                \n                <div class=\"filter-section\">\n                  <div class=\"filter-tabs\">\n                    <button class=\"filter-tab ${this.currentCategory === 'all' ? 'active' : ''}\" data-category=\"all\">\n                      📋 All Units (${this.presetUnits.length + this.userUnits.length})\n                    </button>\n                    <button class=\"filter-tab ${this.currentCategory === 'preset' ? 'active' : ''}\" data-category=\"preset\">\n                      🏛️ Preset (${this.presetUnits.length})\n                    </button>\n                    <button class=\"filter-tab ${this.currentCategory === 'user' ? 'active' : ''}\" data-category=\"user\">\n                      👤 Custom (${this.userUnits.length})\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Unit List -->\n              <div class=\"unit-list-container\">\n                <div class=\"unit-list-header\">\n                  <span class=\"results-count\">\n                    ${this.filteredUnits.length} unit${this.filteredUnits.length !== 1 ? 's' : ''} found\n                  </span>\n                </div>\n                \n                <div class=\"unit-list\" id=\"unit-list\">\n                  ${this.renderUnitList()}\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"modal-footer\">\n              <button class=\"btn btn-secondary btn-lg\" id=\"cancel-selection\">\n                ❌ Cancel\n              </button>\n              ${this.props.selectedUnit ? `\n                <button class=\"btn btn-success btn-lg\" id=\"confirm-selection\">\n                  ✅ Select \"${this.props.selectedUnit.name}\"\n                </button>\n              ` : ''}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  private renderUnitList(): string {\n    if (this.filteredUnits.length === 0) {\n      return `\n        <div class=\"empty-state\">\n          <div class=\"empty-icon\">🔍</div>\n          <h3>No units found</h3>\n          <p>Try adjusting your search or filter criteria</p>\n          ${this.currentCategory === 'user' && this.userUnits.length === 0 ? `\n            <p class=\"text-sm text-secondary\">\n              You haven't created any custom enemy units yet.\n            </p>\n          ` : ''}\n        </div>\n      `;\n    }\n\n    return this.filteredUnits.map(unit => {\n      const isSelected = this.props.mode === 'multiple'\n        ? this.currentSelectedUnits.some(selected => selected.name === unit.name)\n        : this.props.selectedUnit?.name === unit.name;\n      const isUserUnit = 'id' in unit;\n      \n      return `\n        <div class=\"unit-card ${isSelected ? 'selected' : ''}\" data-unit-name=\"${unit.name}\">\n          <div class=\"unit-card-header\">\n            <div class=\"unit-info\">\n              <h4 class=\"unit-name\">\n                ${unit.name}\n                ${isUserUnit ? '<span class=\"user-badge\">👤</span>' : '<span class=\"preset-badge\">🏛️</span>'}\n              </h4>\n              <div class=\"unit-types\">\n                ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n              </div>\n            </div>\n            <div class=\"unit-actions\">\n              <button class=\"btn btn-primary btn-sm select-unit-btn\" data-unit-name=\"${unit.name}\">\n                ${isSelected ? '✅ Selected' : '👆 Select'}\n              </button>\n            </div>\n          </div>\n          \n          <div class=\"unit-stats\">\n            <div class=\"stat-group\">\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">❤️ Health</span>\n                <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">⚔️ Strength</span>\n                <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">📊 Ratio</span>\n                <span class=\"stat-value\">${(unit.strength / unit.health).toFixed(3)}</span>\n              </div>\n            </div>\n            \n            ${unit.attack_modifiers && unit.attack_modifiers.length > 0 ? `\n              <div class=\"attack-modifiers\">\n                <span class=\"modifiers-label\">🎯 Attack Bonuses:</span>\n                <div class=\"modifiers-list\">\n                  ${unit.attack_modifiers.map(mod => \n                    `<span class=\"modifier-tag\">+${mod.value.toLocaleString()} vs ${mod.target_type}</span>`\n                  ).join('')}\n                </div>\n              </div>\n            ` : ''}\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-selector {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        z-index: 1000;\n      }\n\n      .modal-overlay {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgba(0, 0, 0, 0.5);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: var(--spacing-md);\n      }\n\n      .modal-content {\n        background-color: var(--color-background);\n        border-radius: var(--radius-lg);\n        max-width: 900px;\n        width: 100%;\n        max-height: 90vh;\n        display: flex;\n        flex-direction: column;\n        box-shadow: var(--shadow-lg);\n      }\n\n      .modal-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .modal-title {\n        margin: 0;\n        font-size: var(--font-size-xl);\n        color: var(--color-text);\n      }\n\n      .modal-close {\n        background: none;\n        border: none;\n        font-size: var(--font-size-xl);\n        cursor: pointer;\n        color: var(--color-text-secondary);\n        padding: var(--spacing-xs);\n        border-radius: var(--radius-sm);\n        transition: all var(--transition-fast);\n      }\n\n      .modal-close:hover {\n        color: var(--color-text);\n        background-color: var(--color-surface);\n      }\n\n      .modal-body {\n        flex: 1;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .modal-footer {\n        padding: var(--spacing-lg);\n        border-top: 1px solid var(--color-border);\n        display: flex;\n        gap: var(--spacing-md);\n        justify-content: flex-end;\n        flex-shrink: 0;\n      }\n\n      /* Selector Controls */\n      .selector-controls {\n        padding: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .search-section {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .search-input-group {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .search-input {\n        flex: 1;\n        font-size: var(--font-size-sm);\n      }\n\n      .filter-section {\n        margin-bottom: 0;\n      }\n\n      .filter-tabs {\n        display: flex;\n        gap: var(--spacing-xs);\n        flex-wrap: wrap;\n      }\n\n      .filter-tab {\n        padding: var(--spacing-sm) var(--spacing-md);\n        border: 2px solid var(--color-border);\n        background-color: var(--color-surface);\n        color: var(--color-text-secondary);\n        border-radius: var(--radius-md);\n        cursor: pointer;\n        transition: all var(--transition-fast);\n        font-size: var(--font-size-sm);\n        font-weight: 500;\n      }\n\n      .filter-tab:hover {\n        border-color: var(--color-primary);\n        color: var(--color-text);\n      }\n\n      .filter-tab.active {\n        background-color: var(--color-primary);\n        border-color: var(--color-primary);\n        color: white;\n      }\n\n      /* Unit List */\n      .unit-list-container {\n        flex: 1;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .unit-list-header {\n        padding: var(--spacing-md) var(--spacing-lg);\n        background-color: var(--color-surface);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .results-count {\n        font-size: var(--font-size-sm);\n        color: var(--color-text-secondary);\n        font-weight: 500;\n      }\n\n      .unit-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: var(--spacing-md);\n      }\n\n      /* Unit Cards */\n      .unit-card {\n        background-color: var(--color-surface);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        padding: var(--spacing-md);\n        margin-bottom: var(--spacing-md);\n        transition: all var(--transition-fast);\n        cursor: pointer;\n      }\n\n      .unit-card:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      }\n\n      .unit-card.selected {\n        border-color: var(--color-success);\n        background-color: rgba(34, 197, 94, 0.05);\n      }\n\n      .unit-card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .unit-info {\n        flex: 1;\n      }\n\n      .unit-name {\n        margin: 0 0 var(--spacing-xs) 0;\n        font-size: var(--font-size-md);\n        color: var(--color-text);\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-xs);\n      }\n\n      .user-badge,\n      .preset-badge {\n        font-size: var(--font-size-xs);\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        background-color: var(--color-primary);\n        color: white;\n      }\n\n      .user-badge {\n        background-color: var(--color-success);\n      }\n\n      .unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .unit-type-tag {\n        background-color: var(--color-background);\n        color: var(--color-text-secondary);\n        padding: 2px 8px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        border: 1px solid var(--color-border);\n      }\n\n      .unit-actions {\n        flex-shrink: 0;\n        margin-left: var(--spacing-md);\n      }\n\n      .select-unit-btn {\n        min-width: 100px;\n      }\n\n      .unit-stats {\n        margin-top: var(--spacing-sm);\n      }\n\n      .stat-group {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        gap: var(--spacing-md);\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .stat-item {\n        text-align: center;\n      }\n\n      .stat-label {\n        display: block;\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        margin-bottom: 2px;\n      }\n\n      .stat-value {\n        display: block;\n        font-size: var(--font-size-sm);\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .attack-modifiers {\n        padding-top: var(--spacing-sm);\n        border-top: 1px solid var(--color-border);\n      }\n\n      .modifiers-label {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        display: block;\n        margin-bottom: var(--spacing-xs);\n      }\n\n      .modifiers-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .modifier-tag {\n        background-color: var(--color-warning);\n        color: white;\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        font-weight: 500;\n      }\n\n      /* Empty State */\n      .empty-state {\n        text-align: center;\n        padding: var(--spacing-xl);\n        color: var(--color-text-secondary);\n      }\n\n      .empty-icon {\n        font-size: 3rem;\n        margin-bottom: var(--spacing-md);\n      }\n\n      .empty-state h3 {\n        margin: 0 0 var(--spacing-sm) 0;\n        color: var(--color-text);\n      }\n\n      .empty-state p {\n        margin: 0 0 var(--spacing-xs) 0;\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .modal-overlay {\n          padding: var(--spacing-sm);\n        }\n\n        .modal-content {\n          max-height: 95vh;\n        }\n\n        .unit-card-header {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-actions {\n          margin-left: 0;\n          align-self: stretch;\n        }\n\n        .select-unit-btn {\n          width: 100%;\n        }\n\n        .stat-group {\n          grid-template-columns: repeat(2, 1fr);\n        }\n\n        .filter-tabs {\n          flex-direction: column;\n        }\n\n        .filter-tab {\n          text-align: center;\n        }\n\n        .search-input-group {\n          flex-direction: column;\n        }\n\n        .search-input {\n          width: 100%;\n        }\n\n        .modal-footer {\n          flex-direction: column;\n        }\n\n        .modal-footer .btn {\n          width: 100%;\n        }\n      }\n\n      @media (max-width: 480px) {\n        .modal-title {\n          font-size: var(--font-size-lg);\n        }\n\n        .unit-name {\n          font-size: var(--font-size-sm);\n        }\n\n        .stat-group {\n          grid-template-columns: 1fr;\n          gap: var(--spacing-sm);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private attachEventListeners(): void {\n    // Close button\n    const closeBtn = document.getElementById('close-selector');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    // Cancel button\n    const cancelBtn = document.getElementById('cancel-selection');\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    // Confirm button\n    const confirmBtn = document.getElementById('confirm-selection');\n    if (confirmBtn) {\n      confirmBtn.addEventListener('click', this.handleConfirm.bind(this));\n    }\n\n    // Search input\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.addEventListener('input', this.handleSearch.bind(this));\n    }\n\n    // Clear search button\n    const clearBtn = document.getElementById('clear-search');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', this.handleClearSearch.bind(this));\n    }\n\n    // Filter tabs\n    document.querySelectorAll('.filter-tab').forEach(tab => {\n      tab.addEventListener('click', this.handleFilterChange.bind(this));\n    });\n\n    // Unit selection\n    document.querySelectorAll('.select-unit-btn').forEach(btn => {\n      btn.addEventListener('click', this.handleUnitSelect.bind(this));\n    });\n\n    // Unit card clicks\n    document.querySelectorAll('.unit-card').forEach(card => {\n      card.addEventListener('click', this.handleCardClick.bind(this));\n    });\n\n    // Close on overlay click\n    const overlay = document.querySelector('.modal-overlay');\n    if (overlay) {\n      overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n          this.handleCancel();\n        }\n      });\n    }\n\n    // Close on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n\n  private handleSearch(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.currentFilter = input.value;\n    this.updateFilteredUnits();\n    this.refreshUnitList();\n  }\n\n  private handleClearSearch(): void {\n    this.currentFilter = '';\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.value = '';\n    }\n    this.updateFilteredUnits();\n    this.refreshUnitList();\n  }\n\n  private handleFilterChange(event: Event): void {\n    const tab = event.target as HTMLElement;\n    const category = tab.dataset.category as 'all' | 'preset' | 'user';\n    \n    if (category && category !== this.currentCategory) {\n      this.currentCategory = category;\n      this.updateFilteredUnits();\n      this.refreshFilterTabs();\n      this.refreshUnitList();\n    }\n  }\n\n  private handleUnitSelect(event: Event): void {\n    event.stopPropagation();\n    const btn = event.target as HTMLElement;\n    const unitName = btn.dataset.unitName;\n    \n    if (unitName) {\n      const unit = this.filteredUnits.find(u => u.name === unitName);\n      if (unit) {\n        if (this.props.mode === 'multiple') {\n          // Handle multiple selection logic\n          const existingIndex = this.currentSelectedUnits.findIndex(selected => selected.name === unit.name);\n          \n          if (existingIndex >= 0) {\n            // Remove if already selected\n            this.currentSelectedUnits.splice(existingIndex, 1);\n          } else {\n            // Add if not at limit\n            const maxSelections = this.props.maxSelections || 5;\n            if (this.currentSelectedUnits.length < maxSelections) {\n              this.currentSelectedUnits.push(unit);\n            } else {\n              // Replace first selection if at limit\n              this.currentSelectedUnits.shift();\n              this.currentSelectedUnits.push(unit);\n            }\n          }\n          \n          // Refresh the unit list to update selection states\n          this.refreshUnitList();\n        }\n        \n        // Always call onSelect to notify parent\n        this.props.onSelect(unit);\n      }\n    }\n  }\n\n  private handleCardClick(event: Event): void {\n    const card = event.target as HTMLElement;\n    const unitCard = card.closest('.unit-card') as HTMLElement;\n    \n    if (unitCard) {\n      const unitName = unitCard.dataset.unitName;\n      if (unitName) {\n        const unit = this.filteredUnits.find(u => u.name === unitName);\n        if (unit) {\n          if (this.props.mode === 'multiple') {\n            // Handle multiple selection logic\n            const existingIndex = this.currentSelectedUnits.findIndex(selected => selected.name === unit.name);\n            \n            if (existingIndex >= 0) {\n              // Remove if already selected\n              this.currentSelectedUnits.splice(existingIndex, 1);\n            } else {\n              // Add if not at limit\n              const maxSelections = this.props.maxSelections || 5;\n              if (this.currentSelectedUnits.length < maxSelections) {\n                this.currentSelectedUnits.push(unit);\n              } else {\n                // Replace first selection if at limit\n                this.currentSelectedUnits.shift();\n                this.currentSelectedUnits.push(unit);\n              }\n            }\n            \n            // Refresh the unit list to update selection states\n            this.refreshUnitList();\n          }\n          \n          // Always call onSelect to notify parent\n          this.props.onSelect(unit);\n        }\n      }\n    }\n  }\n\n  private handleCancel(): void {\n    this.props.onCancel();\n  }\n\n  private handleConfirm(): void {\n    if (this.props.selectedUnit) {\n      this.props.onSelect(this.props.selectedUnit);\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      this.handleCancel();\n    }\n  }\n\n  private refreshUnitList(): void {\n    const unitList = document.getElementById('unit-list');\n    if (unitList) {\n      unitList.innerHTML = this.renderUnitList();\n      \n      // Re-attach event listeners for new elements\n      document.querySelectorAll('.select-unit-btn').forEach(btn => {\n        btn.addEventListener('click', this.handleUnitSelect.bind(this));\n      });\n\n      document.querySelectorAll('.unit-card').forEach(card => {\n        card.addEventListener('click', this.handleCardClick.bind(this));\n      });\n    }\n\n    // Update results count\n    const resultsCount = document.querySelector('.results-count');\n    if (resultsCount) {\n      resultsCount.textContent = `${this.filteredUnits.length} unit${this.filteredUnits.length !== 1 ? 's' : ''} found`;\n    }\n  }\n\n  private refreshFilterTabs(): void {\n    document.querySelectorAll('.filter-tab').forEach(tab => {\n      const category = tab.getAttribute('data-category');\n      if (category === this.currentCategory) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n  }\n\n  public unmount(): void {\n    // Remove event listeners\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    \n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n\n  /**\n   * Update the modal title (for dynamic updates)\n   */\n  public updateTitle(newTitle: string): void {\n    this.props.title = newTitle;\n    const titleElement = document.getElementById('modal-title');\n    if (titleElement) {\n      titleElement.textContent = `⚔️ ${newTitle}`;\n    }\n  }\n\n  /**\n   * Update selected units (for external updates)\n   */\n  public updateSelectedUnits(selectedUnits: EnemyUnit[]): void {\n    this.currentSelectedUnits = [...selectedUnits];\n    this.refreshUnitList();\n  }\n}","/**\n * Battle Simulation Component\n * Handles the battle simulation section of the army calculator\n */\n\nimport { BattleSimulationService } from '../../services/battleSimulation';\nimport { EnemyUnitBattleSimulationService } from '../../services/enemyBattleSimulation';\nimport { OptimizedBattleSimulationService } from '../../services/optimizedBattleSimulation';\nimport { ArmyComposition } from '../../types/units';\nimport { BattleAnalysis, BattleUtils } from '../../types/battleSimulation';\nimport { EnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitSelector } from '../EnemyUnits/EnemyUnitSelector';\nimport { DEFAULT_OPTIMIZATION_CONFIG } from '../../types/attackOptimization';\n\nexport class BattleSimulationComponent {\n  private container: HTMLElement | null = null;\n  private battleService: BattleSimulationService;\n  private enemyBattleService: EnemyUnitBattleSimulationService;\n  private optimizedBattleService: OptimizedBattleSimulationService;\n  private currentArmy: ArmyComposition | null = null;\n  private currentAnalysis: BattleAnalysis | null = null;\n  private selectedEnemyUnit: EnemyUnit | null = null;\n  private enemyUnitSelector: EnemyUnitSelector | null = null;\n  private optimizationEnabled: boolean = true;\n  private tooltipData: Record<string, string> = {\n    'battle-simulation-overview': `\n      <strong>Battle Simulation Overview</strong><br>\n      Simulates asymmetric combat where:<br>\n      • Player units deal damage to enemies<br>\n      • Enemy units eliminate player groups<br>\n      • Battle ends when all player groups are eliminated<br>\n      • Results show best case (player first) vs worst case (enemy first)\n    `,\n    'enemy-groups': `\n      <strong>Enemy Groups</strong><br>\n      Each enemy group represents a separate attacking force:<br>\n      • More groups = more enemy attacks per battle phase<br>\n      • Each group can eliminate one player unit group<br>\n      • Enemies target your highest health groups first<br>\n      • Recommended: 1-5 groups for balanced battles\n    `,\n    'run-simulation': `\n      <strong>Run Battle Simulation</strong><br>\n      Executes both scenarios simultaneously:<br>\n      • <span style=\"color: #27ae60;\">Best Case:</span> Your units attack first<br>\n      • <span style=\"color: #e74c3c;\">Worst Case:</span> Enemy units attack first<br>\n      • Shows damage dealt, battle duration, and survival statistics<br>\n      • Results help optimize army composition\n    `,\n    'battle-mechanics-guide': `\n      <strong>Battle Mechanics Guide</strong><br>\n      <strong>Turn Order:</strong> Players attack by strength (highest first), enemies target by health (highest first)<br>\n      <strong>Battle Phases:</strong> Each unit gets exactly one turn per phase<br>\n      <strong>Overflow:</strong> Side with more groups gets extra turns<br>\n      <strong>Elimination:</strong> Units eliminated mid-phase don't get subsequent turns\n    `,\n    'battle-results': `\n      <strong>Battle Analysis Results</strong><br>\n      Shows outcomes for both scenarios:<br>\n      • <span style=\"color: #27ae60;\">Best Case:</span> Maximum damage when you attack first<br>\n      • <span style=\"color: #e74c3c;\">Worst Case:</span> Minimum damage when enemies attack first<br>\n      • <strong>Comparison:</strong> Difference between scenarios<br>\n      • Use results to optimize army composition\n    `,\n    'best-case-scenario': `\n      <strong>Best Case Scenario</strong><br>\n      Your army gets initiative and attacks first:<br>\n      • Higher damage potential<br>\n      • Longer battle duration<br>\n      • Better survival chances<br>\n      • Represents optimal conditions\n    `,\n    'worst-case-scenario': `\n      <strong>Worst Case Scenario</strong><br>\n      Enemy forces attack first:<br>\n      • Lower damage potential<br>\n      • Shorter battle duration<br>\n      • Reduced survival chances<br>\n      • Represents challenging conditions\n    `\n  };\n\n  constructor() {\n    this.battleService = new BattleSimulationService();\n    this.enemyBattleService = new EnemyUnitBattleSimulationService();\n    this.optimizedBattleService = new OptimizedBattleSimulationService();\n  }\n\n  /**\n   * Mount the battle simulation component\n   */\n  public mount(container: HTMLElement, army: ArmyComposition): void {\n    this.container = container;\n    this.currentArmy = army;\n    this.render();\n    this.attachEventListeners();\n\n    // Ensure controls are visible for regular stacking mode\n    this.showSimulationControls();\n  }\n\n  /**\n   * Initialize the battle simulation component with unit loader\n   */\n  public initialize(unitLoader: any): void {\n    this.optimizedBattleService.initialize(unitLoader);\n    this.enemyBattleService.initialize(unitLoader);\n  }\n\n  /**\n   * Render the battle simulation interface\n   */\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <section class=\"card battle-simulation-section\" id=\"battle-simulation-section\">\n        <h2 class=\"section-title\">⚔️ Battle Simulation\n          <span class=\"help-icon\" data-tooltip=\"battle-simulation-overview\">ℹ️</span>\n        </h2>\n        <p class=\"section-description\">\n          Simulate battles against enemy forces to analyze best and worst case scenarios.\n          Enter the number of enemy groups you expect to face.\n        </p>\n\n        <!-- Enemy Configuration -->\n        <div class=\"enemy-input-container\">\n          <!-- Enemy Type Selection -->\n          <div class=\"enemy-type-selection\">\n            <h4>Choose Enemy Type:</h4>\n            <div class=\"enemy-type-options\">\n              <label class=\"radio-option\">\n                <input type=\"radio\" name=\"enemy-type\" value=\"generic\" checked>\n                <span class=\"radio-label\">Generic Enemy Groups</span>\n                <small class=\"radio-help\">Simple enemy groups without specific units</small>\n              </label>\n              <label class=\"radio-option\">\n                <input type=\"radio\" name=\"enemy-type\" value=\"specific\">\n                <span class=\"radio-label\">Specific Enemy Units</span>\n                <small class=\"radio-help\">Choose specific enemy units with unique abilities</small>\n              </label>\n            </div>\n          </div>\n\n          <!-- Generic Enemy Input -->\n          <div id=\"generic-enemy-input\" class=\"enemy-config-section\">\n            <div class=\"input-group\">\n              <label for=\"enemy-groups\" class=\"input-label\">\n                Number of Enemy Groups:\n                <span class=\"help-icon\" data-tooltip=\"enemy-groups\">ℹ️</span>\n              </label>\n              <input\n                type=\"number\"\n                id=\"enemy-groups\"\n                min=\"1\"\n                max=\"20\"\n                value=\"3\"\n                class=\"input large-input\"\n                placeholder=\"Enter number of enemy groups\"\n              >\n              <small class=\"input-help\">\n                Each enemy group can eliminate one of your unit groups per attack.\n              </small>\n            </div>\n          </div>\n\n          <!-- Specific Enemy Unit Input -->\n          <div id=\"specific-enemy-input\" class=\"enemy-config-section hidden\">\n            <div class=\"enemy-unit-selection\">\n              <div class=\"selected-enemy-display\">\n                <div id=\"no-enemy-selected\" class=\"no-selection-message\">\n                  <span class=\"icon\">🎯</span>\n                  <span class=\"message\">No enemy unit selected</span>\n                  <small class=\"help\">Click \"Select Enemy Unit\" to choose a specific enemy</small>\n                </div>\n                <div id=\"selected-enemy-info\" class=\"selected-enemy-card hidden\">\n                  <!-- Selected enemy info will be populated here -->\n                </div>\n              </div>\n              <div class=\"enemy-selection-controls\">\n                <button id=\"select-enemy-btn\" class=\"btn btn-secondary\">\n                  🎯 Select Enemy Unit\n                </button>\n                <button id=\"clear-enemy-btn\" class=\"btn btn-outline\" style=\"display: none;\">\n                  🗑️ Clear Selection\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"simulation-controls\">\n            <button id=\"run-simulation-btn\" class=\"btn btn-primary large-btn\" data-tooltip=\"run-simulation\">\n              🎯 Run Battle Simulation\n            </button>\n            <button id=\"clear-simulation-btn\" class=\"btn btn-secondary\" style=\"display: none;\">\n              🗑️ Clear Results\n            </button>\n          </div>\n        </div>\n\n        <!-- Pre-calculated Results Note -->\n        <div id=\"simulation-note\" class=\"simulation-note hidden\">\n          <!-- Note will be populated here -->\n        </div>\n\n        <!-- Loading State -->\n        <div id=\"simulation-loading\" class=\"simulation-loading hidden\">\n          <div class=\"loading-spinner\"></div>\n          <p>Running battle simulation...</p>\n        </div>\n\n        <!-- Results Container -->\n        <div id=\"simulation-results\" class=\"simulation-results hidden\">\n          <!-- Results will be populated here -->\n        </div>\n\n        <!-- Help Section -->\n        <div class=\"help-section\">\n          <h4>📚 Battle Mechanics Guide\n            <span class=\"help-icon\" data-tooltip=\"battle-mechanics-guide\">ℹ️</span>\n          </h4>\n          <div class=\"help-content\">\n            <div class=\"help-item\">\n              <strong>🎯 Initiative:</strong> 50/50 chance who attacks first (best vs worst case)\n            </div>\n            <div class=\"help-item\">\n              <strong>⚔️ Player Attacks:</strong> Deal damage to enemies based on unit strength\n            </div>\n            <div class=\"help-item\">\n              <strong>🛡️ Enemy Attacks:</strong> Eliminate entire player unit groups\n            </div>\n            <div class=\"help-item\">\n              <strong>🔄 Battle Phases:</strong> All units take turns, then cycle repeats\n            </div>\n            <div class=\"help-item\">\n              <strong>🏁 Victory Condition:</strong> Battle ends when all player groups are eliminated\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!-- Tooltip Container -->\n      <div id=\"tooltip\" class=\"tooltip hidden\">\n        <div class=\"tooltip-content\"></div>\n        <div class=\"tooltip-arrow\"></div>\n      </div>\n    `;\n\n    this.addBattleSimulationStyles();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    const runBtn = document.getElementById('run-simulation-btn');\n    const clearBtn = document.getElementById('clear-simulation-btn');\n    const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n    const selectEnemyBtn = document.getElementById('select-enemy-btn');\n    const clearEnemyBtn = document.getElementById('clear-enemy-btn');\n\n    if (runBtn) {\n      runBtn.addEventListener('click', () => this.runSimulation());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearResults());\n    }\n\n    if (enemyGroupsInput) {\n      enemyGroupsInput.addEventListener('input', () => this.validateInput());\n    }\n\n    if (selectEnemyBtn) {\n      selectEnemyBtn.addEventListener('click', () => this.openEnemyUnitSelector());\n    }\n\n    if (clearEnemyBtn) {\n      clearEnemyBtn.addEventListener('click', () => this.clearSelectedEnemyUnit());\n    }\n\n    // Attach enemy type radio listeners\n    const enemyTypeRadios = document.querySelectorAll('input[name=\"enemy-type\"]');\n    enemyTypeRadios.forEach(radio => {\n      radio.addEventListener('change', (e) => this.handleEnemyTypeChange(e as Event));\n    });\n\n    // Attach tooltip listeners\n    this.attachTooltipListeners();\n  }\n\n  /**\n   * Handle enemy type change (generic vs specific)\n   */\n  private handleEnemyTypeChange(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    const enemyType = target.value;\n    \n    const genericSection = document.getElementById('generic-enemy-input');\n    const specificSection = document.getElementById('specific-enemy-input');\n    \n    if (enemyType === 'generic') {\n      genericSection?.classList.remove('hidden');\n      specificSection?.classList.add('hidden');\n    } else if (enemyType === 'specific') {\n      genericSection?.classList.add('hidden');\n      specificSection?.classList.remove('hidden');\n    }\n    \n    // Revalidate input when switching types\n    this.validateInput();\n  }\n\n  /**\n   * Open enemy unit selector modal\n   */\n  private async openEnemyUnitSelector(): Promise<void> {\n    // Create modal container\n    const modalContainer = document.createElement('div');\n    modalContainer.id = 'enemy-unit-selector-modal';\n    document.body.appendChild(modalContainer);\n    \n    // Create selector with props\n    this.enemyUnitSelector = new EnemyUnitSelector({\n      onSelect: (selectedUnit: EnemyUnit) => {\n        this.selectedEnemyUnit = selectedUnit;\n        this.displaySelectedEnemyUnit();\n        this.validateInput();\n        this.closeEnemyUnitSelector();\n      },\n      onCancel: () => {\n        this.closeEnemyUnitSelector();\n      },\n      selectedUnit: this.selectedEnemyUnit,\n      mode: 'single',\n      title: 'Select Enemy Unit for Battle'\n    });\n    \n    // Mount the selector\n    await this.enemyUnitSelector.mount(modalContainer);\n  }\n\n  /**\n   * Close enemy unit selector modal\n   */\n  private closeEnemyUnitSelector(): void {\n    if (this.enemyUnitSelector) {\n      this.enemyUnitSelector.unmount();\n      this.enemyUnitSelector = null;\n    }\n    \n    const modalContainer = document.getElementById('enemy-unit-selector-modal');\n    if (modalContainer) {\n      modalContainer.remove();\n    }\n  }\n\n  /**\n   * Clear selected enemy unit\n   */\n  private clearSelectedEnemyUnit(): void {\n    this.selectedEnemyUnit = null;\n    this.displaySelectedEnemyUnit();\n    this.validateInput();\n  }\n\n  /**\n   * Display the selected enemy unit in the UI\n   */\n  private displaySelectedEnemyUnit(): void {\n    const noSelectionEl = document.getElementById('no-enemy-selected');\n    const selectedInfoEl = document.getElementById('selected-enemy-info');\n    const clearEnemyBtn = document.getElementById('clear-enemy-btn');\n    \n    if (!noSelectionEl || !selectedInfoEl || !clearEnemyBtn) return;\n    \n    if (!this.selectedEnemyUnit) {\n      noSelectionEl.classList.remove('hidden');\n      selectedInfoEl.classList.add('hidden');\n      clearEnemyBtn.style.display = 'none';\n    } else {\n      noSelectionEl.classList.add('hidden');\n      selectedInfoEl.classList.remove('hidden');\n      clearEnemyBtn.style.display = 'inline-block';\n      \n      // Display enemy unit information\n      const unit = this.selectedEnemyUnit;\n      const attackModifiersText = unit.attack_modifiers && Object.keys(unit.attack_modifiers).length > 0\n        ? Object.entries(unit.attack_modifiers)\n            .map(([type, bonus]) => `+${bonus} vs ${type}`)\n            .join(', ')\n        : 'None';\n      \n      selectedInfoEl.innerHTML = `\n        <div class=\"enemy-unit-card\">\n          <div class=\"enemy-unit-header\">\n            <h5 class=\"enemy-unit-name\">${unit.name}</h5>\n            <div class=\"enemy-unit-types\">\n              ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n            </div>\n          </div>\n          <div class=\"enemy-unit-stats\">\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Health:</span>\n              <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Strength:</span>\n              <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Attack Modifiers:</span>\n              <span class=\"stat-value\">${attackModifiersText}</span>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Validate enemy configuration input with comprehensive error checking\n   */\n  private validateInput(): boolean {\n    const runBtn = document.getElementById('run-simulation-btn') as HTMLButtonElement;\n    if (!runBtn) return false;\n\n    // Get current enemy type\n    const enemyTypeRadio = document.querySelector('input[name=\"enemy-type\"]:checked') as HTMLInputElement;\n    const enemyType = enemyTypeRadio?.value || 'generic';\n\n    let isValid = true;\n    let errorMessage = '';\n\n    if (enemyType === 'generic') {\n      // Validate generic enemy groups input\n      const input = document.getElementById('enemy-groups') as HTMLInputElement;\n      if (!input) return false;\n\n      const inputValue = input.value.trim();\n\n      // Check if input is empty\n      if (!inputValue) {\n        isValid = false;\n        errorMessage = 'Please enter the number of enemy groups';\n      }\n      // Check if input is a valid number\n      else if (isNaN(Number(inputValue)) || !Number.isInteger(Number(inputValue))) {\n        isValid = false;\n        errorMessage = 'Please enter a valid whole number';\n      }\n      else {\n        const value = parseInt(inputValue);\n\n        // Check range constraints\n        if (value < 1) {\n          isValid = false;\n          errorMessage = 'Number of enemy groups must be at least 1';\n        }\n        // Performance limit removed - allow any number of enemy groups\n      }\n\n      // Update UI based on validation\n      if (!isValid) {\n        input.classList.add('error');\n        this.showInputError('enemy-groups', errorMessage);\n      } else {\n        input.classList.remove('error');\n        this.hideInputError('enemy-groups');\n      }\n    } else if (enemyType === 'specific') {\n      // Validate specific enemy unit selection\n      if (!this.selectedEnemyUnit) {\n        isValid = false;\n        errorMessage = 'Please select an enemy unit for the battle simulation';\n      }\n    }\n\n    // Update run button state\n    runBtn.disabled = !isValid || !this.validateArmyComposition();\n\n    return isValid;\n  }\n\n  /**\n   * Validate army composition before simulation\n   */\n  private validateArmyComposition(): boolean {\n    if (!this.currentArmy) {\n      return false;\n    }\n\n    // Check if army has any units\n    if (!this.currentArmy.stackingOrder || this.currentArmy.stackingOrder.length === 0) {\n      return false;\n    }\n\n    // Check if all units have valid data\n    for (const group of this.currentArmy.stackingOrder) {\n      if (!group.unitName || group.count <= 0 || group.unitStrength <= 0 || group.totalHealth <= 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Show input error message\n   */\n  private showInputError(inputId: string, message: string): void {\n    const input = document.getElementById(inputId);\n    if (!input) return;\n\n    // Remove existing error message\n    this.hideInputError(inputId);\n\n    // Create error message element\n    const errorElement = document.createElement('div');\n    errorElement.className = 'input-error-message';\n    errorElement.id = `${inputId}-error`;\n    errorElement.textContent = message;\n\n    // Insert after the input\n    input.parentNode?.insertBefore(errorElement, input.nextSibling);\n  }\n\n  /**\n   * Hide input error message\n   */\n  private hideInputError(inputId: string): void {\n    const errorElement = document.getElementById(`${inputId}-error`);\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  /**\n   * Attach tooltip event listeners\n   */\n  private attachTooltipListeners(): void {\n    const helpIcons = document.querySelectorAll('.help-icon[data-tooltip]');\n\n    helpIcons.forEach(icon => {\n      icon.addEventListener('mouseenter', (e) => this.showTooltip(e as MouseEvent));\n      icon.addEventListener('mouseleave', () => this.hideTooltip());\n      icon.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.toggleTooltip(e as MouseEvent);\n      });\n    });\n\n    // Hide tooltip when clicking elsewhere\n    document.addEventListener('click', (e) => {\n      const target = e.target as Element;\n      if (!target.closest('.help-icon') && !target.closest('#tooltip')) {\n        this.hideTooltip();\n      }\n    });\n  }\n\n  /**\n   * Show tooltip\n   */\n  private showTooltip(event: MouseEvent): void {\n    const target = event.target as Element;\n    const tooltipKey = target.getAttribute('data-tooltip');\n\n    if (!tooltipKey || !this.tooltipData[tooltipKey]) return;\n\n    const tooltip = document.getElementById('tooltip');\n    const tooltipContent = tooltip?.querySelector('.tooltip-content');\n\n    if (!tooltip || !tooltipContent) return;\n\n    tooltipContent.innerHTML = this.tooltipData[tooltipKey];\n    tooltip.classList.remove('hidden');\n\n    // Position tooltip\n    this.positionTooltip(tooltip, target);\n  }\n\n  /**\n   * Hide tooltip\n   */\n  private hideTooltip(): void {\n    const tooltip = document.getElementById('tooltip');\n    if (tooltip) {\n      tooltip.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Toggle tooltip (for mobile/click)\n   */\n  private toggleTooltip(event: MouseEvent): void {\n    const tooltip = document.getElementById('tooltip');\n    if (tooltip?.classList.contains('hidden')) {\n      this.showTooltip(event);\n    } else {\n      this.hideTooltip();\n    }\n  }\n\n  /**\n   * Position tooltip relative to target element\n   */\n  private positionTooltip(tooltip: Element, target: Element): void {\n    const targetRect = target.getBoundingClientRect();\n    const tooltipElement = tooltip as HTMLElement;\n\n    // Reset position\n    tooltipElement.style.top = '';\n    tooltipElement.style.left = '';\n    tooltipElement.style.transform = '';\n\n    // Calculate position\n    const tooltipRect = tooltip.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    let top = targetRect.bottom + 10;\n    let left = targetRect.left + (targetRect.width / 2) - (tooltipRect.width / 2);\n\n    // Adjust if tooltip goes off screen\n    if (left < 10) {\n      left = 10;\n    } else if (left + tooltipRect.width > viewportWidth - 10) {\n      left = viewportWidth - tooltipRect.width - 10;\n    }\n\n    if (top + tooltipRect.height > viewportHeight - 10) {\n      top = targetRect.top - tooltipRect.height - 10;\n    }\n\n    tooltipElement.style.top = `${top}px`;\n    tooltipElement.style.left = `${left}px`;\n  }\n\n  /**\n   * Run the battle simulation with comprehensive error handling\n   */\n  private async runSimulation(): Promise<void> {\n    // Comprehensive validation before starting\n    if (!this.validateInput()) {\n      this.showError('Please fix the input errors before running the simulation.');\n      return;\n    }\n\n    if (!this.validateArmyComposition()) {\n      this.showError('Invalid army composition. Please ensure you have selected and optimized your army first.');\n      return;\n    }\n\n    // Get current enemy type\n    const enemyTypeRadio = document.querySelector('input[name=\"enemy-type\"]:checked') as HTMLInputElement;\n    const enemyType = enemyTypeRadio?.value || 'generic';\n\n    // Show loading state\n    this.showLoading(true);\n    this.hideError();\n\n    try {\n      // Validate army composition one more time\n      if (!this.currentArmy || !this.currentArmy.stackingOrder) {\n        throw new Error('Army composition is invalid or missing');\n      }\n\n      // Run simulation with timeout protection using optimized battle simulation\n      const simulationPromise = new Promise<void>((resolve, reject) => {\n        try {\n          if (enemyType === 'specific' && this.selectedEnemyUnit) {\n            // Use optimized battle simulation with specific enemy units\n            // First optimize the attack order, then run both scenarios\n            const optimizedArmy = { ...this.currentArmy! };\n            optimizedArmy.stackingOrder = this.optimizedBattleService.calculateOptimizedAttackOrder(\n              this.currentArmy!.stackingOrder,\n              [this.selectedEnemyUnit],\n              DEFAULT_OPTIMIZATION_CONFIG\n            );\n            \n            this.currentAnalysis = this.optimizedBattleService.simulateBothScenariosWithEnemyUnits(\n              optimizedArmy,\n              [this.selectedEnemyUnit]\n            );\n          } else {\n            // Use optimized battle simulation with generic enemy groups\n            const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n            const enemyGroups = parseInt(enemyGroupsInput.value);\n\n            // Additional validation for generic enemies\n            if (enemyGroups > this.currentArmy!.stackingOrder.length * 10) {\n              console.warn(`Warning: ${enemyGroups} enemy groups vs ${this.currentArmy!.stackingOrder.length} player groups may result in a very short battle.`);\n            }\n\n            // For generic enemies, use standard simulation (optimization requires specific enemy units)\n            this.currentAnalysis = this.optimizedBattleService.simulateBothScenarios(this.currentArmy!, enemyGroups);\n          }\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      // Add timeout to prevent hanging\n      const timeoutPromise = new Promise<void>((_, reject) => {\n        setTimeout(() => reject(new Error('Simulation timed out')), 30000); // 30 second timeout\n      });\n\n      await Promise.race([simulationPromise, timeoutPromise]);\n\n      // Validate results\n      if (!this.currentAnalysis || !this.currentAnalysis.bestCase || !this.currentAnalysis.worstCase) {\n        throw new Error('Simulation completed but results are invalid');\n      }\n\n      // Display results\n      this.displayResults();\n\n      // Update UI state\n      this.showLoading(false);\n      this.showResults(true);\n\n      // Show clear button\n      const clearBtn = document.getElementById('clear-simulation-btn');\n      if (clearBtn) clearBtn.style.display = 'inline-block';\n\n    } catch (error) {\n      console.error('Battle simulation failed:', error);\n      this.showLoading(false);\n\n      // Provide specific error messages based on error type\n      let errorMessage = 'An unexpected error occurred during simulation.';\n\n      if (error instanceof Error) {\n        if (error.message.includes('timeout')) {\n          errorMessage = 'Simulation timed out. Try reducing the complexity or check your army composition.';\n        } else if (error.message.includes('invalid')) {\n          errorMessage = 'Invalid data detected. Please refresh the page and try again.';\n        } else if (error.message.includes('Army composition')) {\n          errorMessage = 'Army composition error. Please re-optimize your army and try again.';\n        } else if (error.message.includes('Enemy unit')) {\n          errorMessage = 'Enemy unit configuration error. Please select a valid enemy unit.';\n        }\n      }\n\n      this.showError(errorMessage);\n    }\n  }\n\n  /**\n   * Display simulation results\n   */\n  private displayResults(): void {\n    if (!this.currentAnalysis) return;\n\n    const resultsContainer = document.getElementById('simulation-results');\n    if (!resultsContainer) return;\n\n    const { bestCase, worstCase, comparison } = this.currentAnalysis;\n\n    resultsContainer.innerHTML = `\n      <div class=\"results-header\">\n        <h3>📊 Battle Analysis Results\n          <span class=\"help-icon\" data-tooltip=\"battle-results\">ℹ️</span>\n        </h3>\n        <p class=\"results-summary\">\n          Simulation complete! Here's how your army performs against ${bestCase.configuration.enemyGroupCount} enemy groups.\n        </p>\n      </div>\n\n      <div class=\"scenario-comparison\">\n        <div class=\"scenario-card best-case\">\n          <h4>🟢 Best Case Scenario\n            <span class=\"help-icon\" data-tooltip=\"best-case-scenario\">ℹ️</span>\n          </h4>\n          <p class=\"scenario-description\">Your army attacks first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${bestCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${bestCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${bestCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"scenario-card worst-case\">\n          <h4>🔴 Worst Case Scenario\n            <span class=\"help-icon\" data-tooltip=\"worst-case-scenario\">ℹ️</span>\n          </h4>\n          <p class=\"scenario-description\">Enemy attacks first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${worstCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${worstCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${worstCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"comparison-summary\">\n        <h4>📈 Comparison Analysis</h4>\n        <div class=\"comparison-stats\">\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Damage Difference:</span>\n            <span class=\"stat-value ${comparison.damageDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.damageDifference >= 0 ? '+' : ''}${comparison.damageDifference.toLocaleString()}\n            </span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Average Damage:</span>\n            <span class=\"stat-value\">${Math.round(comparison.averageDamage).toLocaleString()}</span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Survival Difference:</span>\n            <span class=\"stat-value ${comparison.survivalDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.survivalDifference >= 0 ? '+' : ''}${comparison.survivalDifference} turns\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"detailed-logs\">\n        <div class=\"log-tabs\">\n          <button class=\"log-tab active\" data-scenario=\"best\">Best Case Combat Log</button>\n          <button class=\"log-tab\" data-scenario=\"worst\">Worst Case Combat Log</button>\n        </div>\n        <div class=\"log-content\">\n          <div id=\"best-case-log\" class=\"combat-log active\">\n            ${this.formatCombatLog(bestCase.combatLog)}\n          </div>\n          <div id=\"worst-case-log\" class=\"combat-log hidden\">\n            ${this.formatCombatLog(worstCase.combatLog)}\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Attach log tab listeners\n    this.attachLogTabListeners();\n\n    // Reattach tooltip listeners for new content\n    this.attachTooltipListeners();\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private formatCombatLog(combatLog: any[]): string {\n    if (combatLog.length === 0) {\n      return '<p class=\"no-log\">No combat actions recorded.</p>';\n    }\n\n    const logEntries = combatLog.map(action => {\n      // Determine if this is a player turn by checking if the action eliminates a unit\n      // Player attacks deal damage but don't eliminate, enemy attacks eliminate player units\n      const isPlayerTurn = !action.eliminated;\n      const turnClass = isPlayerTurn ? 'log-entry player-turn' : 'log-entry enemy-turn';\n\n      return `\n        <div class=\"${turnClass}\">\n          <span class=\"turn-number\">Turn ${action.turn}:</span>\n          <span class=\"action-text\">${action.attacker} ${action.action}</span>\n        </div>\n      `;\n    }).join('');\n\n    return `<div class=\"log-entries\">${logEntries}</div>`;\n  }\n\n  /**\n   * Attach log tab event listeners\n   */\n  private attachLogTabListeners(): void {\n    const logTabs = document.querySelectorAll('.log-tab');\n    logTabs.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        const scenario = target.dataset.scenario;\n        \n        // Update active tab\n        logTabs.forEach(t => t.classList.remove('active'));\n        target.classList.add('active');\n        \n        // Show corresponding log\n        const logs = document.querySelectorAll('.combat-log');\n        logs.forEach(log => {\n          log.classList.remove('active');\n          log.classList.add('hidden');\n        });\n        \n        const activeLog = document.getElementById(`${scenario}-case-log`);\n        if (activeLog) {\n          activeLog.classList.add('active');\n          activeLog.classList.remove('hidden');\n        }\n      });\n    });\n  }\n\n  /**\n   * Clear simulation results\n   */\n  private clearResults(): void {\n    this.currentAnalysis = null;\n    this.showResults(false);\n    \n    const clearBtn = document.getElementById('clear-simulation-btn');\n    if (clearBtn) clearBtn.style.display = 'none';\n  }\n\n  /**\n   * Show/hide loading state\n   */\n  private showLoading(show: boolean): void {\n    const loadingEl = document.getElementById('simulation-loading');\n    if (loadingEl) {\n      loadingEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show/hide results\n   */\n  private showResults(show: boolean): void {\n    const resultsEl = document.getElementById('simulation-results');\n    if (resultsEl) {\n      resultsEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show error message with better UI\n   */\n  private showError(message: string): void {\n    // Remove existing error\n    this.hideError();\n\n    // Create error element\n    const errorElement = document.createElement('div');\n    errorElement.className = 'simulation-error';\n    errorElement.id = 'simulation-error';\n    errorElement.innerHTML = `\n      <div class=\"error-content\">\n        <span class=\"error-icon\">⚠️</span>\n        <span class=\"error-message\">${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Insert error before results container\n    const resultsContainer = document.getElementById('simulation-results');\n    if (resultsContainer && resultsContainer.parentNode) {\n      resultsContainer.parentNode.insertBefore(errorElement, resultsContainer);\n    } else {\n      // Fallback to container\n      if (this.container) {\n        this.container.appendChild(errorElement);\n      }\n    }\n\n    // Auto-hide after 10 seconds\n    setTimeout(() => {\n      this.hideError();\n    }, 10000);\n  }\n\n  /**\n   * Hide error message\n   */\n  private hideError(): void {\n    const errorElement = document.getElementById('simulation-error');\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  /**\n   * Add battle simulation specific styles\n   */\n  private addBattleSimulationStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .battle-simulation-section {\n        margin-top: 2rem;\n        padding: 2rem;\n        background: linear-gradient(135deg, #fff0f0 0%, #f8f9fa 100%);\n        border: 2px solid #e74c3c;\n        border-radius: 12px;\n      }\n\n      .section-description {\n        color: #666;\n        margin-bottom: 2rem;\n        font-size: 1.1rem;\n        line-height: 1.6;\n      }\n\n      .enemy-input-container {\n        background: white;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .input-help {\n        color: #666;\n        font-size: 0.9rem;\n        margin-top: 0.5rem;\n        display: block;\n      }\n\n      .simulation-controls {\n        margin-top: 1.5rem;\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .simulation-loading {\n        text-align: center;\n        padding: 2rem;\n        background: white;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .simulation-results {\n        background: white;\n        border-radius: 8px;\n        padding: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .results-header {\n        text-align: center;\n        margin-bottom: 2rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .results-summary {\n        color: #666;\n        font-size: 1.1rem;\n        margin-top: 0.5rem;\n      }\n\n      .scenario-comparison {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .scenario-card {\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .scenario-card.best-case {\n        background: #f0fff4;\n        border-color: #27ae60;\n      }\n\n      .scenario-card.worst-case {\n        background: #fff5f5;\n        border-color: #e74c3c;\n      }\n\n      .scenario-card h4 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.3rem;\n      }\n\n      .scenario-description {\n        color: #666;\n        margin-bottom: 1rem;\n        font-style: italic;\n      }\n\n      .scenario-stats, .comparison-stats {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .stat, .comparison-stat {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 4px;\n      }\n\n      .stat-label {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .stat-value {\n        font-weight: 700;\n        color: #2c3e50;\n      }\n\n      .stat-value.positive {\n        color: #27ae60;\n      }\n\n      .stat-value.negative {\n        color: #e74c3c;\n      }\n\n      .comparison-summary {\n        background: #f8f9fa;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n      }\n\n      .comparison-summary h4 {\n        margin: 0 0 1rem 0;\n        color: #2c3e50;\n      }\n\n      .detailed-logs {\n        border-top: 2px solid #eee;\n        padding-top: 2rem;\n      }\n\n      .log-tabs {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n\n      .log-tab {\n        padding: 0.75rem 1.5rem;\n        border: 2px solid #ddd;\n        background: #f8f9fa;\n        border-radius: 6px 6px 0 0;\n        cursor: pointer;\n        font-weight: 600;\n        transition: all 0.2s;\n      }\n\n      .log-tab.active {\n        background: white;\n        border-bottom-color: white;\n        color: #2c3e50;\n      }\n\n      .log-content {\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 0 6px 6px 6px;\n        padding: 1.5rem;\n        min-height: 300px;\n        max-height: 500px;\n        overflow-y: auto;\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      .combat-log.hidden {\n        display: none;\n      }\n\n      .log-entries {\n        font-family: 'Courier New', monospace;\n        font-size: 0.9rem;\n        line-height: 1.6;\n      }\n\n      .log-entry {\n        padding: 0.5rem;\n        border-bottom: 1px solid #f0f0f0;\n        border-radius: 4px;\n        margin-bottom: 2px;\n      }\n\n      .log-entry.player-turn {\n        background-color: #e3f2fd;\n        border-left: 3px solid #2196f3;\n      }\n\n      .log-entry.enemy-turn {\n        background-color: #ffebee;\n        border-left: 3px solid #f44336;\n      }\n\n      .turn-number {\n        color: #666;\n        font-weight: 600;\n        margin-right: 0.5rem;\n      }\n\n      .action-text {\n        color: #333;\n      }\n\n      .no-log {\n        text-align: center;\n        color: #666;\n        font-style: italic;\n        padding: 2rem;\n      }\n\n      .input.error {\n        border-color: #e74c3c;\n        background-color: #fff5f5;\n        box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.2);\n      }\n\n      .input-error-message {\n        color: #e74c3c;\n        font-size: 0.85rem;\n        margin-top: 0.25rem;\n        display: block;\n        font-weight: 500;\n      }\n\n      .simulation-error {\n        background: #f8d7da;\n        border: 2px solid #e74c3c;\n        border-radius: 8px;\n        margin-bottom: 1rem;\n        animation: slideIn 0.3s ease-out;\n      }\n\n      .error-content {\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .error-icon {\n        font-size: 1.2rem;\n        flex-shrink: 0;\n      }\n\n      .error-message {\n        flex: 1;\n        color: #721c24;\n        font-weight: 500;\n        line-height: 1.4;\n      }\n\n      .error-close {\n        background: none;\n        border: none;\n        font-size: 1.5rem;\n        color: #721c24;\n        cursor: pointer;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        transition: background-color 0.2s;\n      }\n\n      .error-close:hover {\n        background-color: rgba(114, 28, 36, 0.1);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      .loading-spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid #f3f3f3;\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 1rem;\n      }\n\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n\n      @media (max-width: 768px) {\n        .scenario-comparison {\n          grid-template-columns: 1fr;\n        }\n        \n        .simulation-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n        \n        .log-tabs {\n          flex-direction: column;\n        }\n        \n        .log-tab {\n          border-radius: 6px;\n        }\n        \n        .log-content {\n          border-radius: 6px;\n        }\n      }\n\n      /* Help Section Styles */\n      .help-section {\n        background: #e8f5e8;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-top: 2rem;\n        border: 2px solid #27ae60;\n      }\n\n      .help-section h4 {\n        margin: 0 0 1rem 0;\n        color: #1e7e34;\n        font-size: 1.1rem;\n      }\n\n      .help-content {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .help-item {\n        background: white;\n        padding: 0.75rem;\n        border-radius: 6px;\n        border-left: 4px solid #27ae60;\n        font-size: 0.9rem;\n        line-height: 1.4;\n        color: #333333;\n      }\n\n      .help-icon {\n        display: inline-block;\n        margin-left: 0.5rem;\n        cursor: help;\n        color: #007bff;\n        font-size: 0.9rem;\n        transition: all 0.2s;\n        user-select: none;\n      }\n\n      .help-icon:hover {\n        color: #0056b3;\n        transform: scale(1.1);\n      }\n\n      /* Tooltip Styles */\n      .tooltip {\n        position: fixed;\n        background: #2c3e50;\n        color: white;\n        padding: 0;\n        border-radius: 8px;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        z-index: 1000;\n        max-width: 300px;\n        font-size: 0.9rem;\n        line-height: 1.4;\n      }\n\n      .tooltip-content {\n        padding: 1rem;\n      }\n\n      .tooltip-arrow {\n        position: absolute;\n        top: -6px;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 0;\n        height: 0;\n        border-left: 6px solid transparent;\n        border-right: 6px solid transparent;\n        border-bottom: 6px solid #2c3e50;\n      }\n\n      .tooltip.hidden {\n        display: none;\n      }\n\n      /* Simulation Note Styles */\n      .simulation-note {\n        margin-bottom: 1.5rem;\n      }\n\n      .info-note {\n        background: #e3f2fd;\n        border: 1px solid #2196f3;\n        border-radius: 6px;\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .note-icon {\n        font-size: 1.2rem;\n        color: #1976d2;\n      }\n\n      .note-text {\n        color: #1565c0;\n        font-weight: 500;\n        font-size: 0.95rem;\n      }\n\n      /* Enemy Type Selection Styles */\n      .enemy-type-selection {\n        background-color: #f8f9fa;\n        border: 1px solid #dee2e6;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 20px;\n      }\n\n      .enemy-type-selection h4 {\n        margin-top: 0;\n        margin-bottom: 15px;\n        color: #495057;\n        font-size: 18px;\n      }\n\n      .enemy-type-options {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n\n      .radio-option {\n        display: flex;\n        align-items: flex-start;\n        gap: 10px;\n        padding: 15px;\n        border: 2px solid #dee2e6;\n        border-radius: 8px;\n        background-color: white;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .radio-option:hover {\n        border-color: #007bff;\n        background-color: #f8f9fa;\n      }\n\n      .radio-option:has(input:checked) {\n        border-color: #007bff;\n        background-color: #e7f3ff;\n      }\n\n      .radio-option input[type=\"radio\"] {\n        margin: 0;\n        margin-top: 2px;\n      }\n\n      .radio-label {\n        font-weight: 600;\n        color: #495057;\n        display: block;\n        margin-bottom: 5px;\n      }\n\n      .radio-help {\n        color: #6c757d;\n        font-size: 14px;\n        line-height: 1.4;\n        display: block;\n      }\n\n      .enemy-config-section {\n        margin-top: 15px;\n        padding: 15px;\n        background-color: #fff;\n        border: 1px solid #dee2e6;\n        border-radius: 6px;\n      }\n\n      .enemy-unit-selection {\n        margin-top: 15px;\n      }\n\n      .selected-enemy-display {\n        margin-bottom: 15px;\n      }\n\n      .no-selection-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 10px;\n        padding: 20px;\n        background-color: #f8f9fa;\n        border: 2px dashed #dee2e6;\n        border-radius: 8px;\n        text-align: center;\n      }\n\n      .no-selection-message .icon {\n        font-size: 24px;\n        color: #6c757d;\n      }\n\n      .no-selection-message .message {\n        font-weight: 600;\n        color: #495057;\n      }\n\n      .no-selection-message .help {\n        color: #6c757d;\n        font-size: 14px;\n      }\n\n      .selected-enemy-card {\n        padding: 15px;\n        background-color: #e7f3ff;\n        border: 1px solid #007bff;\n        border-radius: 8px;\n      }\n\n      .enemy-unit-card {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n\n      .enemy-unit-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        gap: 15px;\n      }\n\n      .enemy-unit-name {\n        font-weight: 600;\n        color: #495057;\n        margin: 0;\n        font-size: 18px;\n      }\n\n      .enemy-unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n      }\n\n      .unit-type-tag {\n        background-color: #007bff;\n        color: white;\n        padding: 4px 8px;\n        border-radius: 4px;\n        font-size: 12px;\n        font-weight: 500;\n      }\n\n      .enemy-unit-stats {\n        display: grid;\n        gap: 10px;\n      }\n\n      .stat-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 8px 12px;\n        background-color: rgba(255, 255, 255, 0.7);\n        border-radius: 4px;\n      }\n\n      .stat-item .stat-label {\n        font-weight: 500;\n        color: #495057;\n      }\n\n      .stat-item .stat-value {\n        font-weight: 600;\n        color: #007bff;\n      }\n\n      .enemy-selection-controls {\n        display: flex;\n        gap: 10px;\n        align-items: center;\n      }\n\n      .select-enemy-unit-btn {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .select-enemy-unit-btn:hover {\n        background-color: #0056b3;\n      }\n\n      .change-enemy-unit-btn {\n        background-color: #6c757d;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: background-color 0.2s ease;\n      }\n\n      .change-enemy-unit-btn:hover {\n        background-color: #5a6268;\n      }\n\n      /* Mobile Responsiveness for Enemy Unit Features */\n      @media (max-width: 768px) {\n        .enemy-type-selection {\n          padding: 15px;\n        }\n\n        .radio-option {\n          padding: 12px;\n        }\n\n        .enemy-unit-header {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 10px;\n        }\n\n        .enemy-selection-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .select-enemy-unit-btn,\n        .change-enemy-unit-btn {\n          width: 100%;\n        }\n\n        .stat-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 5px;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Display pre-calculated battle results without running a new simulation\n   */\n  displayPreCalculatedResults(battleAnalysis: any): void {\n    console.log('BattleSimulationComponent: displayPreCalculatedResults called', battleAnalysis);\n    if (!this.container) {\n      console.log('BattleSimulationComponent: no container');\n      return;\n    }\n\n    // Store the analysis\n    this.currentAnalysis = battleAnalysis;\n\n    // Find the results container\n    const resultsContainer = this.container.querySelector('#simulation-results');\n    if (!resultsContainer) {\n      console.log('BattleSimulationComponent: simulation-results container not found');\n      return;\n    }\n    console.log('BattleSimulationComponent: found results container', resultsContainer);\n\n    // Show the results container\n    resultsContainer.classList.remove('hidden');\n\n    // Display the pre-calculated results\n    this.displayResults();\n\n    // Make sure results are visible\n    this.showResults(true);\n\n    // Hide simulation controls for damage optimization mode (view-only)\n    const controlsContainer = this.container.querySelector('.simulation-controls');\n    const enemyInputContainer = this.container.querySelector('.enemy-input-container');\n    if (controlsContainer) {\n      (controlsContainer as HTMLElement).style.display = 'none';\n    }\n    if (enemyInputContainer) {\n      (enemyInputContainer as HTMLElement).style.display = 'none';\n    }\n\n    // Show a note that these are pre-calculated results\n    const noteContainer = this.container.querySelector('#simulation-note');\n    if (noteContainer) {\n      noteContainer.innerHTML = `\n        <div class=\"info-note\">\n          <span class=\"note-icon\">ℹ️</span>\n          <span class=\"note-text\">Showing pre-calculated battle results from damage optimization</span>\n        </div>\n      `;\n      noteContainer.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Show simulation controls (for stacking mode)\n   */\n  private showSimulationControls(): void {\n    if (!this.container) return;\n\n    const controlsContainer = this.container.querySelector('.simulation-controls');\n    const enemyInputContainer = this.container.querySelector('.enemy-input-container');\n    if (controlsContainer) {\n      (controlsContainer as HTMLElement).style.display = 'block';\n    }\n    if (enemyInputContainer) {\n      (enemyInputContainer as HTMLElement).style.display = 'block';\n    }\n  }\n}\n","/**\n * Manual Battle Simulation Types\n * Types for user-configured battle scenarios where both player and enemy armies are manually set up\n */\n\nimport { Unit, StackingGroup } from './units';\nimport { BattleResult, BattleAnalysis, BattleConfiguration } from './battleSimulation';\n\n/**\n * Configuration for a single army side in manual battle\n */\nexport interface ManualArmyConfiguration {\n  /** Units in this army with their quantities */\n  units: ManualArmyUnit[];\n  /** Display name for this army */\n  name: string;\n  /** Side identifier */\n  side: 'player' | 'enemy';\n}\n\n/**\n * A unit in a manually configured army\n */\nexport interface ManualArmyUnit {\n  /** Reference to the unit definition */\n  unit: Unit;\n  /** Number of this unit type in the army */\n  quantity: number;\n  /** Whether this unit has infinite quantity (enemy side only) */\n  isInfinite: boolean;\n}\n\n/**\n * Complete manual battle configuration\n */\nexport interface ManualBattleConfiguration {\n  /** Player army configuration */\n  playerArmy: ManualArmyConfiguration;\n  /** Enemy army configuration */\n  enemyArmy: ManualArmyConfiguration;\n  /** Whether player gets first attack */\n  playerGoesFirst: boolean;\n  /** Battle name/description */\n  battleName?: string;\n}\n\n/**\n * Extended battle result that includes manual configuration info\n */\nexport interface ManualBattleResult extends BattleResult {\n  /** Original manual battle configuration */\n  manualConfiguration: ManualBattleConfiguration;\n  /** Enemy units that survived (for infinite units) */\n  enemySurvivors?: ManualArmyUnit[];\n}\n\n/**\n * Manual battle analysis with both scenarios\n */\nexport interface ManualBattleAnalysis {\n  /** Best case scenario result (player attacks first) */\n  bestCase: ManualBattleResult;\n  /** Worst case scenario result (enemy attacks first) */\n  worstCase: ManualBattleResult;\n  /** Comparison metrics between scenarios */\n  comparison: {\n    /** Difference in damage dealt between best and worst case */\n    damageDifference: number;\n    /** Difference in survival turns between best and worst case */\n    survivalDifference: number;\n    /** Average damage across both scenarios */\n    averageDamage: number;\n    /** Average survival turns across both scenarios */\n    averageSurvival: number;\n  };\n  /** Original manual configuration */\n  manualConfiguration: ManualBattleConfiguration;\n}\n\n/**\n * Validation result for manual army configuration\n */\nexport interface ManualArmyValidationResult {\n  /** Whether the army configuration is valid */\n  isValid: boolean;\n  /** Validation error messages */\n  errors: string[];\n  /** Warning messages (non-blocking) */\n  warnings: string[];\n  /** Total unit count */\n  totalUnits: number;\n  /** Whether army has infinite units */\n  hasInfiniteUnits: boolean;\n}\n\n/**\n * Unit selection state for dual army input\n */\nexport interface UnitSelectionState {\n  /** Currently selected unit (if any) */\n  selectedUnit: Unit | null;\n  /** Current quantity input */\n  quantity: number;\n  /** Whether infinite is enabled (enemy side only) */\n  isInfinite: boolean;\n  /** Whether this selection is valid */\n  isValid: boolean;\n  /** Validation message */\n  validationMessage?: string;\n}\n\n/**\n * Props for dual army input component\n */\nexport interface DualArmyInputProps {\n  /** Available units to choose from for player army */\n  availableUnits: Unit[];\n  /** Available units to choose from for enemy army (defaults to availableUnits if not provided) */\n  availableEnemyUnits?: Unit[];\n  /** Current player army configuration */\n  playerArmy: ManualArmyConfiguration;\n  /** Current enemy army configuration */\n  enemyArmy: ManualArmyConfiguration;\n  /** Callback when player army changes */\n  onPlayerArmyChange: (army: ManualArmyConfiguration) => void;\n  /** Callback when enemy army changes */\n  onEnemyArmyChange: (army: ManualArmyConfiguration) => void;\n  /** Whether the form is disabled */\n  disabled?: boolean;\n}\n\n/**\n * Utility functions for manual battle configuration\n */\nexport class ManualBattleUtils {\n  /**\n   * Convert manual army configuration to stacking groups for simulation\n   */\n  static convertToStackingGroups(army: ManualArmyConfiguration): StackingGroup[] {\n    return army.units\n      .filter(armyUnit => armyUnit.quantity > 0 || armyUnit.isInfinite)\n      .map(armyUnit => ({\n        unitName: armyUnit.unit.name,\n        count: armyUnit.isInfinite ? 999999 : armyUnit.quantity, // Use large number for infinite\n        totalHealth: armyUnit.isInfinite \n          ? armyUnit.unit.health * 999999 \n          : armyUnit.unit.health * armyUnit.quantity,\n        unitStrength: armyUnit.unit.strength\n      }))\n      .sort((a, b) => a.totalHealth - b.totalHealth); // Sort by total health (weakest first)\n  }\n\n  /**\n   * Convert manual battle configuration to standard battle configuration\n   */\n  static convertToBattleConfiguration(\n    manualConfig: ManualBattleConfiguration\n  ): BattleConfiguration {\n    const playerStackingGroups = this.convertToStackingGroups(manualConfig.playerArmy);\n    \n    // For enemy army, we need to count total enemy \"groups\" for the existing battle system\n    const enemyGroups = manualConfig.enemyArmy.units\n      .filter(unit => unit.quantity > 0 || unit.isInfinite)\n      .reduce((total, unit) => total + (unit.isInfinite ? 100 : unit.quantity), 0); // Cap infinite at 100 groups\n    \n    return {\n      playerArmy: {\n        units: {}, // Legacy format - we use stackingOrder\n        stackingOrder: playerStackingGroups,\n        totalStrength: playerStackingGroups.reduce((sum, group) => sum + (group.count * group.unitStrength), 0),\n        totalHealth: playerStackingGroups.reduce((sum, group) => sum + group.totalHealth, 0),\n        totalLeadershipCost: 0, // Not used in manual battle\n        totalDominanceCost: 0, // Not used in manual battle\n        totalMercenaryCount: 0, // Not used in manual battle\n        isValidStacking: true,\n        efficiencyScore: 0 // Not used in manual battle\n      },\n      enemyGroupCount: Math.min(enemyGroups, 100), // Cap at 100 for performance\n      playerGoesFirst: manualConfig.playerGoesFirst\n    };\n  }\n\n  /**\n   * Validate manual army configuration\n   */\n  static validateArmyConfiguration(army: ManualArmyConfiguration): ManualArmyValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let totalUnits = 0;\n    let hasInfiniteUnits = false;\n\n    // Check if army has any units\n    if (army.units.length === 0) {\n      errors.push('Army must have at least one unit type');\n    }\n\n    // Validate each unit\n    for (const armyUnit of army.units) {\n      if (!armyUnit.unit) {\n        errors.push('Invalid unit configuration');\n        continue;\n      }\n\n      if (armyUnit.isInfinite) {\n        if (army.side !== 'enemy') {\n          errors.push(`Infinite units are only allowed for enemy armies`);\n        } else {\n          hasInfiniteUnits = true;\n          totalUnits += 999999; // Count as large number for display\n        }\n      } else {\n        if (armyUnit.quantity <= 0) {\n          errors.push(`Unit \"${armyUnit.unit.name}\" must have a positive quantity`);\n        } else if (armyUnit.quantity > 10000) {\n          warnings.push(`Unit \"${armyUnit.unit.name}\" has a very large quantity (${armyUnit.quantity})`);\n        }\n        \n        totalUnits += armyUnit.quantity;\n      }\n    }\n\n    // Check for reasonable army size (unless infinite)\n    if (!hasInfiniteUnits && totalUnits > 50000) {\n      warnings.push(`Army size is very large (${totalUnits} total units). This may affect performance.`);\n    }\n\n    // Check for duplicate units\n    const unitNames = army.units.map(u => u.unit.name);\n    const duplicates = unitNames.filter((name, index) => unitNames.indexOf(name) !== index);\n    if (duplicates.length > 0) {\n      errors.push(`Duplicate units found: ${Array.from(new Set(duplicates)).join(', ')}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      totalUnits,\n      hasInfiniteUnits\n    };\n  }\n\n  /**\n   * Create empty manual army configuration\n   */\n  static createEmptyArmy(side: 'player' | 'enemy', name: string): ManualArmyConfiguration {\n    return {\n      units: [],\n      name,\n      side\n    };\n  }\n\n  /**\n   * Add unit to manual army configuration\n   */\n  static addUnitToArmy(\n    army: ManualArmyConfiguration, \n    unit: Unit, \n    quantity: number, \n    isInfinite: boolean = false\n  ): ManualArmyConfiguration {\n    // Check if unit already exists\n    const existingIndex = army.units.findIndex(u => u.unit.name === unit.name);\n    \n    const newUnits = [...army.units];\n    if (existingIndex >= 0) {\n      // Update existing unit\n      newUnits[existingIndex] = {\n        unit,\n        quantity: isInfinite ? 0 : quantity,\n        isInfinite\n      };\n    } else {\n      // Add new unit\n      newUnits.push({\n        unit,\n        quantity: isInfinite ? 0 : quantity,\n        isInfinite\n      });\n    }\n\n    return {\n      ...army,\n      units: newUnits\n    };\n  }\n\n  /**\n   * Remove unit from manual army configuration\n   */\n  static removeUnitFromArmy(army: ManualArmyConfiguration, unitName: string): ManualArmyConfiguration {\n    return {\n      ...army,\n      units: army.units.filter(u => u.unit.name !== unitName)\n    };\n  }\n\n  /**\n   * Get army summary for display\n   */\n  static getArmySummary(army: ManualArmyConfiguration): string {\n    if (army.units.length === 0) {\n      return 'No units configured';\n    }\n\n    const totalTypes = army.units.length;\n    const infiniteCount = army.units.filter(u => u.isInfinite).length;\n    const finiteTotal = army.units\n      .filter(u => !u.isInfinite)\n      .reduce((sum, u) => sum + u.quantity, 0);\n\n    if (infiniteCount > 0) {\n      return `${totalTypes} unit types (${infiniteCount} infinite, ${finiteTotal} finite)`;\n    } else {\n      return `${totalTypes} unit types, ${finiteTotal} total units`;\n    }\n  }\n}\n\n/**\n * Constants for manual battle simulation\n */\nexport const MANUAL_BATTLE_CONSTANTS = {\n  /** Maximum finite units per army unit type */\n  MAX_FINITE_UNITS: 10000,\n  /** Maximum army unit types */\n  MAX_ARMY_UNIT_TYPES: 50,\n  /** Infinite unit placeholder value */\n  INFINITE_UNIT_VALUE: 999999,\n  /** Maximum enemy groups for simulation performance */\n  MAX_ENEMY_GROUPS: 100\n} as const;","/**\n * Dual Army Input Form Component\n * Allows configuration of both player and enemy armies for manual battle simulation\n */\n\nimport { Unit } from '../../types/units';\nimport { \n  ManualArmyConfiguration, \n  ManualArmyUnit, \n  DualArmyInputProps,\n  UnitSelectionState,\n  ManualBattleUtils,\n  MANUAL_BATTLE_CONSTANTS\n} from '../../types/manualBattle';\n\nexport class DualArmyInputForm {\n  private container: HTMLElement | null = null;\n  private props: DualArmyInputProps;\n  private playerUnitSelection: UnitSelectionState = this.createEmptySelection();\n  private enemyUnitSelection: UnitSelectionState = this.createEmptySelection();\n\n  constructor(props: DualArmyInputProps) {\n    this.props = props;\n  }\n\n  /**\n   * Mount the component to a container\n   */\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Unmount the component\n   */\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.container = null;\n    }\n  }\n\n  /**\n   * Update component props\n   */\n  public updateProps(props: Partial<DualArmyInputProps>): void {\n    this.props = { ...this.props, ...props };\n    if (this.container) {\n      // Only update the army lists if armies have changed, for better performance\n      if (props.playerArmy || props.enemyArmy) {\n        this.updateArmyLists();\n      }\n      // Re-render if other props have changed\n      if (props.availableUnits || props.availableEnemyUnits || props.disabled !== undefined) {\n        this.render();\n        this.attachEventListeners();\n      }\n    }\n  }\n\n  /**\n   * Create empty unit selection state\n   */\n  private createEmptySelection(): UnitSelectionState {\n    return {\n      selectedUnit: null,\n      quantity: 1,\n      isInfinite: false,\n      isValid: false\n    };\n  }\n\n  /**\n   * Render the dual army input form\n   */\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"dual-army-input\">\n        <h3 class=\"dual-army-title\">⚔️ Configure Battle Armies</h3>\n        <p class=\"dual-army-description\">\n          Set up both player and enemy armies by selecting units and quantities for each side.\n        </p>\n\n        <div class=\"army-panels\">\n          <!-- Player Army Panel -->\n          <div class=\"army-panel player-army\">\n            <div class=\"army-panel-header\">\n              <h4 class=\"army-title\">👤 Player Army</h4>\n              <div class=\"army-summary\">\n                <span class=\"army-summary-text\">${ManualBattleUtils.getArmySummary(this.props.playerArmy)}</span>\n              </div>\n            </div>\n\n            <div class=\"army-configuration\">\n              <div class=\"unit-selection\">\n                <div class=\"input-group\">\n                  <label for=\"player-unit-select\" class=\"input-label\">Select Unit:</label>\n                  <select id=\"player-unit-select\" class=\"unit-select\">\n                    <option value=\"\">Choose a unit...</option>\n                    ${this.renderUnitOptions('player')}\n                  </select>\n                </div>\n\n                <div class=\"input-group\">\n                  <label for=\"player-quantity\" class=\"input-label\">Quantity:</label>\n                  <input\n                    type=\"number\"\n                    id=\"player-quantity\"\n                    class=\"quantity-input\"\n                    min=\"1\"\n                    max=\"${MANUAL_BATTLE_CONSTANTS.MAX_FINITE_UNITS}\"\n                    value=\"${this.playerUnitSelection.quantity}\"\n                    placeholder=\"Enter quantity\"\n                  >\n                </div>\n\n                <div class=\"unit-actions\">\n                  <button id=\"add-player-unit\" class=\"btn btn-primary\" disabled>\n                    ➕ Add to Army\n                  </button>\n                </div>\n              </div>\n\n              <div class=\"army-list\">\n                <h5>Current Army:</h5>\n                <div id=\"player-army-list\" class=\"unit-list\">\n                  ${this.renderArmyList(this.props.playerArmy, 'player')}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Enemy Army Panel -->\n          <div class=\"army-panel enemy-army\">\n            <div class=\"army-panel-header\">\n              <h4 class=\"army-title\">👹 Enemy Army</h4>\n              <div class=\"army-summary\">\n                <span class=\"army-summary-text\">${ManualBattleUtils.getArmySummary(this.props.enemyArmy)}</span>\n              </div>\n            </div>\n\n            <div class=\"army-configuration\">\n              <div class=\"unit-selection\">\n                <div class=\"input-group\">\n                  <label for=\"enemy-unit-select\" class=\"input-label\">Select Unit:</label>\n                  <select id=\"enemy-unit-select\" class=\"unit-select\">\n                    <option value=\"\">Choose a unit...</option>\n                    ${this.renderUnitOptions('enemy')}\n                  </select>\n                </div>\n\n                <div class=\"input-group\">\n                  <label for=\"enemy-quantity\" class=\"input-label\">Quantity:</label>\n                  <div class=\"quantity-controls\">\n                    <input\n                      type=\"number\"\n                      id=\"enemy-quantity\"\n                      class=\"quantity-input\"\n                      min=\"1\"\n                      max=\"${MANUAL_BATTLE_CONSTANTS.MAX_FINITE_UNITS}\"\n                      value=\"${this.enemyUnitSelection.quantity}\"\n                      placeholder=\"Enter quantity\"\n                      ${this.enemyUnitSelection.isInfinite ? 'disabled' : ''}\n                    >\n                    <label class=\"infinite-toggle\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"enemy-infinite\"\n                        ${this.enemyUnitSelection.isInfinite ? 'checked' : ''}\n                      >\n                      <span class=\"infinite-label\">Infinite</span>\n                    </label>\n                  </div>\n                </div>\n\n                <div class=\"unit-actions\">\n                  <button id=\"add-enemy-unit\" class=\"btn btn-primary\" disabled>\n                    ➕ Add to Army\n                  </button>\n                </div>\n              </div>\n\n              <div class=\"army-list\">\n                <h5>Current Army:</h5>\n                <div id=\"enemy-army-list\" class=\"unit-list\">\n                  ${this.renderArmyList(this.props.enemyArmy, 'enemy')}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"army-actions\">\n          <button id=\"clear-all-armies\" class=\"btn btn-secondary\">\n            🗑️ Clear Both Armies\n          </button>\n          <button id=\"validate-armies\" class=\"btn btn-outline\">\n            ✅ Validate Armies\n          </button>\n        </div>\n\n        <div id=\"validation-results\" class=\"validation-results hidden\">\n          <!-- Validation results will be displayed here -->\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  /**\n   * Render unit options for select dropdown\n   */\n  private renderUnitOptions(side: 'player' | 'enemy' = 'player'): string {\n    const units = side === 'player' \n      ? this.props.availableUnits \n      : (this.props.availableEnemyUnits || this.props.availableUnits);\n    \n    return units\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .map(unit => `\n        <option value=\"${unit.name}\" title=\"${this.getUnitTooltip(unit)}\">\n          ${unit.name} (${unit.strength} STR, ${unit.health} HP)\n        </option>\n      `).join('');\n  }\n\n  /**\n   * Get tooltip text for unit\n   */\n  private getUnitTooltip(unit: Unit): string {\n    return `Health: ${unit.health}, Strength: ${unit.strength}, Types: ${unit.unit_types.join(', ')}`;\n  }\n\n  /**\n   * Render army list for a specific side\n   */\n  private renderArmyList(army: ManualArmyConfiguration, side: 'player' | 'enemy'): string {\n    if (army.units.length === 0) {\n      return '<p class=\"empty-army\">No units added</p>';\n    }\n\n    return army.units.map(armyUnit => `\n      <div class=\"army-unit-item\" data-unit-name=\"${armyUnit.unit.name}\">\n        <div class=\"unit-info\">\n          <span class=\"unit-name\">${armyUnit.unit.name}</span>\n          <span class=\"unit-stats\">${armyUnit.unit.strength} STR • ${armyUnit.unit.health} HP</span>\n        </div>\n        <div class=\"unit-quantity\">\n          ${armyUnit.isInfinite ? \n            '<span class=\"infinite-badge\">∞ Infinite</span>' : \n            `<span class=\"quantity-badge\">${armyUnit.quantity.toLocaleString()}</span>`\n          }\n        </div>\n        <div class=\"unit-actions\">\n          <button class=\"btn-remove\" data-side=\"${side}\" data-unit=\"${armyUnit.unit.name}\">\n            🗑️\n          </button>\n        </div>\n      </div>\n    `).join('');\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    if (!this.container) return;\n\n    // Player unit selection\n    const playerUnitSelect = this.container.querySelector('#player-unit-select') as HTMLSelectElement;\n    const playerQuantity = this.container.querySelector('#player-quantity') as HTMLInputElement;\n    const addPlayerUnit = this.container.querySelector('#add-player-unit') as HTMLButtonElement;\n\n    // Enemy unit selection\n    const enemyUnitSelect = this.container.querySelector('#enemy-unit-select') as HTMLSelectElement;\n    const enemyQuantity = this.container.querySelector('#enemy-quantity') as HTMLInputElement;\n    const enemyInfinite = this.container.querySelector('#enemy-infinite') as HTMLInputElement;\n    const addEnemyUnit = this.container.querySelector('#add-enemy-unit') as HTMLButtonElement;\n\n    // Action buttons\n    const clearAll = this.container.querySelector('#clear-all-armies') as HTMLButtonElement;\n    const validate = this.container.querySelector('#validate-armies') as HTMLButtonElement;\n\n    // Player unit selection listeners\n    if (playerUnitSelect) {\n      playerUnitSelect.addEventListener('change', () => this.handlePlayerUnitSelection());\n    }\n    if (playerQuantity) {\n      playerQuantity.addEventListener('input', () => this.handlePlayerQuantityChange());\n    }\n    if (addPlayerUnit) {\n      addPlayerUnit.addEventListener('click', () => this.handleAddPlayerUnit());\n    }\n\n    // Enemy unit selection listeners\n    if (enemyUnitSelect) {\n      enemyUnitSelect.addEventListener('change', () => this.handleEnemyUnitSelection());\n    }\n    if (enemyQuantity) {\n      enemyQuantity.addEventListener('input', () => this.handleEnemyQuantityChange());\n    }\n    if (enemyInfinite) {\n      enemyInfinite.addEventListener('change', () => this.handleEnemyInfiniteToggle());\n    }\n    if (addEnemyUnit) {\n      addEnemyUnit.addEventListener('click', () => this.handleAddEnemyUnit());\n    }\n\n    // Action button listeners\n    if (clearAll) {\n      clearAll.addEventListener('click', () => this.handleClearAllArmies());\n    }\n    if (validate) {\n      validate.addEventListener('click', () => this.handleValidateArmies());\n    }\n\n    // Unit removal listeners\n    this.container.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.classList.contains('btn-remove')) {\n        const side = target.dataset.side as 'player' | 'enemy';\n        const unitName = target.dataset.unit;\n        if (side && unitName) {\n          this.handleRemoveUnit(side, unitName);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handle player unit selection\n   */\n  private handlePlayerUnitSelection(): void {\n    const select = this.container?.querySelector('#player-unit-select') as HTMLSelectElement;\n    if (!select) return;\n\n    const unitName = select.value;\n    const unit = this.props.availableUnits.find(u => u.name === unitName) || null;\n    \n    this.playerUnitSelection = {\n      ...this.playerUnitSelection,\n      selectedUnit: unit,\n      isValid: unit !== null && this.playerUnitSelection.quantity > 0\n    };\n\n    this.updateAddButton('player');\n  }\n\n  /**\n   * Handle player quantity change\n   */\n  private handlePlayerQuantityChange(): void {\n    const input = this.container?.querySelector('#player-quantity') as HTMLInputElement;\n    if (!input) return;\n\n    const quantity = parseInt(input.value) || 0;\n    \n    this.playerUnitSelection = {\n      ...this.playerUnitSelection,\n      quantity,\n      isValid: this.playerUnitSelection.selectedUnit !== null && quantity > 0\n    };\n\n    this.updateAddButton('player');\n  }\n\n  /**\n   * Handle enemy unit selection\n   */\n  private handleEnemyUnitSelection(): void {\n    const select = this.container?.querySelector('#enemy-unit-select') as HTMLSelectElement;\n    if (!select) return;\n\n    const unitName = select.value;\n    const enemyUnits = this.props.availableEnemyUnits || this.props.availableUnits;\n    const unit = enemyUnits.find(u => u.name === unitName) || null;\n    \n    this.enemyUnitSelection = {\n      ...this.enemyUnitSelection,\n      selectedUnit: unit,\n      isValid: unit !== null && (this.enemyUnitSelection.isInfinite || this.enemyUnitSelection.quantity > 0)\n    };\n\n    this.updateAddButton('enemy');\n  }\n\n  /**\n   * Handle enemy quantity change\n   */\n  private handleEnemyQuantityChange(): void {\n    const input = this.container?.querySelector('#enemy-quantity') as HTMLInputElement;\n    if (!input) return;\n\n    const quantity = parseInt(input.value) || 0;\n    \n    this.enemyUnitSelection = {\n      ...this.enemyUnitSelection,\n      quantity,\n      isValid: this.enemyUnitSelection.selectedUnit !== null && \n               (this.enemyUnitSelection.isInfinite || quantity > 0)\n    };\n\n    this.updateAddButton('enemy');\n  }\n\n  /**\n   * Handle enemy infinite toggle\n   */\n  private handleEnemyInfiniteToggle(): void {\n    const checkbox = this.container?.querySelector('#enemy-infinite') as HTMLInputElement;\n    const quantityInput = this.container?.querySelector('#enemy-quantity') as HTMLInputElement;\n    \n    if (!checkbox || !quantityInput) return;\n\n    const isInfinite = checkbox.checked;\n    \n    this.enemyUnitSelection = {\n      ...this.enemyUnitSelection,\n      isInfinite,\n      isValid: this.enemyUnitSelection.selectedUnit !== null && \n               (isInfinite || this.enemyUnitSelection.quantity > 0)\n    };\n\n    // Disable/enable quantity input based on infinite toggle\n    quantityInput.disabled = isInfinite;\n    if (isInfinite) {\n      quantityInput.value = '0';\n    }\n\n    this.updateAddButton('enemy');\n  }\n\n  /**\n   * Update add button state\n   */\n  private updateAddButton(side: 'player' | 'enemy'): void {\n    const button = this.container?.querySelector(`#add-${side}-unit`) as HTMLButtonElement;\n    if (!button) return;\n\n    const selection = side === 'player' ? this.playerUnitSelection : this.enemyUnitSelection;\n    button.disabled = !selection.isValid || this.props.disabled || false;\n  }\n\n  /**\n   * Handle adding player unit\n   */\n  private handleAddPlayerUnit(): void {\n    if (!this.playerUnitSelection.selectedUnit || !this.playerUnitSelection.isValid) return;\n\n    const updatedArmy = ManualBattleUtils.addUnitToArmy(\n      this.props.playerArmy,\n      this.playerUnitSelection.selectedUnit,\n      this.playerUnitSelection.quantity,\n      false // Player can't have infinite units\n    );\n\n    // Update props first, then reset selection and update UI\n    this.props.onPlayerArmyChange(updatedArmy);\n    // Update internal props to reflect the change immediately\n    this.props = { ...this.props, playerArmy: updatedArmy };\n    this.resetPlayerSelection();\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle adding enemy unit\n   */\n  private handleAddEnemyUnit(): void {\n    if (!this.enemyUnitSelection.selectedUnit || !this.enemyUnitSelection.isValid) return;\n\n    const updatedArmy = ManualBattleUtils.addUnitToArmy(\n      this.props.enemyArmy,\n      this.enemyUnitSelection.selectedUnit,\n      this.enemyUnitSelection.quantity,\n      this.enemyUnitSelection.isInfinite\n    );\n\n    // Update props first, then reset selection and update UI\n    this.props.onEnemyArmyChange(updatedArmy);\n    // Update internal props to reflect the change immediately\n    this.props = { ...this.props, enemyArmy: updatedArmy };\n    this.resetEnemySelection();\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle removing unit from army\n   */\n  private handleRemoveUnit(side: 'player' | 'enemy', unitName: string): void {\n    if (side === 'player') {\n      const updatedArmy = ManualBattleUtils.removeUnitFromArmy(this.props.playerArmy, unitName);\n      this.props.onPlayerArmyChange(updatedArmy);\n      // Update internal props to reflect the change immediately\n      this.props = { ...this.props, playerArmy: updatedArmy };\n    } else {\n      const updatedArmy = ManualBattleUtils.removeUnitFromArmy(this.props.enemyArmy, unitName);\n      this.props.onEnemyArmyChange(updatedArmy);\n      // Update internal props to reflect the change immediately\n      this.props = { ...this.props, enemyArmy: updatedArmy };\n    }\n\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle clearing all armies\n   */\n  private handleClearAllArmies(): void {\n    const emptyPlayerArmy = ManualBattleUtils.createEmptyArmy('player', 'Player Army');\n    const emptyEnemyArmy = ManualBattleUtils.createEmptyArmy('enemy', 'Enemy Army');\n\n    this.props.onPlayerArmyChange(emptyPlayerArmy);\n    this.props.onEnemyArmyChange(emptyEnemyArmy);\n    // Update internal props to reflect the changes immediately\n    this.props = { ...this.props, playerArmy: emptyPlayerArmy, enemyArmy: emptyEnemyArmy };\n\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle validating armies\n   */\n  private handleValidateArmies(): void {\n    const playerValidation = ManualBattleUtils.validateArmyConfiguration(this.props.playerArmy);\n    const enemyValidation = ManualBattleUtils.validateArmyConfiguration(this.props.enemyArmy);\n\n    this.displayValidationResults(playerValidation, enemyValidation);\n  }\n\n  /**\n   * Update just the army lists without full re-render\n   */\n  private updateArmyLists(): void {\n    if (!this.container) return;\n\n    // Update player army list\n    const playerArmyList = this.container.querySelector('#player-army-list');\n    if (playerArmyList) {\n      playerArmyList.innerHTML = this.renderArmyList(this.props.playerArmy, 'player');\n    }\n\n    // Update enemy army list\n    const enemyArmyList = this.container.querySelector('#enemy-army-list');\n    if (enemyArmyList) {\n      enemyArmyList.innerHTML = this.renderArmyList(this.props.enemyArmy, 'enemy');\n    }\n\n    // Update army summaries in headers\n    const playerSummary = this.container.querySelector('.player-army .army-summary-text');\n    if (playerSummary) {\n      playerSummary.textContent = ManualBattleUtils.getArmySummary(this.props.playerArmy);\n    }\n\n    const enemySummary = this.container.querySelector('.enemy-army .army-summary-text');\n    if (enemySummary) {\n      enemySummary.textContent = ManualBattleUtils.getArmySummary(this.props.enemyArmy);\n    }\n\n    // Re-attach event listeners for remove buttons since we updated the HTML\n    this.attachRemoveEventListeners();\n  }\n\n  /**\n   * Attach event listeners specifically for remove buttons\n   */\n  private attachRemoveEventListeners(): void {\n    if (!this.container) return;\n\n    // Remove existing listeners by cloning nodes (to remove all listeners)\n    const removeButtons = this.container.querySelectorAll('.btn-remove');\n    removeButtons.forEach(button => {\n      const newButton = button.cloneNode(true) as HTMLElement;\n      button.parentNode?.replaceChild(newButton, button);\n      \n      newButton.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        // Check both the target and the button itself for dataset attributes\n        const side = (target.dataset.side || newButton.dataset.side) as 'player' | 'enemy';\n        const unitName = target.dataset.unit || newButton.dataset.unit;\n        if (side && unitName) {\n          this.handleRemoveUnit(side, unitName);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display validation results\n   */\n  private displayValidationResults(\n    playerValidation: any, \n    enemyValidation: any\n  ): void {\n    const resultsContainer = this.container?.querySelector('#validation-results');\n    if (!resultsContainer) return;\n\n    const allErrors = [...playerValidation.errors, ...enemyValidation.errors];\n    const allWarnings = [...playerValidation.warnings, ...enemyValidation.warnings];\n    const isValid = allErrors.length === 0;\n\n    resultsContainer.innerHTML = `\n      <div class=\"validation-summary ${isValid ? 'valid' : 'invalid'}\">\n        <h4>${isValid ? '✅ Armies Valid' : '❌ Validation Errors'}</h4>\n        \n        ${allErrors.length > 0 ? `\n          <div class=\"errors\">\n            <h5>Errors:</h5>\n            <ul>\n              ${allErrors.map(error => `<li>${error}</li>`).join('')}\n            </ul>\n          </div>\n        ` : ''}\n        \n        ${allWarnings.length > 0 ? `\n          <div class=\"warnings\">\n            <h5>Warnings:</h5>\n            <ul>\n              ${allWarnings.map(warning => `<li>${warning}</li>`).join('')}\n            </ul>\n          </div>\n        ` : ''}\n        \n        <div class=\"summary-stats\">\n          <p><strong>Player Army:</strong> ${ManualBattleUtils.getArmySummary(this.props.playerArmy)}</p>\n          <p><strong>Enemy Army:</strong> ${ManualBattleUtils.getArmySummary(this.props.enemyArmy)}</p>\n        </div>\n      </div>\n    `;\n\n    resultsContainer.classList.remove('hidden');\n  }\n\n  /**\n   * Reset player selection state\n   */\n  private resetPlayerSelection(): void {\n    this.playerUnitSelection = this.createEmptySelection();\n    const select = this.container?.querySelector('#player-unit-select') as HTMLSelectElement;\n    const input = this.container?.querySelector('#player-quantity') as HTMLInputElement;\n    \n    if (select) select.value = '';\n    if (input) input.value = '1';\n  }\n\n  /**\n   * Reset enemy selection state\n   */\n  private resetEnemySelection(): void {\n    this.enemyUnitSelection = this.createEmptySelection();\n    const select = this.container?.querySelector('#enemy-unit-select') as HTMLSelectElement;\n    const input = this.container?.querySelector('#enemy-quantity') as HTMLInputElement;\n    const checkbox = this.container?.querySelector('#enemy-infinite') as HTMLInputElement;\n    \n    if (select) select.value = '';\n    if (input) {\n      input.value = '1';\n      input.disabled = false;\n    }\n    if (checkbox) checkbox.checked = false;\n  }\n\n  /**\n   * Add component styles\n   */\n  private addStyles(): void {\n    const styleId = 'dual-army-input-styles';\n    if (document.getElementById(styleId)) return;\n\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `\n      .dual-army-input {\n        max-width: 1200px;\n        margin: 0 auto;\n      }\n\n      .dual-army-title {\n        text-align: center;\n        color: #2c3e50;\n        margin-bottom: 1rem;\n      }\n\n      .dual-army-description {\n        text-align: center;\n        color: #666;\n        margin-bottom: 2rem;\n      }\n\n      .army-panels {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .army-panel {\n        border: 2px solid;\n        border-radius: 12px;\n        padding: 1.5rem;\n        background: white;\n      }\n\n      .army-panel.player-army {\n        border-color: #3498db;\n        background: linear-gradient(135deg, #f0f8ff 0%, #ffffff 100%);\n      }\n\n      .army-panel.enemy-army {\n        border-color: #e74c3c;\n        background: linear-gradient(135deg, #fff0f0 0%, #ffffff 100%);\n      }\n\n      .army-panel-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 1.5rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .army-title {\n        margin: 0;\n        font-size: 1.3rem;\n        color: #2c3e50;\n      }\n\n      .army-summary {\n        font-size: 0.9rem;\n        color: #666;\n      }\n\n      .unit-selection {\n        margin-bottom: 1.5rem;\n        padding: 1rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 8px;\n        border: 1px solid #eee;\n      }\n\n      .input-group {\n        margin-bottom: 1rem;\n      }\n\n      .input-label {\n        display: block;\n        font-weight: 600;\n        margin-bottom: 0.5rem;\n        color: #333;\n      }\n\n      .unit-select, .quantity-input {\n        width: 100%;\n        padding: 0.75rem;\n        border: 2px solid #ddd;\n        border-radius: 6px;\n        font-size: 1rem;\n        transition: border-color 0.2s;\n      }\n\n      .unit-select:focus, .quantity-input:focus {\n        outline: none;\n        border-color: #3498db;\n      }\n\n      .quantity-controls {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .quantity-input {\n        flex: 1;\n      }\n\n      .infinite-toggle {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n        font-weight: 600;\n        color: #e74c3c;\n        cursor: pointer;\n        user-select: none;\n      }\n\n      .infinite-label {\n        white-space: nowrap;\n      }\n\n      .unit-actions {\n        text-align: center;\n        margin-top: 1rem;\n      }\n\n      .army-list {\n        background: rgba(0,0,0,0.05);\n        border-radius: 8px;\n        padding: 1rem;\n      }\n\n      .army-list h5 {\n        margin: 0 0 1rem 0;\n        color: #333;\n        font-size: 1rem;\n      }\n\n      .unit-list {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n\n      .empty-army {\n        text-align: center;\n        color: #999;\n        font-style: italic;\n        margin: 1rem 0;\n      }\n\n      .army-unit-item {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n        padding: 0.75rem;\n        background: white;\n        border-radius: 6px;\n        border: 1px solid #ddd;\n      }\n\n      .unit-info {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: 0.25rem;\n      }\n\n      .unit-name {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .unit-stats {\n        font-size: 0.85rem;\n        color: #666;\n      }\n\n      .unit-quantity {\n        display: flex;\n        align-items: center;\n      }\n\n      .quantity-badge {\n        background: #3498db;\n        color: white;\n        padding: 0.25rem 0.75rem;\n        border-radius: 12px;\n        font-weight: 600;\n        font-size: 0.85rem;\n      }\n\n      .infinite-badge {\n        background: linear-gradient(45deg, #e74c3c, #c0392b);\n        color: white;\n        padding: 0.25rem 0.75rem;\n        border-radius: 12px;\n        font-weight: 600;\n        font-size: 0.85rem;\n        animation: pulse 2s infinite;\n      }\n\n      @keyframes pulse {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.7; }\n      }\n\n      .unit-actions {\n        display: flex;\n        gap: 0.5rem;\n      }\n\n      .btn-remove {\n        background: #e74c3c;\n        color: white;\n        border: none;\n        padding: 0.5rem;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 0.8rem;\n        transition: background-color 0.2s;\n      }\n\n      .btn-remove:hover {\n        background: #c0392b;\n      }\n\n      .army-actions {\n        text-align: center;\n        margin: 2rem 0;\n        display: flex;\n        gap: 1rem;\n        justify-content: center;\n      }\n\n      .validation-results {\n        margin-top: 2rem;\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .validation-summary.valid {\n        background: #d4edda;\n        border-color: #27ae60;\n        color: #155724;\n      }\n\n      .validation-summary.invalid {\n        background: #f8d7da;\n        border-color: #e74c3c;\n        color: #721c24;\n      }\n\n      .validation-summary h4 {\n        margin: 0 0 1rem 0;\n      }\n\n      .errors ul, .warnings ul {\n        margin: 0.5rem 0;\n        padding-left: 1.5rem;\n      }\n\n      .errors {\n        color: #e74c3c;\n      }\n\n      .warnings {\n        color: #f39c12;\n      }\n\n      .summary-stats {\n        margin-top: 1rem;\n        padding-top: 1rem;\n        border-top: 1px solid rgba(0,0,0,0.1);\n      }\n\n      .summary-stats p {\n        margin: 0.5rem 0;\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      /* Mobile Responsiveness */\n      @media (max-width: 768px) {\n        .army-panels {\n          grid-template-columns: 1fr;\n        }\n\n        .army-panel-header {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 0.5rem;\n        }\n\n        .quantity-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .army-actions {\n          flex-direction: column;\n        }\n\n        .army-unit-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 0.75rem;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n}","/**\n * Manual Battle Simulation Component\n * Provides a complete interface for manually configuring and simulating battles between custom armies\n */\n\nimport { Unit } from '../../types/units';\nimport { EnemyUnit } from '../../types/enemyUnits';\nimport { BattleUtils } from '../../types/battleSimulation';\nimport { \n  ManualBattleConfiguration, \n  ManualArmyConfiguration,\n  ManualBattleAnalysis,\n  ManualBattleUtils,\n  MANUAL_BATTLE_CONSTANTS\n} from '../../types/manualBattle';\nimport { DualArmyInputForm } from '../UnitInput/DualArmyInputForm';\nimport { UnitLoader } from '../../services/unitLoader';\nimport { EnemyUnitLoader } from '../../services/enemyUnitLoader';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\n\nexport interface ManualBattleSimulationProps {\n  /** Unit loader for accessing unit data */\n  unitLoader: UnitLoader;\n  /** Callback when battle results are available */\n  onBattleComplete?: (analysis: ManualBattleAnalysis) => void;\n  /** Whether the component is disabled */\n  disabled?: boolean;\n}\n\nexport class ManualBattleSimulationComponent {\n  private container: HTMLElement | null = null;\n  private props: ManualBattleSimulationProps;\n  private dualArmyForm: DualArmyInputForm | null = null;\n  private availableUnits: Unit[] = [];\n  private enemyUnits: EnemyUnit[] = [];\n  private enemyUnitLoader: EnemyUnitLoader;\n  private enemyUnitStorage: EnemyUnitStorageService;\n  private currentBattleConfig: ManualBattleConfiguration | null = null;\n  private currentAnalysis: ManualBattleAnalysis | null = null;\n  private isLoading: boolean = false;\n\n  constructor(props: ManualBattleSimulationProps) {\n    this.props = props;\n    this.enemyUnitLoader = new EnemyUnitLoader();\n    this.enemyUnitStorage = new EnemyUnitStorageService();\n    this.initializeDefaultBattleConfig();\n  }\n\n  /**\n   * Mount the component to a container\n   */\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    await this.loadUnits();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Unmount the component\n   */\n  public unmount(): void {\n    if (this.dualArmyForm) {\n      this.dualArmyForm.unmount();\n      this.dualArmyForm = null;\n    }\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.container = null;\n    }\n  }\n\n  /**\n   * Update component props\n   */\n  public updateProps(props: Partial<ManualBattleSimulationProps>): void {\n    this.props = { ...this.props, ...props };\n  }\n\n  /**\n   * Initialize default battle configuration\n   */\n  private initializeDefaultBattleConfig(): void {\n    this.currentBattleConfig = {\n      playerArmy: ManualBattleUtils.createEmptyArmy('player', 'Player Army'),\n      enemyArmy: ManualBattleUtils.createEmptyArmy('enemy', 'Enemy Army'),\n      playerGoesFirst: true,\n      battleName: 'Custom Battle'\n    };\n  }\n\n  /**\n   * Load available units (regular units + enemy units)\n   */\n  private async loadUnits(): Promise<void> {\n    try {\n      // Load regular units for player army\n      this.availableUnits = this.props.unitLoader.getAllUnits();\n      if (this.availableUnits.length === 0) {\n        // Try to load from default source if no units loaded\n        this.availableUnits = await this.props.unitLoader.loadPresetUnits();\n      }\n\n      // Load enemy units from JSON file\n      try {\n        this.enemyUnits = await this.enemyUnitLoader.loadPresetEnemyUnits();\n      } catch (error) {\n        console.warn('Could not load enemy_units.json, continuing with regular units only:', error);\n        this.enemyUnits = [];\n      }\n\n      // Load user-created enemy units from localStorage\n      try {\n        const userEnemyUnits = this.enemyUnitStorage.getAllUserEnemyUnits();\n        // Convert UserEnemyUnit to EnemyUnit by removing the extra properties\n        const convertedUserUnits: EnemyUnit[] = userEnemyUnits.map((unit: any) => ({\n          name: unit.name,\n          unit_types: unit.unit_types,\n          health: unit.health,\n          strength: unit.strength,\n          attack_modifiers: unit.attack_modifiers\n        }));\n        \n        // Add user-created units to enemy units array\n        this.enemyUnits.push(...convertedUserUnits);\n      } catch (error) {\n        console.warn('Could not load user enemy units:', error);\n      }\n\n      console.log(`Loaded ${this.availableUnits.length} regular units and ${this.enemyUnits.length} enemy units`);\n    } catch (error) {\n      console.error('Failed to load units:', error);\n      this.showError('Failed to load unit data. Please refresh the page.');\n    }\n  }\n\n  /**\n   * Convert enemy unit to regular unit format for dual army input\n   */\n  private convertEnemyUnitToUnit(enemyUnit: EnemyUnit): Unit {\n    return {\n      name: `${enemyUnit.name} [Enemy]`, // Mark as enemy unit\n      unit_types: enemyUnit.unit_types,\n      cost_type: 'Leadership', // Default since enemy units don't have costs\n      health: enemyUnit.health,\n      strength: enemyUnit.strength,\n      leadership_cost: 0, // Enemy units don't have costs\n      dominance_cost: 0,\n      authority_cost: 0,\n      food_consumption: 0,\n      carrying_capacity: 0,\n      revival_cost_gold: 0,\n      revival_cost_silver: 0,\n      source_file: 'enemy_units',\n      attack_modifiers: enemyUnit.attack_modifiers?.map(mod => ({\n        target_type: mod.target_type,\n        modifier_type: mod.modifier_type,\n        value: mod.value\n      })) || undefined\n    };\n  }\n\n  /**\n   * Get combined units for enemy army (regular units + converted enemy units)\n   */\n  private getEnemyArmyUnits(): Unit[] {\n    const regularUnits = this.availableUnits;\n    const convertedEnemyUnits = this.enemyUnits.map(unit => this.convertEnemyUnitToUnit(unit));\n    return [...regularUnits, ...convertedEnemyUnits];\n  }\n\n  /**\n   * Render the manual battle simulation interface\n   */\n  private render(): void {\n    if (!this.container || !this.currentBattleConfig) return;\n\n    this.container.innerHTML = `\n      <div class=\"manual-battle-simulation\">\n        <header class=\"manual-battle-header\">\n          <h2 class=\"manual-battle-title\">⚔️ Manual Battle Simulation</h2>\n          <p class=\"manual-battle-description\">\n            Configure custom armies for both player and enemy sides, then simulate the battle \n            to see detailed combat results and analysis.\n          </p>\n        </header>\n\n        <!-- Army Configuration Section -->\n        <section class=\"army-config-section\">\n          <div id=\"dual-army-form-container\"></div>\n        </section>\n\n        <!-- Battle Configuration Section -->\n        <section class=\"battle-config-section\">\n          <h3>⚙️ Battle Settings</h3>\n          <div class=\"battle-settings\">\n            <div class=\"setting-group\">\n              <label for=\"battle-name\" class=\"setting-label\">Battle Name:</label>\n              <input\n                type=\"text\"\n                id=\"battle-name\"\n                class=\"setting-input\"\n                value=\"${this.currentBattleConfig.battleName || 'Custom Battle'}\"\n                placeholder=\"Enter battle name\"\n                maxlength=\"50\"\n              >\n            </div>\n\n            <div class=\"setting-group\">\n              <label class=\"setting-label\">Initiative:</label>\n              <div class=\"radio-group\">\n                <label class=\"radio-option\">\n                  <input\n                    type=\"radio\"\n                    name=\"initiative\"\n                    value=\"player\"\n                    ${this.currentBattleConfig.playerGoesFirst ? 'checked' : ''}\n                  >\n                  <span>Player goes first (Best Case)</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input\n                    type=\"radio\"\n                    name=\"initiative\"\n                    value=\"enemy\"\n                    ${!this.currentBattleConfig.playerGoesFirst ? 'checked' : ''}\n                  >\n                  <span>Enemy goes first (Worst Case)</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input\n                    type=\"radio\"\n                    name=\"initiative\"\n                    value=\"both\"\n                    checked\n                  >\n                  <span>Simulate both scenarios</span>\n                </label>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <!-- Battle Actions -->\n        <section class=\"battle-actions\">\n          <div class=\"action-buttons\">\n            <button id=\"simulate-battle\" class=\"btn btn-primary large-btn\" disabled>\n              🎯 Simulate Battle\n            </button>\n            <button id=\"clear-all\" class=\"btn btn-secondary\">\n              🗑️ Clear All\n            </button>\n            <button id=\"save-config\" class=\"btn btn-outline\" style=\"display: none;\">\n              💾 Save Configuration\n            </button>\n          </div>\n          \n          <div id=\"battle-status\" class=\"battle-status hidden\">\n            <!-- Status messages will appear here -->\n          </div>\n        </section>\n\n        <!-- Loading State -->\n        <div id=\"loading-state\" class=\"loading-state hidden\">\n          <div class=\"loading-spinner\"></div>\n          <p class=\"loading-message\">Running battle simulation...</p>\n          <div class=\"loading-details\">\n            <small>This may take a moment for large armies</small>\n          </div>\n        </div>\n\n        <!-- Battle Results -->\n        <section id=\"battle-results\" class=\"battle-results hidden\">\n          <!-- Results will be populated here -->\n        </section>\n\n        <!-- Error Display -->\n        <div id=\"error-display\" class=\"error-display hidden\">\n          <!-- Error messages will appear here -->\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n    this.mountDualArmyForm();\n    this.updateSimulateButton();\n  }\n\n  /**\n   * Mount the dual army form component\n   */\n  private mountDualArmyForm(): void {\n    const formContainer = this.container?.querySelector('#dual-army-form-container');\n    if (!formContainer || !this.currentBattleConfig) return;\n\n    if (this.dualArmyForm) {\n      this.dualArmyForm.unmount();\n    }\n\n    this.dualArmyForm = new DualArmyInputForm({\n      availableUnits: this.availableUnits,\n      availableEnemyUnits: this.getEnemyArmyUnits(),\n      playerArmy: this.currentBattleConfig.playerArmy,\n      enemyArmy: this.currentBattleConfig.enemyArmy,\n      onPlayerArmyChange: (army) => this.handlePlayerArmyChange(army),\n      onEnemyArmyChange: (army) => this.handleEnemyArmyChange(army),\n      disabled: this.isLoading || this.props.disabled\n    });\n\n    this.dualArmyForm.mount(formContainer as HTMLElement);\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    if (!this.container) return;\n\n    // Battle name input\n    const battleNameInput = this.container.querySelector('#battle-name') as HTMLInputElement;\n    if (battleNameInput) {\n      battleNameInput.addEventListener('input', () => this.handleBattleNameChange());\n    }\n\n    // Initiative radio buttons\n    const initiativeRadios = this.container.querySelectorAll('input[name=\"initiative\"]');\n    initiativeRadios.forEach(radio => {\n      radio.addEventListener('change', () => this.handleInitiativeChange());\n    });\n\n    // Action buttons\n    const simulateBtn = this.container.querySelector('#simulate-battle') as HTMLButtonElement;\n    const clearAllBtn = this.container.querySelector('#clear-all') as HTMLButtonElement;\n    const saveConfigBtn = this.container.querySelector('#save-config') as HTMLButtonElement;\n\n    if (simulateBtn) {\n      simulateBtn.addEventListener('click', () => this.handleSimulateBattle());\n    }\n    if (clearAllBtn) {\n      clearAllBtn.addEventListener('click', () => this.handleClearAll());\n    }\n    if (saveConfigBtn) {\n      saveConfigBtn.addEventListener('click', () => this.handleSaveConfig());\n    }\n  }\n\n  /**\n   * Handle player army configuration change\n   */\n  private handlePlayerArmyChange(army: ManualArmyConfiguration): void {\n    if (!this.currentBattleConfig) return;\n    \n    this.currentBattleConfig = {\n      ...this.currentBattleConfig,\n      playerArmy: army\n    };\n\n    this.updateSimulateButton();\n    this.clearResults();\n  }\n\n  /**\n   * Handle enemy army configuration change\n   */\n  private handleEnemyArmyChange(army: ManualArmyConfiguration): void {\n    if (!this.currentBattleConfig) return;\n    \n    this.currentBattleConfig = {\n      ...this.currentBattleConfig,\n      enemyArmy: army\n    };\n\n    this.updateSimulateButton();\n    this.clearResults();\n  }\n\n  /**\n   * Handle battle name change\n   */\n  private handleBattleNameChange(): void {\n    const input = this.container?.querySelector('#battle-name') as HTMLInputElement;\n    if (!input || !this.currentBattleConfig) return;\n\n    this.currentBattleConfig = {\n      ...this.currentBattleConfig,\n      battleName: input.value.trim() || 'Custom Battle'\n    };\n  }\n\n  /**\n   * Handle initiative change\n   */\n  private handleInitiativeChange(): void {\n    const selectedRadio = this.container?.querySelector('input[name=\"initiative\"]:checked') as HTMLInputElement;\n    if (!selectedRadio || !this.currentBattleConfig) return;\n\n    const value = selectedRadio.value;\n    if (value === 'player' || value === 'enemy') {\n      this.currentBattleConfig = {\n        ...this.currentBattleConfig,\n        playerGoesFirst: value === 'player'\n      };\n    }\n    // For 'both', we'll handle this during simulation\n  }\n\n  /**\n   * Update simulate button state\n   */\n  private updateSimulateButton(): void {\n    const button = this.container?.querySelector('#simulate-battle') as HTMLButtonElement;\n    if (!button || !this.currentBattleConfig) return;\n\n    const playerValid = this.currentBattleConfig.playerArmy.units.length > 0;\n    const enemyValid = this.currentBattleConfig.enemyArmy.units.length > 0;\n    const canSimulate = playerValid && enemyValid && !this.isLoading && !this.props.disabled;\n\n    button.disabled = !canSimulate;\n\n    // Update button text based on state\n    if (!playerValid && !enemyValid) {\n      button.textContent = '🎯 Configure armies to simulate';\n    } else if (!playerValid) {\n      button.textContent = '🎯 Add player units to simulate';\n    } else if (!enemyValid) {\n      button.textContent = '🎯 Add enemy units to simulate';\n    } else if (this.isLoading) {\n      button.textContent = '⏳ Simulating...';\n    } else {\n      button.textContent = '🎯 Simulate Battle';\n    }\n  }\n\n  /**\n   * Handle simulate battle\n   */\n  private async handleSimulateBattle(): Promise<void> {\n    if (!this.currentBattleConfig || this.isLoading) return;\n\n    // Validate armies\n    const playerValidation = ManualBattleUtils.validateArmyConfiguration(this.currentBattleConfig.playerArmy);\n    const enemyValidation = ManualBattleUtils.validateArmyConfiguration(this.currentBattleConfig.enemyArmy);\n\n    if (!playerValidation.isValid || !enemyValidation.isValid) {\n      const allErrors = [...playerValidation.errors, ...enemyValidation.errors];\n      this.showError(`Cannot simulate battle: ${allErrors.join(', ')}`);\n      return;\n    }\n\n    this.setLoading(true);\n    this.hideError();\n    this.clearResults();\n\n    try {\n      // Check which scenarios to simulate\n      const initiativeRadio = this.container?.querySelector('input[name=\"initiative\"]:checked') as HTMLInputElement;\n      const initiativeValue = initiativeRadio?.value || 'both';\n\n      // Import and use the manual battle service\n      const { ManualBattleSimulationService } = await import('../../services/manualBattleSimulation');\n      const battleService = new ManualBattleSimulationService(this.props.unitLoader);\n\n      let analysis: ManualBattleAnalysis;\n\n      if (initiativeValue === 'both') {\n        // Simulate both scenarios\n        analysis = await battleService.simulateBothScenarios(this.currentBattleConfig);\n      } else {\n        // Simulate single scenario\n        const singleConfig = {\n          ...this.currentBattleConfig,\n          playerGoesFirst: initiativeValue === 'player'\n        };\n        const singleResult = await battleService.simulateBattle(singleConfig);\n        \n        // Create analysis with same result for both scenarios\n        analysis = {\n          bestCase: singleResult,\n          worstCase: singleResult,\n          comparison: {\n            damageDifference: 0,\n            survivalDifference: 0,\n            averageDamage: singleResult.totalDamageDealtToEnemies,\n            averageSurvival: singleResult.playerSurvivalTurns\n          },\n          manualConfiguration: this.currentBattleConfig\n        };\n      }\n\n      this.currentAnalysis = analysis;\n      this.displayResults();\n      \n      // Call callback if provided\n      if (this.props.onBattleComplete) {\n        this.props.onBattleComplete(analysis);\n      }\n\n    } catch (error) {\n      console.error('Battle simulation failed:', error);\n      this.showError(\n        error instanceof Error \n          ? `Battle simulation failed: ${error.message}`\n          : 'Battle simulation failed with an unknown error'\n      );\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  /**\n   * Handle clear all\n   */\n  private handleClearAll(): void {\n    this.initializeDefaultBattleConfig();\n    this.clearResults();\n    this.hideError();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Handle save configuration (placeholder for future feature)\n   */\n  private handleSaveConfig(): void {\n    if (!this.currentBattleConfig) return;\n\n    // For now, just show a message. This could be expanded to save to localStorage or server\n    const config = JSON.stringify(this.currentBattleConfig, null, 2);\n    console.log('Battle Configuration:', config);\n    \n    this.showStatus('Configuration saved to console (feature in development)', 'info');\n  }\n\n  /**\n   * Display battle results\n   */\n  private displayResults(): void {\n    if (!this.currentAnalysis || !this.container) return;\n\n    const resultsSection = this.container.querySelector('#battle-results');\n    if (!resultsSection) return;\n\n    const { bestCase, worstCase, comparison, manualConfiguration } = this.currentAnalysis;\n\n    resultsSection.innerHTML = `\n      <div class=\"results-header\">\n        <h3>📊 Battle Results: ${manualConfiguration.battleName}</h3>\n        <p class=\"battle-summary\">\n          ${manualConfiguration.playerArmy.name} vs ${manualConfiguration.enemyArmy.name}\n        </p>\n      </div>\n\n      <div class=\"army-summaries\">\n        <div class=\"army-summary player-summary\">\n          <h4>👤 ${manualConfiguration.playerArmy.name}</h4>\n          <p>${ManualBattleUtils.getArmySummary(manualConfiguration.playerArmy)}</p>\n        </div>\n        <div class=\"army-summary enemy-summary\">\n          <h4>👹 ${manualConfiguration.enemyArmy.name}</h4>\n          <p>${ManualBattleUtils.getArmySummary(manualConfiguration.enemyArmy)}</p>\n        </div>\n      </div>\n\n      <div class=\"scenario-comparison\">\n        <div class=\"scenario-card best-case\">\n          <h4>🟢 Best Case (Player First)</h4>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${bestCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${bestCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${bestCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"scenario-card worst-case\">\n          <h4>🔴 Worst Case (Enemy First)</h4>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${worstCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${worstCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${worstCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"comparison-analysis\">\n        <h4>📈 Scenario Comparison</h4>\n        <div class=\"comparison-stats\">\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Damage Difference:</span>\n            <span class=\"stat-value ${comparison.damageDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.damageDifference >= 0 ? '+' : ''}${comparison.damageDifference.toLocaleString()}\n            </span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Average Damage:</span>\n            <span class=\"stat-value\">${Math.round(comparison.averageDamage).toLocaleString()}</span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Survival Difference:</span>\n            <span class=\"stat-value ${comparison.survivalDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.survivalDifference >= 0 ? '+' : ''}${comparison.survivalDifference} turns\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"combat-logs\">\n        <div class=\"log-tabs\">\n          <button class=\"log-tab active\" data-scenario=\"best\">Best Case Combat Log</button>\n          <button class=\"log-tab\" data-scenario=\"worst\">Worst Case Combat Log</button>\n        </div>\n        <div class=\"log-content\">\n          <div id=\"best-case-log\" class=\"combat-log active\">\n            ${this.formatCombatLog(bestCase.combatLog)}\n          </div>\n          <div id=\"worst-case-log\" class=\"combat-log hidden\">\n            ${this.formatCombatLog(worstCase.combatLog)}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"results-actions\">\n        <button id=\"export-results\" class=\"btn btn-outline\">\n          📄 Export Results\n        </button>\n        <button id=\"simulate-again\" class=\"btn btn-secondary\">\n          🔄 Simulate Again\n        </button>\n      </div>\n    `;\n\n    resultsSection.classList.remove('hidden');\n    this.attachResultsEventListeners();\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private formatCombatLog(combatLog: any[]): string {\n    if (combatLog.length === 0) {\n      return '<p class=\"no-log\">No combat actions recorded.</p>';\n    }\n\n    const logEntries = combatLog.map(action => {\n      const isPlayerTurn = !action.eliminated;\n      const turnClass = isPlayerTurn ? 'log-entry player-turn' : 'log-entry enemy-turn';\n\n      return `\n        <div class=\"${turnClass}\">\n          <span class=\"turn-number\">Turn ${action.turn}:</span>\n          <span class=\"action-text\">${action.attacker} ${action.action}</span>\n        </div>\n      `;\n    }).join('');\n\n    return `<div class=\"log-entries\">${logEntries}</div>`;\n  }\n\n  /**\n   * Attach event listeners for results section\n   */\n  private attachResultsEventListeners(): void {\n    if (!this.container) return;\n\n    // Log tab switching\n    const logTabs = this.container.querySelectorAll('.log-tab');\n    logTabs.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        const scenario = target.dataset.scenario;\n        \n        // Update active tab\n        logTabs.forEach(t => t.classList.remove('active'));\n        target.classList.add('active');\n        \n        // Show corresponding log\n        const logs = this.container!.querySelectorAll('.combat-log');\n        logs.forEach(log => {\n          log.classList.remove('active');\n          log.classList.add('hidden');\n        });\n        \n        const activeLog = this.container!.querySelector(`#${scenario}-case-log`);\n        if (activeLog) {\n          activeLog.classList.add('active');\n          activeLog.classList.remove('hidden');\n        }\n      });\n    });\n\n    // Results actions\n    const exportBtn = this.container.querySelector('#export-results') as HTMLButtonElement;\n    const simulateAgainBtn = this.container.querySelector('#simulate-again') as HTMLButtonElement;\n\n    if (exportBtn) {\n      exportBtn.addEventListener('click', () => this.handleExportResults());\n    }\n    if (simulateAgainBtn) {\n      simulateAgainBtn.addEventListener('click', () => this.handleSimulateAgain());\n    }\n  }\n\n  /**\n   * Handle export results (placeholder for future feature)\n   */\n  private handleExportResults(): void {\n    if (!this.currentAnalysis) return;\n\n    // For now, just log to console. This could be expanded to export as JSON/CSV/etc.\n    const results = JSON.stringify(this.currentAnalysis, null, 2);\n    console.log('Battle Results:', results);\n    \n    this.showStatus('Results exported to console (feature in development)', 'info');\n  }\n\n  /**\n   * Handle simulate again\n   */\n  private handleSimulateAgain(): void {\n    this.clearResults();\n    this.handleSimulateBattle();\n  }\n\n  /**\n   * Set loading state\n   */\n  private setLoading(loading: boolean): void {\n    this.isLoading = loading;\n    \n    const loadingEl = this.container?.querySelector('#loading-state');\n    const resultsEl = this.container?.querySelector('#battle-results');\n    \n    if (loadingEl) {\n      loadingEl.classList.toggle('hidden', !loading);\n    }\n    \n    if (loading && resultsEl) {\n      resultsEl.classList.add('hidden');\n    }\n\n    this.updateSimulateButton();\n    \n    // Update dual army form disabled state\n    if (this.dualArmyForm) {\n      this.dualArmyForm.updateProps({ disabled: loading || this.props.disabled });\n    }\n  }\n\n  /**\n   * Clear results\n   */\n  private clearResults(): void {\n    this.currentAnalysis = null;\n    const resultsEl = this.container?.querySelector('#battle-results');\n    if (resultsEl) {\n      resultsEl.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Show error message\n   */\n  private showError(message: string): void {\n    const errorEl = this.container?.querySelector('#error-display');\n    if (!errorEl) return;\n\n    errorEl.innerHTML = `\n      <div class=\"error-content\">\n        <span class=\"error-icon\">⚠️</span>\n        <span class=\"error-message\">${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.classList.add('hidden')\">×</button>\n      </div>\n    `;\n\n    errorEl.classList.remove('hidden');\n\n    // Auto-hide after 10 seconds\n    setTimeout(() => this.hideError(), 10000);\n  }\n\n  /**\n   * Hide error message\n   */\n  private hideError(): void {\n    const errorEl = this.container?.querySelector('#error-display');\n    if (errorEl) {\n      errorEl.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Show status message\n   */\n  private showStatus(message: string, type: 'info' | 'success' | 'warning' = 'info'): void {\n    const statusEl = this.container?.querySelector('#battle-status');\n    if (!statusEl) return;\n\n    statusEl.innerHTML = `\n      <div class=\"status-message ${type}\">\n        ${message}\n      </div>\n    `;\n\n    statusEl.classList.remove('hidden');\n\n    // Auto-hide after 5 seconds\n    setTimeout(() => {\n      statusEl.classList.add('hidden');\n    }, 5000);\n  }\n\n  /**\n   * Add component styles\n   */\n  private addStyles(): void {\n    const styleId = 'manual-battle-simulation-styles';\n    if (document.getElementById(styleId)) return;\n\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `\n      .manual-battle-simulation {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 2rem;\n      }\n\n      .manual-battle-header {\n        text-align: center;\n        margin-bottom: 3rem;\n        padding-bottom: 2rem;\n        border-bottom: 3px solid #eee;\n      }\n\n      .manual-battle-title {\n        font-size: 2.5rem;\n        color: #2c3e50;\n        margin-bottom: 1rem;\n      }\n\n      .manual-battle-description {\n        font-size: 1.1rem;\n        color: #666;\n        line-height: 1.6;\n        max-width: 800px;\n        margin: 0 auto;\n      }\n\n      .army-config-section {\n        margin-bottom: 3rem;\n      }\n\n      .battle-config-section {\n        background: #f8f9fa;\n        padding: 2rem;\n        border-radius: 12px;\n        margin-bottom: 2rem;\n        border: 2px solid #dee2e6;\n      }\n\n      .battle-config-section h3 {\n        margin: 0 0 1.5rem 0;\n        color: #2c3e50;\n      }\n\n      .battle-settings {\n        display: grid;\n        gap: 2rem;\n      }\n\n      .setting-group {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n\n      .setting-label {\n        font-weight: 600;\n        color: #333;\n        margin-bottom: 0.5rem;\n      }\n\n      .setting-input {\n        padding: 0.75rem;\n        border: 2px solid #ddd;\n        border-radius: 6px;\n        font-size: 1rem;\n        max-width: 300px;\n      }\n\n      .setting-input:focus {\n        outline: none;\n        border-color: #3498db;\n      }\n\n      .radio-group {\n        display: flex;\n        flex-direction: column;\n        gap: 0.75rem;\n      }\n\n      .radio-option {\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n        padding: 0.75rem;\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 6px;\n        cursor: pointer;\n        transition: all 0.2s;\n        color: #2c3e50;\n        font-weight: 500;\n      }\n\n      .radio-option:hover {\n        border-color: #3498db;\n        background: #f0f8ff;\n        color: #1e3a8a;\n      }\n\n      .radio-option:has(input:checked) {\n        border-color: #3498db;\n        background: #e7f3ff;\n        color: #1e3a8a;\n        font-weight: 600;\n      }\n\n      .radio-option span {\n        color: inherit;\n        font-weight: inherit;\n      }\n\n      .battle-actions {\n        text-align: center;\n        margin-bottom: 2rem;\n      }\n\n      .action-buttons {\n        display: flex;\n        gap: 1rem;\n        justify-content: center;\n        margin-bottom: 1rem;\n      }\n\n      .battle-status {\n        margin-top: 1rem;\n      }\n\n      .status-message {\n        padding: 1rem;\n        border-radius: 6px;\n        border: 1px solid;\n      }\n\n      .status-message.info {\n        background: #e3f2fd;\n        border-color: #2196f3;\n        color: #1565c0;\n      }\n\n      .status-message.success {\n        background: #e8f5e9;\n        border-color: #4caf50;\n        color: #2e7d32;\n      }\n\n      .status-message.warning {\n        background: #fff3e0;\n        border-color: #ff9800;\n        color: #f57c00;\n      }\n\n      .loading-state {\n        text-align: center;\n        padding: 3rem;\n        background: white;\n        border-radius: 12px;\n        border: 2px solid #3498db;\n      }\n\n      .loading-spinner {\n        width: 50px;\n        height: 50px;\n        border: 5px solid #f3f3f3;\n        border-top: 5px solid #3498db;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 1rem;\n      }\n\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n\n      .loading-message {\n        font-size: 1.2rem;\n        color: #2c3e50;\n        margin-bottom: 0.5rem;\n      }\n\n      .loading-details {\n        color: #666;\n      }\n\n      .battle-results {\n        background: white;\n        border-radius: 12px;\n        padding: 2rem;\n        border: 2px solid #27ae60;\n      }\n\n      .results-header {\n        text-align: center;\n        margin-bottom: 2rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .results-header h3 {\n        color: #2c3e50;\n        margin-bottom: 0.5rem;\n      }\n\n      .battle-summary {\n        color: #666;\n        font-size: 1.1rem;\n      }\n\n      .army-summaries {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .army-summary {\n        padding: 1rem;\n        border-radius: 8px;\n        text-align: center;\n      }\n\n      .army-summary.player-summary {\n        background: #e3f2fd;\n        border: 2px solid #2196f3;\n      }\n\n      .army-summary.enemy-summary {\n        background: #ffebee;\n        border: 2px solid #f44336;\n      }\n\n      .army-summary h4 {\n        margin: 0 0 0.5rem 0;\n        color: #2c3e50;\n      }\n\n      .scenario-comparison {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .scenario-card {\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .scenario-card.best-case {\n        background: #f0fff4;\n        border-color: #27ae60;\n      }\n\n      .scenario-card.worst-case {\n        background: #fff5f5;\n        border-color: #e74c3c;\n      }\n\n      .scenario-card h4 {\n        margin: 0 0 1rem 0;\n        font-size: 1.2rem;\n      }\n\n      .scenario-stats, .comparison-stats {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .stat, .comparison-stat {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 4px;\n      }\n\n      .stat-label {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .stat-value {\n        font-weight: 700;\n        color: #2c3e50;\n      }\n\n      .stat-value.positive {\n        color: #27ae60;\n      }\n\n      .stat-value.negative {\n        color: #e74c3c;\n      }\n\n      .comparison-analysis {\n        background: #f8f9fa;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n      }\n\n      .comparison-analysis h4 {\n        margin: 0 0 1rem 0;\n        color: #2c3e50;\n      }\n\n      .combat-logs {\n        border-top: 2px solid #eee;\n        padding-top: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .log-tabs {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n\n      .log-tab {\n        padding: 0.75rem 1.5rem;\n        border: 2px solid #ddd;\n        background: #f8f9fa;\n        border-radius: 6px 6px 0 0;\n        cursor: pointer;\n        font-weight: 600;\n        transition: all 0.2s;\n      }\n\n      .log-tab.active {\n        background: white;\n        border-bottom-color: white;\n        color: #2c3e50;\n      }\n\n      .log-content {\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 0 6px 6px 6px;\n        padding: 1.5rem;\n        min-height: 300px;\n        max-height: 500px;\n        overflow-y: auto;\n      }\n\n      .combat-log.hidden {\n        display: none;\n      }\n\n      .log-entries {\n        font-family: 'Courier New', monospace;\n        font-size: 0.9rem;\n        line-height: 1.6;\n      }\n\n      .log-entry {\n        padding: 0.5rem;\n        border-bottom: 1px solid #f0f0f0;\n        border-radius: 4px;\n        margin-bottom: 2px;\n      }\n\n      .log-entry.player-turn {\n        background-color: #e3f2fd;\n        border-left: 3px solid #2196f3;\n      }\n\n      .log-entry.enemy-turn {\n        background-color: #ffebee;\n        border-left: 3px solid #f44336;\n      }\n\n      .turn-number {\n        color: #666;\n        font-weight: 600;\n        margin-right: 0.5rem;\n      }\n\n      .action-text {\n        color: #333;\n      }\n\n      .no-log {\n        text-align: center;\n        color: #666;\n        font-style: italic;\n        padding: 2rem;\n      }\n\n      .results-actions {\n        text-align: center;\n        padding-top: 1rem;\n        border-top: 2px solid #eee;\n        display: flex;\n        gap: 1rem;\n        justify-content: center;\n      }\n\n      .error-display {\n        background: #f8d7da;\n        border: 2px solid #e74c3c;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n        animation: slideIn 0.3s ease-out;\n      }\n\n      .error-content {\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .error-icon {\n        font-size: 1.2rem;\n        flex-shrink: 0;\n      }\n\n      .error-message {\n        flex: 1;\n        color: #721c24;\n        font-weight: 500;\n        line-height: 1.4;\n      }\n\n      .error-close {\n        background: none;\n        border: none;\n        font-size: 1.5rem;\n        color: #721c24;\n        cursor: pointer;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        transition: background-color 0.2s;\n      }\n\n      .error-close:hover {\n        background-color: rgba(114, 28, 36, 0.1);\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      /* Mobile Responsiveness */\n      @media (max-width: 768px) {\n        .manual-battle-simulation {\n          padding: 1rem;\n        }\n\n        .manual-battle-title {\n          font-size: 2rem;\n        }\n\n        .action-buttons {\n          flex-direction: column;\n        }\n\n        .army-summaries {\n          grid-template-columns: 1fr;\n        }\n\n        .scenario-comparison {\n          grid-template-columns: 1fr;\n        }\n\n        .log-tabs {\n          flex-direction: column;\n        }\n\n        .log-tab {\n          border-radius: 6px;\n        }\n\n        .log-content {\n          border-radius: 6px;\n        }\n\n        .results-actions {\n          flex-direction: column;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n}","/**\n * Enemy Unit Input Form component for creating and editing enemy units\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitValidationService } from '../../services/enemyUnitValidation';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\n\ninterface EnemyUnitInputFormProps {\n  onSave: (enemyUnit: UserEnemyUnit) => void;\n  onCancel: () => void;\n  editingUnit?: UserEnemyUnit | null;\n  mode: 'create' | 'edit';\n}\n\nexport class EnemyUnitInputForm {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitInputFormProps;\n  private storage: EnemyUnitStorageService;\n  private attackModifiers: Record<string, number> = {};\n\n  constructor(props: EnemyUnitInputFormProps) {\n    this.props = props;\n    this.storage = new EnemyUnitStorageService();\n  }\n\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.initializeForm();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private initializeForm(): void {\n    // Initialize attack modifiers from editing unit or empty\n    if (this.props.editingUnit?.attack_modifiers) {\n      // Convert attack modifiers array to Record<string, number>\n      this.attackModifiers = {};\n      this.props.editingUnit.attack_modifiers.forEach(modifier => {\n        this.attackModifiers[modifier.target_type] = modifier.value;\n      });\n    } else {\n      this.attackModifiers = {};\n    }\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    const isEdit = this.props.mode === 'edit';\n    const unit = this.props.editingUnit;\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-input-form\">\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <h2 class=\"card-title\">\n              ${isEdit ? '✏️ Edit Enemy Unit' : '➕ Create New Enemy Unit'}\n            </h2>\n            <p class=\"text-secondary\">\n              ${isEdit ? 'Modify the enemy unit details below' : 'Define a custom enemy unit for battle simulations'}\n            </p>\n          </div>\n          \n          <form id=\"enemy-unit-form\" class=\"enemy-unit-form\">\n            <!-- Basic Information Section -->\n            <div class=\"form-section\">\n              <h3>📋 Basic Information</h3>\n              <div class=\"grid grid-cols-2 gap-4\">\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-name\">Enemy Unit Name *</label>\n                  <input \n                    type=\"text\" \n                    id=\"enemy-name\" \n                    class=\"form-input\" \n                    value=\"${unit?.name || ''}\"\n                    placeholder=\"e.g., Elite Dark Elf Archer\"\n                    required\n                    maxlength=\"50\"\n                  >\n                  <div class=\"form-error\" id=\"enemy-name-error\"></div>\n                  <small class=\"form-help\">Choose a descriptive name for this enemy unit</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-description\">Description</label>\n                  <input\n                    type=\"text\"\n                    id=\"enemy-description\"\n                    class=\"form-input\"\n                    value=\"\"\n                    placeholder=\"Optional description\"\n                    maxlength=\"100\"\n                  >\n                  <small class=\"form-help\">Optional description for this enemy unit</small>\n                </div>\n              </div>\n            </div>\n\n            <!-- Combat Stats Section -->\n            <div class=\"form-section\">\n              <h3>⚔️ Combat Statistics</h3>\n              <div class=\"grid grid-cols-3 gap-4\">\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-health\">Health Points *</label>\n                  <input \n                    type=\"number\" \n                    id=\"enemy-health\" \n                    class=\"form-input\" \n                    value=\"${unit?.health || ''}\"\n                    min=\"1\" \n                    max=\"10000000\"\n                    placeholder=\"e.g., 50000\"\n                    required\n                  >\n                  <div class=\"form-error\" id=\"enemy-health-error\"></div>\n                  <small class=\"form-help\">Total health points (1 - 10,000,000)</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-strength\">Strength *</label>\n                  <input \n                    type=\"number\" \n                    id=\"enemy-strength\" \n                    class=\"form-input\" \n                    value=\"${unit?.strength || ''}\"\n                    min=\"1\" \n                    max=\"1000000\"\n                    placeholder=\"e.g., 8000\"\n                    required\n                  >\n                  <div class=\"form-error\" id=\"enemy-strength-error\"></div>\n                  <small class=\"form-help\">Attack strength (1 - 1,000,000)</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-unit-types\">Unit Types</label>\n                  <input \n                    type=\"text\" \n                    id=\"enemy-unit-types\" \n                    class=\"form-input\" \n                    value=\"${unit?.unit_types?.join(', ') || ''}\"\n                    placeholder=\"e.g., Ranged, Human, Elite\"\n                  >\n                  <div class=\"form-error\" id=\"enemy-unit-types-error\"></div>\n                  <small class=\"form-help\">Comma-separated unit types (optional)</small>\n                </div>\n              </div>\n            </div>\n\n            <!-- Attack Modifiers Section -->\n            <div class=\"form-section\">\n              <h3>🎯 Attack Modifiers</h3>\n              <p class=\"text-sm text-secondary mb-4\">\n                Define strength bonuses against specific unit types. Use absolute values (e.g., 1000 = +1000 strength vs that type).\n              </p>\n              \n              <div class=\"attack-modifiers-container\">\n                <div class=\"modifier-controls\">\n                  <div class=\"add-modifier-form\">\n                    <div class=\"grid grid-cols-3 gap-2\">\n                      <input \n                        type=\"text\" \n                        id=\"new-modifier-type\" \n                        class=\"form-input\" \n                        placeholder=\"Unit type (e.g., Human)\"\n                      >\n                      <input \n                        type=\"number\" \n                        id=\"new-modifier-value\" \n                        class=\"form-input\" \n                        placeholder=\"Bonus strength\"\n                        min=\"0\"\n                        max=\"100000\"\n                      >\n                      <button type=\"button\" id=\"add-modifier-btn\" class=\"btn btn-primary\">\n                        ➕ Add\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                \n                <div id=\"attack-modifiers-list\" class=\"attack-modifiers-list\">\n                  <!-- Attack modifiers will be populated here -->\n                </div>\n              </div>\n            </div>\n\n            <!-- Form Actions -->\n            <div class=\"form-section\">\n              <div class=\"form-actions\">\n                <button type=\"submit\" class=\"btn btn-success btn-lg\" id=\"save-btn\">\n                  <span>${isEdit ? '💾 Update Enemy Unit' : '✅ Create Enemy Unit'}</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-secondary btn-lg\" id=\"cancel-btn\">\n                  <span>❌ Cancel</span>\n                </button>\n                ${isEdit ? `\n                  <button type=\"button\" class=\"btn btn-danger btn-lg\" id=\"delete-btn\">\n                    <span>🗑️ Delete</span>\n                  </button>\n                ` : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n    this.populateAttackModifiers();\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-input-form {\n        max-width: 800px;\n        margin: 0 auto;\n        padding: var(--spacing-lg);\n      }\n\n      .form-section {\n        margin-bottom: var(--spacing-xl);\n        padding-bottom: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n      }\n\n      .form-section:last-child {\n        border-bottom: none;\n        margin-bottom: 0;\n      }\n\n      .form-section h3 {\n        font-size: var(--font-size-lg);\n        margin-bottom: var(--spacing-md);\n        color: var(--color-text);\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-sm);\n      }\n\n      .form-group {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .form-label {\n        display: block;\n        font-weight: 600;\n        margin-bottom: var(--spacing-xs);\n        color: var(--color-text);\n        font-size: var(--font-size-sm);\n      }\n\n      .form-input {\n        width: 100%;\n        padding: var(--spacing-sm);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        font-size: var(--font-size-sm);\n        transition: border-color var(--transition-fast);\n        background-color: var(--color-background);\n        color: var(--color-text);\n      }\n\n      .form-input:focus {\n        outline: none;\n        border-color: var(--color-primary);\n        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n      }\n\n      .form-input.error {\n        border-color: var(--color-danger);\n        background-color: rgba(239, 68, 68, 0.05);\n      }\n\n      .form-error {\n        color: var(--color-danger);\n        font-size: var(--font-size-xs);\n        margin-top: var(--spacing-xs);\n        min-height: 1.2em;\n        font-weight: 500;\n      }\n\n      .form-help {\n        color: var(--color-text-secondary);\n        font-size: var(--font-size-xs);\n        margin-top: var(--spacing-xs);\n        display: block;\n      }\n\n      .grid {\n        display: grid;\n        gap: var(--spacing-md);\n      }\n\n      .grid-cols-2 {\n        grid-template-columns: repeat(2, 1fr);\n      }\n\n      .grid-cols-3 {\n        grid-template-columns: repeat(3, 1fr);\n      }\n\n      .gap-2 {\n        gap: var(--spacing-sm);\n      }\n\n      .gap-4 {\n        gap: var(--spacing-md);\n      }\n\n      /* Attack Modifiers Styles */\n      .attack-modifiers-container {\n        background: var(--color-surface);\n        border-radius: var(--radius-md);\n        padding: var(--spacing-md);\n        border: 1px solid var(--color-border);\n      }\n\n      .modifier-controls {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .add-modifier-form {\n        background: var(--color-background);\n        padding: var(--spacing-md);\n        border-radius: var(--radius-sm);\n        border: 1px solid var(--color-border);\n      }\n\n      .attack-modifiers-list {\n        min-height: 60px;\n        max-height: 300px;\n        overflow-y: auto;\n      }\n\n      .modifier-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: var(--spacing-sm);\n        background: var(--color-background);\n        border: 1px solid var(--color-border);\n        border-radius: var(--radius-sm);\n        margin-bottom: var(--spacing-xs);\n        transition: all var(--transition-fast);\n      }\n\n      .modifier-item:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .modifier-info {\n        flex: 1;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .modifier-type {\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .modifier-value {\n        color: var(--color-success);\n        font-weight: 500;\n      }\n\n      .modifier-actions {\n        display: flex;\n        gap: var(--spacing-xs);\n      }\n\n      .btn-xs {\n        padding: var(--spacing-xs) var(--spacing-sm);\n        font-size: var(--font-size-xs);\n        border-radius: var(--radius-sm);\n      }\n\n      .empty-modifiers {\n        text-align: center;\n        color: var(--color-text-secondary);\n        font-style: italic;\n        padding: var(--spacing-lg);\n        border: 2px dashed var(--color-border);\n        border-radius: var(--radius-md);\n      }\n\n      /* Form Actions */\n      .form-actions {\n        display: flex;\n        gap: var(--spacing-md);\n        justify-content: center;\n        flex-wrap: wrap;\n      }\n\n      .btn-lg {\n        padding: var(--spacing-md) var(--spacing-lg);\n        font-size: var(--font-size-md);\n        font-weight: 600;\n        min-width: 160px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: var(--spacing-xs);\n      }\n\n      .btn-lg:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .enemy-unit-input-form {\n          padding: var(--spacing-md);\n        }\n\n        .grid-cols-2,\n        .grid-cols-3 {\n          grid-template-columns: 1fr;\n        }\n\n        .form-actions {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .btn-lg {\n          min-width: auto;\n          width: 100%;\n        }\n\n        .add-modifier-form .grid-cols-3 {\n          grid-template-columns: 1fr;\n          gap: var(--spacing-sm);\n        }\n\n        .modifier-item {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-sm);\n        }\n\n        .modifier-info {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-xs);\n        }\n\n        .modifier-actions {\n          justify-content: center;\n        }\n      }\n\n      @media (max-width: 480px) {\n        .card-title {\n          font-size: var(--font-size-lg);\n        }\n\n        .form-section h3 {\n          font-size: var(--font-size-md);\n        }\n\n        .attack-modifiers-container {\n          padding: var(--spacing-sm);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private populateAttackModifiers(): void {\n    const modifiersList = document.getElementById('attack-modifiers-list');\n    if (!modifiersList) return;\n\n    if (Object.keys(this.attackModifiers).length === 0) {\n      modifiersList.innerHTML = `\n        <div class=\"empty-modifiers\">\n          <p>No attack modifiers defined</p>\n          <small>Add modifiers above to give this enemy unit bonuses against specific unit types</small>\n        </div>\n      `;\n      return;\n    }\n\n    modifiersList.innerHTML = Object.entries(this.attackModifiers)\n      .map(([unitType, bonus]) => `\n        <div class=\"modifier-item\" data-unit-type=\"${unitType}\">\n          <div class=\"modifier-info\">\n            <span class=\"modifier-type\">${unitType}</span>\n            <span class=\"modifier-value\">+${bonus.toLocaleString()} strength</span>\n          </div>\n          <div class=\"modifier-actions\">\n            <button type=\"button\" class=\"btn btn-xs btn-secondary edit-modifier-btn\" data-unit-type=\"${unitType}\">\n              ✏️ Edit\n            </button>\n            <button type=\"button\" class=\"btn btn-xs btn-danger remove-modifier-btn\" data-unit-type=\"${unitType}\">\n              🗑️ Remove\n            </button>\n          </div>\n        </div>\n      `).join('');\n\n    this.attachModifierEventListeners();\n  }\n\n  private attachEventListeners(): void {\n    const form = document.getElementById('enemy-unit-form') as HTMLFormElement;\n    const saveBtn = document.getElementById('save-btn');\n    const cancelBtn = document.getElementById('cancel-btn');\n    const deleteBtn = document.getElementById('delete-btn');\n    const addModifierBtn = document.getElementById('add-modifier-btn');\n\n    // Form submission\n    if (form) {\n      form.addEventListener('submit', this.handleSubmit.bind(this));\n    }\n\n    // Button actions\n    if (saveBtn) {\n      saveBtn.addEventListener('click', this.handleSubmit.bind(this));\n    }\n\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    if (deleteBtn) {\n      deleteBtn.addEventListener('click', this.handleDelete.bind(this));\n    }\n\n    if (addModifierBtn) {\n      addModifierBtn.addEventListener('click', this.handleAddModifier.bind(this));\n    }\n\n    // Real-time validation\n    this.addValidationListeners();\n\n    // Enter key for adding modifiers\n    const newModifierValue = document.getElementById('new-modifier-value');\n    if (newModifierValue) {\n      newModifierValue.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          this.handleAddModifier();\n        }\n      });\n    }\n  }\n\n  private attachModifierEventListeners(): void {\n    // Edit modifier buttons\n    document.querySelectorAll('.edit-modifier-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const unitType = (e.target as HTMLElement).dataset.unitType;\n        if (unitType) {\n          this.handleEditModifier(unitType);\n        }\n      });\n    });\n\n    // Remove modifier buttons\n    document.querySelectorAll('.remove-modifier-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const unitType = (e.target as HTMLElement).dataset.unitType;\n        if (unitType) {\n          this.handleRemoveModifier(unitType);\n        }\n      });\n    });\n  }\n\n  private addValidationListeners(): void {\n    const fields = ['enemy-name', 'enemy-health', 'enemy-strength', 'enemy-unit-types'];\n    \n    fields.forEach(fieldId => {\n      const input = document.getElementById(fieldId) as HTMLInputElement;\n      if (input) {\n        input.addEventListener('blur', () => this.validateField(fieldId));\n        input.addEventListener('input', () => this.clearFieldError(fieldId));\n      }\n    });\n  }\n\n  private validateField(fieldId: string): boolean {\n    const input = document.getElementById(fieldId) as HTMLInputElement;\n    const errorElement = document.getElementById(`${fieldId}-error`);\n    \n    if (!input || !errorElement) return true;\n\n    let validation;\n    \n    switch (fieldId) {\n      case 'enemy-name':\n        validation = EnemyUnitValidationService.validateName(input.value);\n        break;\n      case 'enemy-health':\n        validation = EnemyUnitValidationService.validateHealth(parseInt(input.value));\n        break;\n      case 'enemy-strength':\n        validation = EnemyUnitValidationService.validateStrength(parseInt(input.value));\n        break;\n      case 'enemy-unit-types':\n        const types = input.value.split(',').map(t => t.trim()).filter(t => t);\n        validation = EnemyUnitValidationService.validateUnitTypes(types);\n        break;\n      default:\n        return true;\n    }\n\n    if (validation.isValid) {\n      input.classList.remove('error');\n      errorElement.textContent = '';\n      return true;\n    } else {\n      input.classList.add('error');\n      errorElement.textContent = validation.error || '';\n      return false;\n    }\n  }\n\n  private clearFieldError(fieldId: string): void {\n    const input = document.getElementById(fieldId) as HTMLInputElement;\n    const errorElement = document.getElementById(`${fieldId}-error`);\n    \n    if (input && errorElement) {\n      input.classList.remove('error');\n      errorElement.textContent = '';\n    }\n  }\n\n  private handleAddModifier(): void {\n    const typeInput = document.getElementById('new-modifier-type') as HTMLInputElement;\n    const valueInput = document.getElementById('new-modifier-value') as HTMLInputElement;\n\n    if (!typeInput || !valueInput) return;\n\n    const unitType = typeInput.value.trim();\n    const bonusValue = parseInt(valueInput.value);\n\n    // Validate inputs\n    if (!unitType) {\n      alert('Please enter a unit type');\n      typeInput.focus();\n      return;\n    }\n\n    if (isNaN(bonusValue) || bonusValue < 0) {\n      alert('Please enter a valid bonus value (0 or greater)');\n      valueInput.focus();\n      return;\n    }\n\n    // Check for duplicates\n    if (this.attackModifiers[unitType]) {\n      if (!confirm(`A modifier for \"${unitType}\" already exists. Replace it?`)) {\n        return;\n      }\n    }\n\n    // Add the modifier\n    this.attackModifiers[unitType] = bonusValue;\n\n    // Clear inputs\n    typeInput.value = '';\n    valueInput.value = '';\n\n    // Refresh the display\n    this.populateAttackModifiers();\n\n    // Focus back to type input for easy addition of more modifiers\n    typeInput.focus();\n  }\n\n  private handleEditModifier(unitType: string): void {\n    const currentValue = this.attackModifiers[unitType];\n    const newValue = prompt(`Edit strength bonus for \"${unitType}\":`, currentValue.toString());\n\n    if (newValue === null) return; // User cancelled\n\n    const parsedValue = parseInt(newValue);\n    if (isNaN(parsedValue) || parsedValue < 0) {\n      alert('Please enter a valid bonus value (0 or greater)');\n      return;\n    }\n\n    this.attackModifiers[unitType] = parsedValue;\n    this.populateAttackModifiers();\n  }\n\n  private handleRemoveModifier(unitType: string): void {\n    if (confirm(`Remove attack modifier for \"${unitType}\"?`)) {\n      delete this.attackModifiers[unitType];\n      this.populateAttackModifiers();\n    }\n  }\n\n  private handleSubmit(event: Event): void {\n    event.preventDefault();\n    \n    if (!this.validateForm()) {\n      return;\n    }\n\n    const enemyUnit = this.collectFormData();\n    if (enemyUnit) {\n      this.props.onSave(enemyUnit);\n    }\n  }\n\n  private handleCancel(): void {\n    if (this.hasUnsavedChanges()) {\n      if (confirm('You have unsaved changes. Are you sure you want to cancel?')) {\n        this.props.onCancel();\n      }\n    } else {\n      this.props.onCancel();\n    }\n  }\n\n  private handleDelete(): void {\n    if (!this.props.editingUnit) return;\n\n    const unitName = this.props.editingUnit.name;\n    if (confirm(`Are you sure you want to delete \"${unitName}\"? This action cannot be undone.`)) {\n      const result = this.storage.deleteUserEnemyUnit(this.props.editingUnit.id ?? '');\n      if (result.success) {\n        this.props.onCancel(); // Close the form after deletion\n      } else {\n        alert(`Failed to delete unit: ${result.error}`);\n      }\n    }\n  }\n\n  private validateForm(): boolean {\n    const fields = ['enemy-name', 'enemy-health', 'enemy-strength', 'enemy-unit-types'];\n    let isValid = true;\n\n    fields.forEach(fieldId => {\n      if (!this.validateField(fieldId)) {\n        isValid = false;\n      }\n    });\n\n    return isValid;\n  }\n\n  private collectFormData(): UserEnemyUnit | null {\n    try {\n      const nameInput = document.getElementById('enemy-name') as HTMLInputElement;\n      const healthInput = document.getElementById('enemy-health') as HTMLInputElement;\n      const strengthInput = document.getElementById('enemy-strength') as HTMLInputElement;\n      const unitTypesInput = document.getElementById('enemy-unit-types') as HTMLInputElement;\n\n      const name = nameInput.value.trim();\n      const health = parseInt(healthInput.value);\n      const strength = parseInt(strengthInput.value);\n      const unitTypes = unitTypesInput.value\n        .split(',')\n        .map(t => t.trim())\n        .filter(t => t);\n\n      // Convert attack modifiers back to array format\n      const attackModifiersArray = Object.keys(this.attackModifiers).length > 0\n        ? Object.entries(this.attackModifiers).map(([target_type, value]) => ({\n            target_type,\n            modifier_type: 'Strength' as const,\n            value\n          }))\n        : undefined;\n\n      const enemyUnit: UserEnemyUnit = {\n        id: this.props.editingUnit?.id || `user_enemy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        name,\n        unit_types: unitTypes,\n        health,\n        strength,\n        attack_modifiers: attackModifiersArray,\n        createdAt: this.props.editingUnit?.createdAt || new Date(),\n        modifiedAt: new Date()\n      };\n\n      // Final validation\n      const validation = EnemyUnitValidationService.validateUserEnemyUnit(enemyUnit);\n      if (!validation.isValid) {\n        alert(`Validation failed: ${validation.errors.join(', ')}`);\n        return null;\n      }\n\n      return enemyUnit;\n    } catch (error) {\n      console.error('Error collecting form data:', error);\n      alert('Error collecting form data. Please check your inputs.');\n      return null;\n    }\n  }\n\n  private hasUnsavedChanges(): boolean {\n    if (!this.props.editingUnit) {\n      // For new units, check if any fields have been filled\n      const nameInput = document.getElementById('enemy-name') as HTMLInputElement;\n      const healthInput = document.getElementById('enemy-health') as HTMLInputElement;\n      const strengthInput = document.getElementById('enemy-strength') as HTMLInputElement;\n\n      return !!(nameInput?.value.trim() || healthInput?.value || strengthInput?.value);\n    }\n\n    // For editing, compare current values with original\n    const currentData = this.collectFormData();\n    if (!currentData) return false;\n\n    const original = this.props.editingUnit;\n    return (\n      currentData.name !== original.name ||\n      currentData.health !== original.health ||\n      currentData.strength !== original.strength ||\n      JSON.stringify(currentData.unit_types) !== JSON.stringify(original.unit_types) ||\n      JSON.stringify(currentData.attack_modifiers) !== JSON.stringify(original.attack_modifiers)\n    );\n  }\n\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}","/**\n * Enemy Unit Manager component for viewing and managing user-created enemy units\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { EnemyUnit, UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\nimport { EnemyUnitInputForm } from './EnemyUnitInputForm';\n\ninterface EnemyUnitManagerProps {\n  onClose?: () => void;\n  onUnitSelect?: (unit: UserEnemyUnit) => void;\n  mode: 'standalone' | 'embedded';\n}\n\nexport class EnemyUnitManager {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitManagerProps;\n  private storage: EnemyUnitStorageService;\n  private userUnits: UserEnemyUnit[] = [];\n  private filteredUnits: UserEnemyUnit[] = [];\n  private currentFilter: string = '';\n  private sortBy: 'name' | 'created' | 'modified' | 'health' | 'strength' = 'name';\n  private sortOrder: 'asc' | 'desc' = 'asc';\n  private selectedUnits: Set<string> = new Set();\n  private showingForm: boolean = false;\n  private editingUnit: UserEnemyUnit | null = null;\n\n  constructor(props: EnemyUnitManagerProps) {\n    this.props = props;\n    this.storage = new EnemyUnitStorageService();\n  }\n\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.loadData();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private loadData(): void {\n    this.userUnits = this.storage.getAllUserEnemyUnits();\n    this.updateFilteredUnits();\n  }\n\n  private updateFilteredUnits(): void {\n    let filtered = [...this.userUnits];\n\n    // Apply search filter\n    if (this.currentFilter.trim()) {\n      const lowerFilter = this.currentFilter.toLowerCase();\n      filtered = filtered.filter(unit =>\n        unit.name.toLowerCase().includes(lowerFilter) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(lowerFilter))\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let comparison = 0;\n      \n      switch (this.sortBy) {\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'created':\n          comparison = (a.createdAt?.getTime() ?? 0) - (b.createdAt?.getTime() ?? 0);\n          break;\n        case 'modified':\n          comparison = (a.modifiedAt?.getTime() ?? 0) - (b.modifiedAt?.getTime() ?? 0);\n          break;\n        case 'health':\n          comparison = a.health - b.health;\n          break;\n        case 'strength':\n          comparison = a.strength - b.strength;\n          break;\n      }\n\n      return this.sortOrder === 'desc' ? -comparison : comparison;\n    });\n\n    this.filteredUnits = filtered;\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    if (this.showingForm) {\n      this.renderForm();\n      return;\n    }\n\n    const isStandalone = this.props.mode === 'standalone';\n    const stats = this.storage.getStorageStats();\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-manager ${isStandalone ? 'standalone' : 'embedded'}\">\n        ${isStandalone ? `\n          <div class=\"manager-header\">\n            <div class=\"header-content\">\n              <h1 class=\"manager-title\">\n                👤 Custom Enemy Units\n              </h1>\n              <p class=\"manager-subtitle\">\n                Manage your custom enemy units for battle simulations\n              </p>\n            </div>\n            ${this.props.onClose ? `\n              <button class=\"btn btn-secondary\" id=\"close-manager\">\n                ❌ Close\n              </button>\n            ` : ''}\n          </div>\n        ` : ''}\n        \n        <div class=\"manager-content\">\n          <!-- Statistics Panel -->\n          <div class=\"stats-panel\">\n            <div class=\"stats-grid\">\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">📊</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.totalUnits}</span>\n                  <span class=\"stat-label\">Total Units</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">💾</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${Math.round(stats.storageSize / 1024)}KB</span>\n                  <span class=\"stat-label\">Storage Used</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">📅</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.unitsCreatedToday}</span>\n                  <span class=\"stat-label\">Created Today</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">🔄</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.lastModified ? this.formatDate(stats.lastModified) : 'Never'}</span>\n                  <span class=\"stat-label\">Last Modified</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Controls Panel -->\n          <div class=\"controls-panel\">\n            <div class=\"controls-row\">\n              <div class=\"search-controls\">\n                <div class=\"search-input-group\">\n                  <input \n                    type=\"text\" \n                    id=\"unit-search\" \n                    class=\"form-input search-input\" \n                    placeholder=\"🔍 Search units...\"\n                    value=\"${this.currentFilter}\"\n                  >\n                  <button class=\"btn btn-secondary btn-sm\" id=\"clear-search\">\n                    ❌ Clear\n                  </button>\n                </div>\n              </div>\n              \n              <div class=\"action-controls\">\n                <button class=\"btn btn-success\" id=\"create-unit-btn\">\n                  ➕ Create New Unit\n                </button>\n                <div class=\"dropdown\" id=\"bulk-actions-dropdown\">\n                  <button class=\"btn btn-secondary dropdown-toggle\" id=\"bulk-actions-btn\" ${this.selectedUnits.size === 0 ? 'disabled' : ''}>\n                    📋 Bulk Actions (${this.selectedUnits.size})\n                  </button>\n                  <div class=\"dropdown-menu\">\n                    <button class=\"dropdown-item\" id=\"export-selected\">📤 Export Selected</button>\n                    <button class=\"dropdown-item\" id=\"delete-selected\">🗑️ Delete Selected</button>\n                  </div>\n                </div>\n                <div class=\"dropdown\" id=\"import-export-dropdown\">\n                  <button class=\"btn btn-secondary dropdown-toggle\" id=\"import-export-btn\">\n                    📁 Import/Export\n                  </button>\n                  <div class=\"dropdown-menu\">\n                    <button class=\"dropdown-item\" id=\"import-units\">📥 Import Units</button>\n                    <button class=\"dropdown-item\" id=\"export-all\">📤 Export All</button>\n                    <button class=\"dropdown-item\" id=\"clear-all\">🗑️ Clear All</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"controls-row\">\n              <div class=\"sort-controls\">\n                <label class=\"form-label\">Sort by:</label>\n                <select class=\"form-input sort-select\" id=\"sort-by\">\n                  <option value=\"name\" ${this.sortBy === 'name' ? 'selected' : ''}>Name</option>\n                  <option value=\"created\" ${this.sortBy === 'created' ? 'selected' : ''}>Date Created</option>\n                  <option value=\"modified\" ${this.sortBy === 'modified' ? 'selected' : ''}>Last Modified</option>\n                  <option value=\"health\" ${this.sortBy === 'health' ? 'selected' : ''}>Health</option>\n                  <option value=\"strength\" ${this.sortBy === 'strength' ? 'selected' : ''}>Strength</option>\n                </select>\n                <button class=\"btn btn-secondary btn-sm\" id=\"sort-order-btn\">\n                  ${this.sortOrder === 'asc' ? '⬆️ Ascending' : '⬇️ Descending'}\n                </button>\n              </div>\n              \n              <div class=\"selection-controls\">\n                <button class=\"btn btn-secondary btn-sm\" id=\"select-all\">\n                  ☑️ Select All\n                </button>\n                <button class=\"btn btn-secondary btn-sm\" id=\"select-none\" ${this.selectedUnits.size === 0 ? 'disabled' : ''}>\n                  ⬜ Select None\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Units List -->\n          <div class=\"units-list-container\">\n            <div class=\"units-list-header\">\n              <span class=\"results-info\">\n                Showing ${this.filteredUnits.length} of ${this.userUnits.length} units\n                ${this.selectedUnits.size > 0 ? `(${this.selectedUnits.size} selected)` : ''}\n              </span>\n            </div>\n            \n            <div class=\"units-list\" id=\"units-list\">\n              ${this.renderUnitsList()}\n            </div>\n          </div>\n        </div>\n        \n        <!-- Hidden file input for import -->\n        <input type=\"file\" id=\"import-file-input\" accept=\".json\" style=\"display: none;\">\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  private renderForm(): void {\n    if (!this.container) return;\n\n    const formContainer = document.createElement('div');\n    this.container.innerHTML = '';\n    this.container.appendChild(formContainer);\n\n    const form = new EnemyUnitInputForm({\n      onSave: this.handleFormSave.bind(this),\n      onCancel: this.handleFormCancel.bind(this),\n      editingUnit: this.editingUnit,\n      mode: this.editingUnit ? 'edit' : 'create'\n    });\n\n    form.mount(formContainer);\n  }\n\n  private renderUnitsList(): string {\n    if (this.filteredUnits.length === 0) {\n      return `\n        <div class=\"empty-state\">\n          <div class=\"empty-icon\">👤</div>\n          <h3>No custom enemy units</h3>\n          <p>Create your first custom enemy unit to get started</p>\n          <button class=\"btn btn-primary\" id=\"create-first-unit\">\n            ➕ Create Your First Unit\n          </button>\n        </div>\n      `;\n    }\n\n    return this.filteredUnits.map(unit => {\n      const isSelected = this.selectedUnits.has(unit.id ?? '');\n      \n      return `\n        <div class=\"unit-item ${isSelected ? 'selected' : ''}\" data-unit-id=\"${unit.id ?? ''}\">\n          <div class=\"unit-checkbox\">\n            <input \n              type=\"checkbox\" \n              class=\"unit-select-checkbox\" \n              data-unit-id=\"${unit.id}\"\n              ${isSelected ? 'checked' : ''}\n            >\n          </div>\n          \n          <div class=\"unit-content\">\n            <div class=\"unit-header\">\n              <div class=\"unit-basic-info\">\n                <h4 class=\"unit-name\">${unit.name}</h4>\n                <div class=\"unit-types\">\n                  ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n                </div>\n              </div>\n              \n              <div class=\"unit-stats-summary\">\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">❤️</span>\n                  <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">⚔️</span>\n                  <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">📊</span>\n                  <span class=\"stat-value\">${(unit.strength / unit.health).toFixed(3)}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"unit-details\">\n              <div class=\"unit-meta\">\n                <span class=\"meta-item\">\n                  <span class=\"meta-label\">Created:</span>\n                  <span class=\"meta-value\">${unit.createdAt ? this.formatDate(unit.createdAt) : 'Unknown'}</span>\n                </span>\n                <span class=\"meta-item\">\n                  <span class=\"meta-label\">Modified:</span>\n                  <span class=\"meta-value\">${unit.modifiedAt ? this.formatDate(unit.modifiedAt) : 'Unknown'}</span>\n                </span>\n              </div>\n              \n              ${unit.attack_modifiers && unit.attack_modifiers.length > 0 ? `\n                <div class=\"unit-modifiers\">\n                  <span class=\"modifiers-label\">🎯 Attack Bonuses:</span>\n                  <div class=\"modifiers-list\">\n                    ${unit.attack_modifiers.map(mod => \n                      `<span class=\"modifier-tag\">+${mod.value.toLocaleString()} vs ${mod.target_type}</span>`\n                    ).join('')}\n                  </div>\n                </div>\n              ` : ''}\n            </div>\n          </div>\n          \n          <div class=\"unit-actions\">\n            ${this.props.onUnitSelect ? `\n              <button class=\"btn btn-primary btn-sm\" data-action=\"select\" data-unit-id=\"${unit.id}\">\n                👆 Select\n              </button>\n            ` : ''}\n            <button class=\"btn btn-secondary btn-sm\" data-action=\"edit\" data-unit-id=\"${unit.id}\">\n              ✏️ Edit\n            </button>\n            <button class=\"btn btn-warning btn-sm\" data-action=\"duplicate\" data-unit-id=\"${unit.id}\">\n              📋 Duplicate\n            </button>\n            <button class=\"btn btn-danger btn-sm\" data-action=\"delete\" data-unit-id=\"${unit.id}\">\n              🗑️ Delete\n            </button>\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-manager {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .enemy-unit-manager.standalone {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: var(--spacing-lg);\n      }\n\n      .manager-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: var(--spacing-lg);\n        padding-bottom: var(--spacing-lg);\n        border-bottom: 2px solid var(--color-border);\n      }\n\n      .header-content h1 {\n        margin: 0 0 var(--spacing-xs) 0;\n        color: var(--color-text);\n        font-size: var(--font-size-2xl);\n      }\n\n      .header-content p {\n        margin: 0;\n        color: var(--color-text-secondary);\n        font-size: var(--font-size-sm);\n      }\n\n      .manager-content {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: var(--spacing-lg);\n      }\n\n      /* Statistics Panel */\n      .stats-panel {\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        padding: var(--spacing-lg);\n        border: 1px solid var(--color-border);\n      }\n\n      .stats-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: var(--spacing-md);\n      }\n\n      .stat-card {\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-md);\n        padding: var(--spacing-md);\n        background: var(--color-background);\n        border-radius: var(--radius-md);\n        border: 1px solid var(--color-border);\n      }\n\n      .stat-icon {\n        font-size: var(--font-size-xl);\n        width: 40px;\n        text-align: center;\n      }\n\n      .stat-info {\n        flex: 1;\n      }\n\n      .stat-value {\n        display: block;\n        font-size: var(--font-size-lg);\n        font-weight: 700;\n        color: var(--color-text);\n        line-height: 1.2;\n      }\n\n      .stat-label {\n        display: block;\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        margin-top: 2px;\n      }\n\n      /* Controls Panel */\n      .controls-panel {\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        padding: var(--spacing-lg);\n        border: 1px solid var(--color-border);\n      }\n\n      .controls-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        gap: var(--spacing-lg);\n        margin-bottom: var(--spacing-md);\n      }\n\n      .controls-row:last-child {\n        margin-bottom: 0;\n      }\n\n      .search-controls {\n        flex: 1;\n        max-width: 400px;\n      }\n\n      .search-input-group {\n        display: flex;\n        gap: var(--spacing-sm);\n      }\n\n      .search-input {\n        flex: 1;\n      }\n\n      .action-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .sort-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .sort-controls .form-label {\n        margin: 0;\n        font-size: var(--font-size-sm);\n        white-space: nowrap;\n      }\n\n      .sort-select {\n        min-width: 150px;\n      }\n\n      .selection-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n      }\n\n      /* Dropdown Styles */\n      .dropdown {\n        position: relative;\n        display: inline-block;\n      }\n\n      .dropdown-toggle {\n        cursor: pointer;\n      }\n\n      .dropdown-menu {\n        position: absolute;\n        top: 100%;\n        right: 0;\n        background: var(--color-background);\n        border: 1px solid var(--color-border);\n        border-radius: var(--radius-md);\n        box-shadow: var(--shadow-lg);\n        z-index: 100;\n        min-width: 180px;\n        display: none;\n      }\n\n      .dropdown.open .dropdown-menu {\n        display: block;\n      }\n\n      .dropdown-item {\n        display: block;\n        width: 100%;\n        padding: var(--spacing-sm) var(--spacing-md);\n        text-align: left;\n        background: none;\n        border: none;\n        color: var(--color-text);\n        cursor: pointer;\n        font-size: var(--font-size-sm);\n        transition: background-color var(--transition-fast);\n      }\n\n      .dropdown-item:hover {\n        background-color: var(--color-surface);\n      }\n\n      .dropdown-item:first-child {\n        border-radius: var(--radius-md) var(--radius-md) 0 0;\n      }\n\n      .dropdown-item:last-child {\n        border-radius: 0 0 var(--radius-md) var(--radius-md);\n      }\n\n      /* Units List */\n      .units-list-container {\n        flex: 1;\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        border: 1px solid var(--color-border);\n        display: flex;\n        flex-direction: column;\n        overflow: hidden;\n      }\n\n      .units-list-header {\n        padding: var(--spacing-md) var(--spacing-lg);\n        background: var(--color-background);\n        border-bottom: 1px solid var(--color-border);\n      }\n\n      .results-info {\n        font-size: var(--font-size-sm);\n        color: var(--color-text-secondary);\n        font-weight: 500;\n      }\n\n      .units-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: var(--spacing-md);\n      }\n\n      /* Unit Items */\n      .unit-item {\n        display: flex;\n        gap: var(--spacing-md);\n        padding: var(--spacing-md);\n        background: var(--color-background);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        margin-bottom: var(--spacing-md);\n        transition: all var(--transition-fast);\n      }\n\n      .unit-item:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      }\n\n      .unit-item.selected {\n        border-color: var(--color-success);\n        background-color: rgba(34, 197, 94, 0.05);\n      }\n\n      .unit-checkbox {\n        display: flex;\n        align-items: flex-start;\n        padding-top: 2px;\n      }\n\n      .unit-select-checkbox {\n        width: 18px;\n        height: 18px;\n        cursor: pointer;\n      }\n\n      .unit-content {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .unit-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .unit-basic-info {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .unit-name {\n        margin: 0 0 var(--spacing-xs) 0;\n        font-size: var(--font-size-md);\n        color: var(--color-text);\n        font-weight: 600;\n      }\n\n      .unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .unit-type-tag {\n        background-color: var(--color-surface);\n        color: var(--color-text-secondary);\n        padding: 2px 8px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        border: 1px solid var(--color-border);\n      }\n\n      .unit-stats-summary {\n        display: flex;\n        gap: var(--spacing-md);\n        align-items: center;\n      }\n\n      .stat-item {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        font-size: var(--font-size-sm);\n      }\n\n      .stat-icon {\n        font-size: var(--font-size-sm);\n      }\n\n      .stat-value {\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .unit-details {\n        margin-top: var(--spacing-sm);\n        padding-top: var(--spacing-sm);\n        border-top: 1px solid var(--color-border);\n      }\n\n      .unit-meta {\n        display: flex;\n        gap: var(--spacing-lg);\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .meta-item {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n      }\n\n      .meta-label {\n        font-weight: 500;\n      }\n\n      .unit-modifiers {\n        margin-top: var(--spacing-sm);\n      }\n\n      .modifiers-label {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        display: block;\n        margin-bottom: var(--spacing-xs);\n      }\n\n      .modifiers-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .modifier-tag {\n        background-color: var(--color-warning);\n        color: white;\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        font-weight: 500;\n      }\n\n      .unit-actions {\n        display: flex;\n        flex-direction: column;\n        gap: var(--spacing-xs);\n        align-items: stretch;\n        min-width: 120px;\n      }\n\n      .unit-actions .btn {\n        font-size: var(--font-size-xs);\n        padding: var(--spacing-xs) var(--spacing-sm);\n        white-space: nowrap;\n      }\n\n      /* Empty State */\n      .empty-state {\n        text-align: center;\n        padding: var(--spacing-xl);\n        color: var(--color-text-secondary);\n      }\n\n      .empty-icon {\n        font-size: 4rem;\n        margin-bottom: var(--spacing-lg);\n      }\n\n      .empty-state h3 {\n        margin: 0 0 var(--spacing-sm) 0;\n        color: var(--color-text);\n      }\n\n      .empty-state p {\n        margin: 0 0 var(--spacing-lg) 0;\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .enemy-unit-manager.standalone {\n          padding: var(--spacing-md);\n        }\n\n        .manager-header {\n          flex-direction: column;\n          gap: var(--spacing-md);\n          text-align: center;\n        }\n\n        .stats-grid {\n          grid-template-columns: repeat(2, 1fr);\n        }\n\n        .controls-row {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-md);\n        }\n\n        .search-controls {\n          max-width: none;\n        }\n\n        .action-controls {\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n\n        .sort-controls {\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n\n        .unit-item {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-header {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-stats-summary {\n          justify-content: space-around;\n        }\n\n        .unit-actions {\n          flex-direction: row;\n          min-width: auto;\n        }\n\n        .unit-actions .btn {\n          flex: 1;\n        }\n\n        .unit-meta {\n          flex-direction: column;\n          gap: var(--spacing-xs);\n        }\n      }\n\n      @media (max-width: 480px) {\n        .stats-grid {\n          grid-template-columns: 1fr;\n        }\n\n        .action-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .selection-controls {\n          flex-direction: column;\n        }\n\n        .unit-actions {\n          flex-direction: column;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private attachEventListeners(): void {\n    // Close button\n    const closeBtn = document.getElementById('close-manager');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => this.props.onClose?.());\n    }\n\n    // Search\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.addEventListener('input', this.handleSearch.bind(this));\n    }\n\n    const clearSearchBtn = document.getElementById('clear-search');\n    if (clearSearchBtn) {\n      clearSearchBtn.addEventListener('click', this.handleClearSearch.bind(this));\n    }\n\n    // Create unit\n    const createBtn = document.getElementById('create-unit-btn');\n    if (createBtn) {\n      createBtn.addEventListener('click', this.handleCreateUnit.bind(this));\n    }\n\n    const createFirstBtn = document.getElementById('create-first-unit');\n    if (createFirstBtn) {\n      createFirstBtn.addEventListener('click', this.handleCreateUnit.bind(this));\n    }\n\n    // Sorting\n    const sortSelect = document.getElementById('sort-by') as HTMLSelectElement;\n    if (sortSelect) {\n      sortSelect.addEventListener('change', this.handleSortChange.bind(this));\n    }\n\n    const sortOrderBtn = document.getElementById('sort-order-btn');\n    if (sortOrderBtn) {\n      sortOrderBtn.addEventListener('click', this.handleSortOrderToggle.bind(this));\n    }\n\n    // Selection\n    const selectAllBtn = document.getElementById('select-all');\n    if (selectAllBtn) {\n      selectAllBtn.addEventListener('click', this.handleSelectAll.bind(this));\n    }\n\n    const selectNoneBtn = document.getElementById('select-none');\n    if (selectNoneBtn) {\n      selectNoneBtn.addEventListener('click', this.handleSelectNone.bind(this));\n    }\n\n    // Checkboxes\n    document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n      checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));\n    });\n\n    // Unit actions\n    document.querySelectorAll('[data-action]').forEach(btn => {\n      btn.addEventListener('click', this.handleUnitAction.bind(this));\n    });\n\n    // Dropdown toggles\n    this.attachDropdownListeners();\n\n    // Import/Export actions\n    this.attachImportExportListeners();\n  }\n\n  private attachDropdownListeners(): void {\n    document.querySelectorAll('.dropdown-toggle').forEach(toggle => {\n      toggle.addEventListener('click', (e) => {\n        e.stopPropagation();\n        const dropdown = toggle.closest('.dropdown');\n        if (dropdown) {\n          // Close other dropdowns\n          document.querySelectorAll('.dropdown.open').forEach(other => {\n            if (other !== dropdown) {\n              other.classList.remove('open');\n            }\n          });\n          // Toggle current dropdown\n          dropdown.classList.toggle('open');\n        }\n      });\n    });\n\n    // Close dropdowns when clicking outside\n    document.addEventListener('click', () => {\n      document.querySelectorAll('.dropdown.open').forEach(dropdown => {\n        dropdown.classList.remove('open');\n      });\n    });\n  }\n\n  private attachImportExportListeners(): void {\n    // Import units\n    const importBtn = document.getElementById('import-units');\n    if (importBtn) {\n      importBtn.addEventListener('click', this.handleImportUnits.bind(this));\n    }\n\n    // Export all\n    const exportAllBtn = document.getElementById('export-all');\n    if (exportAllBtn) {\n      exportAllBtn.addEventListener('click', this.handleExportAll.bind(this));\n    }\n\n    // Export selected\n    const exportSelectedBtn = document.getElementById('export-selected');\n    if (exportSelectedBtn) {\n      exportSelectedBtn.addEventListener('click', this.handleExportSelected.bind(this));\n    }\n\n    // Delete selected\n    const deleteSelectedBtn = document.getElementById('delete-selected');\n    if (deleteSelectedBtn) {\n      deleteSelectedBtn.addEventListener('click', this.handleDeleteSelected.bind(this));\n    }\n\n    // Clear all\n    const clearAllBtn = document.getElementById('clear-all');\n    if (clearAllBtn) {\n      clearAllBtn.addEventListener('click', this.handleClearAll.bind(this));\n    }\n\n    // File input for import\n    const fileInput = document.getElementById('import-file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.addEventListener('change', this.handleFileImport.bind(this));\n    }\n  }\n\n  private formatDate(date: Date): string {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) {\n      return 'Today';\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 7) {\n      return `${diffDays} days ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  }\n\n  private handleFormSave(unit: UserEnemyUnit): void {\n    if (this.editingUnit) {\n      // Update existing unit\n      const result = this.storage.updateUserEnemyUnit(this.editingUnit.id ?? '', unit);\n      if (result.success) {\n        this.showingForm = false;\n        this.editingUnit = null;\n        this.loadData();\n        this.render();\n        this.attachEventListeners();\n      } else {\n        alert(`Failed to update unit: ${result.error}`);\n      }\n    } else {\n      // Create new unit\n      const result = this.storage.addUserEnemyUnit(unit);\n      if (result.success) {\n        this.showingForm = false;\n        this.loadData();\n        this.render();\n        this.attachEventListeners();\n      } else {\n        alert(`Failed to create unit: ${result.error}`);\n      }\n    }\n  }\n\n  private handleFormCancel(): void {\n    this.showingForm = false;\n    this.editingUnit = null;\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private handleSearch(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.currentFilter = input.value;\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleClearSearch(): void {\n    this.currentFilter = '';\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.value = '';\n    }\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleCreateUnit(): void {\n    this.showingForm = true;\n    this.editingUnit = null;\n    this.render();\n  }\n\n  private handleSortChange(event: Event): void {\n    const select = event.target as HTMLSelectElement;\n    this.sortBy = select.value as any;\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleSortOrderToggle(): void {\n    this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n    \n    // Update button text\n    const btn = document.getElementById('sort-order-btn');\n    if (btn) {\n      btn.textContent = this.sortOrder === 'asc' ? '⬆️ Ascending' : '⬇️ Descending';\n    }\n  }\n\n  private handleSelectAll(): void {\n    this.selectedUnits.clear();\n    this.filteredUnits.forEach(unit => {\n      if (unit.id) this.selectedUnits.add(unit.id);\n    });\n    this.refreshSelectionUI();\n  }\n\n  private handleSelectNone(): void {\n    this.selectedUnits.clear();\n    this.refreshSelectionUI();\n  }\n\n  private handleCheckboxChange(event: Event): void {\n    const checkbox = event.target as HTMLInputElement;\n    const unitId = checkbox.dataset.unitId;\n    \n    if (unitId) {\n      if (checkbox.checked) {\n        this.selectedUnits.add(unitId);\n      } else {\n        this.selectedUnits.delete(unitId);\n      }\n      this.refreshSelectionUI();\n    }\n  }\n\n  private handleUnitAction(event: Event): void {\n    const btn = event.target as HTMLElement;\n    const action = btn.dataset.action;\n    const unitId = btn.dataset.unitId;\n    \n    if (!action || !unitId) return;\n\n    const unit = this.userUnits.find(u => u.id === unitId);\n    if (!unit) return;\n\n    switch (action) {\n      case 'select':\n        this.props.onUnitSelect?.(unit);\n        break;\n      case 'edit':\n        this.editingUnit = unit;\n        this.showingForm = true;\n        this.render();\n        break;\n      case 'duplicate':\n        this.handleDuplicateUnit(unit);\n        break;\n      case 'delete':\n        this.handleDeleteUnit(unit);\n        break;\n    }\n  }\n\n  private handleDuplicateUnit(unit: UserEnemyUnit): void {\n    const duplicateName = `${unit.name} (Copy)`;\n    const duplicateUnit: EnemyUnit = {\n      name: duplicateName,\n      unit_types: [...unit.unit_types],\n      health: unit.health,\n      strength: unit.strength,\n      attack_modifiers: unit.attack_modifiers ? [...unit.attack_modifiers] : undefined\n    };\n\n    const result = this.storage.addUserEnemyUnit(duplicateUnit);\n    if (result.success) {\n      this.loadData();\n      this.refreshUnitsList();\n    } else {\n      alert(`Failed to duplicate unit: ${result.error}`);\n    }\n  }\n\n  private handleDeleteUnit(unit: UserEnemyUnit): void {\n    if (confirm(`Are you sure you want to delete \"${unit.name}\"? This action cannot be undone.`)) {\n      const result = this.storage.deleteUserEnemyUnit(unit.id ?? '');\n      if (result.success) {\n        if (unit.id) this.selectedUnits.delete(unit.id);\n        this.loadData();\n        this.refreshUnitsList();\n      } else {\n        alert(`Failed to delete unit: ${result.error}`);\n      }\n    }\n  }\n\n  private handleImportUnits(): void {\n    const fileInput = document.getElementById('import-file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  }\n\n  private handleFileImport(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    const file = input.files?.[0];\n    \n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const jsonData = e.target?.result as string;\n        const result = this.storage.importUserEnemyUnits(jsonData, { skipDuplicates: true });\n        \n        if (result.success) {\n          let message = `Successfully imported ${result.imported} units.`;\n          if (result.skipped && result.skipped > 0) {\n            message += ` ${result.skipped} units were skipped.`;\n          }\n          if (result.errors && result.errors.length > 0) {\n            message += `\\n\\nErrors:\\n${result.errors.join('\\n')}`;\n          }\n          alert(message);\n          \n          this.loadData();\n          this.refreshUnitsList();\n        } else {\n          alert(`Import failed: ${result.errors?.join(', ') || 'Unknown error'}`);\n        }\n      } catch (error) {\n        alert('Failed to read file. Please ensure it\\'s a valid JSON file.');\n      }\n    };\n    \n    reader.readAsText(file);\n    input.value = ''; // Reset file input\n  }\n\n  private handleExportAll(): void {\n    const result = this.storage.exportUserEnemyUnits();\n    if (result.success && result.data) {\n      this.downloadJson(result.data, 'enemy-units-export.json');\n    } else {\n      alert(`Export failed: ${result.error}`);\n    }\n  }\n\n  private handleExportSelected(): void {\n    if (this.selectedUnits.size === 0) {\n      alert('No units selected for export.');\n      return;\n    }\n\n    const selectedUnitsList = this.userUnits.filter(unit => unit.id && this.selectedUnits.has(unit.id));\n    const exportData = {\n      version: '1.0',\n      exportDate: new Date().toISOString(),\n      units: selectedUnitsList.map(unit => ({\n        name: unit.name,\n        unit_types: unit.unit_types,\n        health: unit.health,\n        strength: unit.strength,\n        attack_modifiers: unit.attack_modifiers,\n        createdAt: unit.createdAt?.toISOString() ?? new Date().toISOString(),\n        modifiedAt: unit.modifiedAt?.toISOString() ?? new Date().toISOString()\n      }))\n    };\n\n    const jsonData = JSON.stringify(exportData, null, 2);\n    this.downloadJson(jsonData, `enemy-units-selected-${this.selectedUnits.size}.json`);\n  }\n\n  private handleDeleteSelected(): void {\n    if (this.selectedUnits.size === 0) {\n      alert('No units selected for deletion.');\n      return;\n    }\n\n    const count = this.selectedUnits.size;\n    if (confirm(`Are you sure you want to delete ${count} selected unit${count > 1 ? 's' : ''}? This action cannot be undone.`)) {\n      let deletedCount = 0;\n      const errors: string[] = [];\n\n      this.selectedUnits.forEach(unitId => {\n        const result = this.storage.deleteUserEnemyUnit(unitId);\n        if (result.success) {\n          deletedCount++;\n        } else {\n          errors.push(`Failed to delete unit: ${result.error}`);\n        }\n      });\n\n      this.selectedUnits.clear();\n      this.loadData();\n      this.refreshUnitsList();\n\n      let message = `Successfully deleted ${deletedCount} unit${deletedCount > 1 ? 's' : ''}.`;\n      if (errors.length > 0) {\n        message += `\\n\\nErrors:\\n${errors.join('\\n')}`;\n      }\n      alert(message);\n    }\n  }\n\n  private handleClearAll(): void {\n    if (this.userUnits.length === 0) {\n      alert('No units to clear.');\n      return;\n    }\n\n    if (confirm(`Are you sure you want to delete ALL ${this.userUnits.length} custom enemy units? This action cannot be undone.`)) {\n      const result = this.storage.clearAllUserEnemyUnits();\n      if (result.success) {\n        this.selectedUnits.clear();\n        this.loadData();\n        this.refreshUnitsList();\n        alert('All custom enemy units have been deleted.');\n      } else {\n        alert(`Failed to clear units: ${result.error}`);\n      }\n    }\n  }\n\n  private downloadJson(data: string, filename: string): void {\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  private refreshUnitsList(): void {\n    const unitsList = document.getElementById('units-list');\n    if (unitsList) {\n      unitsList.innerHTML = this.renderUnitsList();\n      \n      // Re-attach event listeners for new elements\n      document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n        checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));\n      });\n\n      document.querySelectorAll('[data-action]').forEach(btn => {\n        btn.addEventListener('click', this.handleUnitAction.bind(this));\n      });\n    }\n\n    // Update results info\n    const resultsInfo = document.querySelector('.results-info');\n    if (resultsInfo) {\n      resultsInfo.textContent = `Showing ${this.filteredUnits.length} of ${this.userUnits.length} units${this.selectedUnits.size > 0 ? ` (${this.selectedUnits.size} selected)` : ''}`;\n    }\n  }\n\n  private refreshSelectionUI(): void {\n    // Update checkboxes\n    document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n      const input = checkbox as HTMLInputElement;\n      const unitId = input.dataset.unitId;\n      if (unitId) {\n        input.checked = this.selectedUnits.has(unitId);\n      }\n    });\n\n    // Update unit item selection styling\n    document.querySelectorAll('.unit-item').forEach(item => {\n      const unitId = (item as HTMLElement).dataset.unitId;\n      if (unitId) {\n        if (this.selectedUnits.has(unitId)) {\n          item.classList.add('selected');\n        } else {\n          item.classList.remove('selected');\n        }\n      }\n    });\n\n    // Update bulk actions button\n    const bulkActionsBtn = document.getElementById('bulk-actions-btn');\n    if (bulkActionsBtn) {\n      bulkActionsBtn.textContent = `📋 Bulk Actions (${this.selectedUnits.size})`;\n      (bulkActionsBtn as HTMLButtonElement).disabled = this.selectedUnits.size === 0;\n    }\n\n    // Update select none button\n    const selectNoneBtn = document.getElementById('select-none');\n    if (selectNoneBtn) {\n      (selectNoneBtn as HTMLButtonElement).disabled = this.selectedUnits.size === 0;\n    }\n\n    // Update results info\n    const resultsInfo = document.querySelector('.results-info');\n    if (resultsInfo) {\n      resultsInfo.textContent = `Showing ${this.filteredUnits.length} of ${this.userUnits.length} units${this.selectedUnits.size > 0 ? ` (${this.selectedUnits.size} selected)` : ''}`;\n    }\n  }\n\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}","/**\n * Mobile utility functions for responsive behavior and touch interactions\n */\n\nexport interface BreakpointConfig {\n  mobileSmall: number;\n  mobileLarge: number;\n  tabletSmall: number;\n  tabletLarge: number;\n  desktop: number;\n}\n\nexport const BREAKPOINTS: BreakpointConfig = {\n  mobileSmall: 320,\n  mobileLarge: 480,\n  tabletSmall: 768,\n  tabletLarge: 1024,\n  desktop: 1200,\n};\n\nexport type LayoutMode = 'mobile' | 'tablet' | 'desktop';\n\n/**\n * Mobile detection and layout utilities\n */\nexport class MobileLayoutManager {\n  private currentMode: LayoutMode = 'desktop';\n  private listeners: Array<(mode: LayoutMode) => void> = [];\n\n  constructor() {\n    this.updateLayoutMode();\n    this.setupResizeListener();\n  }\n\n  /**\n   * Get current layout mode based on screen width\n   */\n  getCurrentMode(): LayoutMode {\n    return this.currentMode;\n  }\n\n  /**\n   * Check if current layout is mobile\n   */\n  isMobile(): boolean {\n    return this.currentMode === 'mobile';\n  }\n\n  /**\n   * Check if current layout is tablet\n   */\n  isTablet(): boolean {\n    return this.currentMode === 'tablet';\n  }\n\n  /**\n   * Check if current layout is desktop\n   */\n  isDesktop(): boolean {\n    return this.currentMode === 'desktop';\n  }\n\n  /**\n   * Check if device has touch capability\n   */\n  isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Get current viewport width\n   */\n  getViewportWidth(): number {\n    return window.innerWidth;\n  }\n\n  /**\n   * Add listener for layout mode changes\n   */\n  addLayoutChangeListener(callback: (mode: LayoutMode) => void): void {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * Remove layout change listener\n   */\n  removeLayoutChangeListener(callback: (mode: LayoutMode) => void): void {\n    const index = this.listeners.indexOf(callback);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Update layout mode based on current viewport\n   */\n  private updateLayoutMode(): void {\n    const width = this.getViewportWidth();\n    let newMode: LayoutMode;\n\n    if (width < BREAKPOINTS.tabletSmall) {\n      newMode = 'mobile';\n    } else if (width < BREAKPOINTS.tabletLarge) {\n      newMode = 'tablet';\n    } else {\n      newMode = 'desktop';\n    }\n\n    if (newMode !== this.currentMode) {\n      this.currentMode = newMode;\n      this.notifyListeners();\n    }\n  }\n\n  /**\n   * Setup resize listener for responsive behavior\n   */\n  private setupResizeListener(): void {\n    let resizeTimeout: number;\n    \n    window.addEventListener('resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = window.setTimeout(() => {\n        this.updateLayoutMode();\n      }, 150);\n    });\n  }\n\n  /**\n   * Notify all listeners of layout change\n   */\n  private notifyListeners(): void {\n    this.listeners.forEach(callback => callback(this.currentMode));\n  }\n}\n\n/**\n * Touch interaction utilities\n */\nexport class TouchInteractionManager {\n  /**\n   * Add swipe gesture support to an element\n   */\n  static addSwipeSupport(\n    element: HTMLElement,\n    onSwipeLeft?: () => void,\n    onSwipeRight?: () => void,\n    threshold: number = 50\n  ): void {\n    if (!('ontouchstart' in window)) return;\n\n    let startX: number = 0;\n    let startY: number = 0;\n    let startTime: number = 0;\n\n    element.addEventListener('touchstart', (e) => {\n      const touch = e.touches[0];\n      startX = touch.clientX;\n      startY = touch.clientY;\n      startTime = Date.now();\n    }, { passive: true });\n\n    element.addEventListener('touchend', (e) => {\n      if (e.changedTouches.length === 0) return;\n\n      const touch = e.changedTouches[0];\n      const endX = touch.clientX;\n      const endY = touch.clientY;\n      const endTime = Date.now();\n\n      const deltaX = endX - startX;\n      const deltaY = endY - startY;\n      const deltaTime = endTime - startTime;\n\n      // Check if it's a valid swipe (not too slow, not too vertical)\n      if (deltaTime < 500 && Math.abs(deltaX) > threshold && Math.abs(deltaY) < Math.abs(deltaX) * 0.5) {\n        if (deltaX > 0 && onSwipeRight) {\n          e.preventDefault();\n          onSwipeRight();\n        } else if (deltaX < 0 && onSwipeLeft) {\n          e.preventDefault();\n          onSwipeLeft();\n        }\n      }\n    }, { passive: false });\n  }\n  /**\n   * Add touch-friendly event listeners to an element\n   */\n  static addTouchSupport(element: HTMLElement, callback: () => void): void {\n    // Add both click and touch events for better compatibility\n    element.addEventListener('click', callback);\n    \n    if ('ontouchstart' in window) {\n      let touchStartTime: number;\n      \n      element.addEventListener('touchstart', (e) => {\n        touchStartTime = Date.now();\n        element.classList.add('touch-active');\n      });\n      \n      element.addEventListener('touchend', (e) => {\n        element.classList.remove('touch-active');\n        \n        // Only trigger if it was a quick tap (not a scroll)\n        if (Date.now() - touchStartTime < 200) {\n          e.preventDefault();\n          callback();\n        }\n      });\n      \n      element.addEventListener('touchcancel', () => {\n        element.classList.remove('touch-active');\n      });\n    }\n  }\n\n  /**\n   * Optimize scrollable element for mobile\n   */\n  static optimizeScrolling(element: HTMLElement): void {\n    // Add momentum scrolling for iOS\n    element.style.webkitOverflowScrolling = 'touch';\n    element.style.scrollBehavior = 'smooth';\n    \n    // Add scroll indicators\n    element.classList.add('scroll-momentum');\n  }\n\n  /**\n   * Add haptic feedback simulation (visual feedback)\n   */\n  static addHapticFeedback(element: HTMLElement): void {\n    element.addEventListener('touchstart', () => {\n      element.style.transform = 'scale(0.98)';\n      element.style.transition = 'transform 0.1s ease';\n    });\n\n    element.addEventListener('touchend', () => {\n      element.style.transform = 'scale(1)';\n    });\n\n    element.addEventListener('touchcancel', () => {\n      element.style.transform = 'scale(1)';\n    });\n  }\n\n  /**\n   * Add pull-to-refresh functionality\n   */\n  static addPullToRefresh(\n    container: HTMLElement,\n    onRefresh: () => Promise<void>,\n    threshold: number = 80\n  ): void {\n    if (!('ontouchstart' in window)) return;\n\n    let startY: number = 0;\n    let currentY: number = 0;\n    let isRefreshing: boolean = false;\n    let refreshIndicator: HTMLElement | null = null;\n\n    // Create refresh indicator\n    const createRefreshIndicator = () => {\n      if (refreshIndicator) return;\n\n      refreshIndicator = document.createElement('div');\n      refreshIndicator.className = 'pull-refresh-indicator';\n      refreshIndicator.innerHTML = `\n        <div class=\"refresh-spinner\"></div>\n        <span class=\"refresh-text\">Pull to refresh</span>\n      `;\n      container.insertBefore(refreshIndicator, container.firstChild);\n    };\n\n    container.addEventListener('touchstart', (e) => {\n      if (container.scrollTop === 0 && !isRefreshing) {\n        startY = e.touches[0].clientY;\n        createRefreshIndicator();\n      }\n    }, { passive: true });\n\n    container.addEventListener('touchmove', (e) => {\n      if (container.scrollTop === 0 && !isRefreshing && refreshIndicator) {\n        currentY = e.touches[0].clientY;\n        const pullDistance = Math.max(0, currentY - startY);\n\n        if (pullDistance > 0) {\n          e.preventDefault();\n          const progress = Math.min(pullDistance / threshold, 1);\n          refreshIndicator.style.transform = `translateY(${pullDistance * 0.5}px)`;\n          refreshIndicator.style.opacity = progress.toString();\n\n          if (pullDistance > threshold) {\n            refreshIndicator.querySelector('.refresh-text')!.textContent = 'Release to refresh';\n          } else {\n            refreshIndicator.querySelector('.refresh-text')!.textContent = 'Pull to refresh';\n          }\n        }\n      }\n    }, { passive: false });\n\n    container.addEventListener('touchend', async () => {\n      if (refreshIndicator && !isRefreshing) {\n        const pullDistance = currentY - startY;\n\n        if (pullDistance > threshold) {\n          isRefreshing = true;\n          refreshIndicator.querySelector('.refresh-text')!.textContent = 'Refreshing...';\n          refreshIndicator.querySelector('.refresh-spinner')!.classList.add('spinning');\n\n          try {\n            await onRefresh();\n          } finally {\n            isRefreshing = false;\n            if (refreshIndicator) {\n              refreshIndicator.style.transform = 'translateY(-100%)';\n              refreshIndicator.style.opacity = '0';\n              setTimeout(() => {\n                if (refreshIndicator && refreshIndicator.parentNode) {\n                  refreshIndicator.parentNode.removeChild(refreshIndicator);\n                  refreshIndicator = null;\n                }\n              }, 300);\n            }\n          }\n        } else {\n          refreshIndicator.style.transform = 'translateY(-100%)';\n          refreshIndicator.style.opacity = '0';\n          setTimeout(() => {\n            if (refreshIndicator && refreshIndicator.parentNode) {\n              refreshIndicator.parentNode.removeChild(refreshIndicator);\n              refreshIndicator = null;\n            }\n          }, 300);\n        }\n      }\n    });\n  }\n}\n\n/**\n * Mobile-specific CSS utilities\n */\nexport class MobileCSSManager {\n  /**\n   * Add mobile-specific CSS classes to body based on current layout\n   */\n  static updateBodyClasses(layoutManager: MobileLayoutManager): void {\n    const body = document.body;\n    \n    // Remove existing layout classes\n    body.classList.remove('layout-mobile', 'layout-tablet', 'layout-desktop');\n    \n    // Add current layout class\n    body.classList.add(`layout-${layoutManager.getCurrentMode()}`);\n    \n    // Add touch device class if applicable\n    if (layoutManager.isTouchDevice()) {\n      body.classList.add('touch-device');\n    }\n  }\n\n  /**\n   * Apply mobile-optimized styles to combat logs\n   */\n  static optimizeCombatLogs(): void {\n    const combatLogs = document.querySelectorAll('.combat-log');\n    \n    combatLogs.forEach(log => {\n      if (log instanceof HTMLElement) {\n        TouchInteractionManager.optimizeScrolling(log);\n      }\n    });\n  }\n\n  /**\n   * Apply mobile-optimized styles to unit cards\n   */\n  static optimizeUnitCards(): void {\n    const unitCards = document.querySelectorAll('.unit-card');\n    \n    unitCards.forEach(card => {\n      if (card instanceof HTMLElement) {\n        TouchInteractionManager.addHapticFeedback(card);\n      }\n    });\n  }\n}\n\n// Global mobile layout manager instance\nexport const mobileLayoutManager = new MobileLayoutManager();\n\n// Auto-update body classes when layout changes\nmobileLayoutManager.addLayoutChangeListener(() => {\n  MobileCSSManager.updateBodyClasses(mobileLayoutManager);\n});\n\n// Initialize body classes\nMobileCSSManager.updateBodyClasses(mobileLayoutManager);\n","/**\n * Responsive navigation manager for hybrid layout approach\n * Handles desktop, tablet, and mobile navigation patterns\n */\n\nimport { mobileLayoutManager, LayoutMode, TouchInteractionManager } from './mobileUtils';\n\nexport interface NavigationSection {\n  id: string;\n  title: string;\n  icon: string;\n  element: HTMLElement | null;\n  isAvailable: boolean;  // Whether the section has content and can be accessed\n  isCollapsed?: boolean;\n}\n\nexport class ResponsiveNavigationManager {\n  private sections: NavigationSection[] = [];\n  private currentActiveSection: string | null = null;\n  private tabContainer: HTMLElement | null = null;\n  private initialized = false;\n\n  constructor() {\n    this.setupLayoutListener();\n  }\n\n  /**\n   * Initialize the navigation system\n   */\n  public initialize(): void {\n    if (this.initialized) return;\n\n    this.identifySections();\n    this.createNavigationElements();\n    this.setupInitialLayout();\n    this.initialized = true;\n  }\n\n  /**\n   * Identify main sections in the app\n   */\n  private identifySections(): void {\n    this.sections = [\n      {\n        id: 'config-section',\n        title: 'Configuration',\n        icon: '⚙️',\n        element: document.getElementById('config-section'),\n        isAvailable: true,\n        isCollapsed: false\n      },\n      {\n        id: 'results-section',\n        title: 'Results',\n        icon: '🎯',\n        element: document.getElementById('results-section'),\n        isAvailable: false,\n        isCollapsed: false\n      },\n      {\n        id: 'battle-simulation-container',\n        title: 'Battle Simulation',\n        icon: '⚔️',\n        element: document.getElementById('battle-simulation-container'),\n        isAvailable: false,\n        isCollapsed: false\n      }\n    ];\n  }\n\n  /**\n   * Create navigation elements for different layouts\n   */\n  private createNavigationElements(): void {\n    this.createMobileTabNavigation();\n    this.createTabletCollapsibleHeaders();\n  }\n\n  /**\n   * Create mobile tab navigation\n   */\n  private createMobileTabNavigation(): void {\n    const mainContent = document.querySelector('.main-content');\n    if (!mainContent) return;\n\n    // Create tab container\n    const tabContainer = document.createElement('div');\n    tabContainer.className = 'mobile-tab-navigation mobile-only';\n    tabContainer.innerHTML = `\n      <div class=\"tab-nav-container\">\n        ${this.sections.map(section => `\n          <button class=\"tab-nav-item ${section.id === 'config-section' ? 'active' : ''}\" \n                  data-section=\"${section.id}\">\n            <span class=\"tab-icon\">${section.icon}</span>\n            <span class=\"tab-label\">${section.title}</span>\n          </button>\n        `).join('')}\n      </div>\n    `;\n\n    // Insert before main content\n    mainContent.parentNode?.insertBefore(tabContainer, mainContent);\n    this.tabContainer = tabContainer;\n\n    // Add event listeners\n    this.attachTabListeners();\n\n    // Add swipe support for mobile\n    this.addSwipeSupport();\n  }\n\n  /**\n   * Create tablet collapsible headers\n   */\n  private createTabletCollapsibleHeaders(): void {\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Create collapsible header\n      const header = document.createElement('div');\n      header.className = 'collapsible-header tablet-only';\n      header.innerHTML = `\n        <div class=\"collapsible-title\">\n          <span class=\"section-icon\">${section.icon}</span>\n          <h2>${section.title}</h2>\n          <span class=\"collapse-indicator\">▼</span>\n        </div>\n      `;\n\n      // Insert header before section content\n      section.element.insertBefore(header, section.element.firstChild);\n\n      // Add click listener\n      header.addEventListener('click', () => {\n        this.toggleSectionCollapse(section.id);\n      });\n    });\n  }\n\n  /**\n   * Setup initial layout based on current screen size\n   */\n  private setupInitialLayout(): void {\n    const currentMode = mobileLayoutManager.getCurrentMode();\n    this.applyLayoutMode(currentMode);\n\n    // Initialize tab visibility\n    this.updateTabVisibility();\n  }\n\n  /**\n   * Apply layout mode\n   */\n  private applyLayoutMode(mode: LayoutMode): void {\n    switch (mode) {\n      case 'mobile':\n        this.applyMobileLayout();\n        break;\n      case 'tablet':\n        this.applyTabletLayout();\n        break;\n      case 'desktop':\n        this.applyDesktopLayout();\n        break;\n    }\n  }\n\n  /**\n   * Apply mobile layout (tab navigation)\n   */\n  private applyMobileLayout(): void {\n    // Show only active section, hide others (but don't change isVisible for available sections)\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      if (section.id === this.currentActiveSection ||\n          (this.currentActiveSection === null && section.id === 'config-section')) {\n        section.element.classList.remove('hidden');\n        // Don't change isVisible - it tracks actual availability, not display state\n      } else {\n        section.element.classList.add('hidden');\n        // Don't change isVisible - it tracks actual availability, not display state\n      }\n    });\n\n    // Update tab active state\n    this.updateTabActiveState();\n  }\n\n  /**\n   * Apply tablet layout (collapsible sections)\n   */\n  private applyTabletLayout(): void {\n    // Show all available sections but allow collapsing\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Only show sections that are available\n      if (section.isAvailable) {\n        section.element.classList.remove('hidden');\n      } else {\n        section.element.classList.add('hidden');\n      }\n\n      // Apply collapsed state if needed\n      if (section.isCollapsed) {\n        section.element.classList.add('collapsed');\n      } else {\n        section.element.classList.remove('collapsed');\n      }\n    });\n  }\n\n  /**\n   * Apply desktop layout (current layout)\n   */\n  private applyDesktopLayout(): void {\n    // Show all available sections, remove any mobile/tablet specific classes\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Only show sections that are available\n      if (section.isAvailable) {\n        section.element.classList.remove('hidden', 'collapsed');\n      } else {\n        section.element.classList.add('hidden');\n      }\n      section.isCollapsed = false;\n    });\n  }\n\n  /**\n   * Switch to section (mobile)\n   */\n  public switchToSection(sectionId: string): void {\n    this.currentActiveSection = sectionId;\n\n    if (mobileLayoutManager.isMobile()) {\n      this.applyMobileLayout();\n    }\n  }\n\n  /**\n   * Toggle section collapse (tablet)\n   */\n  private toggleSectionCollapse(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section || !section.element) return;\n\n    section.isCollapsed = !section.isCollapsed;\n    \n    if (section.isCollapsed) {\n      section.element.classList.add('collapsed');\n    } else {\n      section.element.classList.remove('collapsed');\n    }\n\n    // Update collapse indicator\n    const indicator = section.element.querySelector('.collapse-indicator');\n    if (indicator) {\n      indicator.textContent = section.isCollapsed ? '▶' : '▼';\n    }\n  }\n\n  /**\n   * Attach tab navigation listeners\n   */\n  private attachTabListeners(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      tab.addEventListener('click', () => {\n        // Don't switch if tab is disabled\n        if (tab.classList.contains('disabled')) return;\n\n        const sectionId = tab.getAttribute('data-section');\n        if (sectionId) {\n          this.switchToSection(sectionId);\n        }\n      });\n    });\n  }\n\n  /**\n   * Update tab active state\n   */\n  private updateTabActiveState(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      const sectionId = tab.getAttribute('data-section');\n      if (sectionId === this.currentActiveSection || \n          (this.currentActiveSection === null && sectionId === 'config-section')) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n  }\n\n  /**\n   * Setup layout change listener\n   */\n  private setupLayoutListener(): void {\n    mobileLayoutManager.addLayoutChangeListener((mode) => {\n      if (this.initialized) {\n        this.applyLayoutMode(mode);\n      }\n    });\n  }\n\n  /**\n   * Show section (called when results are ready)\n   */\n  public showSection(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section) return;\n\n    // Refresh element reference if it's null\n    if (!section.element) {\n      section.element = document.getElementById(sectionId);\n      if (!section.element) return;\n    }\n\n    // Remove hidden class\n    section.element.classList.remove('hidden');\n    section.isAvailable = true;\n\n    // If mobile, switch to this section\n    if (mobileLayoutManager.isMobile()) {\n      this.switchToSection(sectionId);\n    }\n\n    // Update tab navigation to show this section is available\n    this.updateTabVisibility();\n  }\n\n  /**\n   * Hide section\n   */\n  public hideSection(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section || !section.element) return;\n\n    section.element.classList.add('hidden');\n    section.isAvailable = false;\n\n    // Update tab navigation\n    this.updateTabVisibility();\n\n    // If this was the active section on mobile, switch to config\n    if (mobileLayoutManager.isMobile() && this.currentActiveSection === sectionId) {\n      this.switchToSection('config-section');\n    }\n  }\n\n  /**\n   * Update tab visibility based on section availability\n   */\n  private updateTabVisibility(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      const sectionId = tab.getAttribute('data-section');\n      const section = this.sections.find(s => s.id === sectionId);\n\n      if (section) {\n        if (section.isAvailable) {\n          tab.classList.remove('disabled');\n          (tab as HTMLButtonElement).disabled = false;\n        } else {\n          tab.classList.add('disabled');\n          (tab as HTMLButtonElement).disabled = true;\n        }\n      }\n    });\n  }\n\n  /**\n   * Add swipe support for mobile navigation\n   */\n  private addSwipeSupport(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const mainContent = document.querySelector('.main-content');\n    if (!mainContent) return;\n\n    TouchInteractionManager.addSwipeSupport(\n      mainContent as HTMLElement,\n      () => this.swipeToNextSection(), // Swipe left = next section\n      () => this.swipeToPreviousSection() // Swipe right = previous section\n    );\n  }\n\n  /**\n   * Navigate to next available section via swipe\n   */\n  private swipeToNextSection(): void {\n    const availableSections = this.sections.filter(s => s.isAvailable);\n    const currentIndex = availableSections.findIndex(s => s.id === this.currentActiveSection);\n\n    if (currentIndex < availableSections.length - 1) {\n      const nextSection = availableSections[currentIndex + 1];\n      this.switchToSection(nextSection.id);\n    }\n  }\n\n  /**\n   * Navigate to previous available section via swipe\n   */\n  private swipeToPreviousSection(): void {\n    const availableSections = this.sections.filter(s => s.isAvailable);\n    const currentIndex = availableSections.findIndex(s => s.id === this.currentActiveSection);\n\n    if (currentIndex > 0) {\n      const previousSection = availableSections[currentIndex - 1];\n      this.switchToSection(previousSection.id);\n    }\n  }\n}\n\n// Global navigation manager instance\nexport const responsiveNavigation = new ResponsiveNavigationManager();\n","/**\n * Mobile-specific UI patterns and components\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\nexport interface FloatingActionButtonConfig {\n  icon: string;\n  label: string;\n  onClick: () => void;\n  position?: 'bottom-right' | 'bottom-left' | 'bottom-center';\n  color?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\n}\n\nexport interface BottomSheetConfig {\n  title: string;\n  content: string | HTMLElement;\n  actions?: Array<{\n    label: string;\n    onClick: () => void;\n    style?: 'primary' | 'secondary' | 'danger';\n  }>;\n  dismissible?: boolean;\n}\n\n/**\n * Mobile UI Pattern Manager\n */\nexport class MobileUIPatterns {\n  private static fabContainer: HTMLElement | null = null;\n  private static bottomSheetContainer: HTMLElement | null = null;\n\n  /**\n   * Create floating action button\n   */\n  static createFloatingActionButton(config: FloatingActionButtonConfig): HTMLElement {\n    const fab = document.createElement('button');\n    fab.className = `floating-action-button fab-${config.position || 'bottom-right'} fab-${config.color || 'primary'}`;\n    fab.innerHTML = `\n      <span class=\"fab-icon\">${config.icon}</span>\n      <span class=\"fab-label\">${config.label}</span>\n    `;\n    \n    fab.addEventListener('click', config.onClick);\n    \n    // Add touch feedback\n    fab.addEventListener('touchstart', () => {\n      fab.style.transform = 'scale(0.95)';\n    });\n    \n    fab.addEventListener('touchend', () => {\n      fab.style.transform = 'scale(1)';\n    });\n\n    return fab;\n  }\n\n  /**\n   * Show floating action button (only on mobile)\n   */\n  static showFloatingActionButton(config: FloatingActionButtonConfig): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    this.hideFloatingActionButton(); // Remove any existing FAB\n\n    if (!this.fabContainer) {\n      this.fabContainer = document.createElement('div');\n      this.fabContainer.className = 'fab-container';\n      document.body.appendChild(this.fabContainer);\n    }\n\n    const fab = this.createFloatingActionButton(config);\n    this.fabContainer.appendChild(fab);\n\n    // Animate in\n    setTimeout(() => {\n      fab.classList.add('fab-visible');\n    }, 10);\n  }\n\n  /**\n   * Hide floating action button\n   */\n  static hideFloatingActionButton(): void {\n    if (this.fabContainer) {\n      const fabs = this.fabContainer.querySelectorAll('.floating-action-button');\n      fabs.forEach(fab => {\n        fab.classList.remove('fab-visible');\n        setTimeout(() => {\n          if (fab.parentNode) {\n            fab.parentNode.removeChild(fab);\n          }\n        }, 300);\n      });\n    }\n  }\n\n  /**\n   * Create bottom sheet modal\n   */\n  static showBottomSheet(config: BottomSheetConfig): Promise<void> {\n    return new Promise((resolve) => {\n      if (!mobileLayoutManager.isMobile()) {\n        // On desktop, show as regular modal\n        this.showDesktopModal(config);\n        resolve();\n        return;\n      }\n\n      this.hideBottomSheet(); // Remove any existing bottom sheet\n\n      // Create backdrop\n      const backdrop = document.createElement('div');\n      backdrop.className = 'bottom-sheet-backdrop';\n\n      // Create bottom sheet\n      const bottomSheet = document.createElement('div');\n      bottomSheet.className = 'bottom-sheet';\n      \n      const header = document.createElement('div');\n      header.className = 'bottom-sheet-header';\n      header.innerHTML = `\n        <div class=\"bottom-sheet-handle\"></div>\n        <h3 class=\"bottom-sheet-title\">${config.title}</h3>\n        ${config.dismissible !== false ? '<button class=\"bottom-sheet-close\">×</button>' : ''}\n      `;\n\n      const content = document.createElement('div');\n      content.className = 'bottom-sheet-content';\n      if (typeof config.content === 'string') {\n        content.innerHTML = config.content;\n      } else {\n        content.appendChild(config.content);\n      }\n\n      const actions = document.createElement('div');\n      actions.className = 'bottom-sheet-actions';\n      if (config.actions) {\n        config.actions.forEach(action => {\n          const button = document.createElement('button');\n          button.className = `btn btn-${action.style || 'secondary'}`;\n          button.textContent = action.label;\n          button.addEventListener('click', () => {\n            action.onClick();\n            this.hideBottomSheet();\n            resolve();\n          });\n          actions.appendChild(button);\n        });\n      }\n\n      bottomSheet.appendChild(header);\n      bottomSheet.appendChild(content);\n      if (config.actions && config.actions.length > 0) {\n        bottomSheet.appendChild(actions);\n      }\n\n      // Create container\n      if (!this.bottomSheetContainer) {\n        this.bottomSheetContainer = document.createElement('div');\n        this.bottomSheetContainer.className = 'bottom-sheet-container';\n        document.body.appendChild(this.bottomSheetContainer);\n      }\n\n      this.bottomSheetContainer.appendChild(backdrop);\n      this.bottomSheetContainer.appendChild(bottomSheet);\n\n      // Add event listeners\n      if (config.dismissible !== false) {\n        backdrop.addEventListener('click', () => {\n          this.hideBottomSheet();\n          resolve();\n        });\n\n        const closeBtn = header.querySelector('.bottom-sheet-close');\n        if (closeBtn) {\n          closeBtn.addEventListener('click', () => {\n            this.hideBottomSheet();\n            resolve();\n          });\n        }\n      }\n\n      // Animate in\n      setTimeout(() => {\n        backdrop.classList.add('visible');\n        bottomSheet.classList.add('visible');\n      }, 10);\n    });\n  }\n\n  /**\n   * Hide bottom sheet\n   */\n  static hideBottomSheet(): void {\n    if (this.bottomSheetContainer) {\n      const backdrop = this.bottomSheetContainer.querySelector('.bottom-sheet-backdrop');\n      const bottomSheet = this.bottomSheetContainer.querySelector('.bottom-sheet');\n\n      if (backdrop && bottomSheet) {\n        backdrop.classList.remove('visible');\n        bottomSheet.classList.remove('visible');\n\n        setTimeout(() => {\n          if (this.bottomSheetContainer) {\n            this.bottomSheetContainer.innerHTML = '';\n          }\n        }, 300);\n      }\n    }\n  }\n\n  /**\n   * Show desktop modal (fallback for non-mobile)\n   */\n  private static showDesktopModal(config: BottomSheetConfig): void {\n    // Simple alert fallback for desktop\n    // In a real implementation, you might want to show a proper modal\n    const message = typeof config.content === 'string' ? config.content : config.title;\n    alert(message);\n  }\n\n  /**\n   * Create mobile-optimized dropdown\n   */\n  static createMobileDropdown(\n    trigger: HTMLElement,\n    options: Array<{ label: string; value: string; onClick: () => void }>\n  ): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    trigger.addEventListener('click', () => {\n      const content = document.createElement('div');\n      content.className = 'mobile-dropdown-content';\n      \n      options.forEach(option => {\n        const item = document.createElement('button');\n        item.className = 'mobile-dropdown-item';\n        item.textContent = option.label;\n        item.addEventListener('click', () => {\n          option.onClick();\n          this.hideBottomSheet();\n        });\n        content.appendChild(item);\n      });\n\n      this.showBottomSheet({\n        title: 'Select Option',\n        content: content,\n        dismissible: true\n      });\n    });\n  }\n\n  /**\n   * Add loading overlay for mobile\n   */\n  static showMobileLoading(message: string = 'Loading...'): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const overlay = document.createElement('div');\n    overlay.className = 'mobile-loading-overlay';\n    overlay.innerHTML = `\n      <div class=\"mobile-loading-content\">\n        <div class=\"mobile-loading-spinner\"></div>\n        <p class=\"mobile-loading-text\">${message}</p>\n      </div>\n    `;\n\n    document.body.appendChild(overlay);\n\n    setTimeout(() => {\n      overlay.classList.add('visible');\n    }, 10);\n  }\n\n  /**\n   * Hide mobile loading overlay\n   */\n  static hideMobileLoading(): void {\n    const overlay = document.querySelector('.mobile-loading-overlay');\n    if (overlay) {\n      overlay.classList.remove('visible');\n      setTimeout(() => {\n        if (overlay.parentNode) {\n          overlay.parentNode.removeChild(overlay);\n        }\n      }, 300);\n    }\n  }\n}\n\n// Auto-hide FAB when switching to desktop\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobileUIPatterns.hideFloatingActionButton();\n    MobileUIPatterns.hideBottomSheet();\n  }\n});\n","/**\n * Mobile performance optimization utilities\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\nexport interface PerformanceMetrics {\n  renderTime: number;\n  interactionTime: number;\n  scrollPerformance: number;\n  memoryUsage?: number;\n}\n\n/**\n * Mobile Performance Manager\n */\nexport class MobilePerformanceManager {\n  private static metrics: PerformanceMetrics = {\n    renderTime: 0,\n    interactionTime: 0,\n    scrollPerformance: 0\n  };\n\n  private static observers: Map<string, IntersectionObserver> = new Map();\n  private static rafId: number | null = null;\n\n  /**\n   * Initialize performance monitoring\n   */\n  static initialize(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    this.setupLazyLoading();\n    this.optimizeScrolling();\n    this.monitorInteractions();\n    this.setupMemoryMonitoring();\n  }\n\n  /**\n   * Setup lazy loading for non-critical sections\n   */\n  private static setupLazyLoading(): void {\n    const lazyElements = document.querySelectorAll('[data-lazy]');\n    \n    if (lazyElements.length === 0) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const element = entry.target as HTMLElement;\n            this.loadElement(element);\n            observer.unobserve(element);\n          }\n        });\n      },\n      {\n        rootMargin: '50px',\n        threshold: 0.1\n      }\n    );\n\n    lazyElements.forEach(element => observer.observe(element));\n    this.observers.set('lazy-loading', observer);\n  }\n\n  /**\n   * Load a lazy element\n   */\n  private static loadElement(element: HTMLElement): void {\n    const startTime = performance.now();\n\n    // Simulate loading content\n    const content = element.dataset.lazy;\n    if (content) {\n      element.innerHTML = content;\n      element.removeAttribute('data-lazy');\n    }\n\n    const endTime = performance.now();\n    this.metrics.renderTime += endTime - startTime;\n  }\n\n  /**\n   * Optimize scrolling performance\n   */\n  private static optimizeScrolling(): void {\n    const scrollableElements = document.querySelectorAll('.combat-log, .unit-family-content, .main-content');\n    \n    scrollableElements.forEach(element => {\n      let isScrolling = false;\n      let scrollTimeout: number;\n\n      element.addEventListener('scroll', () => {\n        if (!isScrolling) {\n          isScrolling = true;\n          this.requestOptimizedFrame(() => {\n            // Optimize scroll performance\n            this.optimizeScrollFrame(element as HTMLElement);\n            isScrolling = false;\n          });\n        }\n\n        // Clear timeout and set a new one\n        clearTimeout(scrollTimeout);\n        scrollTimeout = window.setTimeout(() => {\n          this.onScrollEnd(element as HTMLElement);\n        }, 150);\n      }, { passive: true });\n    });\n  }\n\n  /**\n   * Optimize scroll frame\n   */\n  private static optimizeScrollFrame(element: HTMLElement): void {\n    const startTime = performance.now();\n\n    // Hide elements that are far out of view to improve performance\n    const rect = element.getBoundingClientRect();\n    const children = element.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i] as HTMLElement;\n      const childRect = child.getBoundingClientRect();\n      \n      // Hide elements that are more than 2 viewport heights away\n      const isVisible = childRect.bottom > -window.innerHeight * 2 && \n                       childRect.top < window.innerHeight * 3;\n      \n      if (!isVisible && !child.classList.contains('scroll-hidden')) {\n        child.classList.add('scroll-hidden');\n        child.style.visibility = 'hidden';\n      } else if (isVisible && child.classList.contains('scroll-hidden')) {\n        child.classList.remove('scroll-hidden');\n        child.style.visibility = 'visible';\n      }\n    }\n\n    const endTime = performance.now();\n    this.metrics.scrollPerformance += endTime - startTime;\n  }\n\n  /**\n   * Handle scroll end\n   */\n  private static onScrollEnd(element: HTMLElement): void {\n    // Restore visibility to all hidden elements\n    const hiddenElements = element.querySelectorAll('.scroll-hidden');\n    hiddenElements.forEach(el => {\n      el.classList.remove('scroll-hidden');\n      (el as HTMLElement).style.visibility = 'visible';\n    });\n  }\n\n  /**\n   * Request optimized animation frame\n   */\n  private static requestOptimizedFrame(callback: () => void): void {\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n    }\n\n    this.rafId = requestAnimationFrame(() => {\n      callback();\n      this.rafId = null;\n    });\n  }\n\n  /**\n   * Monitor touch interactions\n   */\n  private static monitorInteractions(): void {\n    let interactionStart: number;\n\n    document.addEventListener('touchstart', () => {\n      interactionStart = performance.now();\n    }, { passive: true });\n\n    document.addEventListener('touchend', () => {\n      if (interactionStart) {\n        const interactionTime = performance.now() - interactionStart;\n        this.metrics.interactionTime = Math.max(this.metrics.interactionTime, interactionTime);\n      }\n    }, { passive: true });\n  }\n\n  /**\n   * Setup memory monitoring\n   */\n  private static setupMemoryMonitoring(): void {\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        this.metrics.memoryUsage = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n        \n        // Warn if memory usage is high\n        if (this.metrics.memoryUsage > 0.8) {\n          console.warn('High memory usage detected:', this.metrics.memoryUsage);\n          this.optimizeMemory();\n        }\n      }, 10000); // Check every 10 seconds\n    }\n  }\n\n  /**\n   * Optimize memory usage\n   */\n  private static optimizeMemory(): void {\n    // Clear unused observers\n    this.observers.forEach((observer, key) => {\n      if (key !== 'lazy-loading') {\n        observer.disconnect();\n        this.observers.delete(key);\n      }\n    });\n\n    // Force garbage collection if available\n    if ('gc' in window) {\n      (window as any).gc();\n    }\n  }\n\n  /**\n   * Get performance metrics\n   */\n  static getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset metrics\n   */\n  static resetMetrics(): void {\n    this.metrics = {\n      renderTime: 0,\n      interactionTime: 0,\n      scrollPerformance: 0\n    };\n  }\n\n  /**\n   * Add CSS optimizations for mobile\n   */\n  static addMobileCSSOptimizations(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Mobile Performance Optimizations */\n      * {\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      .scroll-hidden {\n        visibility: hidden !important;\n      }\n\n      /* Optimize animations for mobile */\n      @media (max-width: 767px) {\n        * {\n          animation-duration: 0.2s !important;\n          transition-duration: 0.2s !important;\n        }\n\n        /* Reduce motion for better performance */\n        @media (prefers-reduced-motion: reduce) {\n          * {\n            animation-duration: 0.01ms !important;\n            animation-iteration-count: 1 !important;\n            transition-duration: 0.01ms !important;\n          }\n        }\n\n        /* Optimize transforms */\n        .unit-card,\n        .tab-nav-item,\n        .btn {\n          will-change: transform;\n          transform: translateZ(0);\n        }\n\n        /* Optimize scrolling */\n        .combat-log,\n        .unit-family-content,\n        .main-content {\n          -webkit-overflow-scrolling: touch;\n          overflow-scrolling: touch;\n          will-change: scroll-position;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Cleanup performance monitoring\n   */\n  static cleanup(): void {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n}\n\n// Auto-initialize on mobile\nif (mobileLayoutManager.isMobile()) {\n  document.addEventListener('DOMContentLoaded', () => {\n    MobilePerformanceManager.initialize();\n    MobilePerformanceManager.addMobileCSSOptimizations();\n  });\n}\n\n// Cleanup when switching away from mobile\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobilePerformanceManager.cleanup();\n  } else {\n    MobilePerformanceManager.initialize();\n    MobilePerformanceManager.addMobileCSSOptimizations();\n  }\n});\n","/**\n * Mobile accessibility enhancements\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\n/**\n * Mobile Accessibility Manager\n */\nexport class MobileAccessibilityManager {\n  private static focusTracker: HTMLElement | null = null;\n  private static announcer: HTMLElement | null = null;\n\n  /**\n   * Initialize mobile accessibility features\n   */\n  static initialize(): void {\n    this.createScreenReaderAnnouncer();\n    this.setupFocusManagement();\n    this.enhanceTabNavigation();\n    this.addTouchAccessibility();\n    this.setupKeyboardNavigation();\n  }\n\n  /**\n   * Create screen reader announcer\n   */\n  private static createScreenReaderAnnouncer(): void {\n    if (this.announcer) return;\n\n    this.announcer = document.createElement('div');\n    this.announcer.setAttribute('aria-live', 'polite');\n    this.announcer.setAttribute('aria-atomic', 'true');\n    this.announcer.className = 'sr-only';\n    this.announcer.style.cssText = `\n      position: absolute !important;\n      width: 1px !important;\n      height: 1px !important;\n      padding: 0 !important;\n      margin: -1px !important;\n      overflow: hidden !important;\n      clip: rect(0, 0, 0, 0) !important;\n      white-space: nowrap !important;\n      border: 0 !important;\n    `;\n\n    document.body.appendChild(this.announcer);\n  }\n\n  /**\n   * Announce message to screen readers\n   */\n  static announce(message: string, priority: 'polite' | 'assertive' = 'polite'): void {\n    if (!this.announcer) this.createScreenReaderAnnouncer();\n\n    this.announcer!.setAttribute('aria-live', priority);\n    this.announcer!.textContent = message;\n\n    // Clear after announcement\n    setTimeout(() => {\n      if (this.announcer) {\n        this.announcer.textContent = '';\n      }\n    }, 1000);\n  }\n\n  /**\n   * Setup focus management for mobile\n   */\n  private static setupFocusManagement(): void {\n    // Track focus for mobile navigation\n    document.addEventListener('focusin', (e) => {\n      this.focusTracker = e.target as HTMLElement;\n    });\n\n    // Handle focus when switching tabs on mobile\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible' && mobileLayoutManager.isMobile()) {\n        this.restoreFocus();\n      }\n    });\n  }\n\n  /**\n   * Restore focus to appropriate element\n   */\n  private static restoreFocus(): void {\n    if (this.focusTracker && document.contains(this.focusTracker)) {\n      this.focusTracker.focus();\n    } else {\n      // Focus first interactive element in current section\n      const activeSection = document.querySelector('.main-content > :not(.hidden)');\n      if (activeSection) {\n        const firstInteractive = activeSection.querySelector('button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        if (firstInteractive) {\n          (firstInteractive as HTMLElement).focus();\n        }\n      }\n    }\n  }\n\n  /**\n   * Enhance tab navigation for mobile\n   */\n  private static enhanceTabNavigation(): void {\n    const tabContainer = document.querySelector('.mobile-tab-navigation');\n    if (!tabContainer) return;\n\n    // Add ARIA labels and roles\n    tabContainer.setAttribute('role', 'tablist');\n    tabContainer.setAttribute('aria-label', 'Main navigation');\n\n    const tabs = tabContainer.querySelectorAll('.tab-nav-item');\n    tabs.forEach((tab, index) => {\n      tab.setAttribute('role', 'tab');\n      tab.setAttribute('aria-selected', index === 0 ? 'true' : 'false');\n      tab.setAttribute('tabindex', index === 0 ? '0' : '-1');\n      \n      const sectionId = tab.getAttribute('data-section');\n      if (sectionId) {\n        tab.setAttribute('aria-controls', sectionId);\n        tab.id = `tab-${sectionId}`;\n      }\n\n      // Add keyboard navigation\n      tab.addEventListener('keydown', (e) => {\n        this.handleTabKeydown(e as KeyboardEvent, tabs, index);\n      });\n\n      // Announce tab changes\n      tab.addEventListener('click', () => {\n        const label = tab.querySelector('.tab-label')?.textContent || 'Section';\n        this.announce(`Switched to ${label} section`);\n        this.updateTabAria(tabs, index);\n      });\n    });\n  }\n\n  /**\n   * Handle keyboard navigation in tabs\n   */\n  private static handleTabKeydown(e: KeyboardEvent, tabs: NodeListOf<Element>, currentIndex: number): void {\n    let newIndex = currentIndex;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        newIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        newIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;\n        break;\n      case 'Home':\n        e.preventDefault();\n        newIndex = 0;\n        break;\n      case 'End':\n        e.preventDefault();\n        newIndex = tabs.length - 1;\n        break;\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n        (tabs[currentIndex] as HTMLElement).click();\n        return;\n    }\n\n    if (newIndex !== currentIndex) {\n      this.updateTabAria(tabs, newIndex);\n      (tabs[newIndex] as HTMLElement).focus();\n    }\n  }\n\n  /**\n   * Update ARIA attributes for tabs\n   */\n  private static updateTabAria(tabs: NodeListOf<Element>, activeIndex: number): void {\n    tabs.forEach((tab, index) => {\n      tab.setAttribute('aria-selected', index === activeIndex ? 'true' : 'false');\n      tab.setAttribute('tabindex', index === activeIndex ? '0' : '-1');\n    });\n  }\n\n  /**\n   * Add touch accessibility features\n   */\n  private static addTouchAccessibility(): void {\n    // Add touch feedback for screen readers\n    document.addEventListener('touchstart', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.matches('button, .unit-card, .tab-nav-item')) {\n        target.setAttribute('aria-pressed', 'true');\n      }\n    }, { passive: true });\n\n    document.addEventListener('touchend', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.matches('button, .unit-card, .tab-nav-item')) {\n        target.removeAttribute('aria-pressed');\n      }\n    }, { passive: true });\n\n    // Add double-tap to activate for complex elements\n    let lastTap = 0;\n    document.addEventListener('touchend', (e) => {\n      const currentTime = new Date().getTime();\n      const tapLength = currentTime - lastTap;\n      \n      if (tapLength < 500 && tapLength > 0) {\n        const target = e.target as HTMLElement;\n        if (target.matches('.unit-card, .army-composition')) {\n          this.announce('Double tap to activate', 'assertive');\n        }\n      }\n      lastTap = currentTime;\n    });\n  }\n\n  /**\n   * Setup keyboard navigation for mobile\n   */\n  private static setupKeyboardNavigation(): void {\n    // Add skip links for mobile\n    this.addSkipLinks();\n\n    // Handle escape key to close modals/sheets\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        const activeModal = document.querySelector('.bottom-sheet.visible, .mobile-loading-overlay.visible');\n        if (activeModal) {\n          e.preventDefault();\n          this.announce('Modal closed');\n          // Trigger close event\n          const closeBtn = activeModal.querySelector('.bottom-sheet-close');\n          if (closeBtn) {\n            (closeBtn as HTMLElement).click();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Add skip links for mobile navigation\n   */\n  private static addSkipLinks(): void {\n    const skipLinks = document.createElement('div');\n    skipLinks.className = 'skip-links';\n    skipLinks.innerHTML = `\n      <a href=\"#main-content\" class=\"skip-link\">Skip to main content</a>\n      <a href=\"#mobile-navigation\" class=\"skip-link\">Skip to navigation</a>\n    `;\n\n    document.body.insertBefore(skipLinks, document.body.firstChild);\n\n    // Add main content ID if not present\n    const mainContent = document.querySelector('.main-content');\n    if (mainContent && !mainContent.id) {\n      mainContent.id = 'main-content';\n    }\n\n    // Add navigation ID if not present\n    const navigation = document.querySelector('.mobile-tab-navigation');\n    if (navigation && !navigation.id) {\n      navigation.id = 'mobile-navigation';\n    }\n  }\n\n  /**\n   * Enhance form accessibility for mobile\n   */\n  static enhanceFormAccessibility(): void {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(form => {\n      // Add form labels and descriptions\n      const inputs = form.querySelectorAll('input, select, textarea');\n      inputs.forEach(input => {\n        const label = form.querySelector(`label[for=\"${input.id}\"]`);\n        if (!label && input.id) {\n          // Create label if missing\n          const newLabel = document.createElement('label');\n          newLabel.setAttribute('for', input.id);\n          newLabel.textContent = input.getAttribute('placeholder') || 'Input field';\n          newLabel.className = 'sr-only';\n          input.parentNode?.insertBefore(newLabel, input);\n        }\n\n        // Add required field announcements\n        if (input.hasAttribute('required')) {\n          input.setAttribute('aria-required', 'true');\n          input.addEventListener('invalid', () => {\n            this.announce('Required field is empty', 'assertive');\n          });\n        }\n      });\n\n      // Announce form submission\n      form.addEventListener('submit', () => {\n        this.announce('Form submitted');\n      });\n    });\n  }\n\n  /**\n   * Add ARIA labels to dynamic content\n   */\n  static addDynamicLabels(): void {\n    // Label unit cards\n    const unitCards = document.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      const unitName = card.querySelector('.unit-name')?.textContent;\n      if (unitName && !card.getAttribute('aria-label')) {\n        card.setAttribute('aria-label', `Unit: ${unitName}`);\n        card.setAttribute('role', 'button');\n      }\n    });\n\n    // Label army compositions\n    const compositions = document.querySelectorAll('.army-composition');\n    compositions.forEach((comp, index) => {\n      if (!comp.getAttribute('aria-label')) {\n        comp.setAttribute('aria-label', `Army composition ${index + 1}`);\n        comp.setAttribute('role', 'article');\n      }\n    });\n\n    // Label combat log entries\n    const combatActions = document.querySelectorAll('.combat-action');\n    combatActions.forEach((action, index) => {\n      if (!action.getAttribute('aria-label')) {\n        const actionText = action.textContent?.substring(0, 50) || 'Combat action';\n        action.setAttribute('aria-label', `Combat action ${index + 1}: ${actionText}`);\n      }\n    });\n  }\n\n  /**\n   * Cleanup accessibility features\n   */\n  static cleanup(): void {\n    if (this.announcer && this.announcer.parentNode) {\n      this.announcer.parentNode.removeChild(this.announcer);\n      this.announcer = null;\n    }\n\n    const skipLinks = document.querySelector('.skip-links');\n    if (skipLinks && skipLinks.parentNode) {\n      skipLinks.parentNode.removeChild(skipLinks);\n    }\n  }\n}\n\n// Auto-initialize on mobile\nif (mobileLayoutManager.isMobile()) {\n  document.addEventListener('DOMContentLoaded', () => {\n    MobileAccessibilityManager.initialize();\n  });\n}\n\n// Cleanup when switching away from mobile\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobileAccessibilityManager.cleanup();\n  } else {\n    MobileAccessibilityManager.initialize();\n  }\n});\n","/**\n * Main application component for the TotalBattle Army Calculator\n * Updated to use our validated unit data and stacking optimization algorithm\n */\n\nimport { Unit, OptimizationConstraints, ArmyComposition } from '../../types/units';\nimport { UnitLoader } from '../../services/unitLoader';\nimport { StackingOptimizer } from '../../services/stackingOptimizer';\nimport { DamageOptimizer, DamageOptimizationConstraints } from '../../services/damageOptimizer';\nimport { BattleSimulationComponent } from '../BattleSimulation/BattleSimulationComponent';\nimport { ManualBattleSimulationComponent } from '../BattleSimulation/ManualBattleSimulationComponent';\nimport { EnemyUnitManager } from '../EnemyUnits/EnemyUnitManager';\nimport { mobileLayoutManager, TouchInteractionManager, MobileCSSManager } from '../../utils/mobileUtils';\nimport { responsiveNavigation } from '../../utils/responsiveNavigation';\nimport { MobileUIPatterns } from '../../utils/mobileUIPatterns';\nimport { MobilePerformanceManager } from '../../utils/mobilePerformance';\nimport { MobileAccessibilityManager } from '../../utils/mobileAccessibility';\n\nexport class ArmyCalculatorApp {\n  private container: HTMLElement | null = null;\n  private unitLoader: UnitLoader;\n  private optimizer: StackingOptimizer | null = null;\n  private damageOptimizer: DamageOptimizer | null = null;\n  private selectedUnits: Set<string> = new Set();\n  private mercenaryLimits: Record<string, number> = {};\n  private battleSimulation: BattleSimulationComponent | null = null;\n  private manualBattleSimulation: ManualBattleSimulationComponent | null = null;\n  private currentOptimizedArmy: ArmyComposition | null = null;\n  private currentMode: 'stacking' | 'damage' | 'enemy-units' | 'manual-battle' = 'stacking';\n  private enemyUnitManager: EnemyUnitManager | null = null;\n  private selectedEnemyUnits: any[] = [];\n  private currentEnemyUnitSelector: any = null;\n  private currentEnemyUnitSelectorContainer: HTMLElement | null = null;\n\n  constructor() {\n    this.unitLoader = new UnitLoader();\n  }\n\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    this.render();\n    this.attachEventListeners();\n    await this.loadInitialData();\n\n    // Initialize mobile optimizations\n    this.initializeMobileOptimizations();\n\n    // Initialize responsive navigation\n    responsiveNavigation.initialize();\n\n    // Initialize Phase 3 mobile enhancements\n    this.initializeAdvancedMobileFeatures();\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"army-calculator\">\n        <header class=\"header\">\n          <h1>🏰 TotalBattle Army Calculator</h1>\n          <p class=\"subtitle\">Optimize your army composition for maximum effectiveness</p>\n\n          <!-- Mode Switcher -->\n          <div class=\"mode-switcher\">\n            <div class=\"mode-tabs\">\n              <button id=\"stacking-mode-btn\" class=\"mode-tab active\" data-mode=\"stacking\">\n                <span class=\"mode-icon\">🛡️</span>\n                <span class=\"mode-label\">Stacking Optimizer</span>\n                <span class=\"mode-desc\">Maximize budget usage</span>\n              </button>\n              <button id=\"damage-mode-btn\" class=\"mode-tab\" data-mode=\"damage\">\n                <span class=\"mode-icon\">⚔️</span>\n                <span class=\"mode-label\">Damage Optimizer</span>\n                <span class=\"mode-desc\">Maximize damage output</span>\n              </button>\n              <button id=\"enemy-units-btn\" class=\"mode-tab\" data-mode=\"enemy-units\">\n                <span class=\"mode-icon\">👹</span>\n                <span class=\"mode-label\">Enemy Units</span>\n                <span class=\"mode-desc\">Manage enemy units</span>\n              </button>\n              <button id=\"manual-battle-btn\" class=\"mode-tab\" data-mode=\"manual-battle\">\n                <span class=\"mode-icon\">⚔️</span>\n                <span class=\"mode-label\">Manual Battle</span>\n                <span class=\"mode-desc\">Custom battle simulation</span>\n              </button>\n            </div>\n          </div>\n        </header>\n\n        <main class=\"main-content\">\n          <!-- Army Configuration Section -->\n          <section class=\"card main-config-section\" id=\"config-section\">\n            <h1 class=\"main-title\" id=\"config-title\">⚔️ Army Configuration</h1>\n\n            <!-- Mode-specific description -->\n            <div class=\"mode-description\" id=\"mode-description\">\n              <p id=\"stacking-description\" class=\"mode-desc-text\">\n                Configure your army to maximize budget usage with optimal health stacking.\n              </p>\n              <p id=\"damage-description\" class=\"mode-desc-text hidden\">\n                Configure your army to maximize damage output against enemy forces.\n              </p>\n            </div>\n\n            <div class=\"config-grid\">\n              <!-- Resource Constraints -->\n              <div class=\"config-group resource-constraints\">\n                <h2 class=\"section-title\">💰 Resource Constraints</h2>\n                <div class=\"input-group\">\n                  <label for=\"leadership-budget\" class=\"input-label\">Leadership Points:</label>\n                  <input type=\"number\" id=\"leadership-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"dominance-budget\" class=\"input-label\">Dominance Points:</label>\n                  <input type=\"number\" id=\"dominance-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n\n                <!-- Damage Optimization Controls -->\n                <div class=\"damage-optimization-controls hidden\" id=\"damage-controls\">\n                  <div class=\"input-group\">\n                    <label for=\"enemy-count\" class=\"input-label\">Enemy Groups:</label>\n                    <input type=\"number\" id=\"enemy-count\" min=\"1\" max=\"20\" value=\"5\" class=\"input large-input\">\n                    <small class=\"input-help\">Number of enemy groups to optimize against</small>\n                  </div>\n                  <div class=\"input-group\">\n                    <label for=\"max-combinations\" class=\"input-label\">Max Combinations:</label>\n                    <input type=\"number\" id=\"max-combinations\" min=\"10\" max=\"200\" value=\"50\" class=\"input large-input\">\n                    <small class=\"input-help\">Performance limit (higher = more thorough but slower)</small>\n                  </div>\n                  <div class=\"input-group\">\n                    <label class=\"input-label\">Enemy Configuration:</label>\n                    <button id=\"select-enemy-units-btn\" class=\"btn btn-secondary\">\n                      👹 Select Enemy Units\n                    </button>\n                    <small class=\"input-help\">Choose specific enemy units for battle optimization</small>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Available Units -->\n              <div class=\"config-group unit-selection-group\">\n                <h2 class=\"section-title\">🛡️ Available Units</h2>\n                <div class=\"unit-selection\">\n                  <div class=\"unit-controls\">\n                    <div class=\"search-box\">\n                      <input type=\"text\" id=\"unit-search\" placeholder=\"Search units...\" class=\"input\">\n                    </div>\n                    <div class=\"filter-tabs\">\n                      <button class=\"filter-tab active\" data-filter=\"all\">All (101)</button>\n                      <button class=\"filter-tab\" data-filter=\"Guardsmen\">Guardsmen</button>\n                      <button class=\"filter-tab\" data-filter=\"Specialists\">Specialists</button>\n                      <button class=\"filter-tab\" data-filter=\"Engineer Corps\">Engineer Corps</button>\n                      <button class=\"filter-tab\" data-filter=\"Monsters\">Monsters</button>\n                      <button class=\"filter-tab\" data-filter=\"Mercenaries\">Mercenaries</button>\n                    </div>\n                    <div class=\"unit-type-filters\">\n                      <select id=\"unit-type-filter\" class=\"input\">\n                        <option value=\"\">All Unit Types</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div class=\"selected-units-summary\">\n                    <span id=\"selected-count\">0 units selected</span>\n                    <button id=\"select-all-visible\" class=\"btn btn-sm\">Select All Visible</button>\n                    <button id=\"clear-selection\" class=\"btn btn-sm\">Clear All</button>\n                  </div>\n                  <div id=\"unit-groups\" class=\"unit-groups\"></div>\n                </div>\n              </div>\n\n              <!-- Mercenary Limits -->\n              <div class=\"config-group mercenary-group\">\n                <h2 class=\"section-title\">🗡️ Mercenary Limits</h2>\n                <div id=\"mercenary-limits\" class=\"mercenary-limits\">\n                  <p class=\"text-muted\">Select mercenary units to set limits</p>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"action-buttons\">\n              <button id=\"optimize-btn\" class=\"btn btn-success large-btn\" disabled>\n                <span id=\"optimize-btn-text\">🚀 Optimize Army</span>\n              </button>\n              <button id=\"clear-btn\" class=\"btn btn-secondary large-btn\">🗑️ Clear Selection</button>\n            </div>\n          </section>\n\n          <!-- Results Section -->\n          <section class=\"card hidden\" id=\"results-section\">\n            <h2 id=\"results-title\">🎯 Optimization Results</h2>\n\n            <div id=\"optimization-stats\" class=\"optimization-stats\"></div>\n\n            <!-- Stacking Results -->\n            <div id=\"stacking-results\" class=\"results-container\">\n              <div id=\"army-compositions\" class=\"army-compositions\"></div>\n            </div>\n\n            <!-- Damage Results -->\n            <div id=\"damage-results\" class=\"results-container hidden\">\n              <div id=\"damage-army-list\" class=\"damage-army-list\"></div>\n\n              <!-- Selected Army Details -->\n              <div id=\"selected-army-details\" class=\"selected-army-details hidden\">\n                <h3>📋 Selected Army Details</h3>\n                <div id=\"selected-army-composition\" class=\"selected-army-composition\"></div>\n              </div>\n            </div>\n          </section>\n\n          <!-- Enemy Units Management Section -->\n          <section class=\"card hidden\" id=\"enemy-units-section\">\n            <h2>👹 Enemy Units Management</h2>\n            <div id=\"enemy-units-container\">\n              <!-- Enemy units manager component will be mounted here -->\n            </div>\n          </section>\n\n          <!-- Manual Battle Simulation Section -->\n          <section class=\"card hidden\" id=\"manual-battle-section\">\n            <div id=\"manual-battle-container\">\n              <!-- Manual battle simulation component will be mounted here -->\n            </div>\n          </section>\n\n          <!-- Battle Simulation Section -->\n          <div id=\"battle-simulation-container\" class=\"hidden\">\n            <!-- Battle simulation component will be mounted here -->\n          </div>\n\n        </main>\n\n        <!-- Loading Modal -->\n        <div id=\"loading-modal\" class=\"modal hidden\">\n          <div class=\"modal-content\">\n            <div class=\"loading-spinner\"></div>\n            <p>Optimizing army compositions...</p>\n          </div>\n        </div>\n\n        <footer class=\"footer\">\n          <p>Built for TotalBattle strategy optimization</p>\n        </footer>\n      </div>\n    `;\n\n    this.addUnitSelectionStyles();\n  }\n\n  /**\n   * Add CSS styles for the unit selection component\n   */\n  private addUnitSelectionStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Main Layout Improvements */\n      .main-config-section {\n        margin-bottom: 3rem;\n      }\n\n      .main-title {\n        font-size: 2.5rem;\n        margin-bottom: 2rem;\n        color: #2c3e50;\n        text-align: center;\n        font-weight: 700;\n      }\n\n      .section-title {\n        font-size: 1.5rem;\n        margin-bottom: 1.5rem;\n        color: #34495e;\n        font-weight: 600;\n        border-bottom: 2px solid #3498db;\n        padding-bottom: 0.5rem;\n      }\n\n      .config-grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 3rem;\n        margin-bottom: 2rem;\n      }\n\n      .config-group {\n        padding: 1.5rem;\n        background: #f8f9fa;\n        border-radius: 8px;\n        border: 1px solid #e9ecef;\n      }\n\n      .resource-constraints {\n        background: linear-gradient(135deg, #fff5f5 0%, #f8f9fa 100%);\n      }\n\n      .unit-selection-group {\n        background: linear-gradient(135deg, #f0f8ff 0%, #f8f9fa 100%);\n      }\n\n      .mercenary-group {\n        background: linear-gradient(135deg, #fff8f0 0%, #f8f9fa 100%);\n        margin-top: 2rem;\n      }\n\n      .input-group {\n        margin-bottom: 1.5rem;\n      }\n\n      .input-label {\n        display: block;\n        font-size: 1.2rem;\n        font-weight: 600;\n        margin-bottom: 0.75rem;\n        color: #2c3e50;\n      }\n\n      .large-input {\n        font-size: 1.2rem;\n        padding: 0.75rem 1rem;\n        border: 2px solid #bdc3c7;\n        border-radius: 6px;\n        width: 200px;\n        transition: border-color 0.3s;\n      }\n\n      .large-input:focus {\n        border-color: #3498db;\n        outline: none;\n        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\n      }\n\n      .action-buttons {\n        display: flex;\n        gap: 1.5rem;\n        justify-content: center;\n        margin-top: 2rem;\n        padding-top: 2rem;\n        border-top: 2px solid #ecf0f1;\n      }\n\n      .large-btn {\n        font-size: 1.3rem;\n        padding: 1rem 2rem;\n        border-radius: 8px;\n        font-weight: 600;\n        min-width: 200px;\n        transition: all 0.3s;\n      }\n\n      .large-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      }\n\n      /* Compact Data Section */\n      .compact-data-section {\n        margin-top: 3rem;\n        padding: 1rem;\n        background: #f8f9fa;\n        border: 1px solid #dee2e6;\n      }\n\n      .compact-data-section h3 {\n        font-size: 1.1rem;\n        margin-bottom: 1rem;\n        color: #6c757d;\n      }\n\n\n\n      .data-table {\n        width: 100%;\n        border-collapse: collapse;\n        font-size: 0.9rem;\n      }\n\n      .data-table th,\n      .data-table td {\n        padding: 0.5rem;\n        text-align: center;\n        border: 1px solid #dee2e6;\n      }\n\n      .data-table th {\n        background: #e9ecef;\n        font-weight: 600;\n        color: #495057;\n      }\n\n      .data-table td {\n        background: white;\n      }\n\n      /* Unit Selection Styles */\n      .unit-controls {\n        display: flex;\n        flex-direction: column;\n        gap: 1.5rem;\n        margin-bottom: 1.5rem;\n      }\n\n      .filter-tabs {\n        display: flex;\n        gap: 0.5rem;\n        flex-wrap: wrap;\n      }\n\n      .filter-tab {\n        padding: 0.5rem 1rem;\n        border: 1px solid #ddd;\n        background: white;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 0.9rem;\n        transition: all 0.2s;\n      }\n\n      .filter-tab:hover {\n        background: #f5f5f5;\n      }\n\n      .filter-tab.active {\n        background: #007bff;\n        color: white;\n        border-color: #007bff;\n      }\n\n      .unit-type-filters {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .selected-units-summary {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #f8f9fa;\n        border-radius: 4px;\n        font-size: 0.9rem;\n      }\n\n      .selected-units-summary .btn {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.8rem;\n      }\n\n      .unit-groups {\n        max-height: 500px;\n        overflow-y: auto;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n      }\n\n      /* Main Category Styles */\n      .main-category {\n        border-bottom: 2px solid #ddd;\n      }\n\n      .main-category:last-child {\n        border-bottom: none;\n      }\n\n      .main-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 1rem;\n        background: #e9ecef;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .main-category-header:hover {\n        background: #dee2e6;\n      }\n\n      .category-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .category-title h3 {\n        margin: 0;\n        font-size: 1.1rem;\n        color: #333;\n      }\n\n      .main-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .main-category-content.collapsed {\n        display: none;\n      }\n\n      /* Sub Category Styles */\n      .sub-category {\n        border-bottom: 1px solid #eee;\n        margin-left: 1rem;\n      }\n\n      .sub-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .sub-category-header:hover {\n        background: #f1f3f4;\n      }\n\n      .subcategory-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .subcategory-title h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #444;\n      }\n\n      .sub-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .sub-category-content.collapsed {\n        display: none;\n      }\n\n      /* Unit Family Styles */\n      .unit-family {\n        border-bottom: 1px solid #f0f0f0;\n        margin-left: 1rem;\n      }\n\n      .unit-family-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #fafbfc;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .unit-family-header:hover {\n        background: #f5f6f7;\n      }\n\n      .family-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .family-title h5 {\n        margin: 0;\n        font-size: 0.9rem;\n        color: #555;\n      }\n\n      .unit-family-content {\n        transition: all 0.3s ease;\n      }\n\n      .unit-family-content.collapsed {\n        display: none;\n      }\n\n      /* Expand Icons */\n      .expand-icon {\n        font-size: 0.8rem;\n        color: #666;\n        transition: transform 0.2s;\n      }\n\n      /* Action Buttons */\n      .category-actions,\n      .subcategory-actions,\n      .family-actions {\n        display: flex;\n        gap: 0.25rem;\n      }\n\n      .unit-group-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        border-bottom: 1px solid #eee;\n      }\n\n      .group-title {\n        display: flex;\n        flex-direction: column;\n        gap: 0.25rem;\n      }\n\n      .hierarchy {\n        font-size: 0.75rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      .unit-group-header h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #333;\n      }\n\n      .group-actions {\n        display: flex;\n        gap: 0.5rem;\n      }\n\n      .btn-xs {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.75rem;\n        border-radius: 3px;\n      }\n\n      /* Unit Cards Grid */\n      .unit-family-content {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 0.5rem;\n        padding: 0.75rem;\n        background: white;\n      }\n\n      /* Mobile responsive grid adjustments */\n      @media (max-width: 767px) {\n        .unit-family-content {\n          grid-template-columns: 1fr;\n          gap: 0.75rem;\n          padding: 1rem;\n        }\n\n        .unit-card {\n          min-height: 48px;\n          padding: 1rem;\n        }\n\n        .unit-name {\n          font-size: 1rem;\n        }\n\n        .unit-cost {\n          font-size: 0.9rem;\n        }\n\n        .stat {\n          font-size: 0.9rem;\n        }\n      }\n\n      @media (min-width: 768px) and (max-width: 1023px) {\n        .unit-family-content {\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n          gap: 0.75rem;\n        }\n\n        .unit-card {\n          min-height: 44px;\n          padding: 0.875rem;\n        }\n      }\n\n      .unit-card {\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        padding: 0.75rem;\n        cursor: pointer;\n        transition: all 0.2s;\n        background: white;\n        /* Mobile touch optimizations */\n        min-height: 44px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n\n      .unit-card:hover {\n        border-color: #007bff;\n        box-shadow: 0 2px 4px rgba(0,123,255,0.1);\n      }\n\n      .unit-card:active {\n        transform: scale(0.98);\n        background: #f8fafc;\n      }\n\n      .unit-card.selected {\n        border-color: #28a745;\n        background: #f8fff9;\n        box-shadow: 0 2px 4px rgba(40,167,69,0.2);\n      }\n\n      .unit-card.selected .unit-name {\n        color: #1e7e34 !important; /* Dark green for better contrast on light green background */\n        font-weight: 700;\n      }\n\n      .unit-card.selected .unit-cost {\n        color: #155724 !important; /* Darker green for cost text */\n        font-weight: 600;\n      }\n\n      .unit-card.selected .stat {\n        color: #155724 !important; /* Darker green for stats */\n        font-weight: 500;\n      }\n\n      .unit-card.selected .unit-types {\n        color: #155724 !important; /* Darker green for unit types */\n        font-weight: 500;\n      }\n\n      .unit-card.touch-active {\n        transform: scale(0.98);\n        background: #f0f9ff;\n      }\n\n      .unit-card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 0.5rem;\n      }\n\n      .unit-name {\n        font-weight: 600;\n        color: #333;\n        font-size: 0.9rem;\n        line-height: 1.2;\n      }\n\n      .unit-cost {\n        font-size: 0.8rem;\n        color: #666;\n        white-space: nowrap;\n      }\n\n      .unit-stats {\n        display: flex;\n        gap: 1rem;\n        margin-bottom: 0.5rem;\n      }\n\n      .stat {\n        font-size: 0.8rem;\n        color: #555;\n      }\n\n      .unit-types {\n        font-size: 0.75rem;\n        color: #777;\n        font-style: italic;\n      }\n\n      .no-units {\n        text-align: center;\n        padding: 2rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 768px) {\n        .main-title {\n          font-size: 2rem;\n        }\n\n        .section-title {\n          font-size: 1.3rem;\n        }\n\n        .large-input {\n          width: 100%;\n          font-size: 1.1rem;\n        }\n\n        .action-buttons {\n          flex-direction: column;\n          align-items: center;\n        }\n\n        .large-btn {\n          width: 100%;\n          max-width: 300px;\n        }\n\n        .unit-family-content {\n          grid-template-columns: 1fr;\n        }\n\n        .filter-tabs {\n          flex-direction: column;\n        }\n\n        .selected-units-summary {\n          flex-direction: column;\n          gap: 0.5rem;\n          align-items: stretch;\n        }\n\n        .data-table {\n          font-size: 0.8rem;\n        }\n\n        .data-table th,\n        .data-table td {\n          padding: 0.3rem;\n        }\n      }\n\n      /* Damage Optimization Results Styling Fixes */\n      .damage-army-card .unit-name {\n        color: #2c3e50 !important; /* Dark text for better readability */\n        font-weight: 600;\n        font-size: 0.9rem;\n      }\n\n      .damage-army-card .unit-item {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n        padding: 0.25rem 0;\n        border-bottom: 1px solid #f0f0f0;\n      }\n\n      .damage-army-card .unit-item:last-child {\n        border-bottom: none;\n      }\n\n      .damage-army-card .unit-count {\n        font-weight: 700;\n        color: #27ae60;\n        min-width: 3rem;\n        text-align: right;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Load initial unit data\n   */\n  private async loadInitialData(): Promise<void> {\n    try {\n\n\n      await this.unitLoader.loadPresetUnits();\n\n\n\n      this.displayUnitList();\n      this.updateOptimizeButton();\n\n    } catch (error) {\n      console.error('Failed to load unit data:', error);\n    }\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    // Mode switcher\n    const stackingModeBtn = document.getElementById('stacking-mode-btn') as HTMLButtonElement;\n    const damageModeBtn = document.getElementById('damage-mode-btn') as HTMLButtonElement;\n    const enemyUnitsBtn = document.getElementById('enemy-units-btn') as HTMLButtonElement;\n\n    // Existing elements\n    const unitSearch = document.getElementById('unit-search') as HTMLInputElement;\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const clearBtn = document.getElementById('clear-btn') as HTMLButtonElement;\n    const selectAllVisible = document.getElementById('select-all-visible') as HTMLButtonElement;\n    const clearSelection = document.getElementById('clear-selection') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const selectEnemyUnitsBtn = document.getElementById('select-enemy-units-btn') as HTMLButtonElement;\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n\n    // Mode switcher event listeners\n    if (stackingModeBtn) {\n      stackingModeBtn.addEventListener('click', () => this.switchMode('stacking'));\n    }\n\n    if (damageModeBtn) {\n      damageModeBtn.addEventListener('click', () => this.switchMode('damage'));\n    }\n\n    if (enemyUnitsBtn) {\n      enemyUnitsBtn.addEventListener('click', () => this.switchMode('enemy-units'));\n    }\n\n    const manualBattleBtn = document.getElementById('manual-battle-btn');\n    if (manualBattleBtn) {\n      manualBattleBtn.addEventListener('click', () => this.switchMode('manual-battle'));\n    }\n\n    if (selectEnemyUnitsBtn) {\n      selectEnemyUnitsBtn.addEventListener('click', () => this.openEnemyUnitSelector());\n    }\n\n    if (unitSearch) {\n      unitSearch.addEventListener('input', () => this.filterAndDisplayUnits());\n    }\n\n    if (unitTypeFilter) {\n      unitTypeFilter.addEventListener('change', () => this.filterAndDisplayUnits());\n    }\n\n    if (optimizeBtn) {\n      optimizeBtn.addEventListener('click', () => this.optimizeArmy());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (selectAllVisible) {\n      selectAllVisible.addEventListener('click', () => this.selectAllVisible());\n    }\n\n    if (clearSelection) {\n      clearSelection.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (leadershipBudget) {\n      leadershipBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    if (dominanceBudget) {\n      dominanceBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    // Enemy groups count change listener for dynamic updates\n    if (enemyCountInput) {\n      enemyCountInput.addEventListener('input', () => this.handleEnemyGroupsChange());\n    }\n\n    // Filter tab listeners\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.classList.contains('filter-tab')) {\n        this.handleFilterTabClick(target);\n      }\n    });\n  }\n\n\n\n  /**\n   * Display unit list with initial setup\n   */\n  private displayUnitList(): void {\n    this.setupUnitTypeFilter();\n    this.updateFilterTabCounts();\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Setup unit type filter dropdown\n   */\n  private setupUnitTypeFilter(): void {\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    if (!unitTypeFilter) return;\n\n    const allTypes = this.unitLoader.getUniqueUnitTypes();\n    unitTypeFilter.innerHTML = '<option value=\"\">All Unit Types</option>';\n\n    allTypes.forEach(type => {\n      const option = document.createElement('option');\n      option.value = type;\n      option.textContent = type;\n      unitTypeFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Update filter tab counts\n   */\n  private updateFilterTabCounts(): void {\n    const allUnits = this.unitLoader.getAllUnits();\n    const tabs = document.querySelectorAll('.filter-tab');\n\n    tabs.forEach(tab => {\n      const filter = tab.getAttribute('data-filter');\n      let count = 0;\n\n      if (filter === 'all') {\n        count = allUnits.length;\n      } else {\n        count = allUnits.filter(unit => this.getMainCategory(unit) === filter).length;\n      }\n\n      tab.textContent = `${filter === 'all' ? 'All' : filter} (${count})`;\n    });\n  }\n\n  /**\n   * Handle filter tab clicks\n   */\n  private handleFilterTabClick(tab: HTMLElement): void {\n    // Update active tab\n    document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));\n    tab.classList.add('active');\n\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Filter and display units based on current filters\n   */\n  private filterAndDisplayUnits(): void {\n    const searchQuery = (document.getElementById('unit-search') as HTMLInputElement)?.value || '';\n    const activeTab = document.querySelector('.filter-tab.active')?.getAttribute('data-filter') || 'all';\n    const unitTypeFilter = (document.getElementById('unit-type-filter') as HTMLSelectElement)?.value || '';\n\n    let units = this.unitLoader.getAllUnits();\n\n    // Apply main category filter\n    if (activeTab !== 'all') {\n      units = units.filter(unit => this.getMainCategory(unit) === activeTab);\n    }\n\n    // Apply unit type filter\n    if (unitTypeFilter) {\n      units = units.filter(unit => unit.unit_types.includes(unitTypeFilter));\n    }\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      units = units.filter(unit =>\n        unit.name.toLowerCase().includes(query) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(query))\n      );\n    }\n\n    this.renderGroupedUnits(units);\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Render units in hierarchical tree structure\n   */\n  private renderGroupedUnits(units: Unit[]): void {\n    const unitGroupsElement = document.getElementById('unit-groups');\n    if (!unitGroupsElement) return;\n\n    unitGroupsElement.innerHTML = '';\n\n    if (units.length === 0) {\n      unitGroupsElement.innerHTML = '<div class=\"no-units\">No units match your filters</div>';\n      return;\n    }\n\n    // Create hierarchical tree structure\n    const hierarchicalGroups = this.createHierarchicalGroups(units);\n\n    // Render main categories\n    Object.entries(hierarchicalGroups).forEach(([mainCategory, subCategories]) => {\n      const mainElement = this.createMainCategoryElement(mainCategory, subCategories);\n      unitGroupsElement.appendChild(mainElement);\n    });\n\n    // Attach all event listeners after DOM is created\n    this.attachAllEventListeners(hierarchicalGroups);\n  }\n\n  /**\n   * Create hierarchical group structure for tree display\n   */\n  private createHierarchicalGroups(units: Unit[]): Record<string, Record<string, Record<string, Unit[]>>> {\n    const hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>> = {\n      'Guardsmen': {},\n      'Specialists': {},\n      'Engineer Corps': {},\n      'Monsters': {},\n      'Mercenaries': {}\n    };\n\n    units.forEach(unit => {\n      const mainCategory = this.getMainCategory(unit);\n      const subCategory = this.getSubCategory(unit);\n      const familyName = this.getUnitFamily(unit);\n\n      if (!hierarchicalGroups[mainCategory][subCategory]) {\n        hierarchicalGroups[mainCategory][subCategory] = {};\n      }\n      if (!hierarchicalGroups[mainCategory][subCategory][familyName]) {\n        hierarchicalGroups[mainCategory][subCategory][familyName] = [];\n      }\n\n      hierarchicalGroups[mainCategory][subCategory][familyName].push(unit);\n    });\n\n    // Sort units within each family by strength\n    Object.values(hierarchicalGroups).forEach(subCategories => {\n      Object.values(subCategories).forEach(families => {\n        Object.values(families).forEach(units => {\n          units.sort((a, b) => a.strength - b.strength);\n        });\n      });\n    });\n\n    return hierarchicalGroups;\n  }\n\n  /**\n   * Determine main category for a unit based on actual unit_types\n   */\n  private getMainCategory(unit: Unit): string {\n    // Check if it's a mercenary first\n    if (unit.cost_type === 'Mercenary' || (unit.authority_cost ?? 0) > 0) {\n      return 'Mercenaries';\n    }\n\n    // Check unit types for category indicators (case-sensitive to match data)\n    const types = unit.unit_types;\n\n    // Engineer Corps: explicitly marked or siege engines\n    if (types.includes('Engineer corps') || types.includes('Siege engine')) {\n      return 'Engineer Corps';\n    }\n\n    // Guardsmen: explicitly marked as Guardsman\n    if (types.includes('Guardsman')) {\n      return 'Guardsmen';\n    }\n\n    // Specialists: explicitly marked as Specialist\n    if (types.includes('Specialist')) {\n      return 'Specialists';\n    }\n\n    // Monsters: non-human creatures (Beast, Dragon, Giant, Elemental, Flying creatures without Human)\n    if (types.includes('Beast') || types.includes('Dragon') || types.includes('Giant') ||\n        types.includes('Elemental') || types.includes('ELEMENTAL')) {\n      return 'Monsters';\n    }\n\n    // Flying units without Human are typically monsters\n    if (types.includes('Flying') && !types.includes('Human')) {\n      return 'Monsters';\n    }\n\n    // Remaining units are likely specialists or guardsmen\n    // If they have Human and basic combat types, they're probably guardsmen\n    if (types.includes('Human') && (types.includes('Melee') || types.includes('Ranged') || types.includes('Mounted'))) {\n      return 'Guardsmen';\n    }\n\n    // Default to Specialists for edge cases\n    return 'Specialists';\n  }\n\n  /**\n   * Determine subcategory for a unit based on combat role/type\n   */\n  private getSubCategory(unit: Unit): string {\n    const types = unit.unit_types;\n    const name = unit.name.toUpperCase();\n    const mainCategory = this.getMainCategory(unit);\n\n    // For Mercenaries, group by type\n    if (mainCategory === 'Mercenaries') {\n      if (types.includes('Guardsman')) return 'Elite Forces';\n      return 'Special Forces';\n    }\n\n    // For Engineer Corps, group by siege engine type\n    if (mainCategory === 'Engineer Corps') {\n      if (name.includes('CATAPULT')) return 'Catapults';\n      if (name.includes('BALLISTA')) return 'Ballistae';\n      if (name.includes('JOSEPHINE')) return 'Heavy Artillery';\n      if (types.includes('Siege engine')) return 'Siege Engines';\n    }\n\n    // For Monsters, group by creature type\n    if (mainCategory === 'Monsters') {\n      if (types.includes('Dragon')) return 'Dragons';\n      if (types.includes('Giant')) return 'Giants';\n      if (types.includes('Beast')) return 'Beasts';  // Flying Beasts go into Beasts\n      if (types.includes('Elemental') || types.includes('ELEMENTAL')) return 'Elementals';\n      if (types.includes('Flying')) return 'Flying';\n    }\n\n    // For Guardsmen and Specialists, group by combat role (your requested categories)\n    if (mainCategory === 'Guardsmen' || mainCategory === 'Specialists') {\n      if (types.includes('Ranged')) return 'Ranged';\n      if (types.includes('Melee')) return 'Melee';\n      if (types.includes('Mounted')) return 'Mounted';\n      if (types.includes('Flying')) return 'Flying';  // Flying Beasts go into Flying\n      if (types.includes('Beast')) return 'Flying';   // Non-flying Beasts also go into Flying for Specialists\n      if (types.includes('Scout')) return 'Scouts';\n    }\n\n    // Fallback groupings\n    if (types.includes('Human')) return 'Infantry';\n\n    return 'Other';\n  }\n\n  /**\n   * Get unit family name (base unit name without tier)\n   */\n  private getUnitFamily(unit: Unit): string {\n    // Extract base name by removing Roman numerals and common suffixes\n    let baseName = unit.name;\n\n    // Remove Roman numerals (I, II, III, IV, V, VI, VII)\n    baseName = baseName.replace(/\\s+(I{1,3}|IV|V|VI{0,2}|VII)$/, '');\n\n    // Handle special cases\n    if (baseName.includes('HEAVY ')) {\n      return baseName; // Keep \"HEAVY KNIGHT\", \"HEAVY HALBERDIER\", etc.\n    }\n\n    return baseName;\n  }\n\n  /**\n   * Create main category element (e.g., \"Guardsmen\")\n   */\n  private createMainCategoryElement(mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): HTMLElement {\n    const mainDiv = document.createElement('div');\n    mainDiv.className = 'main-category';\n\n    const totalUnits = this.countUnitsInCategory(subCategories);\n    const selectedUnits = this.countSelectedUnitsInCategory(subCategories);\n\n    mainDiv.innerHTML = `\n      <div class=\"main-category-header\" data-category=\"${mainCategory}\">\n        <div class=\"category-title\">\n          <h3>${mainCategory} (${selectedUnits}/${totalUnits})</h3>\n          <span class=\"expand-icon\">▼</span>\n        </div>\n        <div class=\"category-actions\">\n          <button class=\"btn btn-xs select-category\" data-category=\"${mainCategory}\">Select All</button>\n          <button class=\"btn btn-xs deselect-category\" data-category=\"${mainCategory}\">Deselect All</button>\n        </div>\n      </div>\n      <div class=\"main-category-content collapsed\">\n        ${Object.entries(subCategories).map(([subCategory, families]) =>\n          this.createSubCategoryHTML(mainCategory, subCategory, families)\n        ).join('')}\n      </div>\n    `;\n\n    return mainDiv;\n  }\n\n  /**\n   * Create sub category HTML string\n   */\n  private createSubCategoryHTML(mainCategory: string, subCategory: string, families: Record<string, Unit[]>): string {\n    const totalUnits = Object.values(families).reduce((sum, units) => sum + units.length, 0);\n    const selectedUnits = Object.values(families).reduce((sum, units) =>\n      sum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0);\n\n    return `\n      <div class=\"sub-category\" data-category=\"${mainCategory}\" data-subcategory=\"${subCategory}\">\n        <div class=\"sub-category-header\">\n          <div class=\"subcategory-title\">\n            <h4>${subCategory} (${selectedUnits}/${totalUnits})</h4>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"subcategory-actions\">\n            <button class=\"btn btn-xs select-subcategory\">Select All</button>\n            <button class=\"btn btn-xs deselect-subcategory\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"sub-category-content collapsed\">\n          ${Object.entries(families).map(([familyName, units]) =>\n            this.createUnitFamilyHTML(familyName, units)\n          ).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create unit family HTML string\n   */\n  private createUnitFamilyHTML(familyName: string, units: Unit[]): string {\n    const selectedUnits = units.filter(unit => this.selectedUnits.has(unit.name)).length;\n\n    return `\n      <div class=\"unit-family\" data-family=\"${familyName}\">\n        <div class=\"unit-family-header\">\n          <div class=\"family-title\">\n            <h5>${familyName} (${selectedUnits}/${units.length})</h5>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"family-actions\">\n            <button class=\"btn btn-xs select-family\">Select All</button>\n            <button class=\"btn btn-xs deselect-family\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"unit-family-content collapsed\">\n          ${units.map(unit => this.createUnitCard(unit)).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create a compact unit card\n   */\n  private createUnitCard(unit: Unit): string {\n    const isSelected = this.selectedUnits.has(unit.name);\n    const cost = this.getUnitCost(unit);\n\n    return `\n      <div class=\"unit-card ${isSelected ? 'selected' : ''}\" data-unit=\"${unit.name}\">\n        <div class=\"unit-card-header\">\n          <div class=\"unit-name\">${unit.name}</div>\n          <div class=\"unit-cost\">${unit.cost_type}: ${cost}</div>\n        </div>\n        <div class=\"unit-stats\">\n          <span class=\"stat\">HP: ${unit.health.toLocaleString()}</span>\n          <span class=\"stat\">STR: ${unit.strength.toLocaleString()}</span>\n        </div>\n        <div class=\"unit-types\">${unit.unit_types.slice(0, 3).join(', ')}${unit.unit_types.length > 3 ? '...' : ''}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Attach all event listeners after DOM is created\n   */\n  private attachAllEventListeners(hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>>): void {\n    // Attach main category listeners\n    document.querySelectorAll('.main-category').forEach((mainElement, index) => {\n      const mainCategories = Object.keys(hierarchicalGroups);\n      const mainCategory = mainCategories[index];\n      if (mainCategory) {\n        const subCategories = hierarchicalGroups[mainCategory];\n        this.attachMainCategoryListeners(mainElement as HTMLElement, mainCategory, subCategories);\n      }\n    });\n\n    // Attach sub category listeners\n    document.querySelectorAll('.sub-category').forEach((subElement) => {\n      const mainCategory = subElement.getAttribute('data-category');\n      const subCategory = subElement.getAttribute('data-subcategory');\n\n      if (mainCategory && subCategory && hierarchicalGroups[mainCategory]?.[subCategory]) {\n        const families = hierarchicalGroups[mainCategory][subCategory];\n        this.attachSubCategoryListeners(subElement as HTMLElement, families);\n      }\n    });\n\n    // Attach unit family listeners\n    document.querySelectorAll('.unit-family').forEach((familyElement) => {\n      const familyName = familyElement.getAttribute('data-family');\n\n      // Find the units for this family\n      let units: Unit[] = [];\n      Object.values(hierarchicalGroups).forEach(subCategories => {\n        Object.values(subCategories).forEach(families => {\n          if (families[familyName!]) {\n            units = families[familyName!];\n          }\n        });\n      });\n\n      if (units.length > 0) {\n        this.attachUnitFamilyListeners(familyElement as HTMLElement, units);\n      }\n    });\n  }\n\n  /**\n   * Count total units in a category\n   */\n  private countUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) => familySum + units.length, 0), 0);\n  }\n\n  /**\n   * Count selected units in a category\n   */\n  private countSelectedUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) =>\n        familySum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0), 0);\n  }\n\n  /**\n   * Attach event listeners to main category\n   */\n  private attachMainCategoryListeners(element: HTMLElement, mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): void {\n    const header = element.querySelector('.main-category-header') as HTMLElement;\n    const content = element.querySelector('.main-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing main-category elements for', mainCategory, { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Main category header clicked:', mainCategory, 'collapsed:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in category\n    const selectBtn = element.querySelector('.select-category') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-category') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInCategory(subCategories);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInCategory(subCategories);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to sub category\n   */\n  private attachSubCategoryListeners(element: HTMLElement, families: Record<string, Unit[]>): void {\n    const header = element.querySelector('.sub-category-header') as HTMLElement;\n    const content = element.querySelector('.sub-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing sub-category elements:', { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Sub-category header clicked, toggling:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in subcategory\n    const selectBtn = element.querySelector('.select-subcategory') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-subcategory') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInFamilies(families);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInFamilies(families);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to unit family\n   */\n  private attachUnitFamilyListeners(element: HTMLElement, units: Unit[]): void {\n    const header = element.querySelector('.unit-family-header') as HTMLElement;\n    const content = element.querySelector('.unit-family-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      if ((e.target as HTMLElement).classList.contains('btn')) return;\n\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in family\n    const selectBtn = element.querySelector('.select-family') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-family') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllUnits(units);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllUnits(units);\n      });\n    }\n\n    // Individual unit selection\n    const unitCards = element.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      card.addEventListener('click', () => {\n        const unitName = card.getAttribute('data-unit');\n        if (unitName) {\n          const unit = this.unitLoader.getUnitByName(unitName);\n          if (unit) {\n            this.toggleUnitSelection(unit);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Get unit cost for display\n   */\n  private getUnitCost(unit: Unit): number {\n    switch (unit.cost_type) {\n      case 'Leadership': return unit.leadership_cost ?? 0;\n      case 'Dominance': return unit.dominance_cost ?? 0;\n      case 'Authority':\n      case 'Mercenary': return unit.authority_cost ?? 0;\n      default: return 0;\n    }\n  }\n\n  /**\n   * Toggle unit selection\n   */\n  private toggleUnitSelection(unit: Unit): void {\n    if (this.selectedUnits.has(unit.name)) {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    } else {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        this.mercenaryLimits[unit.name] = 1; // Default limit\n      }\n    }\n\n    this.updateSelectionDisplay(); // Update selection without rebuilding\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n\n    // Update mobile FAB based on selection\n    if (mobileLayoutManager.isMobile()) {\n      this.addFloatingActionButton();\n    }\n  }\n\n  /**\n   * Update selection display without rebuilding the tree\n   */\n  private updateSelectionDisplay(): void {\n    // Update unit card selection states\n    document.querySelectorAll('.unit-card').forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        if (this.selectedUnits.has(unitName)) {\n          card.classList.add('selected');\n        } else {\n          card.classList.remove('selected');\n        }\n      }\n    });\n\n    // Update all counters in headers\n    this.updateAllCounters();\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Update all selection counters in headers\n   */\n  private updateAllCounters(): void {\n    // Update main category counters\n    document.querySelectorAll('.main-category').forEach((element, index) => {\n      const titleElement = element.querySelector('.category-title h3');\n      if (titleElement) {\n        const mainCategories = ['Guardsmen', 'Specialists', 'Engineer Corps', 'Monsters', 'Mercenaries'];\n        const mainCategory = mainCategories[index];\n        if (mainCategory) {\n          const { selected, total } = this.countUnitsInMainCategory(mainCategory);\n          const originalText = titleElement.textContent || '';\n          const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n          titleElement.textContent = `${baseText} (${selected}/${total})`;\n        }\n      }\n    });\n\n    // Update sub category counters\n    document.querySelectorAll('.sub-category').forEach(element => {\n      const titleElement = element.querySelector('.subcategory-title h4');\n      const mainCategory = element.getAttribute('data-category');\n      const subCategory = element.getAttribute('data-subcategory');\n\n      if (titleElement && mainCategory && subCategory) {\n        const { selected, total } = this.countUnitsInSubCategory(mainCategory, subCategory);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n\n    // Update family counters\n    document.querySelectorAll('.unit-family').forEach(element => {\n      const titleElement = element.querySelector('.family-title h5');\n      const familyName = element.getAttribute('data-family');\n\n      if (titleElement && familyName) {\n        const { selected, total } = this.countUnitsInFamily(familyName);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n  }\n\n  /**\n   * Count units in main category\n   */\n  private countUnitsInMainCategory(mainCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const categoryUnits = allUnits.filter(unit => this.getMainCategory(unit) === mainCategory);\n    const selectedCount = categoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: categoryUnits.length };\n  }\n\n  /**\n   * Count units in sub category\n   */\n  private countUnitsInSubCategory(mainCategory: string, subCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const subCategoryUnits = allUnits.filter(unit =>\n      this.getMainCategory(unit) === mainCategory && this.getSubCategory(unit) === subCategory\n    );\n    const selectedCount = subCategoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: subCategoryUnits.length };\n  }\n\n  /**\n   * Count units in family\n   */\n  private countUnitsInFamily(familyName: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const familyUnits = allUnits.filter(unit => this.getUnitFamily(unit) === familyName);\n    const selectedCount = familyUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: familyUnits.length };\n  }\n\n  /**\n   * Update selected units summary\n   */\n  private updateSelectedSummary(): void {\n    const selectedCountElement = document.getElementById('selected-count');\n    if (selectedCountElement) {\n      selectedCountElement.textContent = `${this.selectedUnits.size} units selected`;\n    }\n  }\n\n  /**\n   * Select all visible units\n   */\n  private selectAllVisible(): void {\n    const visibleUnitCards = document.querySelectorAll('.unit-card');\n    visibleUnitCards.forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        const unit = this.unitLoader.getUnitByName(unitName);\n        if (unit) {\n          this.selectedUnits.add(unit.name);\n          if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n            this.mercenaryLimits[unit.name] = 1;\n          }\n        }\n      }\n    });\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Select all units in a category\n   */\n  private selectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.selectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Deselect all units in a category\n   */\n  private deselectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.deselectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Select all units in families\n   */\n  private selectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.selectAllUnits(units);\n    });\n  }\n\n  /**\n   * Deselect all units in families\n   */\n  private deselectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.deselectAllUnits(units);\n    });\n  }\n\n  /**\n   * Select all units in array\n   */\n  private selectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        this.mercenaryLimits[unit.name] = 1;\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Deselect all units in array\n   */\n  private deselectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Update mercenary limits UI\n   */\n  private updateMercenaryLimits(): void {\n    const mercenaryLimitsElement = document.getElementById('mercenary-limits');\n    if (!mercenaryLimitsElement) return;\n\n    const mercenaryUnits = Array.from(this.selectedUnits)\n      .map(name => this.unitLoader.getUnitByName(name))\n      .filter(unit => unit && (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority'));\n\n    if (mercenaryUnits.length === 0) {\n      mercenaryLimitsElement.innerHTML = '<p class=\"text-muted\">Select mercenary units to set limits</p>';\n      return;\n    }\n\n    mercenaryLimitsElement.innerHTML = '';\n\n    mercenaryUnits.forEach(unit => {\n      if (!unit) return;\n\n      const mercItem = document.createElement('div');\n      mercItem.className = 'mercenary-item';\n\n      // Use different icon for Authority vs Mercenary units\n      const icon = unit.cost_type === 'Authority' ? '⚔️' : '🗡️';\n      const costDisplay = unit.cost_type === 'Authority' ? `AUTH: ${unit.authority_cost}` : `AUTH: ${unit.authority_cost}`;\n\n      mercItem.innerHTML = `\n        <div class=\"mercenary-label\">\n          <span class=\"unit-name\">${icon} ${unit.name}</span>\n          <span class=\"unit-stats\">(STR: ${unit.strength}, HP: ${unit.health}, ${costDisplay})</span>\n        </div>\n        <div class=\"mercenary-input\">\n          <label for=\"merc-${unit.name}\">Max Available:</label>\n          <input type=\"number\" id=\"merc-${unit.name}\" min=\"1\" max=\"100\" value=\"${this.mercenaryLimits[unit.name] || 1}\"\n                 data-unit=\"${unit.name}\" class=\"input\" placeholder=\"1\">\n        </div>\n      `;\n\n      const input = mercItem.querySelector('input') as HTMLInputElement;\n      input.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        this.mercenaryLimits[target.dataset.unit!] = parseInt(target.value) || 1;\n      });\n\n      mercenaryLimitsElement.appendChild(mercItem);\n    });\n  }\n\n\n\n  /**\n   * Update optimize button state\n   */\n  private updateOptimizeButton(): void {\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    if (!optimizeBtn || !leadershipBudget || !dominanceBudget) return;\n\n    const hasUnits = this.selectedUnits.size > 0;\n    const hasBudget = parseInt(leadershipBudget.value) > 0 ||\n                     parseInt(dominanceBudget.value) > 0 ||\n                     Object.keys(this.mercenaryLimits).length > 0;\n\n    optimizeBtn.disabled = !hasUnits || !hasBudget;\n  }\n\n  /**\n   * Optimize army composition\n   */\n  private async optimizeArmy(): Promise<void> {\n    try {\n      if (this.currentMode === 'stacking') {\n        this.showLoadingModal();\n        await this.optimizeForStacking();\n        this.hideLoadingModal();\n      } else {\n        // Damage optimization uses its own progress modal\n        await this.optimizeForDamage();\n      }\n\n    } catch (error) {\n      console.error('Optimization failed:', error);\n      alert('Optimization failed. Please check your inputs and try again.');\n\n      // Hide any open modals\n      this.hideLoadingModal();\n      this.hideProgressModal();\n    }\n  }\n\n  /**\n   * Optimize for stacking (original functionality)\n   */\n  private async optimizeForStacking(): Promise<void> {\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Array.from(this.selectedUnits));\n    this.optimizer = new StackingOptimizer(selectedUnitObjects);\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    const constraints: OptimizationConstraints = {\n      leadershipBudget: parseInt(leadershipBudget.value) || 0,\n      dominanceBudget: parseInt(dominanceBudget.value) || 0,\n      mercenaryLimits: { ...this.mercenaryLimits },\n      availableUnits: Array.from(this.selectedUnits)\n    };\n\n    const result = await this.optimizer.optimizeArmy(constraints);\n    this.displayStackingResults(result);\n  }\n\n  /**\n   * Optimize for damage output with progress feedback\n   */\n  private async optimizeForDamage(): Promise<void> {\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Array.from(this.selectedUnits));\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const enemyCount = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxCombinations = document.getElementById('max-combinations') as HTMLInputElement;\n\n    const constraints: DamageOptimizationConstraints = {\n      leadershipBudget: parseInt(leadershipBudget.value) || 0,\n      dominanceBudget: parseInt(dominanceBudget.value) || 0,\n      mercenaryLimits: { ...this.mercenaryLimits },\n      availableUnits: Array.from(this.selectedUnits),\n      enemyGroupCount: parseInt(enemyCount.value) || 5,\n      maxCombinations: parseInt(maxCombinations.value) || 50,\n      specificEnemyUnits: this.selectedEnemyUnits.length > 0 ? [...this.selectedEnemyUnits] : undefined\n    };\n\n    // Use async processing with progress feedback\n    await this.runDamageOptimizationWithProgress(constraints, selectedUnitObjects);\n  }\n\n  /**\n   * Run damage optimization with progress feedback using async processing\n   */\n  private async runDamageOptimizationWithProgress(\n    constraints: DamageOptimizationConstraints,\n    units: any[]\n  ): Promise<void> {\n    // Create abort controller for cancellation\n    this.optimizationAbortController = new AbortController();\n\n    // Show progress modal or mobile loading\n    if (mobileLayoutManager.isMobile()) {\n      MobileUIPatterns.showMobileLoading('Optimizing army composition...');\n    } else {\n      this.showProgressModal();\n    }\n\n    try {\n      // Initialize damage optimizer if not already done\n      if (!this.damageOptimizer) {\n        this.damageOptimizer = new DamageOptimizer();\n        this.damageOptimizer.initialize(this.unitLoader);\n      }\n\n      // Add progress callback and abort signal to constraints\n      const enhancedConstraints = {\n        ...constraints,\n        signal: this.optimizationAbortController.signal,\n        onProgress: (progress: any) => {\n          this.updateProgressModal(progress.progress, progress.message, {\n            combinationsEvaluated: progress.combinationsEvaluated,\n            totalToEvaluate: progress.totalToEvaluate,\n            phase: progress.phase,\n            estimatedRemainingMs: progress.estimatedRemainingMs\n          });\n        }\n      };\n\n      // Run the optimization with real-time progress updates\n      const result = await this.damageOptimizer.optimizeForDamage(enhancedConstraints, units);\n\n      // Show completion briefly\n      await this.delay(500);\n\n      // Hide progress modal and show results\n      if (mobileLayoutManager.isMobile()) {\n        MobileUIPatterns.hideMobileLoading();\n      } else {\n        this.hideProgressModal();\n      }\n      this.displayDamageResults(result);\n\n    } catch (error) {\n      if (mobileLayoutManager.isMobile()) {\n        MobileUIPatterns.hideMobileLoading();\n      } else {\n        this.hideProgressModal();\n      }\n\n      if (error instanceof Error && error.message.includes('cancelled')) {\n        // User cancelled - don't show error\n        console.log('Optimization cancelled by user');\n      } else {\n        console.error('Damage optimization failed:', error);\n        alert(`Optimization failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n  }\n\n\n\n  /**\n   * Simple delay utility to allow UI updates\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Display stacking optimization results\n   */\n  private displayStackingResults(result: any): void {\n    const optimizationStats = document.getElementById('optimization-stats');\n    const armyCompositions = document.getElementById('army-compositions');\n    const resultsSection = document.getElementById('results-section');\n    const stackingResults = document.getElementById('stacking-results');\n    const damageResults = document.getElementById('damage-results');\n\n    if (!optimizationStats || !armyCompositions || !resultsSection) return;\n\n    // Show stacking results, hide damage results\n    if (stackingResults) stackingResults.classList.remove('hidden');\n    if (damageResults) damageResults.classList.add('hidden');\n\n    // Display optimization statistics\n    optimizationStats.innerHTML = `\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.compositions.length}</div>\n        <div class=\"stat-label\">Valid Solutions</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.totalCombinationsEvaluated.toLocaleString()}</div>\n        <div class=\"stat-label\">Combinations Tested</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${Math.round(result.executionTimeMs)}ms</div>\n        <div class=\"stat-label\">Execution Time</div>\n      </div>\n    `;\n\n    // Display army compositions\n    armyCompositions.innerHTML = '';\n\n    if (result.compositions.length === 0) {\n      armyCompositions.innerHTML = '<p class=\"text-center text-muted\">No valid army compositions found. Try adjusting your constraints.</p>';\n    } else {\n      result.compositions.forEach((composition: ArmyComposition, index: number) => {\n        const compositionDiv = this.createCompositionElement(composition, index + 1);\n        armyCompositions.appendChild(compositionDiv);\n      });\n    }\n\n    resultsSection.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('results-section');\n\n    // Store the best composition for potential battle simulation\n    if (result.compositions.length > 0) {\n      this.currentOptimizedArmy = result.compositions[0]; // Use the best composition\n      // Don't automatically show battle simulation in stacking mode\n      // Let the user navigate to it manually if they want to\n    }\n  }\n\n  /**\n   * Display damage optimization results\n   */\n  private displayDamageResults(result: any): void {\n    const optimizationStats = document.getElementById('optimization-stats');\n    const damageArmyList = document.getElementById('damage-army-list');\n    const resultsSection = document.getElementById('results-section');\n    const stackingResults = document.getElementById('stacking-results');\n    const damageResults = document.getElementById('damage-results');\n\n    if (!optimizationStats || !damageArmyList || !resultsSection) return;\n\n    // Show damage results, hide stacking results and battle simulation\n    if (stackingResults) stackingResults.classList.add('hidden');\n    if (damageResults) damageResults.classList.remove('hidden');\n\n    // Hide battle simulation container in damage mode\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (battleContainer) {\n      battleContainer.classList.add('hidden');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n\n    // Display optimization statistics\n    optimizationStats.innerHTML = `\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.rankedResults.length}</div>\n        <div class=\"stat-label\">Army Options</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.combinationsEvaluated.toLocaleString()}</div>\n        <div class=\"stat-label\">Combinations Tested</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${Math.round(result.optimizationTimeMs)}ms</div>\n        <div class=\"stat-label\">Execution Time</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.algorithmUsed}</div>\n        <div class=\"stat-label\">Algorithm</div>\n      </div>\n    `;\n\n    // Display damage optimization results\n    damageArmyList.innerHTML = '';\n\n    if (result.rankedResults.length === 0) {\n      damageArmyList.innerHTML = '<p class=\"text-center text-muted\">No valid army compositions found. Try adjusting your constraints.</p>';\n    } else {\n      result.rankedResults.slice(0, 10).forEach((armyResult: any, index: number) => {\n        const armyDiv = this.createDamageArmyElement(armyResult, index + 1);\n        damageArmyList.appendChild(armyDiv);\n      });\n    }\n\n    resultsSection.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('results-section');\n\n    // Scroll to the results section (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      setTimeout(() => {\n        resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n\n    // Don't show battle simulation in damage optimization mode\n    // Users can click on individual results to see detailed analysis\n  }\n\n  /**\n   * Show battle simulation section with pre-calculated results\n   */\n  private showBattleSimulationWithResults(battleAnalysis: any): void {\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (!battleContainer || !this.currentOptimizedArmy) return;\n\n    // Show the container first\n    battleContainer.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('battle-simulation-container');\n\n    // Initialize battle simulation component if not already done\n    if (!this.battleSimulation) {\n      this.battleSimulation = new BattleSimulationComponent();\n      this.battleSimulation.initialize(this.unitLoader);\n      // Mount only if it's a new component\n      this.battleSimulation.mount(battleContainer, this.currentOptimizedArmy);\n    }\n\n    // Display the pre-calculated results\n    this.battleSimulation.displayPreCalculatedResults(battleAnalysis);\n\n    // Scroll to battle simulation (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      battleContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  /**\n   * Show battle simulation section\n   */\n  private showBattleSimulation(): void {\n    if (!this.currentOptimizedArmy) return;\n\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (!battleContainer) return;\n\n    // Show the container first\n    battleContainer.classList.remove('hidden');\n\n    // Initialize battle simulation component if not already done\n    if (!this.battleSimulation) {\n      this.battleSimulation = new BattleSimulationComponent();\n      this.battleSimulation.initialize(this.unitLoader);\n    }\n\n    // Mount the battle simulation component\n    this.battleSimulation.mount(battleContainer, this.currentOptimizedArmy);\n\n    // Update responsive navigation after mounting\n    responsiveNavigation.showSection('battle-simulation-container');\n\n    // Scroll to battle simulation section (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      setTimeout(() => {\n        battleContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n  }\n\n  /**\n   * Create composition element\n   */\n  private createCompositionElement(composition: ArmyComposition, rank: number): HTMLElement {\n    const div = document.createElement('div');\n    div.className = 'army-composition';\n\n    // Use the new cleaner format from the optimizer\n    const cleanFormat = this.optimizer?.explainStacking(composition) || 'No stacking explanation available';\n\n    // Create the header with solution info\n    const header = `\n      <div class=\"composition-header\">\n        <div class=\"composition-title\">Solution ${rank} ${composition.isValidStacking ? '✅' : '❌'}</div>\n        <div class=\"composition-score\">Efficiency: ${composition.efficiencyScore.toFixed(2)}</div>\n      </div>\n    `;\n\n    // Convert the clean format to HTML with proper styling\n    const formattedContent = cleanFormat\n      .split('\\n')\n      .map(line => {\n        // Headers with special characters\n        if (line.includes('🏆 OPTIMIZED ARMY COMPOSITION')) {\n          return `<h3 class=\"army-title\">${line}</h3>`;\n        }\n        if (line.includes('═'.repeat(60))) {\n          return '<hr class=\"title-divider\">';\n        }\n        if (line.includes('📊 ARMY SUMMARY') || line.includes('🗡️ MERCENARY FORCES') ||\n            line.includes('👑 LEADERSHIP FORCES') || line.includes('⚡ DOMINANCE FORCES') ||\n            line.includes('⚔️ BATTLE ORDER')) {\n          return `<h4 class=\"section-header\">${line}</h4>`;\n        }\n        if (line.includes('─'.repeat(30)) || line.includes('─'.repeat(40))) {\n          return '<hr class=\"section-divider\">';\n        }\n        // Unit entries with indentation\n        if (line.includes('└─')) {\n          return `<div class=\"unit-detail\">${line}</div>`;\n        }\n        // Regular unit lines\n        if (line.trim() && !line.includes('═') && !line.includes('─')) {\n          return `<div class=\"unit-line\">${line}</div>`;\n        }\n        // Empty lines for spacing\n        if (line.trim() === '') {\n          return '<div class=\"spacing\"></div>';\n        }\n        return '';\n      })\n      .filter(line => line !== '')\n      .join('');\n\n    // Add battle simulation button for stacking mode\n    const battleButton = `\n      <div class=\"composition-actions\">\n        <button class=\"btn btn-secondary simulate-btn\" data-composition-index=\"${rank - 1}\">\n          ⚔️ Simulate Battle\n        </button>\n      </div>\n    `;\n\n    div.innerHTML = header + '<div class=\"composition-content\">' + formattedContent + '</div>' + battleButton;\n\n    // Add event listener for battle simulation button\n    const simulateBtn = div.querySelector('.simulate-btn') as HTMLButtonElement;\n    if (simulateBtn) {\n      simulateBtn.addEventListener('click', () => {\n        this.currentOptimizedArmy = composition;\n        this.showBattleSimulation();\n      });\n    }\n\n    return div;\n  }\n\n  /**\n   * Create damage army element for display\n   */\n  private createDamageArmyElement(armyResult: any, rank: number): HTMLElement {\n    const div = document.createElement('div');\n    div.className = 'damage-army-card';\n    div.setAttribute('data-army-index', (rank - 1).toString());\n\n    const strategy = armyResult.armyComposition.totalDominanceCost === 0 ? 'Leadership' :\n                    armyResult.armyComposition.totalLeadershipCost === 0 ? 'Dominance' : 'Mixed';\n\n    const strategyIcon = strategy === 'Leadership' ? '🛡️' : strategy === 'Dominance' ? '👹' : '⚔️';\n\n    // Add click handler\n    div.addEventListener('click', () => this.selectDamageArmy(armyResult, rank - 1));\n\n    div.innerHTML = `\n      <div class=\"damage-army-header\">\n        <div class=\"army-rank\">#${rank}</div>\n        <div class=\"army-strategy\">\n          <span class=\"strategy-icon\">${strategyIcon}</span>\n          <span class=\"strategy-label\">${strategy} Strategy</span>\n        </div>\n        <div class=\"army-damage\">\n          <span class=\"damage-value\">${armyResult.averageDamagePerBattle.toLocaleString()}</span>\n          <span class=\"damage-label\">avg damage/battle</span>\n        </div>\n        <div class=\"click-indicator\">\n          <span class=\"click-text\">Click for details</span>\n          <span class=\"click-icon\">👆</span>\n        </div>\n      </div>\n\n      <div class=\"damage-army-content\">\n        <div class=\"army-composition-summary\">\n          <h4>Army Composition:</h4>\n          <div class=\"unit-list\">\n            ${Object.entries(armyResult.armyComposition.units).map(([unitName, count]: [string, any]) =>\n              `<div class=\"unit-item\">\n                <span class=\"unit-count\">${count.toLocaleString()}x</span>\n                <span class=\"unit-name\">${unitName}</span>\n              </div>`\n            ).join('')}\n          </div>\n        </div>\n\n        <div class=\"army-stats-grid\">\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Total Strength:</span>\n            <span class=\"stat-value\">${armyResult.armyComposition.totalStrength.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Budget Usage:</span>\n            <span class=\"stat-value\">${armyResult.armyComposition.totalLeadershipCost}L / ${armyResult.armyComposition.totalDominanceCost}D</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Battle Range:</span>\n            <span class=\"stat-value\">${armyResult.battleAnalysis.worstCase.totalDamageDealtToEnemies.toLocaleString()} - ${armyResult.battleAnalysis.bestCase.totalDamageDealtToEnemies.toLocaleString()} damage</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Silver Cost:</span>\n            <span class=\"stat-value\">${armyResult.totalSilverCost.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Food Cost:</span>\n            <span class=\"stat-value\">${armyResult.totalFoodConsumption.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Efficiency:</span>\n            <span class=\"stat-value\">${armyResult.damageEfficiencyScore.toFixed(3)}</span>\n          </div>\n        </div>\n      </div>\n    `;\n\n    return div;\n  }\n\n  /**\n   * Select a damage army result for detailed view\n   */\n  private selectDamageArmy(armyResult: any, index: number): void {\n    // Update visual selection\n    const allCards = document.querySelectorAll('.damage-army-card');\n    allCards.forEach((card, i) => {\n      card.classList.toggle('selected', i === index);\n    });\n\n    // Show detailed composition\n    this.showSelectedArmyDetails(armyResult);\n\n    // Update battle simulation with this army and pre-calculated results\n    this.currentOptimizedArmy = armyResult.armyComposition;\n    this.showBattleSimulationWithResults(armyResult.battleAnalysis);\n  }\n\n  /**\n   * Show detailed composition for selected army\n   */\n  private showSelectedArmyDetails(armyResult: any): void {\n    const detailsContainer = document.getElementById('selected-army-details');\n    const compositionContainer = document.getElementById('selected-army-composition');\n\n    if (!detailsContainer || !compositionContainer) return;\n\n    // Create a detailed composition display similar to stacking results\n    const composition = armyResult.armyComposition;\n\n    // Generate detailed explanation using the stacking optimizer format\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Object.keys(composition.units));\n    const tempOptimizer = new StackingOptimizer(selectedUnitObjects);\n    const explanation = tempOptimizer.explainStacking(composition);\n\n    compositionContainer.innerHTML = `\n      <div class=\"selected-army-header\">\n        <h4>Army Composition Details</h4>\n        <div class=\"army-summary-stats\">\n          <span class=\"summary-stat\">\n            <strong>Total Damage:</strong> ${armyResult.averageDamagePerBattle.toLocaleString()}/battle\n          </span>\n          <span class=\"summary-stat\">\n            <strong>Total Strength:</strong> ${composition.totalStrength.toLocaleString()}\n          </span>\n          <span class=\"summary-stat\">\n            <strong>Army Size:</strong> ${Object.values(composition.units).reduce((sum: number, count: any) => sum + count, 0).toLocaleString()} units\n          </span>\n        </div>\n      </div>\n\n      <div class=\"composition-explanation\">\n        ${explanation.split('\\n').map(line => {\n          // Format the explanation lines\n          if (line.trim() === '') {\n            return '<div class=\"spacing\"></div>';\n          }\n          if (line.includes('Total') || line.includes('Budget')) {\n            return `<div class=\"summary-line\"><strong>${line}</strong></div>`;\n          }\n          if (line.includes('→')) {\n            return `<div class=\"unit-line\">${line}</div>`;\n          }\n          if (line.includes('✓') || line.includes('Valid')) {\n            return `<div class=\"validation-line success\">${line}</div>`;\n          }\n          return `<div class=\"explanation-line\">${line}</div>`;\n        }).join('')}\n      </div>\n\n      <div class=\"battle-performance-summary\">\n        <h5>Battle Performance Analysis</h5>\n        <div class=\"performance-grid\">\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Best Case:</span>\n            <span class=\"performance-value\">${armyResult.battleAnalysis.bestCase.totalDamageDealtToEnemies.toLocaleString()} damage in ${armyResult.battleAnalysis.bestCase.battleDuration} turns</span>\n          </div>\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Worst Case:</span>\n            <span class=\"performance-value\">${armyResult.battleAnalysis.worstCase.totalDamageDealtToEnemies.toLocaleString()} damage in ${armyResult.battleAnalysis.worstCase.battleDuration} turns</span>\n          </div>\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Efficiency Score:</span>\n            <span class=\"performance-value\">${armyResult.damageEfficiencyScore.toFixed(3)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"combat-logs-section\">\n        <h5>📜 Complete Combat Logs</h5>\n\n        <div class=\"combat-scenarios\">\n          <div class=\"combat-scenario\">\n            <h6>🟢 Best Case Scenario (You Attack First)</h6>\n            <div class=\"combat-log\">\n              ${this.formatCombatLog(armyResult.battleAnalysis.bestCase.combatLog)}\n            </div>\n          </div>\n\n          <div class=\"combat-scenario\">\n            <h6>🔴 Worst Case Scenario (Enemy Attacks First)</h6>\n            <div class=\"combat-log\">\n              ${this.formatCombatLog(armyResult.battleAnalysis.worstCase.combatLog)}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    detailsContainer.classList.remove('hidden');\n\n    // Scroll to the details section\n    detailsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private formatCombatLog(combatLog: any[]): string {\n    if (!combatLog || combatLog.length === 0) {\n      return '<div class=\"no-combat-log\">No combat actions recorded</div>';\n    }\n\n    return combatLog.map((action, index) => {\n      const isPlayerAction = action.attacker && !action.attacker.includes('Enemy');\n      const actionClass = isPlayerAction ? 'player-action' : 'enemy-action';\n\n      return `\n        <div class=\"combat-action ${actionClass}\">\n          <div class=\"action-header\">\n            <span class=\"turn-number\">Turn ${action.turn}</span>\n            <span class=\"action-type\">${isPlayerAction ? '⚔️ Player Attack' : '🛡️ Enemy Attack'}</span>\n          </div>\n          <div class=\"action-details\">\n            <strong>${action.attacker}</strong> ${action.action} <strong>${action.target}</strong>\n            ${action.damageDealt ? `<span class=\"damage-dealt\">(${action.damageDealt.toLocaleString()} damage)</span>` : ''}\n            ${action.eliminated ? '<span class=\"eliminated-indicator\">💀 Eliminated</span>' : ''}\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  /**\n   * Clear selection\n   */\n  private clearSelection(): void {\n    this.selectedUnits.clear();\n    this.mercenaryLimits = {};\n    this.currentOptimizedArmy = null;\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const resultsSection = document.getElementById('results-section');\n    const battleContainer = document.getElementById('battle-simulation-container');\n\n    if (leadershipBudget) leadershipBudget.value = '0';\n    if (dominanceBudget) dominanceBudget.value = '0';\n    if (resultsSection) {\n      resultsSection.classList.add('hidden');\n      responsiveNavigation.hideSection('results-section');\n    }\n    if (battleContainer) {\n      battleContainer.classList.add('hidden');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Switch between optimization modes\n   */\n  private switchMode(mode: 'stacking' | 'damage' | 'enemy-units' | 'manual-battle'): void {\n    this.currentMode = mode;\n\n    // Update mode tabs\n    const stackingBtn = document.getElementById('stacking-mode-btn');\n    const damageBtn = document.getElementById('damage-mode-btn');\n    const enemyUnitsBtn = document.getElementById('enemy-units-btn');\n    const manualBattleBtn = document.getElementById('manual-battle-btn');\n\n    if (stackingBtn && damageBtn && enemyUnitsBtn && manualBattleBtn) {\n      stackingBtn.classList.toggle('active', mode === 'stacking');\n      damageBtn.classList.toggle('active', mode === 'damage');\n      enemyUnitsBtn.classList.toggle('active', mode === 'enemy-units');\n      manualBattleBtn.classList.toggle('active', mode === 'manual-battle');\n    }\n\n    // Update mode descriptions\n    const stackingDesc = document.getElementById('stacking-description');\n    const damageDesc = document.getElementById('damage-description');\n\n    if (stackingDesc && damageDesc) {\n      stackingDesc.classList.toggle('hidden', mode !== 'stacking');\n      damageDesc.classList.toggle('hidden', mode !== 'damage');\n    }\n\n    // Update damage optimization controls\n    const damageControls = document.getElementById('damage-controls');\n    if (damageControls) {\n      damageControls.classList.toggle('hidden', mode !== 'damage');\n    }\n\n    // Update optimize button text\n    const optimizeBtnText = document.getElementById('optimize-btn-text');\n    if (optimizeBtnText) {\n      if (mode === 'stacking') {\n        optimizeBtnText.textContent = '🚀 Optimize Army';\n      } else if (mode === 'damage') {\n        optimizeBtnText.textContent = '⚔️ Optimize for Damage';\n      } else if (mode === 'enemy-units') {\n        optimizeBtnText.textContent = '👹 Manage Enemy Units';\n      } else if (mode === 'manual-battle') {\n        optimizeBtnText.textContent = '⚔️ Configure Battle';\n      }\n    }\n\n    // Update results title\n    const resultsTitle = document.getElementById('results-title');\n    if (resultsTitle) {\n      if (mode === 'stacking') {\n        resultsTitle.textContent = '🎯 Stacking Results';\n      } else if (mode === 'damage') {\n        resultsTitle.textContent = '⚔️ Damage Optimization Results';\n      } else if (mode === 'enemy-units') {\n        resultsTitle.textContent = '👹 Enemy Units Management';\n      } else if (mode === 'manual-battle') {\n        resultsTitle.textContent = '⚔️ Manual Battle Results';\n      }\n    }\n\n    // Show/hide sections based on mode\n    const configSection = document.getElementById('config-section');\n    const resultsSection = document.getElementById('results-section');\n    const enemyUnitsSection = document.getElementById('enemy-units-section');\n    const manualBattleSection = document.getElementById('manual-battle-section');\n    const battleContainer = document.getElementById('battle-simulation-container');\n\n    if (mode === 'enemy-units') {\n      // Show enemy units section, hide others\n      if (configSection) configSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.remove('hidden');\n      if (manualBattleSection) manualBattleSection.classList.add('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      // Initialize enemy units manager\n      this.initializeEnemyUnitsManager();\n      \n      responsiveNavigation.hideSection('config-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.showSection('enemy-units-section');\n      responsiveNavigation.hideSection('manual-battle-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    } else if (mode === 'manual-battle') {\n      // Show manual battle section, hide others\n      if (configSection) configSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.add('hidden');\n      if (manualBattleSection) manualBattleSection.classList.remove('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      // Initialize manual battle simulation\n      this.initializeManualBattleSimulation();\n      \n      responsiveNavigation.hideSection('config-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.hideSection('enemy-units-section');\n      responsiveNavigation.showSection('manual-battle-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    } else {\n      // Show config section, hide other sections\n      if (configSection) configSection.classList.remove('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.add('hidden');\n      if (manualBattleSection) manualBattleSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      responsiveNavigation.showSection('config-section');\n      responsiveNavigation.hideSection('enemy-units-section');\n      responsiveNavigation.hideSection('manual-battle-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n  }\n\n  /**\n   * Show loading modal\n   */\n  private showLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Hide loading modal\n   */\n  private hideLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.add('hidden');\n    }\n  }\n\n  private optimizationAbortController: AbortController | null = null;\n  private optimizationStartTime: number = 0;\n  private progressUpdateInterval: number | null = null;\n\n  /**\n   * Show progress modal with progress bar, timer, and cancel button\n   */\n  private showProgressModal(): void {\n    // Create progress modal if it doesn't exist\n    let progressModal = document.getElementById('progress-modal');\n    if (!progressModal) {\n      progressModal = document.createElement('div');\n      progressModal.id = 'progress-modal';\n      progressModal.className = 'modal';\n      progressModal.innerHTML = `\n        <div class=\"modal-content progress-modal-content\">\n          <h3>⚔️ Optimizing for Damage</h3>\n          <div class=\"progress-container\">\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" id=\"progress-fill\"></div>\n            </div>\n            <div class=\"progress-text\" id=\"progress-text\">Initializing...</div>\n            <div class=\"progress-percentage\" id=\"progress-percentage\">0%</div>\n          </div>\n          <div class=\"progress-details\">\n            <div class=\"progress-stats\">\n              <span id=\"progress-combinations\">0 / 0 combinations</span>\n              <span id=\"progress-phase\">Initializing</span>\n            </div>\n            <div class=\"progress-timing\">\n              <span id=\"progress-elapsed\">00:00</span>\n              <span class=\"timer-separator\">/</span>\n              <span id=\"progress-timeout\">02:00</span>\n              <span id=\"progress-remaining\"></span>\n            </div>\n          </div>\n          <div class=\"progress-actions\">\n            <button id=\"cancel-optimization-btn\" class=\"btn btn-secondary\">\n              <span class=\"btn-icon\">❌</span>\n              Cancel Optimization\n            </button>\n          </div>\n          <p class=\"progress-note\">Large army pools may take longer to process...</p>\n        </div>\n      `;\n      document.body.appendChild(progressModal);\n\n      // Add cancel button event listener\n      const cancelBtn = document.getElementById('cancel-optimization-btn');\n      if (cancelBtn) {\n        cancelBtn.addEventListener('click', () => {\n          this.cancelOptimization();\n        });\n      }\n    }\n\n    progressModal.classList.remove('hidden');\n    this.optimizationStartTime = performance.now();\n    this.updateProgressModal(0, 'Initializing...');\n    this.startProgressTimer();\n  }\n\n  /**\n   * Update progress modal with detailed information\n   */\n  private updateProgressModal(progress: number, message: string, details?: {\n    combinationsEvaluated?: number;\n    totalToEvaluate?: number;\n    phase?: string;\n    estimatedRemainingMs?: number;\n  }): void {\n    const progressFill = document.getElementById('progress-fill');\n    const progressText = document.getElementById('progress-text');\n    const progressPercentage = document.getElementById('progress-percentage');\n    const progressCombinations = document.getElementById('progress-combinations');\n    const progressPhase = document.getElementById('progress-phase');\n    const progressRemaining = document.getElementById('progress-remaining');\n\n    if (progressFill) {\n      progressFill.style.width = `${progress}%`;\n    }\n    if (progressText) {\n      progressText.textContent = message;\n    }\n    if (progressPercentage) {\n      progressPercentage.textContent = `${Math.round(progress)}%`;\n    }\n    if (progressCombinations && details) {\n      const evaluated = details.combinationsEvaluated || 0;\n      const total = details.totalToEvaluate || 0;\n      progressCombinations.textContent = `${evaluated.toLocaleString()} / ${total.toLocaleString()} combinations`;\n    }\n    if (progressPhase && details?.phase) {\n      progressPhase.textContent = details.phase.charAt(0).toUpperCase() + details.phase.slice(1);\n    }\n    if (progressRemaining && details?.estimatedRemainingMs) {\n      const remainingSeconds = Math.ceil(details.estimatedRemainingMs / 1000);\n      const minutes = Math.floor(remainingSeconds / 60);\n      const seconds = remainingSeconds % 60;\n      progressRemaining.textContent = `(~${minutes}:${seconds.toString().padStart(2, '0')} remaining)`;\n    } else if (progressRemaining) {\n      progressRemaining.textContent = '';\n    }\n  }\n\n  /**\n   * Start the progress timer\n   */\n  private startProgressTimer(): void {\n    this.progressUpdateInterval = window.setInterval(() => {\n      const elapsedMs = performance.now() - this.optimizationStartTime;\n      const elapsedSeconds = Math.floor(elapsedMs / 1000);\n      const minutes = Math.floor(elapsedSeconds / 60);\n      const seconds = elapsedSeconds % 60;\n\n      const progressElapsed = document.getElementById('progress-elapsed');\n      if (progressElapsed) {\n        progressElapsed.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n      }\n    }, 1000);\n  }\n\n  /**\n   * Stop the progress timer\n   */\n  private stopProgressTimer(): void {\n    if (this.progressUpdateInterval) {\n      clearInterval(this.progressUpdateInterval);\n      this.progressUpdateInterval = null;\n    }\n  }\n\n  /**\n   * Cancel the current optimization\n   */\n  private cancelOptimization(): void {\n    if (this.optimizationAbortController) {\n      this.optimizationAbortController.abort();\n      this.hideProgressModal();\n      alert('Optimization cancelled by user.');\n    }\n  }\n\n  /**\n   * Hide progress modal\n   */\n  private hideProgressModal(): void {\n    const progressModal = document.getElementById('progress-modal');\n    if (progressModal) {\n      progressModal.classList.add('hidden');\n    }\n    this.stopProgressTimer();\n    this.optimizationAbortController = null;\n  }\n\n  /**\n   * Initialize mobile optimizations\n   */\n  private initializeMobileOptimizations(): void {\n    // Apply mobile CSS optimizations\n    MobileCSSManager.optimizeCombatLogs();\n    MobileCSSManager.optimizeUnitCards();\n\n    // Add touch support to unit cards\n    this.addTouchSupportToUnitCards();\n\n    // Listen for layout changes\n    mobileLayoutManager.addLayoutChangeListener((mode) => {\n      this.handleLayoutModeChange(mode);\n    });\n  }\n\n  /**\n   * Add touch support to unit cards\n   */\n  private addTouchSupportToUnitCards(): void {\n    const unitCards = document.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      if (card instanceof HTMLElement) {\n        // Add haptic feedback for touch interactions\n        TouchInteractionManager.addHapticFeedback(card);\n      }\n    });\n  }\n\n  /**\n   * Handle layout mode changes\n   */\n  private handleLayoutModeChange(mode: 'mobile' | 'tablet' | 'desktop'): void {\n    // Re-apply mobile optimizations when layout changes\n    setTimeout(() => {\n      MobileCSSManager.optimizeCombatLogs();\n      MobileCSSManager.optimizeUnitCards();\n      this.addTouchSupportToUnitCards();\n\n      // Re-initialize advanced features for new layout\n      if (mode === 'mobile') {\n        this.initializeAdvancedMobileFeatures();\n      }\n    }, 100);\n  }\n\n  /**\n   * Initialize Phase 3 advanced mobile features\n   */\n  private initializeAdvancedMobileFeatures(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    // Initialize performance monitoring\n    MobilePerformanceManager.initialize();\n\n    // Initialize accessibility enhancements\n    MobileAccessibilityManager.initialize();\n\n    // Add pull-to-refresh to main content\n    this.addPullToRefresh();\n\n    // Add floating action button for quick optimization\n    this.addFloatingActionButton();\n\n    // Enhance forms for mobile accessibility\n    MobileAccessibilityManager.enhanceFormAccessibility();\n\n    // Add dynamic ARIA labels\n    setTimeout(() => {\n      MobileAccessibilityManager.addDynamicLabels();\n    }, 500);\n  }\n\n  /**\n   * Add pull-to-refresh functionality\n   */\n  private addPullToRefresh(): void {\n    const mainContent = document.querySelector('.main-content') as HTMLElement;\n    if (!mainContent) return;\n\n    TouchInteractionManager.addPullToRefresh(\n      mainContent,\n      async () => {\n        // Refresh current data\n        MobileAccessibilityManager.announce('Refreshing data...');\n\n        // Simulate refresh delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Re-apply optimizations\n        MobileCSSManager.optimizeCombatLogs();\n        MobileCSSManager.optimizeUnitCards();\n        MobileAccessibilityManager.addDynamicLabels();\n\n        MobileAccessibilityManager.announce('Data refreshed');\n      }\n    );\n  }\n\n  /**\n   * Add floating action button for quick access\n   */\n  private addFloatingActionButton(): void {\n    // Only show FAB when there are selected units\n    if (this.selectedUnits.size > 0) {\n      MobileUIPatterns.showFloatingActionButton({\n        icon: '⚡',\n        label: 'Quick Optimize',\n        onClick: () => {\n          MobileAccessibilityManager.announce('Starting quick optimization');\n          this.optimizeArmy();\n        },\n        position: 'bottom-right',\n        color: 'primary'\n      });\n    } else {\n      MobileUIPatterns.hideFloatingActionButton();\n    }\n  }\n\n  /**\n   * Initialize enemy units manager component\n   */\n  private initializeEnemyUnitsManager(): void {\n    const enemyUnitsContainer = document.getElementById('enemy-units-container');\n    if (!enemyUnitsContainer) return;\n\n    // Initialize enemy unit manager if not already done\n    if (!this.enemyUnitManager) {\n      this.enemyUnitManager = new EnemyUnitManager({\n        mode: 'embedded'\n      });\n    }\n\n    // Mount the enemy unit manager component\n    this.enemyUnitManager.mount(enemyUnitsContainer);\n  }\n\n  /**\n   * Initialize manual battle simulation component\n   */\n  private async initializeManualBattleSimulation(): Promise<void> {\n    const manualBattleContainer = document.getElementById('manual-battle-container');\n    if (!manualBattleContainer) return;\n\n    // Initialize manual battle simulation if not already done\n    if (!this.manualBattleSimulation) {\n      this.manualBattleSimulation = new ManualBattleSimulationComponent({\n        unitLoader: this.unitLoader,\n        onBattleComplete: (analysis) => {\n          console.log('Manual battle completed:', analysis);\n          // Could add additional handling here if needed\n        }\n      });\n    }\n\n    // Mount the manual battle simulation component\n    await this.manualBattleSimulation.mount(manualBattleContainer);\n  }\n\n  /**\n   * Open enemy unit selector for battle optimization\n   */\n  private openEnemyUnitSelector(): void {\n    // Get the current enemy groups count to determine max selections\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxSelections = parseInt(enemyCountInput?.value || '5');\n    \n    // Import the EnemyUnitSelector dynamically to avoid circular dependencies\n    import('../EnemyUnits/EnemyUnitSelector').then(({ EnemyUnitSelector }) => {\n      // Create a modal container for the enemy unit selector\n      const modalContainer = document.createElement('div');\n      modalContainer.id = 'enemy-unit-selector-modal';\n      modalContainer.style.position = 'fixed';\n      modalContainer.style.top = '0';\n      modalContainer.style.left = '0';\n      modalContainer.style.right = '0';\n      modalContainer.style.bottom = '0';\n      modalContainer.style.zIndex = '2000';\n      document.body.appendChild(modalContainer);\n\n      // Create the enemy unit selector with multiple selection mode\n      const selector = new EnemyUnitSelector({\n        onSelect: (enemyUnit) => {\n          this.handleEnemyUnitSelected(enemyUnit);\n          // Don't close the selector immediately in multiple mode - let user continue selecting\n          // The selector will handle the UI updates and user can close when done\n        },\n        onCancel: () => {\n          this.closeEnemyUnitSelector(modalContainer, selector);\n        },\n        mode: 'multiple',\n        title: `Select Enemy Units for Battle Optimization (${this.selectedEnemyUnits.length}/${maxSelections} selected)`,\n        maxSelections: maxSelections,\n        selectedUnits: [...this.selectedEnemyUnits]\n      });\n\n      // Store reference to the selector for updates\n      this.currentEnemyUnitSelector = selector;\n      this.currentEnemyUnitSelectorContainer = modalContainer;\n\n      // Mount the selector\n      selector.mount(modalContainer);\n    }).catch(error => {\n      console.error('Failed to load EnemyUnitSelector:', error);\n      alert('Failed to open enemy unit selector. Please try again.');\n    });\n  }\n\n  /**\n   * Handle enemy unit selection for damage optimization\n   */\n  private handleEnemyUnitSelected(enemyUnit: any): void {\n    // Get the current enemy groups count to determine max selections\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxSelections = parseInt(enemyCountInput?.value || '5');\n    \n    // Check if this enemy unit is already selected\n    const existingIndex = this.selectedEnemyUnits.findIndex(unit => unit.name === enemyUnit.name);\n    \n    if (existingIndex >= 0) {\n      // Remove if already selected\n      this.selectedEnemyUnits.splice(existingIndex, 1);\n    } else if (this.selectedEnemyUnits.length < maxSelections) {\n      // Add if under the limit\n      this.selectedEnemyUnits.push(enemyUnit);\n    } else {\n      // At limit, replace the first selected unit\n      this.selectedEnemyUnits.shift(); // Remove first\n      this.selectedEnemyUnits.push(enemyUnit); // Add new\n    }\n    \n    // Update the UI to show the selected enemy units\n    this.updateEnemyUnitDisplay();\n    \n    // Update the modal title if the selector is open\n    this.updateEnemyUnitSelectorTitle();\n  }\n\n  /**\n   * Close the enemy unit selector modal\n   */\n  private closeEnemyUnitSelector(modalContainer: HTMLElement, selector: any): void {\n    try {\n      // Unmount the selector\n      if (selector && typeof selector.unmount === 'function') {\n        selector.unmount();\n      }\n      \n      // Remove the modal container\n      if (modalContainer && modalContainer.parentNode) {\n        modalContainer.parentNode.removeChild(modalContainer);\n      }\n      \n      // Clear references\n      this.currentEnemyUnitSelector = null;\n      this.currentEnemyUnitSelectorContainer = null;\n    } catch (error) {\n      console.error('Error closing enemy unit selector:', error);\n    }\n  }\n\n  /**\n   * Update the enemy unit selector title when selections change\n   */\n  private updateEnemyUnitSelectorTitle(): void {\n    if (this.currentEnemyUnitSelector && typeof this.currentEnemyUnitSelector.updateTitle === 'function') {\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const maxSelections = parseInt(enemyCountInput?.value || '5');\n      const newTitle = `Select Enemy Units for Battle Optimization (${this.selectedEnemyUnits.length}/${maxSelections} selected)`;\n      \n      this.currentEnemyUnitSelector.updateTitle(newTitle);\n      \n      // Also update the selected units in the selector to reflect any changes\n      if (typeof this.currentEnemyUnitSelector.updateSelectedUnits === 'function') {\n        this.currentEnemyUnitSelector.updateSelectedUnits(this.selectedEnemyUnits);\n      }\n    }\n  }\n\n  /**\n   * Handle changes to enemy groups count\n   */\n  private handleEnemyGroupsChange(): void {\n    if (this.currentMode === 'damage') {\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const enemyGroupsCount = enemyCountInput ? parseInt(enemyCountInput.value) || 1 : 1;\n      \n      // Trim selected units if we now have too many\n      if (this.selectedEnemyUnits.length > enemyGroupsCount) {\n        this.selectedEnemyUnits = this.selectedEnemyUnits.slice(0, enemyGroupsCount);\n      }\n      \n      // Always update the enemy unit display to reflect the new max selections count\n      this.updateEnemyUnitDisplay();\n      \n      // Update the selector if it's open\n      this.updateEnemyUnitSelectorTitle();\n    }\n  }\n\n  /**\n   * Update the enemy unit display in the damage optimization controls\n   */\n  private updateEnemyUnitDisplay(): void {\n    const selectEnemyBtn = document.getElementById('select-enemy-units-btn');\n    \n    if (selectEnemyBtn) {\n      // Always get the current enemy groups count\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const maxSelections = parseInt(enemyCountInput?.value || '5');\n      \n      if (this.selectedEnemyUnits.length === 0) {\n        // No enemy units selected\n        selectEnemyBtn.innerHTML = `\n          👹 Select Enemy Units\n        `;\n        selectEnemyBtn.classList.remove('enemy-selected');\n      } else if (this.selectedEnemyUnits.length === 1) {\n        // Single enemy unit selected\n        const enemyUnit = this.selectedEnemyUnits[0];\n        selectEnemyBtn.innerHTML = `\n          <span class=\"selected-enemy-indicator\">✅</span>\n          ${enemyUnit.name}\n          <small class=\"enemy-stats\">(STR: ${enemyUnit.strength.toLocaleString()}, HP: ${enemyUnit.health.toLocaleString()})</small>\n        `;\n        selectEnemyBtn.classList.add('enemy-selected');\n      } else {\n        // Multiple enemy units selected\n        selectEnemyBtn.innerHTML = `\n          <span class=\"selected-enemy-indicator\">✅</span>\n          ${this.selectedEnemyUnits.length} Enemy Units Selected\n          <small class=\"enemy-stats\">(${this.selectedEnemyUnits.length}/${maxSelections} selected)</small>\n        `;\n        selectEnemyBtn.classList.add('enemy-selected');\n      }\n    }\n  }\n\n\n}\n","/**\n * Main entry point for the TotalBattle Army Calculator\n */\n\nimport './style.css';\nimport { ArmyCalculatorApp } from './components/ArmyCalculator/ArmyCalculatorApp';\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n  const appContainer = document.getElementById('app');\n  \n  if (!appContainer) {\n    throw new Error('App container not found');\n  }\n\n  // Create and mount the main application\n  const app = new ArmyCalculatorApp();\n  app.mount(appContainer);\n\n  // Add global error handling\n  window.addEventListener('error', (event) => {\n    console.error('Global error:', event.error);\n    // You could add error reporting here\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason);\n    // You could add error reporting here\n  });\n\n  // Add service worker registration for PWA (future enhancement)\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      // Service worker registration would go here\n      console.log('Service worker support detected');\n    });\n  }\n\n  console.log('TotalBattle Army Calculator initialized');\n});\n"],"file":"assets/main-DzGpN4Zf.js"}