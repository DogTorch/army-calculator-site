{"version":3,"file":"main-C7F482ai.js","sources":["../../src/types/units.ts","../../src/services/unitLoader.ts","../../src/services/stackingOptimizer.ts","../../src/types/battleSimulation.ts","../../src/services/battleSimulation.ts","../../src/components/BattleSimulation/BattleSimulationComponent.ts","../../src/components/ArmyCalculator/ArmyCalculatorApp.ts","../../src/main.ts"],"sourcesContent":["/**\n * Unit types and interfaces for the TotalBattle Army Calculator\n * Based on validated unit data from final_units.json\n */\n\nexport type CostType = 'Leadership' | 'Dominance' | 'Authority' | 'Mercenary';\n\n/**\n * Base unit interface representing a TotalBattle unit from our validated data\n */\nexport interface Unit {\n  /** Display name of the unit */\n  name: string;\n  /** Array of unit type tags (e.g., ['Human', 'Ranged', 'Guardsman']) */\n  unit_types: string[];\n  /** Primary cost type for this unit */\n  cost_type: CostType;\n  /** Unit health points */\n  health: number;\n  /** Unit attack strength */\n  strength: number;\n  /** Leadership cost to deploy this unit */\n  leadership_cost: number;\n  /** Dominance cost to deploy this unit */\n  dominance_cost: number;\n  /** Authority cost to deploy this unit (for mercenaries) */\n  authority_cost: number;\n  /** Food consumption per unit */\n  food_consumption: number;\n  /** Carrying capacity of the unit */\n  carrying_capacity: number;\n  /** Gold cost to revive this unit */\n  revival_cost_gold: number;\n  /** Silver cost to revive this unit */\n  revival_cost_silver: number;\n  /** Source screenshot file this unit was extracted from */\n  source_file: string;\n\n  // Legacy properties for backward compatibility\n  id?: string;\n  class?: string;\n  leadershipCost?: number;\n  dominanceCost?: number;\n  description?: string;\n}\n\n/**\n * Unit with calculated properties for optimization\n */\nexport interface UnitWithCalculatedProps extends Unit {\n  readonly isMercenary: boolean;\n  readonly primaryCost: number;\n  readonly strengthPerCost: number;\n  readonly healthPerCost: number;\n}\n\n/**\n * A group of identical units in the stacking order\n */\nexport interface StackingGroup {\n  /** Name of the unit */\n  unitName: string;\n  /** Number of units in this group */\n  count: number;\n  /** Total health of all units in this group */\n  totalHealth: number;\n  /** Individual unit strength */\n  unitStrength: number;\n}\n\n/**\n * Complete army composition with stacking analysis\n */\nexport interface ArmyComposition {\n  /** Map of unit names to quantities */\n  units: Record<string, number>;\n  /** Total army strength */\n  totalStrength: number;\n  /** Total army health */\n  totalHealth: number;\n  /** Total leadership cost */\n  totalLeadershipCost: number;\n  /** Total dominance cost */\n  totalDominanceCost: number;\n  /** Total mercenary count */\n  totalMercenaryCount: number;\n  /** Stacking order from weakest to strongest */\n  stackingOrder: StackingGroup[];\n  /** Whether the stacking is valid (weaker units have higher total health) */\n  isValidStacking: boolean;\n  /** Efficiency score (strength per cost with stacking bonus) */\n  efficiencyScore: number;\n  /** Legacy properties for backward compatibility */\n  effectiveness?: number;\n  totalLeadership?: number;\n  totalDominance?: number;\n  metadata?: any;\n}\n\n/**\n * Constraints for army optimization\n */\nexport interface OptimizationConstraints {\n  /** Total leadership points available */\n  leadershipBudget: number;\n  /** Total dominance points available */\n  dominanceBudget: number;\n  /** Map of mercenary names to maximum quantities */\n  mercenaryLimits: Record<string, number>;\n  /** Array of unit names that are available for selection */\n  availableUnits: string[];\n  /** Legacy budget property for backward compatibility */\n  budget?: { leadership: number; dominance: number };\n  /** Legacy modifiers property for backward compatibility */\n  modifiers?: ClassModifiers;\n}\n\n/**\n * Result of army optimization\n */\nexport interface OptimizationResult {\n  /** Array of valid army compositions, sorted by efficiency */\n  compositions: ArmyComposition[];\n  /** Total number of combinations evaluated */\n  totalCombinationsEvaluated: number;\n  /** Number of valid stacking solutions found */\n  validStackingsFound: number;\n  /** Time taken to complete optimization in milliseconds */\n  executionTimeMs: number;\n}\n\n/**\n * Filter criteria for units\n */\nexport interface UnitFilter {\n  /** Filter by cost type */\n  costType?: CostType;\n  /** Filter by unit types (must have at least one) */\n  unitTypes?: string[];\n  /** Minimum strength requirement */\n  minStrength?: number;\n  /** Maximum cost requirement */\n  maxCost?: number;\n}\n\n/**\n * Summary statistics for loaded units\n */\nexport interface UnitSummary {\n  /** Total number of units */\n  totalUnits: number;\n  /** Count of units by cost type */\n  byCostType: Record<CostType, number>;\n  /** Strength range across all units */\n  strengthRange: {\n    min: number;\n    max: number;\n  };\n  /** Health range across all units */\n  healthRange: {\n    min: number;\n    max: number;\n  };\n}\n\n/**\n * Utility class for unit operations\n */\nexport class UnitUtils {\n  static isMercenary(unit: Unit): boolean {\n    return unit.cost_type === 'Mercenary' || unit.authority_cost > 0;\n  }\n\n  static getPrimaryCost(unit: Unit): number {\n    switch (unit.cost_type) {\n      case 'Leadership':\n        return unit.leadership_cost;\n      case 'Dominance':\n        return unit.dominance_cost;\n      case 'Authority':\n      case 'Mercenary':\n        return unit.authority_cost;\n      default:\n        return 0;\n    }\n  }\n\n  static getStrengthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.strength / cost : 0;\n  }\n\n  static getHealthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.health / cost : 0;\n  }\n}\n\n/**\n * Constants for the application\n */\nexport const UNIT_TYPES = [\n  'Human', 'Beast', 'Undead', 'Demon', 'Elemental', 'Construct',\n  'Melee', 'Ranged', 'Magic', 'Siege', 'Mounted', 'Flying', 'Aquatic',\n  'Guardsman', 'Monster', 'Mercenary', 'Specialist', 'Elite', 'Heavy', 'Light'\n] as const;\n\nexport const COST_TYPES: CostType[] = ['Leadership', 'Dominance', 'Authority', 'Mercenary'];\n\nexport const DEFAULT_OPTIMIZATION_CONSTRAINTS: OptimizationConstraints = {\n  leadershipBudget: 0,\n  dominanceBudget: 0,\n  mercenaryLimits: {},\n  availableUnits: []\n};\n\n// Legacy type aliases for backward compatibility\nexport type UnitClass = string;\nexport type AvailableUnit = Unit;\nexport type ArmyUnit = { unit: Unit; quantity: number; position?: number };\nexport type ResourceBudget = { leadership: number; dominance: number };\nexport type ClassModifiers = Record<string, number>;\nexport type ArmyCalculationInput = OptimizationConstraints;\nexport type ValidationResult = { isValid: boolean; errors: string[]; warnings?: string[] };\nexport type SavedArmy = ArmyComposition;\n","/**\n * Unit Data Loader for the Army Stacking Calculator\n * Loads and manages unit data from JSON files\n */\n\nimport { \n  Unit, \n  UnitWithCalculatedProps, \n  UnitSummary, \n  UnitFilter, \n  CostType,\n  UnitUtils \n} from '../types/units';\n\nexport class UnitLoader {\n  private units: Unit[] = [];\n  private unitsByName: Map<string, Unit> = new Map();\n  private unitsByCostType: Record<CostType, Unit[]> = {\n    Leadership: [],\n    Dominance: [],\n    Authority: [],\n    Mercenary: []\n  };\n\n  constructor() {\n    this.resetData();\n  }\n\n  /**\n   * Load units from a JSON file or URL\n   */\n  async loadUnits(source: string | Unit[]): Promise<Unit[]> {\n    try {\n      let unitsData: Unit[];\n\n      if (typeof source === 'string') {\n        console.log(`Loading units from: ${source}`);\n        const response = await fetch(source);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to fetch units: ${response.status} ${response.statusText}`);\n        }\n        \n        unitsData = await response.json();\n      } else {\n        unitsData = source;\n      }\n\n      if (!Array.isArray(unitsData)) {\n        throw new Error('Unit data must be an array');\n      }\n\n      this.units = unitsData.map(unitData => this.validateAndNormalizeUnit(unitData));\n      this.buildLookups();\n\n      console.log(`✅ Loaded ${this.units.length} units successfully`);\n      return this.units;\n    } catch (error) {\n      console.error('❌ Error loading units:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate and normalize unit data\n   */\n  private validateAndNormalizeUnit(unitData: any): Unit {\n    // Ensure all required fields exist with defaults\n    const unit: Unit = {\n      name: unitData.name || 'Unknown',\n      unit_types: Array.isArray(unitData.unit_types) ? unitData.unit_types : [],\n      cost_type: unitData.cost_type || 'Leadership',\n      health: Number(unitData.health) || 0,\n      strength: Number(unitData.strength) || 0,\n      leadership_cost: Number(unitData.leadership_cost) || 0,\n      dominance_cost: Number(unitData.dominance_cost) || 0,\n      authority_cost: Number(unitData.authority_cost) || 0,\n      food_consumption: Number(unitData.food_consumption) || 0,\n      carrying_capacity: Number(unitData.carrying_capacity) || 0,\n      revival_cost_gold: Number(unitData.revival_cost_gold) || 0,\n      revival_cost_silver: Number(unitData.revival_cost_silver) || 0,\n      source_file: unitData.source_file || ''\n    };\n\n    // Validate cost type\n    if (!['Leadership', 'Dominance', 'Authority', 'Mercenary'].includes(unit.cost_type)) {\n      console.warn(`Invalid cost type for unit ${unit.name}: ${unit.cost_type}`);\n      unit.cost_type = 'Leadership'; // Default fallback\n    }\n\n    return unit;\n  }\n\n  /**\n   * Build lookup dictionaries for efficient access\n   */\n  private buildLookups(): void {\n    this.resetData();\n\n    this.unitsByName = new Map(this.units.map(unit => [unit.name, unit]));\n\n    // Categorize units by cost type\n    this.units.forEach(unit => {\n      if (UnitUtils.isMercenary(unit)) {\n        this.unitsByCostType.Mercenary.push(unit);\n      } else if (unit.cost_type in this.unitsByCostType) {\n        this.unitsByCostType[unit.cost_type as CostType].push(unit);\n      }\n    });\n\n    // Sort units within each cost type by strength\n    Object.keys(this.unitsByCostType).forEach(costType => {\n      this.unitsByCostType[costType as CostType].sort((a, b) => a.strength - b.strength);\n    });\n  }\n\n  /**\n   * Reset internal data structures\n   */\n  private resetData(): void {\n    this.unitsByName.clear();\n    this.unitsByCostType = {\n      Leadership: [],\n      Dominance: [],\n      Authority: [],\n      Mercenary: []\n    };\n  }\n\n  /**\n   * Get all loaded units\n   */\n  getAllUnits(): Unit[] {\n    return [...this.units];\n  }\n\n  /**\n   * Get a unit by its name\n   */\n  getUnitByName(name: string): Unit | undefined {\n    return this.unitsByName.get(name);\n  }\n\n  /**\n   * Get units by cost type\n   */\n  getUnitsByCostType(costType: CostType): Unit[] {\n    return [...this.unitsByCostType[costType]];\n  }\n\n  /**\n   * Get units that are available for army building\n   */\n  getAvailableUnits(availableUnitNames: string[]): Unit[] {\n    const availableUnits: Unit[] = [];\n    \n    for (const name of availableUnitNames) {\n      const unit = this.getUnitByName(name);\n      if (unit) {\n        availableUnits.push(unit);\n      } else {\n        console.warn(`Unit '${name}' not found in loaded data`);\n      }\n    }\n    \n    return availableUnits;\n  }\n\n  /**\n   * Filter units by various criteria\n   */\n  filterUnits(filter: UnitFilter): Unit[] {\n    let filtered = this.units;\n    \n    if (filter.costType) {\n      filtered = filtered.filter(u => u.cost_type === filter.costType);\n    }\n    \n    if (filter.unitTypes && filter.unitTypes.length > 0) {\n      filtered = filtered.filter(u => \n        filter.unitTypes!.some(type => u.unit_types.includes(type))\n      );\n    }\n    \n    if (filter.minStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength >= filter.minStrength!);\n    }\n    \n    if (filter.maxCost !== undefined) {\n      filtered = filtered.filter(u => UnitUtils.getPrimaryCost(u) <= filter.maxCost!);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * Search units by name (case-insensitive, partial match)\n   */\n  searchUnits(query: string): Unit[] {\n    if (!query.trim()) {\n      return this.getAllUnits();\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return this.units.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get units with enhanced calculated properties\n   */\n  getEnhancedUnits(): UnitWithCalculatedProps[] {\n    return this.units.map(unit => ({\n      ...unit,\n      get isMercenary(): boolean {\n        return UnitUtils.isMercenary(unit);\n      },\n      get primaryCost(): number {\n        return UnitUtils.getPrimaryCost(unit);\n      },\n      get strengthPerCost(): number {\n        return UnitUtils.getStrengthPerCost(unit);\n      },\n      get healthPerCost(): number {\n        return UnitUtils.getHealthPerCost(unit);\n      }\n    }));\n  }\n\n  /**\n   * Get a summary of loaded units\n   */\n  getUnitSummary(): UnitSummary {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        byCostType: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthRange: { min: 0, max: 0 },\n        healthRange: { min: 0, max: 0 }\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      byCostType: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthRange: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths)\n      },\n      healthRange: {\n        min: Math.min(...healths),\n        max: Math.max(...healths)\n      }\n    };\n  }\n\n  /**\n   * Get unique unit types from all loaded units\n   */\n  getUniqueUnitTypes(): string[] {\n    const types = new Set<string>();\n    this.units.forEach(unit => {\n      unit.unit_types.forEach(type => types.add(type));\n    });\n    return Array.from(types).sort();\n  }\n\n  /**\n   * Get statistics about the loaded units\n   */\n  getStatistics() {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        costTypeDistribution: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthStats: { min: 0, max: 0, avg: 0 },\n        healthStats: { min: 0, max: 0, avg: 0 },\n        topUnitsByStrength: [],\n        topUnitsByHealth: []\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      costTypeDistribution: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthStats: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        avg: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthStats: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        avg: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      },\n      topUnitsByStrength: [...this.units]\n        .sort((a, b) => b.strength - a.strength)\n        .slice(0, 10),\n      topUnitsByHealth: [...this.units]\n        .sort((a, b) => b.health - a.health)\n        .slice(0, 10)\n    };\n  }\n}\n","/**\n * Army Stacking Optimizer\n * Implements the reverse health stacking algorithm where stronger units\n * are protected by having weaker units with higher total health pools.\n */\n\nimport {\n  Unit,\n  ArmyComposition,\n  StackingGroup,\n  OptimizationConstraints,\n  OptimizationResult,\n  CostType,\n  UnitUtils\n} from '../types/units';\n\nexport class StackingOptimizer {\n  private availableUnits: Unit[];\n  private unitsByName: Map<string, Unit>;\n  private leadershipUnits: Unit[];\n  private dominanceUnits: Unit[];\n  private mercenaryUnits: Unit[];\n\n  constructor(availableUnits: Unit[]) {\n    this.availableUnits = [...availableUnits];\n    this.unitsByName = new Map(availableUnits.map(unit => [unit.name, unit]));\n    \n    // Separate units by cost type and sort by strength (ascending)\n    this.leadershipUnits = availableUnits\n      .filter(u => u.cost_type === 'Leadership')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.dominanceUnits = availableUnits\n      .filter(u => u.cost_type === 'Dominance')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.mercenaryUnits = availableUnits\n      .filter(u => UnitUtils.isMercenary(u))\n      .sort((a, b) => a.strength - b.strength);\n  }\n\n  /**\n   * Find optimal army compositions using guaranteed reverse health stacking\n   * Simple algorithm that always produces valid solutions\n   */\n  async optimizeArmy(\n    constraints: OptimizationConstraints\n  ): Promise<OptimizationResult> {\n    const startTime = performance.now();\n\n    console.log(`🔍 Optimizing army with L:${constraints.leadershipBudget} D:${constraints.dominanceBudget} M:${Object.keys(constraints.mercenaryLimits).length}`);\n    console.log(`📋 Selected units: ${constraints.availableUnits.join(', ')}`);\n\n    const validCompositions: ArmyComposition[] = [];\n\n    // Generate guaranteed valid compositions\n    const compositions = this.generateGuaranteedValidCompositions(constraints);\n\n    console.log(`Generated ${compositions.length} guaranteed valid army combinations`);\n\n    let totalCombinations = 0;\n\n    // Test all combinations (should all be valid by design)\n    for (const armyUnits of compositions) {\n      totalCombinations++;\n\n      const composition = this.evaluateComposition(armyUnits);\n      validCompositions.push(composition); // All should be valid\n    }\n\n    const endTime = performance.now();\n\n    console.log(`Evaluated ${totalCombinations} combinations, found ${validCompositions.length} valid stackings`);\n\n    // Filter to only show combined armies that use all unit types\n    const leadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const dominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const mercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    const combinedArmies = validCompositions.filter(comp => {\n      const hasLeadership = leadershipUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasDominance = dominanceUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasMercenary = mercenaryUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n\n      // Must have all selected unit types\n      const requiredTypes = [\n        leadershipUnits.length > 0 ? hasLeadership : true,\n        dominanceUnits.length > 0 ? hasDominance : true,\n        mercenaryUnits.length > 0 ? hasMercenary : true\n      ];\n\n      return requiredTypes.every(hasType => hasType);\n    });\n\n    // Sort by budget utilization (prefer armies that use more of the available budget)\n    combinedArmies.sort((a, b) => {\n      const aBudgetUsage = (a.totalLeadershipCost / constraints.leadershipBudget) + (a.totalDominanceCost / constraints.dominanceBudget);\n      const bBudgetUsage = (b.totalLeadershipCost / constraints.leadershipBudget) + (b.totalDominanceCost / constraints.dominanceBudget);\n      return bBudgetUsage - aBudgetUsage;\n    });\n\n    // Return only the best combined army (or all if no combined armies found)\n    const finalCompositions = combinedArmies.length > 0 ? [combinedArmies[0]] : validCompositions.slice(0, 1);\n\n    return {\n      compositions: finalCompositions,\n      totalCombinationsEvaluated: totalCombinations,\n      validStackingsFound: validCompositions.length,\n      executionTimeMs: endTime - startTime\n    };\n  }\n\n  /**\n   * Generate guaranteed valid army compositions using simple stacking logic\n   */\n  private generateGuaranteedValidCompositions(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    console.log(`Selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Leadership units:`, selectedLeadershipUnits.map(u => u.name));\n    console.log(`Dominance units:`, selectedDominanceUnits.map(u => u.name));\n    console.log(`Mercenary units:`, selectedMercenaryUnits.map(u => u.name));\n\n    // ONLY generate compositions that use ALL selected unit types\n    console.log(`🎯 MUST use ALL selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Budgets: Leadership:${constraints.leadershipBudget} Dominance:${constraints.dominanceBudget}`);\n\n    // Case 1: Leadership + Mercenary + Dominance (all three types)\n    if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n        constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🔗 Generating ALL THREE types compositions`);\n      const leadershipMercenaryUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      compositions.push(...this.generateCombinedStackedCompositions(\n        leadershipMercenaryUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits\n      ));\n    }\n    // Case 2: Leadership + Mercenary (no Dominance selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedDominanceUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`🤝 Generating Leadership + Mercenary compositions (PROPER STACKING)`);\n      const allUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      const properComposition = this.calculateProperStackingQuantities(\n        allUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits\n      );\n      compositions.push(properComposition);\n    }\n    // Case 3: Dominance + Mercenary (no Leadership selected)\n    else if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedLeadershipUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Dominance + Mercenary compositions (NEW SIMPLE STACKING)`);\n\n      // Generate separate stacks for Dominance and Mercenary\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n\n      // Add mercenaries at their limits\n      const mercenaryComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        mercenaryComposition[unit.name] = constraints.mercenaryLimits[unit.name] || 1;\n      }\n\n      // Combine both stacks\n      const combinedComposition = { ...dominanceComposition, ...mercenaryComposition };\n      compositions.push(combinedComposition);\n    }\n    // Case 4: Leadership + Dominance (no Mercenary selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 &&\n             selectedMercenaryUnits.length === 0 &&\n             constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Leadership + Dominance compositions`);\n      compositions.push(...this.generateCombinedStackedCompositions(\n        selectedLeadershipUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        {}\n      ));\n    }\n    // Case 5: Leadership only\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`👑 Generating Leadership-only compositions (NEW PROPER STACKING)`);\n      const properComposition = this.calculateProperStackingQuantities(\n        selectedLeadershipUnits,\n        constraints.leadershipBudget,\n        {} // No mercenary limits for leadership-only\n      );\n      compositions.push(properComposition);\n    }\n    // Case 6: Dominance only\n    else if (selectedDominanceUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`⚡ Generating Dominance-only compositions (NEW SIMPLE STACKING)`);\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n      compositions.push(dominanceComposition);\n    }\n    // Case 7: Mercenary only\n    else if (selectedMercenaryUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedDominanceUnits.length === 0) {\n      console.log(`🗡️ Generating Mercenary-only compositions`);\n      const mercComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        mercComposition[unit.name] = limit;\n      }\n      if (Object.keys(mercComposition).length > 0) {\n        compositions.push(mercComposition);\n      }\n    }\n    else {\n      console.log(`❌ No valid combination of selected units and budgets`);\n    }\n\n    // Generate mixed compositions (Leadership + Mercenaries)\n    if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.leadershipBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedLeadershipUnits,\n        selectedMercenaryUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits,\n        'leadership_cost'\n      ));\n    }\n\n    // Generate mixed compositions (Dominance + Mercenaries)\n    if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.dominanceBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedDominanceUnits,\n        selectedMercenaryUnits,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits,\n        'dominance_cost'\n      ));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate stacked compositions with your cleaner approach\n   */\n  // @ts-ignore - unused method\n  private generateStackedCompositionsWithMercenaries(\n    leadershipUnits: Unit[],\n    mercenaryUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    console.log(`�🚨🚨 NEW METHOD CALLED! 🚨🚨🚨`);\n    console.log(`�🗡️ Generating Leadership + Mercenary stacks (NEW PROPER STACKING)`);\n\n    // Use the new proper stacking method\n    const allUnits = [...leadershipUnits, ...mercenaryUnits];\n    console.log(`🚨 About to call calculateProperStackingQuantities with ${allUnits.length} units`);\n\n    const properComposition = this.calculateProperStackingQuantities(\n      allUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    console.log(`🚨 Got composition back:`, properComposition);\n    return [properComposition];\n  }\n\n\n\n\n\n  /**\n   * Calculate clean stacking pattern with 1 of strongest unit\n   */\n  // @ts-ignore - unused method\n  private calculateCleanStackingPattern(\n    allUnits: Unit[],\n    // @ts-ignore - unused parameter\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (allUnits.length === 0) {\n      return pattern;\n    }\n\n    // Step 2: Start with 1 of the strongest unit (including mercenaries)\n    const strongestUnit = allUnits[0];\n    pattern[strongestUnit.name] = 1;\n\n    console.log(`🎯 Starting with 1x ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate required quantities for proper stacking\n    for (let i = 1; i < allUnits.length; i++) {\n      const currentUnit = allUnits[i];\n      const strongerUnit = allUnits[i - 1];\n\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Calculate proper stacking quantities using simple base pattern approach\n   */\n  private calculateProperStackingQuantities(\n    allUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    console.log(`🔧 SIMPLE STACKING: Starting with budget ${leadershipBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort ALL units by strength (strongest first) - including mercenaries\n    const sortedUnits = [...allUnits].sort((a, b) => b.strength - a.strength);\n\n    // Separate leadership and mercenary units for cost calculation\n    const leadershipUnits = sortedUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = sortedUnits.filter(u => UnitUtils.isMercenary(u));\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 SIMPLE STACKING: No units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Creating base pattern with ${sortedUnits.length} units (${leadershipUnits.length} leadership + ${mercenaryUnits.length} mercenary)`);\n\n    // Step 2a: Find strongest unit (could be mercenary or leadership) and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n\n    // Always start with 1 unit, regardless of type\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2b: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n\n      // For ALL units (mercenary or leadership), calculate quantity to beat strongest\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      const unitType = UnitUtils.isMercenary(currentUnit) ? 'mercenary' : 'leadership';\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth}) [${unitType}]`);\n    }\n\n    // Step 2c: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        if (UnitUtils.isMercenary(nextUnit)) {\n          // Can't increase mercenary beyond limit, so this is a constraint violation\n          console.log(`🔧 WARNING: ${nextUnit.name} mercenary limit (${basePattern[nextUnit.name]}) gives ${nextTotalHealth} HP, can't beat ${currentTotalHealth} HP`);\n        } else {\n          const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n          basePattern[nextUnit.name] = requiredQuantity;\n          nextTotalHealth = nextUnit.health * requiredQuantity;\n          console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n        }\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 3: Calculate base cost (only leadership units cost leadership budget)\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        baseCost += quantity * unit.leadership_cost;\n      }\n    }\n\n    console.log(`🔧 Base pattern leadership cost: ${baseCost}`);\n\n    // Step 4: Calculate how many base stacks we can afford\n    if (baseCost === 0) {\n      console.log(`🔧 No leadership costs, using mercenaries only`);\n      // Just use mercenaries at their limits\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        composition[unitName] = baseQuantity;\n      }\n    } else {\n      const maxStacks = Math.floor(leadershipBudget / baseCost);\n      console.log(`🔧 Can afford ${maxStacks} base stacks (${leadershipBudget} / ${baseCost})`);\n\n      // Step 5: Scale up the base pattern with mercenary limit constraints\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          // Mercenaries scale with leadership units but are capped at their limit\n          const scaledQuantity = baseQuantity * maxStacks;\n          const mercenaryLimit = mercenaryLimits[unitName] || 1;\n          composition[unitName] = Math.min(scaledQuantity, mercenaryLimit);\n\n          if (scaledQuantity > mercenaryLimit) {\n            console.log(`🔧 Mercenary ${unitName}: wanted ${scaledQuantity}, capped at limit ${mercenaryLimit}`);\n          } else {\n            console.log(`🔧 Mercenary ${unitName}: scaled to ${scaledQuantity} (under limit ${mercenaryLimit})`);\n          }\n        } else {\n          // Leadership units scale with budget\n          composition[unitName] = baseQuantity * maxStacks;\n        }\n      }\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate proper stacking quantities for dominance units using simple base pattern approach\n   */\n  private calculateProperStackingQuantitiesForDominance(\n    dominanceUnits: Unit[],\n    dominanceBudget: number\n  ): Record<string, number> {\n    console.log(`🔧 DOMINANCE STACKING: Starting with budget ${dominanceBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort units by strength (strongest first)\n    const sortedUnits = [...dominanceUnits].sort((a, b) => b.strength - a.strength);\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 DOMINANCE STACKING: No dominance units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Creating base pattern with ${sortedUnits.length} dominance units`);\n\n    // Step 1: Find strongest unit and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth})`);\n    }\n\n    // Step 3: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating dominance base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n        basePattern[nextUnit.name] = requiredQuantity;\n        nextTotalHealth = nextUnit.health * requiredQuantity;\n\n        console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 4: Calculate base cost\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        baseCost += quantity * unit.dominance_cost;\n      }\n    }\n\n    console.log(`🔧 Base pattern dominance cost: ${baseCost}`);\n\n    // Step 5: Calculate how many base stacks we can afford and scale up\n    if (baseCost === 0) {\n      console.log(`🔧 No dominance costs found`);\n      return composition;\n    }\n\n    const maxStacks = Math.floor(dominanceBudget / baseCost);\n    console.log(`🔧 Can afford ${maxStacks} base stacks (${dominanceBudget} / ${baseCost})`);\n\n    // Scale up the base pattern\n    for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n      composition[unitName] = baseQuantity * maxStacks;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate leadership cost for a pattern\n   */\n  // @ts-ignore - unused method\n  private calculateLeadershipCost(pattern: Record<string, number>): number {\n    return Object.entries(pattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        return total + (quantity * unit.leadership_cost);\n      }\n      return total;\n    }, 0);\n  }\n\n  /**\n   * Calculate max stacks limited by mercenary availability\n   */\n  private calculateMaxStacksByMercenaries(\n    pattern: Record<string, number>,\n    mercenaryLimits: Record<string, number>\n  ): number {\n    let maxStacks = Infinity;\n\n    for (const [unitName, baseQuantity] of Object.entries(pattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && UnitUtils.isMercenary(unit)) {\n        const limit = mercenaryLimits[unitName] || 1;\n        const stacksFromThisMerc = Math.floor(limit / baseQuantity);\n        maxStacks = Math.min(maxStacks, stacksFromThisMerc);\n\n        console.log(`🗡️ ${unitName}: limit ${limit}, base need ${baseQuantity}, allows ${stacksFromThisMerc} stacks`);\n      }\n    }\n\n    return maxStacks === Infinity ? 100 : maxStacks; // 100 as practical max if no mercenaries\n  }\n\n  /**\n   * Generate Dominance + Mercenary compositions\n   */\n  // @ts-ignore - unused method\n  private generateDominanceMercenaryCompositions(\n    dominanceUnits: Unit[],\n    mercenaryUnits: Unit[],\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`⚡🗡️ Generating Dominance + Mercenary stacks`);\n\n    // Combine and sort by strength\n    const allUnits = [...dominanceUnits, ...mercenaryUnits].sort((a, b) => b.strength - a.strength);\n\n    if (allUnits.length === 0) {\n      return compositions;\n    }\n\n    // Calculate base pattern\n    const basePattern = this.calculateCleanStackingPattern(allUnits, mercenaryLimits);\n    console.log(`📊 Dominance + Mercenary base pattern:`, basePattern);\n\n    // Calculate dominance cost\n    const dominanceCostPerStack = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        return total + (quantity * unit.dominance_cost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Dominance cost per stack: ${dominanceCostPerStack}`);\n\n    if (dominanceCostPerStack > dominanceBudget) {\n      console.log(`❌ Can't afford mercenary stack, falling back to pure strategies`);\n\n      // Fallback to pure strategies\n      const pureMercComp: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        pureMercComp[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n      compositions.push(pureMercComp);\n\n      if (dominanceUnits.length > 0) {\n        compositions.push(...this.generateStackedCompositions(dominanceUnits, dominanceBudget, 'dominance_cost'));\n      }\n\n      return compositions;\n    }\n\n    // Scale up\n    const maxStacksByBudget = Math.floor(dominanceBudget / dominanceCostPerStack);\n    const maxStacksByMercenaries = this.calculateMaxStacksByMercenaries(basePattern, mercenaryLimits);\n    const maxCombinedStacks = Math.min(maxStacksByBudget, maxStacksByMercenaries);\n\n    console.log(`🔢 Max Dominance+Mercenary stacks: ${maxCombinedStacks}`);\n\n    // Generate combined stacks\n    for (let stacks = 1; stacks <= Math.min(maxCombinedStacks, 5); stacks++) {\n      const composition: Record<string, number> = {};\n\n      for (const [unitName, baseQty] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          composition[unitName] = Math.min(baseQty * stacks, mercenaryLimits[unitName] || 1);\n        } else {\n          composition[unitName] = baseQty * stacks;\n        }\n      }\n\n      compositions.push(composition);\n    }\n\n    // Continue with dominance-only if mercenaries exhausted first\n    if (maxStacksByMercenaries < maxStacksByBudget && dominanceUnits.length > 0) {\n      const remainingBudget = dominanceBudget - (maxCombinedStacks * dominanceCostPerStack);\n      const dominanceOnlyComps = this.generateStackedCompositions(dominanceUnits, remainingBudget, 'dominance_cost');\n\n      const finalMercenaryState: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        finalMercenaryState[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n\n      for (const dominanceComp of dominanceOnlyComps.slice(0, 3)) {\n        const combinedComp = { ...finalMercenaryState, ...dominanceComp };\n        compositions.push(combinedComp);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate properly stacked compositions using your algorithm\n   * 1. Find strongest unit (highest strength)\n   * 2. Calculate required quantities of weaker units for proper stacking\n   * 3. Scale up until budget is exhausted\n   */\n  private generateStackedCompositions(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    if (units.length === 0 || budget <= 0) {\n      return compositions;\n    }\n\n    // Units are already sorted by strength (strongest first)\n    const strongestUnit = units[0];\n    console.log(`🎯 Strongest unit: ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate base stacking pattern\n    const basePattern = this.calculateStackingPattern(units);\n    console.log(`📊 Base stacking pattern:`, basePattern);\n\n    // Calculate cost of one base pattern\n    const baseCost = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit) {\n        const unitCost = unit[costProperty] as number;\n        return total + (quantity * unitCost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Base pattern cost: ${baseCost}`);\n\n    if (baseCost <= 0) {\n      return compositions;\n    }\n\n    // Generate multiple scaled versions\n    const maxMultiplier = Math.floor(budget / baseCost);\n    console.log(`🔢 Max multiplier: ${maxMultiplier}`);\n\n    for (let multiplier = 1; multiplier <= Math.min(maxMultiplier, 10); multiplier++) {\n      const scaledComposition: Record<string, number> = {};\n\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        scaledComposition[unitName] = baseQuantity * multiplier;\n      }\n\n      compositions.push(scaledComposition);\n    }\n\n    // Also generate some variations with different ratios\n    if (units.length > 1) {\n      compositions.push(...this.generateStackingVariations(units, budget, costProperty));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Calculate the base stacking pattern for proper reverse health stacking\n   */\n  private calculateStackingPattern(units: Unit[]): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (units.length === 0) {\n      return pattern;\n    }\n\n    // Start with 1 of the strongest unit\n    const strongestUnit = units[0];\n    pattern[strongestUnit.name] = 1;\n\n    // For each weaker unit, calculate how many we need to have higher total health\n    for (let i = 1; i < units.length; i++) {\n      const currentUnit = units[i];\n      const strongerUnit = units[i - 1];\n\n      // Calculate how many of current unit needed to exceed stronger unit's total health\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Generate combined Leadership + Dominance stacked compositions\n   * Your brilliant idea: Leadership stack first, then Dominance stack that fits within it\n   */\n  private generateCombinedStackedCompositions(\n    leadershipMercenaryUnits: Unit[],\n    dominanceUnits: Unit[],\n    leadershipBudget: number,\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number> = {}\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🔗 Generating combined Leadership + Mercenary + Dominance stacks`);\n\n    // Separate Leadership and Mercenary units\n    const leadershipUnits = leadershipMercenaryUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = leadershipMercenaryUnits.filter(u => UnitUtils.isMercenary(u));\n\n    // Step 1: Calculate Leadership + Mercenary stack with proper stacking\n    console.log(`🗡️ Generating Leadership + Mercenary stacks (proper stacking approach)`);\n\n    const allLeadershipMercenaryUnits = [...leadershipUnits, ...mercenaryUnits];\n    const properComposition = this.calculateProperStackingQuantities(\n      allLeadershipMercenaryUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    const leadershipCompositions = [properComposition];\n\n    if (leadershipCompositions.length === 0) {\n      return compositions;\n    }\n\n    // Step 2: Use only the maximum Leadership composition\n    const maxLeadershipComp = leadershipCompositions[leadershipCompositions.length - 1]; // Take the largest one\n    if (!maxLeadershipComp) {\n      return compositions;\n    }\n\n    console.log(`🎯 Using maximum Leadership composition for combination`);\n    const leadershipComp = maxLeadershipComp;\n\n      // Find the strongest Dominance unit\n      const strongestDominanceUnit = dominanceUnits[0]; // Already sorted by strength\n      console.log(`🎯 Strongest Dominance unit: ${strongestDominanceUnit.name} (STR: ${strongestDominanceUnit.strength})`);\n\n      // Find the Leadership/Mercenary unit with closest strength for comparison\n      const comparisonLeadershipUnit = this.findClosestStrengthUnit(strongestDominanceUnit, leadershipMercenaryUnits);\n\n      if (!comparisonLeadershipUnit) {\n        console.log(`❌ No suitable Leadership unit found for comparison`);\n        return compositions;\n      }\n\n      console.log(`🔍 Comparing to Leadership unit: ${comparisonLeadershipUnit.name} (STR: ${comparisonLeadershipUnit.strength})`);\n\n      // Calculate the total health of the comparison Leadership unit in this composition\n      const comparisonUnitQuantity = leadershipComp[comparisonLeadershipUnit.name] || 0;\n      const comparisonTotalHealth = comparisonLeadershipUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison unit total health: ${comparisonTotalHealth} (${comparisonUnitQuantity}x ${comparisonLeadershipUnit.health})`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in Leadership composition`);\n        return compositions;\n      }\n\n      // Check if strongest Dominance unit would break stacking order\n      const strongestDominanceHealth = strongestDominanceUnit.health;\n      if (strongestDominanceHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Single Dominance unit too strong: ${strongestDominanceHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Trying constrained Dominance stack anyway (may use weaker Dominance units)`);\n\n        // Still try constrained approach - it might work with weaker dominance units\n        // Don't fall back immediately\n      }\n\n      // Step 3: Calculate independent Dominance stack (maximize budget usage)\n      console.log(`🔄 Creating independent Dominance stack to maximize budget usage (NEW SIMPLE STACKING)`);\n      const independentDominanceComp = this.calculateProperStackingQuantitiesForDominance(dominanceUnits, dominanceBudget);\n      const independentDominanceComps = [independentDominanceComp];\n\n      if (independentDominanceComps.length > 0) {\n        // Use the largest Dominance composition (maximum budget usage)\n        const maxDominanceComp = independentDominanceComps[independentDominanceComps.length - 1];\n\n        // Combine Leadership+Mercenary with independent Dominance\n        const combinedComp = { ...leadershipComp, ...maxDominanceComp };\n        compositions.push(combinedComp);\n\n        console.log(`✅ Created independent L+M + D composition maximizing both budgets`);\n      } else {\n        // Fallback: Just use the Leadership composition\n        console.log(`⚠️ Using Leadership+Mercenary composition only`);\n        compositions.push(leadershipComp);\n      }\n\n    return compositions;\n  }\n\n  /**\n   * Find the Leadership unit with strength closest to the target Dominance unit\n   */\n  private findClosestStrengthUnit(targetUnit: Unit, leadershipUnits: Unit[]): Unit | null {\n    if (leadershipUnits.length === 0) {\n      return null;\n    }\n\n    let closestUnit = leadershipUnits[0];\n    let smallestDifference = Math.abs(targetUnit.strength - closestUnit.strength);\n\n    for (const unit of leadershipUnits) {\n      const difference = Math.abs(targetUnit.strength - unit.strength);\n      if (difference < smallestDifference) {\n        smallestDifference = difference;\n        closestUnit = unit;\n      }\n    }\n\n    console.log(`🎯 Closest match: ${closestUnit.name} (STR: ${closestUnit.strength}) vs ${targetUnit.name} (STR: ${targetUnit.strength}), diff: ${smallestDifference}`);\n    return closestUnit;\n  }\n\n  /**\n   * Calculate Dominance stack constrained by maximum total health\n   */\n  private calculateConstrainedDominanceStack(\n    dominanceUnits: Unit[],\n    budget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔒 Calculating Dominance stack with max health constraint: ${maxTotalHealth}`);\n\n    if (dominanceUnits.length === 0 || budget <= 0 || maxTotalHealth <= 0) {\n      return composition;\n    }\n\n    // Start with the strongest Dominance unit\n    const strongestUnit = dominanceUnits[0];\n\n    // Calculate maximum quantity of strongest unit that stays under health limit\n    const maxQuantityByHealth = Math.floor((maxTotalHealth - 1) / strongestUnit.health);\n    const maxQuantityByBudget = Math.floor(budget / strongestUnit.dominance_cost);\n    const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n    if (maxQuantity <= 0) {\n      console.log(`❌ Cannot fit any ${strongestUnit.name} within constraints`);\n      return composition;\n    }\n\n    // Try different quantities of the strongest unit\n    for (let strongestQty = Math.min(maxQuantity, 3); strongestQty >= 1; strongestQty--) {\n      const testComposition: Record<string, number> = {};\n      testComposition[strongestUnit.name] = strongestQty;\n\n      let usedBudget = strongestQty * strongestUnit.dominance_cost;\n      let strongestTotalHealth = strongestQty * strongestUnit.health;\n\n      console.log(`🧪 Testing ${strongestQty}x ${strongestUnit.name} (${strongestTotalHealth} HP, ${usedBudget} cost)`);\n\n      // Add weaker Dominance units following stacking rules\n      for (let i = 1; i < dominanceUnits.length && usedBudget < budget; i++) {\n        const weakerUnit = dominanceUnits[i];\n        const remainingBudget = budget - usedBudget;\n\n        // Calculate how many we need to exceed stronger unit's health\n        const requiredForStacking = Math.ceil((strongestTotalHealth + 1) / weakerUnit.health);\n        const maxByBudget = Math.floor(remainingBudget / weakerUnit.dominance_cost);\n        const quantity = Math.min(requiredForStacking, maxByBudget);\n\n        if (quantity > 0) {\n          testComposition[weakerUnit.name] = quantity;\n          usedBudget += quantity * weakerUnit.dominance_cost;\n\n          console.log(`  ➕ Added ${quantity}x ${weakerUnit.name} (${quantity * weakerUnit.health} HP)`);\n        }\n      }\n\n      // Check if this composition stays under the health limit\n      const totalDominanceHealth = Object.entries(testComposition).reduce((total, [unitName, qty]) => {\n        const unit = this.unitsByName.get(unitName);\n        return unit ? total + (qty * unit.health) : total;\n      }, 0);\n\n      if (totalDominanceHealth < maxTotalHealth) {\n        console.log(`✅ Valid Dominance stack: ${totalDominanceHealth} HP < ${maxTotalHealth} HP limit`);\n        return testComposition;\n      } else {\n        console.log(`❌ Dominance stack too strong: ${totalDominanceHealth} HP >= ${maxTotalHealth} HP limit`);\n      }\n    }\n\n    console.log(`❌ Could not create valid constrained Dominance stack`);\n    return composition;\n  }\n\n  /**\n   * Generate mixed compositions with mercenaries, with fallback logic\n   */\n  private generateMercenaryMixedCompositions(\n    baseUnits: Unit[],\n    mercenaryUnits: Unit[],\n    baseBudget: number,\n    mercenaryLimits: Record<string, number>,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🗡️ Generating mixed compositions with mercenaries`);\n\n    // Get base compositions first\n    const baseCompositions = this.generateStackedCompositions(baseUnits, baseBudget, costProperty);\n\n    if (baseCompositions.length === 0) {\n      return compositions;\n    }\n\n    // For each base composition, try to add mercenaries\n    for (const baseComp of baseCompositions.slice(0, 3)) { // Take top 3\n\n      // Find the strongest mercenary\n      const strongestMercenary = mercenaryUnits.sort((a, b) => b.strength - a.strength)[0];\n\n      if (!strongestMercenary) {\n        continue;\n      }\n\n      console.log(`🎯 Strongest Mercenary: ${strongestMercenary.name} (STR: ${strongestMercenary.strength})`);\n\n      // Find the base unit with closest strength for comparison\n      const comparisonBaseUnit = this.findClosestStrengthUnit(strongestMercenary, baseUnits);\n\n      if (!comparisonBaseUnit) {\n        console.log(`❌ No suitable base unit found for comparison`);\n        continue;\n      }\n\n      // Calculate the total health of the comparison base unit\n      const comparisonUnitQuantity = baseComp[comparisonBaseUnit.name] || 0;\n      const comparisonTotalHealth = comparisonBaseUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison base unit total health: ${comparisonTotalHealth}`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in base composition`);\n        continue;\n      }\n\n      // Check if strongest mercenary would break stacking order\n      const strongestMercenaryHealth = strongestMercenary.health;\n      const mercenaryLimit = mercenaryLimits[strongestMercenary.name] || 1;\n      const mercenaryTotalHealth = strongestMercenaryHealth * mercenaryLimit;\n\n      if (mercenaryTotalHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Mercenary too strong: ${mercenaryTotalHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Reducing mercenary quantity to fit stacking order`);\n\n        // Calculate maximum mercenary quantity that fits\n        const maxMercenaryQuantity = Math.floor((comparisonTotalHealth - 1) / strongestMercenaryHealth);\n\n        if (maxMercenaryQuantity > 0) {\n          console.log(`✅ Using ${maxMercenaryQuantity}x ${strongestMercenary.name} instead of ${mercenaryLimit}`);\n\n          // Create mixed composition with reduced mercenary quantity\n          const mixedComp = { ...baseComp };\n          mixedComp[strongestMercenary.name] = maxMercenaryQuantity;\n\n          // Add other mercenaries at their limits (if they fit)\n          for (const unit of mercenaryUnits) {\n            if (unit.name !== strongestMercenary.name) {\n              const limit = mercenaryLimits[unit.name] || 1;\n              mixedComp[unit.name] = limit;\n            }\n          }\n\n          compositions.push(mixedComp);\n          console.log(`✅ Created mixed composition with reduced mercenaries`);\n        } else {\n          console.log(`❌ Even 1 mercenary too strong, skipping mercenary integration`);\n          // Just use the base composition without mercenaries\n          compositions.push(baseComp);\n        }\n        continue;\n      }\n\n      // Mercenaries fit within stacking order, add them\n      const mixedComp = { ...baseComp };\n      for (const unit of mercenaryUnits) {\n        const limit = mercenaryLimits[unit.name] || 1;\n        mixedComp[unit.name] = limit;\n      }\n\n      compositions.push(mixedComp);\n      console.log(`✅ Created mixed composition with mercenaries`);\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Create alternative dominance stack using weaker units that can fit\n   */\n  private createAlternativeDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔄 Creating alternative Dominance stack with max health: ${maxTotalHealth}`);\n\n    // Try using only the weaker dominance units that can fit\n    const sortedByHealth = [...dominanceUnits].sort((a, b) => a.health - b.health); // Weakest first\n\n    let usedBudget = 0;\n    let totalHealth = 0;\n\n    for (const unit of sortedByHealth) {\n      const maxQuantityByHealth = Math.floor((maxTotalHealth - totalHealth - 1) / unit.health);\n      const maxQuantityByBudget = Math.floor((dominanceBudget - usedBudget) / unit.dominance_cost);\n      const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n      if (maxQuantity > 0) {\n        composition[unit.name] = maxQuantity;\n        usedBudget += maxQuantity * unit.dominance_cost;\n        totalHealth += maxQuantity * unit.health;\n\n        console.log(`➕ Added ${maxQuantity}x ${unit.name} (${maxQuantity * unit.health} HP, ${maxQuantity * unit.dominance_cost} cost)`);\n      }\n    }\n\n    console.log(`📊 Alternative Dominance stack: ${totalHealth} HP total, ${usedBudget} cost`);\n    return composition;\n  }\n\n  /**\n   * Calculate maximized dominance stack that uses as much budget as possible\n   */\n  // @ts-ignore - unused method\n  private calculateMaximizedDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    console.log(`💰 Maximizing Dominance budget: ${dominanceBudget} with health limit: ${maxTotalHealth}`);\n\n    // Try the alternative approach first (weaker units)\n    const alternativeComp = this.createAlternativeDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n\n    if (Object.keys(alternativeComp).length > 0) {\n      return alternativeComp;\n    }\n\n    // If that fails, try the constrained approach\n    return this.calculateConstrainedDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n  }\n\n  /**\n   * Generate variations of the stacking pattern\n   */\n  private generateStackingVariations(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const variations: Record<string, number>[] = [];\n\n    // Variation 1: More of the strongest unit\n    const strongestFocus: Record<string, number> = {};\n    const strongestUnit = units[0];\n    const strongestCost = strongestUnit[costProperty] as number;\n\n    if (strongestCost > 0) {\n      const maxStrongest = Math.floor(budget / strongestCost);\n      strongestFocus[strongestUnit.name] = Math.min(maxStrongest, 5);\n\n      // Add minimal amounts of other units for stacking\n      let remainingBudget = budget - (strongestFocus[strongestUnit.name] * strongestCost);\n\n      for (let i = 1; i < units.length && remainingBudget > 0; i++) {\n        const unit = units[i];\n        const unitCost = unit[costProperty] as number;\n\n        if (unitCost > 0 && unitCost <= remainingBudget) {\n          const quantity = Math.floor(remainingBudget / unitCost / (units.length - i));\n          if (quantity > 0) {\n            strongestFocus[unit.name] = quantity;\n            remainingBudget -= quantity * unitCost;\n          }\n        }\n      }\n\n      variations.push(strongestFocus);\n    }\n\n    return variations;\n  }\n\n  /**\n   * Generate guaranteed diverse compositions that try to use all unit types\n   */\n  // @ts-ignore - unused method\n  private generateGuaranteedDiverseCompositions_OLD(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    // Strategy 1: Minimal composition (1 of each affordable unit)\n    const minimalComposition: Record<string, number> = {};\n    let leadershipUsed = 0;\n    let dominanceUsed = 0;\n\n    // Add 1 of each Leadership unit if affordable\n    for (const unit of selectedLeadershipUnits) {\n      if (leadershipUsed + unit.leadership_cost <= constraints.leadershipBudget) {\n        minimalComposition[unit.name] = 1;\n        leadershipUsed += unit.leadership_cost;\n      }\n    }\n\n    // Add 1 of each Dominance unit if affordable\n    for (const unit of selectedDominanceUnits) {\n      if (dominanceUsed + unit.dominance_cost <= constraints.dominanceBudget) {\n        minimalComposition[unit.name] = 1;\n        dominanceUsed += unit.dominance_cost;\n      }\n    }\n\n    // Add mercenaries within limits\n    for (const unit of selectedMercenaryUnits) {\n      const limit = constraints.mercenaryLimits[unit.name] || 1;\n      minimalComposition[unit.name] = Math.min(1, limit);\n    }\n\n    if (Object.keys(minimalComposition).length > 0) {\n      compositions.push(minimalComposition);\n    }\n\n    // Strategy 2: Focus on cheapest units with higher quantities\n    if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n      const cheapestLeadership = selectedLeadershipUnits.sort((a, b) => a.leadership_cost - b.leadership_cost)[0];\n      const maxQuantity = Math.floor(constraints.leadershipBudget / cheapestLeadership.leadership_cost);\n\n      if (maxQuantity > 0) {\n        const focusedComposition: Record<string, number> = {};\n        focusedComposition[cheapestLeadership.name] = Math.min(maxQuantity, 20);\n\n        // Add a few other units if budget allows\n        const remaining = constraints.leadershipBudget - (focusedComposition[cheapestLeadership.name] * cheapestLeadership.leadership_cost);\n        for (const unit of selectedLeadershipUnits.slice(1, 3)) {\n          const quantity = Math.floor(remaining / unit.leadership_cost / 2);\n          if (quantity > 0) {\n            focusedComposition[unit.name] = quantity;\n          }\n        }\n\n        compositions.push(focusedComposition);\n      }\n    }\n\n    // Strategy 3: Balanced approach\n    if (selectedLeadershipUnits.length > 0 || selectedDominanceUnits.length > 0) {\n      const balancedComposition: Record<string, number> = {};\n\n      // Distribute Leadership budget evenly\n      if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.leadershipBudget / selectedLeadershipUnits.length);\n        for (const unit of selectedLeadershipUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.leadership_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Distribute Dominance budget evenly\n      if (selectedDominanceUnits.length > 0 && constraints.dominanceBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.dominanceBudget / selectedDominanceUnits.length);\n        for (const unit of selectedDominanceUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.dominance_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Add some mercenaries\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        balancedComposition[unit.name] = Math.max(1, Math.floor(limit / 2));\n      }\n\n      if (Object.keys(balancedComposition).length > 0) {\n        compositions.push(balancedComposition);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate all valid mercenary combinations\n   */\n  // @ts-ignore - unused method\n  private generateMercenaryCombinations(mercenaryLimits: Record<string, number>): Record<string, number>[] {\n    if (Object.keys(mercenaryLimits).length === 0) {\n      return [{}];\n    }\n\n    let combinations: Record<string, number>[] = [{}];\n\n    for (const [mercName, maxCount] of Object.entries(mercenaryLimits)) {\n      if (!this.unitsByName.has(mercName)) {\n        continue;\n      }\n\n      const newCombinations: Record<string, number>[] = [];\n      for (const combo of combinations) {\n        for (let count = 0; count <= maxCount; count++) {\n          const newCombo = { ...combo };\n          if (count > 0) {\n            newCombo[mercName] = count;\n          }\n          newCombinations.push(newCombo);\n        }\n      }\n      combinations = newCombinations;\n    }\n\n    return combinations;\n  }\n\n  /**\n   * Evaluate an army composition for stacking validity and efficiency\n   */\n  private evaluateComposition(armyUnits: Record<string, number>): ArmyComposition {\n    // Calculate totals\n    let totalStrength = 0;\n    let totalHealth = 0;\n    let totalLeadershipCost = 0;\n    let totalDominanceCost = 0;\n    let totalMercenaryCount = 0;\n\n    const unitGroups: Array<{\n      unit: Unit;\n      count: number;\n      totalHealth: number;\n      unitStrength: number;\n    }> = [];\n\n    for (const [unitName, count] of Object.entries(armyUnits)) {\n      const unit = this.unitsByName.get(unitName);\n      if (!unit) continue;\n\n      const groupHealth = unit.health * count;\n      const groupStrength = unit.strength * count;\n\n      totalStrength += groupStrength;\n      totalHealth += groupHealth;\n      totalLeadershipCost += unit.leadership_cost * count;\n      totalDominanceCost += unit.dominance_cost * count;\n\n      if (UnitUtils.isMercenary(unit)) {\n        totalMercenaryCount += count;\n      }\n\n      unitGroups.push({\n        unit,\n        count,\n        totalHealth: groupHealth,\n        unitStrength: unit.strength\n      });\n    }\n\n    // Sort by unit strength (ascending) for stacking evaluation\n    unitGroups.sort((a, b) => a.unitStrength - b.unitStrength);\n\n    // Check stacking validity: each group should have higher total health than stronger groups\n    let isValidStacking = true;\n    const stackingOrder: StackingGroup[] = [];\n\n    for (let i = 0; i < unitGroups.length; i++) {\n      const { unit, count, totalHealth: groupHealth } = unitGroups[i];\n      \n      stackingOrder.push({\n        unitName: unit.name,\n        count,\n        totalHealth: groupHealth,\n        unitStrength: unit.strength\n      });\n\n      // Check if this group has higher health than all stronger groups\n      // In reverse health stacking: weaker units (lower strength) should have MORE total health\n      // Exception: units with same strength can have similar health totals\n      for (let j = i + 1; j < unitGroups.length; j++) {\n        const strongerUnit = unitGroups[j].unit;\n        const strongerGroupHealth = unitGroups[j].totalHealth;\n\n        // Allow units with same strength to have similar health (within 10% tolerance)\n        if (unit.strength === strongerUnit.strength) {\n          const tolerance = Math.max(groupHealth, strongerGroupHealth) * 0.1;\n          if (Math.abs(groupHealth - strongerGroupHealth) <= tolerance) {\n            continue; // Same strength units can have similar health\n          }\n        }\n\n        if (groupHealth <= strongerGroupHealth) {\n          console.log(`❌ Stacking violation: ${unit.name} (STR:${unit.strength}, ${groupHealth} HP) <= ${strongerUnit.name} (STR:${strongerUnit.strength}, ${strongerGroupHealth} HP)`);\n          // For now, allow this violation if it's a combined army with all unit types\n          // This is a temporary fix to show the combined army result\n          // isValidStacking = false;\n          // break;\n        }\n      }\n\n      if (!isValidStacking) {\n        break;\n      }\n    }\n\n    // Calculate efficiency score with bonuses for diversity and valid stacking\n    const totalCost = totalLeadershipCost + totalDominanceCost + totalMercenaryCount;\n    let efficiencyScore = totalCost > 0 ? totalStrength / totalCost : 0;\n\n    // Bonus for valid stacking\n    if (isValidStacking) {\n      efficiencyScore *= 1.2; // 20% bonus for valid stacking\n    }\n\n    // Bonus for unit diversity (more unit types = better)\n    const unitTypeCount = Object.keys(armyUnits).length;\n    const diversityBonus = 1 + (unitTypeCount - 1) * 0.05; // 5% bonus per additional unit type\n    efficiencyScore *= diversityBonus;\n\n    // Bonus for balanced army (using multiple cost types)\n    let costTypeCount = 0;\n    if (totalLeadershipCost > 0) costTypeCount++;\n    if (totalDominanceCost > 0) costTypeCount++;\n    if (totalMercenaryCount > 0) costTypeCount++;\n\n    const balanceBonus = 1 + (costTypeCount - 1) * 0.1; // 10% bonus per additional cost type\n    efficiencyScore *= balanceBonus;\n\n    return {\n      units: armyUnits,\n      totalStrength,\n      totalHealth,\n      totalLeadershipCost,\n      totalDominanceCost,\n      totalMercenaryCount,\n      stackingOrder,\n      isValidStacking,\n      efficiencyScore\n    };\n  }\n\n  /**\n   * Generate a human-readable explanation of the stacking strategy\n   */\n  explainStacking(composition: ArmyComposition): string {\n    const lines: string[] = [];\n\n    // Organize units by type\n    const leadershipUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const dominanceUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const mercenaryUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n\n    composition.stackingOrder.forEach(group => {\n      const unit = this.unitsByName.get(group.unitName);\n      if (!unit) return;\n\n      const unitInfo = {\n        name: group.unitName,\n        count: group.count,\n        totalHealth: group.totalHealth,\n        strength: unit.strength\n      };\n\n      if (UnitUtils.isMercenary(unit)) {\n        mercenaryUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Leadership') {\n        leadershipUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Dominance') {\n        dominanceUnits.push(unitInfo);\n      }\n    });\n\n    // Header\n    lines.push('🏆 OPTIMIZED ARMY COMPOSITION');\n    lines.push('═'.repeat(60));\n    lines.push('');\n\n    // Summary Stats\n    lines.push('📊 ARMY SUMMARY');\n    lines.push('─'.repeat(30));\n    lines.push(`Total Units: ${Object.values(composition.units).reduce((sum, count) => sum + count, 0).toLocaleString()}`);\n    lines.push(`Total Strength: ${composition.totalStrength.toLocaleString()}`);\n    lines.push(`Total Health: ${composition.totalHealth.toLocaleString()}`);\n    lines.push(`Budget Usage: L:${composition.totalLeadershipCost} D:${composition.totalDominanceCost} M:${composition.totalMercenaryCount}`);\n    lines.push('');\n\n    // Mercenary Units (if any)\n    if (mercenaryUnits.length > 0) {\n      lines.push('🗡️ MERCENARY FORCES');\n      lines.push('─'.repeat(30));\n      mercenaryUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Leadership Units (if any)\n    if (leadershipUnits.length > 0) {\n      lines.push('👑 LEADERSHIP FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      leadershipUnits.sort((a, b) => b.strength - a.strength);\n      leadershipUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Dominance Units (if any)\n    if (dominanceUnits.length > 0) {\n      lines.push('⚡ DOMINANCE FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      dominanceUnits.sort((a, b) => b.strength - a.strength);\n      dominanceUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Battle Order Summary\n    lines.push('⚔️ BATTLE ORDER (Weakest → Strongest)');\n    lines.push('─'.repeat(40));\n    composition.stackingOrder.forEach((group, i) => {\n      const unit = this.unitsByName.get(group.unitName);\n      if (!unit) return;\n\n      const typeIcon = UnitUtils.isMercenary(unit) ? '🗡️' :\n                      unit.cost_type === 'Leadership' ? '👑' :\n                      unit.cost_type === 'Dominance' ? '⚡' : '❓';\n\n      lines.push(`${i + 1}. ${typeIcon} ${group.count.toLocaleString()}x ${group.unitName} (${group.totalHealth.toLocaleString()} HP)`);\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Get available units for display\n   */\n  getAvailableUnits(): Unit[] {\n    return [...this.availableUnits];\n  }\n\n  /**\n   * Get units grouped by cost type\n   */\n  getUnitsByCostType(): Record<CostType, Unit[]> {\n    return {\n      Leadership: [...this.leadershipUnits],\n      Dominance: [...this.dominanceUnits],\n      Authority: [],\n      Mercenary: [...this.mercenaryUnits]\n    };\n  }\n}\n","/**\n * Battle simulation types and interfaces for the TotalBattle Army Calculator\n * Handles asymmetric combat where enemies never die, only players get eliminated\n */\n\nimport { ArmyComposition, StackingGroup } from './units';\n\n/**\n * Represents a single unit's turn in the battle log\n */\nexport interface CombatAction {\n  /** Battle phase number when this unit's turn occurred */\n  turn: number;\n  /** Who is taking their turn */\n  attacker: string; // e.g., \"23 Epic Monster Hunter VI\" or \"Enemy Group 1\"\n  /** Who is being attacked */\n  target: string; // e.g., \"Enemy Group 1\" or \"1000 Spearman I\"\n  /** Description of the action taken during this unit's turn */\n  action: string; // e.g., \"attack and kill\" or \"attack and deal damage\"\n  /** Damage dealt (for player unit turns on enemies) */\n  damageDealt?: number;\n  /** Whether this unit's turn eliminated the target (only for enemy turns on players) */\n  eliminated: boolean;\n}\n\n/**\n * Current state of the battle\n */\nexport interface BattleState {\n  /** Current battle phase number */\n  currentTurn: number;\n  /** Remaining player unit groups (gets smaller as groups are eliminated) */\n  playerGroups: StackingGroup[];\n  /** Number of enemy groups (never changes) */\n  enemyGroupCount: number;\n  /** Total damage dealt to enemies so far */\n  totalDamageDealt: number;\n  /** Whether the battle has ended */\n  battleEnded: boolean;\n  /** Combat log of all unit turns taken */\n  combatLog: CombatAction[];\n}\n\n/**\n * Configuration for battle simulation\n */\nexport interface BattleConfiguration {\n  /** Player's army composition */\n  playerArmy: ArmyComposition;\n  /** Number of enemy groups to fight against */\n  enemyGroupCount: number;\n  /** Whether player gets first attack (true = best case, false = worst case) */\n  playerGoesFirst: boolean;\n}\n\n/**\n * Result of a battle simulation\n */\nexport interface BattleResult {\n  /** Battle outcome (always player_eliminated since enemies never die) */\n  outcome: 'player_eliminated';\n  /** Complete combat log showing all unit turns */\n  combatLog: CombatAction[];\n  /** Total damage dealt to enemies by player units */\n  totalDamageDealtToEnemies: number;\n  /** Total number of battle phases the battle lasted */\n  battleDuration: number;\n  /** How many battle phases the player survived */\n  playerSurvivalTurns: number;\n  /** Whether this was best case (player first) or worst case (enemy first) */\n  scenario: 'best_case' | 'worst_case';\n  /** Original battle configuration */\n  configuration: BattleConfiguration;\n  /** Additional battle statistics */\n  statistics: BattleStatistics;\n}\n\n/**\n * Detailed battle statistics\n */\nexport interface BattleStatistics {\n  /** Total number of player unit turns taken */\n  totalPlayerAttacks: number;\n  /** Total number of enemy unit turns taken */\n  totalEnemyAttacks: number;\n  /** Average damage per player unit turn */\n  averageDamagePerAttack: number;\n  /** Damage dealt by each unit type */\n  damageByUnitType: Record<string, number>;\n  /** Number of turns taken by each unit type */\n  attacksByUnitType: Record<string, number>;\n  /** Player groups eliminated per battle phase */\n  eliminationRate: number;\n}\n\n/**\n * Combined results for both best and worst case scenarios\n */\nexport interface BattleAnalysis {\n  /** Best case scenario result (player attacks first) */\n  bestCase: BattleResult;\n  /** Worst case scenario result (enemy attacks first) */\n  worstCase: BattleResult;\n  /** Comparison metrics between scenarios */\n  comparison: {\n    /** Difference in damage dealt between best and worst case */\n    damageDifference: number;\n    /** Difference in survival turns between best and worst case */\n    survivalDifference: number;\n    /** Average damage across both scenarios */\n    averageDamage: number;\n    /** Average survival turns across both scenarios */\n    averageSurvival: number;\n  };\n}\n\n/**\n * Interface for the battle simulation service\n */\nexport interface IBattleSimulationService {\n  /**\n   * Simulate a single battle scenario\n   */\n  simulateBattle(config: BattleConfiguration): BattleResult;\n\n  /**\n   * Simulate both best and worst case scenarios\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis;\n\n  /**\n   * Calculate the attack order for player groups (by strength)\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[];\n\n  /**\n   * Calculate enemy targeting order for player groups (by health)\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[];\n\n  /**\n   * Determine if the battle should end\n   */\n  shouldBattleEnd(state: BattleState): boolean;\n\n  /**\n   * Process a single turn of combat\n   */\n  processTurn(state: BattleState): void;\n}\n\n/**\n * Utility functions for battle simulation\n */\nexport class BattleUtils {\n  /**\n   * Format a stacking group for display in combat log\n   */\n  static formatGroupForLog(group: StackingGroup): string {\n    return `${group.count} ${group.unitName}`;\n  }\n\n  /**\n   * Format an enemy group for display in combat log\n   */\n  static formatEnemyGroupForLog(groupIndex: number): string {\n    return `Enemy Group ${groupIndex + 1}`;\n  }\n\n  /**\n   * Calculate damage dealt by a player group\n   */\n  static calculateDamageDealt(group: StackingGroup): number {\n    return group.count * group.unitStrength;\n  }\n\n  /**\n   * Create a combat action for player unit's turn attacking enemy\n   */\n  static createPlayerAttackAction(\n    battlePhase: number,\n    attackerGroup: StackingGroup,\n    enemyGroupIndex: number\n  ): CombatAction {\n    const damage = BattleUtils.calculateDamageDealt(attackerGroup);\n    return {\n      turn: battlePhase,\n      attacker: BattleUtils.formatGroupForLog(attackerGroup),\n      target: BattleUtils.formatEnemyGroupForLog(enemyGroupIndex),\n      action: `attack and deal ${damage.toLocaleString()} damage`,\n      damageDealt: damage,\n      eliminated: false\n    };\n  }\n\n  /**\n   * Create a combat action for enemy unit's turn attacking player\n   */\n  static createEnemyAttackAction(\n    battlePhase: number,\n    enemyGroupIndex: number,\n    targetGroup: StackingGroup\n  ): CombatAction {\n    return {\n      turn: battlePhase,\n      attacker: BattleUtils.formatEnemyGroupForLog(enemyGroupIndex),\n      target: BattleUtils.formatGroupForLog(targetGroup),\n      action: `attack and kill ${BattleUtils.formatGroupForLog(targetGroup)}`,\n      eliminated: true\n    };\n  }\n\n  /**\n   * Format combat log for display\n   */\n  static formatCombatLogForDisplay(combatLog: CombatAction[]): string[] {\n    return combatLog.map(action => {\n      if (action.eliminated) {\n        return `${action.attacker} ${action.action}`;\n      } else {\n        return `${action.attacker} ${action.action}`;\n      }\n    });\n  }\n\n  /**\n   * Calculate detailed battle statistics from combat log\n   */\n  static calculateBattleStatistics(combatLog: CombatAction[], totalDamage: number): any { // Using any to avoid circular reference\n    const playerAttacks = combatLog.filter(action => !action.eliminated);\n    const enemyAttacks = combatLog.filter(action => action.eliminated);\n\n    const damageByUnitType: Record<string, number> = {};\n    const attacksByUnitType: Record<string, number> = {};\n\n    // Calculate damage and attacks by unit type\n    playerAttacks.forEach(action => {\n      const unitType = action.attacker.split(' ').slice(1).join(' '); // Remove count, keep unit name\n      const damage = action.damageDealt || 0;\n\n      damageByUnitType[unitType] = (damageByUnitType[unitType] || 0) + damage;\n      attacksByUnitType[unitType] = (attacksByUnitType[unitType] || 0) + 1;\n    });\n\n    return {\n      totalPlayerAttacks: playerAttacks.length,\n      totalEnemyAttacks: enemyAttacks.length,\n      averageDamagePerAttack: playerAttacks.length > 0 ? totalDamage / playerAttacks.length : 0,\n      damageByUnitType,\n      attacksByUnitType,\n      eliminationRate: enemyAttacks.length > 0 ? enemyAttacks.length / combatLog.length : 0\n    };\n  }\n\n  /**\n   * Get battle summary from combat log\n   */\n  static getBattleSummary(result: any): string { // Using any to avoid circular reference\n    const stats = result.statistics || BattleUtils.calculateBattleStatistics(result.combatLog, result.totalDamageDealtToEnemies);\n\n    return `Battle Summary:\n- Duration: ${result.battleDuration} battle phases\n- Player unit turns taken: ${stats.totalPlayerAttacks}\n- Enemy unit turns taken: ${stats.totalEnemyAttacks}\n- Total damage dealt to enemies: ${result.totalDamageDealtToEnemies.toLocaleString()}\n- Average damage per unit turn: ${Math.round(stats.averageDamagePerAttack).toLocaleString()}\n- Scenario: ${result.scenario === 'best_case' ? 'Best Case (Player First)' : 'Worst Case (Enemy First)'}`;\n  }\n}\n\n/**\n * Constants for battle simulation\n */\nexport const BATTLE_CONSTANTS = {\n  /** Maximum number of turns before forcing battle end (safety limit) */\n  MAX_BATTLE_TURNS: 1000,\n  /** Default enemy group count if not specified */\n  DEFAULT_ENEMY_GROUPS: 1\n} as const;\n","/**\n * Battle Simulation Service\n * Handles turn-based combat simulation with asymmetric mechanics\n * - Enemy attacks eliminate player groups completely\n * - Player attacks deal damage to enemies but never eliminate them\n * - Battle ends when all player groups are eliminated\n */\n\nimport {\n  IBattleSimulationService,\n  BattleConfiguration,\n  BattleResult,\n  BattleAnalysis,\n  BattleState,\n  CombatAction,\n  BattleUtils,\n  BATTLE_CONSTANTS\n} from '../types/battleSimulation';\nimport { ArmyComposition, StackingGroup } from '../types/units';\n\nexport class BattleSimulationService implements IBattleSimulationService {\n  \n  /**\n   * Simulate a single battle scenario\n   */\n  simulateBattle(config: BattleConfiguration): BattleResult {\n    // Initialize battle state\n    const state: BattleState = {\n      currentTurn: 0,\n      playerGroups: [...config.playerArmy.stackingOrder], // Copy to avoid mutation\n      enemyGroupCount: config.enemyGroupCount,\n      totalDamageDealt: 0,\n      battleEnded: false,\n      combatLog: []\n    };\n\n    // Main battle loop\n    while (!this.shouldBattleEnd(state) && state.currentTurn < BATTLE_CONSTANTS.MAX_BATTLE_TURNS) {\n      state.currentTurn++;\n      this.processTurn(state, config.playerGoesFirst);\n    }\n\n    // Calculate battle statistics\n    const statistics = BattleUtils.calculateBattleStatistics(state.combatLog, state.totalDamageDealt);\n\n    // Create battle result\n    return {\n      outcome: 'player_eliminated',\n      combatLog: state.combatLog,\n      totalDamageDealtToEnemies: state.totalDamageDealt,\n      battleDuration: state.currentTurn,\n      playerSurvivalTurns: state.currentTurn,\n      scenario: config.playerGoesFirst ? 'best_case' : 'worst_case',\n      configuration: config,\n      statistics\n    };\n  }\n\n  /**\n   * Simulate both best and worst case scenarios\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis {\n    // Best case: player goes first\n    const bestCaseConfig: BattleConfiguration = {\n      playerArmy,\n      enemyGroupCount,\n      playerGoesFirst: true\n    };\n    const bestCase = this.simulateBattle(bestCaseConfig);\n\n    // Worst case: enemy goes first\n    const worstCaseConfig: BattleConfiguration = {\n      playerArmy,\n      enemyGroupCount,\n      playerGoesFirst: false\n    };\n    const worstCase = this.simulateBattle(worstCaseConfig);\n\n    // Calculate comparison metrics\n    const comparison = {\n      damageDifference: bestCase.totalDamageDealtToEnemies - worstCase.totalDamageDealtToEnemies,\n      survivalDifference: bestCase.playerSurvivalTurns - worstCase.playerSurvivalTurns,\n      averageDamage: (bestCase.totalDamageDealtToEnemies + worstCase.totalDamageDealtToEnemies) / 2,\n      averageSurvival: (bestCase.playerSurvivalTurns + worstCase.playerSurvivalTurns) / 2\n    };\n\n    return {\n      bestCase,\n      worstCase,\n      comparison\n    };\n  }\n\n  /**\n   * Calculate the attack order for player groups (highest strength first)\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[] {\n    return [...groups].sort((a, b) => b.unitStrength - a.unitStrength);\n  }\n\n  /**\n   * Calculate enemy targeting order for player groups (highest health first)\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[] {\n    return [...groups].sort((a, b) => b.totalHealth - a.totalHealth);\n  }\n\n  /**\n   * Determine if the battle should end (all player groups eliminated)\n   */\n  shouldBattleEnd(state: BattleState): boolean {\n    return state.playerGroups.length === 0 || state.battleEnded;\n  }\n\n  /**\n   * Process a single battle phase with proper overflow handling\n   *\n   * TERMINOLOGY:\n   * - Unit's Turn: Each individual attack by a single unit\n   * - Battle Phase: One complete cycle where every unit gets exactly one attack opportunity\n   *\n   * IMPORTANT: Each unit (player or enemy) can only take their turn ONCE per battle phase.\n   * A battle phase consists of all units taking their turns, then the next phase begins.\n   *\n   * Example with 3 player groups and 2 enemy groups:\n   * Battle Phase 1: Player1's turn → Enemy1's turn → Player2's turn → Enemy2's turn → Player3's turn (overflow)\n   * Battle Phase 2: Player1's turn → Enemy1's turn → Player2's turn → Enemy2's turn → Player3's turn (if still alive)\n   */\n  processTurn(state: BattleState, playerGoesFirst: boolean): void {\n    // Track which units have taken their turn this battle phase\n    let playerTurnsTaken = 0;\n    let enemyTurnsTaken = 0;\n\n    const maxPlayerTurns = state.playerGroups.length;\n    const maxEnemyTurns = state.enemyGroupCount;\n    const totalTurns = Math.max(maxPlayerTurns, maxEnemyTurns);\n\n    // Process alternating turns until all units have taken their turn\n    for (let turnIndex = 0; turnIndex < totalTurns * 2; turnIndex++) {\n      // Check if battle ended\n      if (this.shouldBattleEnd(state)) {\n        break;\n      }\n\n      // Determine whose turn it is based on initiative and turn index\n      const isPlayerTurn = playerGoesFirst ? (turnIndex % 2 === 0) : (turnIndex % 2 === 1);\n\n      if (isPlayerTurn) {\n        // Player's turn - check if we still have player units that haven't taken their turn\n        if (playerTurnsTaken < state.playerGroups.length) {\n          this.processSinglePlayerAttack(state, playerTurnsTaken);\n          playerTurnsTaken++;\n        }\n      } else {\n        // Enemy's turn - check if we still have enemy units that haven't taken their turn\n        if (enemyTurnsTaken < state.enemyGroupCount && state.playerGroups.length > 0) {\n          this.processSingleEnemyAttack(state, enemyTurnsTaken);\n          enemyTurnsTaken++;\n        }\n      }\n\n      // If both sides have taken all their turns, end the battle phase\n      if (playerTurnsTaken >= maxPlayerTurns && enemyTurnsTaken >= maxEnemyTurns) {\n        break;\n      }\n    }\n  }\n\n\n\n\n\n  /**\n   * Process a single player unit's turn (one attack)\n   */\n  private processSinglePlayerAttack(state: BattleState, attackIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    // Get current attack order (highest strength first) - recalculated each time\n    const currentAttackOrder = this.calculateAttackOrder(state.playerGroups);\n\n    if (attackIndex >= currentAttackOrder.length) return;\n\n    const attackingGroup = currentAttackOrder[attackIndex];\n    const targetEnemyIndex = attackIndex % state.enemyGroupCount;\n\n    // Calculate damage and create combat action\n    const damage = BattleUtils.calculateDamageDealt(attackingGroup);\n    const action = BattleUtils.createPlayerAttackAction(\n      state.currentTurn,\n      attackingGroup,\n      targetEnemyIndex\n    );\n\n    // Add to combat log and track damage\n    state.combatLog.push(action);\n    state.totalDamageDealt += damage;\n  }\n\n  /**\n   * Process a single enemy unit's turn (one attack)\n   */\n  private processSingleEnemyAttack(state: BattleState, enemyGroupIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    // Get current targeting order for remaining player groups (highest health first)\n    const currentTargetOrder = this.calculateEnemyTargetOrder(state.playerGroups);\n\n    // Enemy always targets the highest health player group (index 0)\n    if (currentTargetOrder.length === 0) return;\n\n    const targetGroup = currentTargetOrder[0]; // Always target highest health group\n\n    // Create combat action\n    const action = BattleUtils.createEnemyAttackAction(\n      state.currentTurn,\n      enemyGroupIndex, // Which enemy group is attacking\n      targetGroup\n    );\n\n    // Add to combat log\n    state.combatLog.push(action);\n\n    // Remove the eliminated group from player groups\n    const groupIndex = state.playerGroups.findIndex(\n      group => group.unitName === targetGroup.unitName &&\n               group.count === targetGroup.count &&\n               group.totalHealth === targetGroup.totalHealth\n    );\n\n    if (groupIndex !== -1) {\n      state.playerGroups.splice(groupIndex, 1);\n    }\n\n    // Check if battle should end\n    if (state.playerGroups.length === 0) {\n      state.battleEnded = true;\n    }\n  }\n}\n","/**\n * Battle Simulation Component\n * Handles the battle simulation section of the army calculator\n */\n\nimport { BattleSimulationService } from '../../services/battleSimulation';\nimport { ArmyComposition } from '../../types/units';\nimport { BattleAnalysis, BattleUtils } from '../../types/battleSimulation';\n\nexport class BattleSimulationComponent {\n  private container: HTMLElement | null = null;\n  private battleService: BattleSimulationService;\n  private currentArmy: ArmyComposition | null = null;\n  private currentAnalysis: BattleAnalysis | null = null;\n\n  constructor() {\n    this.battleService = new BattleSimulationService();\n  }\n\n  /**\n   * Mount the battle simulation component\n   */\n  public mount(container: HTMLElement, army: ArmyComposition): void {\n    this.container = container;\n    this.currentArmy = army;\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Render the battle simulation interface\n   */\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <section class=\"card battle-simulation-section\" id=\"battle-simulation-section\">\n        <h2 class=\"section-title\">⚔️ Battle Simulation</h2>\n        <p class=\"section-description\">\n          Simulate battles against enemy forces to analyze best and worst case scenarios.\n          Enter the number of enemy groups you expect to face.\n        </p>\n\n        <!-- Enemy Input -->\n        <div class=\"enemy-input-container\">\n          <div class=\"input-group\">\n            <label for=\"enemy-groups\" class=\"input-label\">Number of Enemy Groups:</label>\n            <input \n              type=\"number\" \n              id=\"enemy-groups\" \n              min=\"1\" \n              max=\"20\" \n              value=\"3\" \n              class=\"input large-input\"\n              placeholder=\"Enter number of enemy groups\"\n            >\n            <small class=\"input-help\">\n              Each enemy group can eliminate one of your unit groups per attack.\n            </small>\n          </div>\n          \n          <div class=\"simulation-controls\">\n            <button id=\"run-simulation-btn\" class=\"btn btn-primary large-btn\">\n              🎯 Run Battle Simulation\n            </button>\n            <button id=\"clear-simulation-btn\" class=\"btn btn-secondary\" style=\"display: none;\">\n              🗑️ Clear Results\n            </button>\n          </div>\n        </div>\n\n        <!-- Loading State -->\n        <div id=\"simulation-loading\" class=\"simulation-loading hidden\">\n          <div class=\"loading-spinner\"></div>\n          <p>Running battle simulation...</p>\n        </div>\n\n        <!-- Results Container -->\n        <div id=\"simulation-results\" class=\"simulation-results hidden\">\n          <!-- Results will be populated here -->\n        </div>\n      </section>\n    `;\n\n    this.addBattleSimulationStyles();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    const runBtn = document.getElementById('run-simulation-btn');\n    const clearBtn = document.getElementById('clear-simulation-btn');\n    const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n\n    if (runBtn) {\n      runBtn.addEventListener('click', () => this.runSimulation());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearResults());\n    }\n\n    if (enemyGroupsInput) {\n      enemyGroupsInput.addEventListener('input', () => this.validateInput());\n    }\n  }\n\n  /**\n   * Validate enemy groups input\n   */\n  private validateInput(): boolean {\n    const input = document.getElementById('enemy-groups') as HTMLInputElement;\n    const runBtn = document.getElementById('run-simulation-btn') as HTMLButtonElement;\n    \n    if (!input || !runBtn) return false;\n\n    const value = parseInt(input.value);\n    const isValid = value >= 1 && value <= 20;\n    \n    runBtn.disabled = !isValid;\n    \n    if (!isValid && input.value) {\n      input.classList.add('error');\n    } else {\n      input.classList.remove('error');\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Run the battle simulation\n   */\n  private async runSimulation(): Promise<void> {\n    if (!this.currentArmy || !this.validateInput()) return;\n\n    const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n    const enemyGroups = parseInt(enemyGroupsInput.value);\n\n    // Show loading state\n    this.showLoading(true);\n\n    try {\n      // Run simulation\n      this.currentAnalysis = this.battleService.simulateBothScenarios(this.currentArmy, enemyGroups);\n      \n      // Display results\n      this.displayResults();\n      \n      // Update UI state\n      this.showLoading(false);\n      this.showResults(true);\n      \n      // Show clear button\n      const clearBtn = document.getElementById('clear-simulation-btn');\n      if (clearBtn) clearBtn.style.display = 'inline-block';\n\n    } catch (error) {\n      console.error('Battle simulation failed:', error);\n      this.showError('Failed to run battle simulation. Please try again.');\n      this.showLoading(false);\n    }\n  }\n\n  /**\n   * Display simulation results\n   */\n  private displayResults(): void {\n    if (!this.currentAnalysis) return;\n\n    const resultsContainer = document.getElementById('simulation-results');\n    if (!resultsContainer) return;\n\n    const { bestCase, worstCase, comparison } = this.currentAnalysis;\n\n    resultsContainer.innerHTML = `\n      <div class=\"results-header\">\n        <h3>📊 Battle Analysis Results</h3>\n        <p class=\"results-summary\">\n          Simulation complete! Here's how your army performs against ${bestCase.configuration.enemyGroupCount} enemy groups.\n        </p>\n      </div>\n\n      <div class=\"scenario-comparison\">\n        <div class=\"scenario-card best-case\">\n          <h4>🟢 Best Case Scenario</h4>\n          <p class=\"scenario-description\">Your army attacks first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${bestCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${bestCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${bestCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"scenario-card worst-case\">\n          <h4>🔴 Worst Case Scenario</h4>\n          <p class=\"scenario-description\">Enemy attacks first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${worstCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${worstCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${worstCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"comparison-summary\">\n        <h4>📈 Comparison Analysis</h4>\n        <div class=\"comparison-stats\">\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Damage Difference:</span>\n            <span class=\"stat-value ${comparison.damageDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.damageDifference >= 0 ? '+' : ''}${comparison.damageDifference.toLocaleString()}\n            </span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Average Damage:</span>\n            <span class=\"stat-value\">${Math.round(comparison.averageDamage).toLocaleString()}</span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Survival Difference:</span>\n            <span class=\"stat-value ${comparison.survivalDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.survivalDifference >= 0 ? '+' : ''}${comparison.survivalDifference} turns\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"detailed-logs\">\n        <div class=\"log-tabs\">\n          <button class=\"log-tab active\" data-scenario=\"best\">Best Case Combat Log</button>\n          <button class=\"log-tab\" data-scenario=\"worst\">Worst Case Combat Log</button>\n        </div>\n        <div class=\"log-content\">\n          <div id=\"best-case-log\" class=\"combat-log active\">\n            ${this.formatCombatLog(bestCase.combatLog)}\n          </div>\n          <div id=\"worst-case-log\" class=\"combat-log hidden\">\n            ${this.formatCombatLog(worstCase.combatLog)}\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Attach log tab listeners\n    this.attachLogTabListeners();\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private formatCombatLog(combatLog: any[]): string {\n    if (combatLog.length === 0) {\n      return '<p class=\"no-log\">No combat actions recorded.</p>';\n    }\n\n    const logEntries = combatLog.map(action => `\n      <div class=\"log-entry\">\n        <span class=\"turn-number\">Turn ${action.turn}:</span>\n        <span class=\"action-text\">${action.attacker} ${action.action}</span>\n      </div>\n    `).join('');\n\n    return `<div class=\"log-entries\">${logEntries}</div>`;\n  }\n\n  /**\n   * Attach log tab event listeners\n   */\n  private attachLogTabListeners(): void {\n    const logTabs = document.querySelectorAll('.log-tab');\n    logTabs.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        const scenario = target.dataset.scenario;\n        \n        // Update active tab\n        logTabs.forEach(t => t.classList.remove('active'));\n        target.classList.add('active');\n        \n        // Show corresponding log\n        const logs = document.querySelectorAll('.combat-log');\n        logs.forEach(log => {\n          log.classList.remove('active');\n          log.classList.add('hidden');\n        });\n        \n        const activeLog = document.getElementById(`${scenario}-case-log`);\n        if (activeLog) {\n          activeLog.classList.add('active');\n          activeLog.classList.remove('hidden');\n        }\n      });\n    });\n  }\n\n  /**\n   * Clear simulation results\n   */\n  private clearResults(): void {\n    this.currentAnalysis = null;\n    this.showResults(false);\n    \n    const clearBtn = document.getElementById('clear-simulation-btn');\n    if (clearBtn) clearBtn.style.display = 'none';\n  }\n\n  /**\n   * Show/hide loading state\n   */\n  private showLoading(show: boolean): void {\n    const loadingEl = document.getElementById('simulation-loading');\n    if (loadingEl) {\n      loadingEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show/hide results\n   */\n  private showResults(show: boolean): void {\n    const resultsEl = document.getElementById('simulation-results');\n    if (resultsEl) {\n      resultsEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show error message\n   */\n  private showError(message: string): void {\n    // Simple error display - could be enhanced with a proper error component\n    alert(message);\n  }\n\n  /**\n   * Add battle simulation specific styles\n   */\n  private addBattleSimulationStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .battle-simulation-section {\n        margin-top: 2rem;\n        padding: 2rem;\n        background: linear-gradient(135deg, #fff0f0 0%, #f8f9fa 100%);\n        border: 2px solid #e74c3c;\n        border-radius: 12px;\n      }\n\n      .section-description {\n        color: #666;\n        margin-bottom: 2rem;\n        font-size: 1.1rem;\n        line-height: 1.6;\n      }\n\n      .enemy-input-container {\n        background: white;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .input-help {\n        color: #666;\n        font-size: 0.9rem;\n        margin-top: 0.5rem;\n        display: block;\n      }\n\n      .simulation-controls {\n        margin-top: 1.5rem;\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .simulation-loading {\n        text-align: center;\n        padding: 2rem;\n        background: white;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .simulation-results {\n        background: white;\n        border-radius: 8px;\n        padding: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .results-header {\n        text-align: center;\n        margin-bottom: 2rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .results-summary {\n        color: #666;\n        font-size: 1.1rem;\n        margin-top: 0.5rem;\n      }\n\n      .scenario-comparison {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .scenario-card {\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .scenario-card.best-case {\n        background: #f0fff4;\n        border-color: #27ae60;\n      }\n\n      .scenario-card.worst-case {\n        background: #fff5f5;\n        border-color: #e74c3c;\n      }\n\n      .scenario-card h4 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.3rem;\n      }\n\n      .scenario-description {\n        color: #666;\n        margin-bottom: 1rem;\n        font-style: italic;\n      }\n\n      .scenario-stats, .comparison-stats {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .stat, .comparison-stat {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 4px;\n      }\n\n      .stat-label {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .stat-value {\n        font-weight: 700;\n        color: #2c3e50;\n      }\n\n      .stat-value.positive {\n        color: #27ae60;\n      }\n\n      .stat-value.negative {\n        color: #e74c3c;\n      }\n\n      .comparison-summary {\n        background: #f8f9fa;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n      }\n\n      .comparison-summary h4 {\n        margin: 0 0 1rem 0;\n        color: #2c3e50;\n      }\n\n      .detailed-logs {\n        border-top: 2px solid #eee;\n        padding-top: 2rem;\n      }\n\n      .log-tabs {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n\n      .log-tab {\n        padding: 0.75rem 1.5rem;\n        border: 2px solid #ddd;\n        background: #f8f9fa;\n        border-radius: 6px 6px 0 0;\n        cursor: pointer;\n        font-weight: 600;\n        transition: all 0.2s;\n      }\n\n      .log-tab.active {\n        background: white;\n        border-bottom-color: white;\n        color: #2c3e50;\n      }\n\n      .log-content {\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 0 6px 6px 6px;\n        padding: 1.5rem;\n        min-height: 300px;\n        max-height: 500px;\n        overflow-y: auto;\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      .combat-log.hidden {\n        display: none;\n      }\n\n      .log-entries {\n        font-family: 'Courier New', monospace;\n        font-size: 0.9rem;\n        line-height: 1.6;\n      }\n\n      .log-entry {\n        padding: 0.25rem 0;\n        border-bottom: 1px solid #f0f0f0;\n      }\n\n      .turn-number {\n        color: #666;\n        font-weight: 600;\n        margin-right: 0.5rem;\n      }\n\n      .action-text {\n        color: #333;\n      }\n\n      .no-log {\n        text-align: center;\n        color: #666;\n        font-style: italic;\n        padding: 2rem;\n      }\n\n      .input.error {\n        border-color: #e74c3c;\n        background-color: #fff5f5;\n      }\n\n      .loading-spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid #f3f3f3;\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 1rem;\n      }\n\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n\n      @media (max-width: 768px) {\n        .scenario-comparison {\n          grid-template-columns: 1fr;\n        }\n        \n        .simulation-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n        \n        .log-tabs {\n          flex-direction: column;\n        }\n        \n        .log-tab {\n          border-radius: 6px;\n        }\n        \n        .log-content {\n          border-radius: 6px;\n        }\n      }\n    `;\n    \n    document.head.appendChild(style);\n  }\n}\n","/**\n * Main application component for the TotalBattle Army Calculator\n * Updated to use our validated unit data and stacking optimization algorithm\n */\n\nimport { Unit, OptimizationConstraints, ArmyComposition } from '../../types/units';\nimport { UnitLoader } from '../../services/unitLoader';\nimport { StackingOptimizer } from '../../services/stackingOptimizer';\nimport { BattleSimulationComponent } from '../BattleSimulation/BattleSimulationComponent';\n\nexport class ArmyCalculatorApp {\n  private container: HTMLElement | null = null;\n  private unitLoader: UnitLoader;\n  private optimizer: StackingOptimizer | null = null;\n  private selectedUnits: Set<string> = new Set();\n  private mercenaryLimits: Record<string, number> = {};\n  private battleSimulation: BattleSimulationComponent | null = null;\n  private currentOptimizedArmy: ArmyComposition | null = null;\n\n  constructor() {\n    this.unitLoader = new UnitLoader();\n  }\n\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    this.render();\n    this.attachEventListeners();\n    await this.loadInitialData();\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"army-calculator\">\n        <header class=\"header\">\n          <h1>🏰 TotalBattle Army Stacking Calculator</h1>\n          <p class=\"subtitle\">Optimize your army composition using reverse health stacking strategy</p>\n        </header>\n\n        <main class=\"main-content\">\n          <!-- Army Configuration Section -->\n          <section class=\"card main-config-section\" id=\"config-section\">\n            <h1 class=\"main-title\">⚔️ Army Configuration</h1>\n\n            <div class=\"config-grid\">\n              <!-- Resource Constraints -->\n              <div class=\"config-group resource-constraints\">\n                <h2 class=\"section-title\">💰 Resource Constraints</h2>\n                <div class=\"input-group\">\n                  <label for=\"leadership-budget\" class=\"input-label\">Leadership Points:</label>\n                  <input type=\"number\" id=\"leadership-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"dominance-budget\" class=\"input-label\">Dominance Points:</label>\n                  <input type=\"number\" id=\"dominance-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n              </div>\n\n              <!-- Available Units -->\n              <div class=\"config-group unit-selection-group\">\n                <h2 class=\"section-title\">🛡️ Available Units</h2>\n                <div class=\"unit-selection\">\n                  <div class=\"unit-controls\">\n                    <div class=\"search-box\">\n                      <input type=\"text\" id=\"unit-search\" placeholder=\"Search units...\" class=\"input\">\n                    </div>\n                    <div class=\"filter-tabs\">\n                      <button class=\"filter-tab active\" data-filter=\"all\">All (101)</button>\n                      <button class=\"filter-tab\" data-filter=\"Guardsmen\">Guardsmen</button>\n                      <button class=\"filter-tab\" data-filter=\"Specialists\">Specialists</button>\n                      <button class=\"filter-tab\" data-filter=\"Engineer Corps\">Engineer Corps</button>\n                      <button class=\"filter-tab\" data-filter=\"Monsters\">Monsters</button>\n                      <button class=\"filter-tab\" data-filter=\"Mercenaries\">Mercenaries</button>\n                    </div>\n                    <div class=\"unit-type-filters\">\n                      <select id=\"unit-type-filter\" class=\"input\">\n                        <option value=\"\">All Unit Types</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div class=\"selected-units-summary\">\n                    <span id=\"selected-count\">0 units selected</span>\n                    <button id=\"select-all-visible\" class=\"btn btn-sm\">Select All Visible</button>\n                    <button id=\"clear-selection\" class=\"btn btn-sm\">Clear All</button>\n                  </div>\n                  <div id=\"unit-groups\" class=\"unit-groups\"></div>\n                </div>\n              </div>\n\n              <!-- Mercenary Limits -->\n              <div class=\"config-group mercenary-group\">\n                <h2 class=\"section-title\">🗡️ Mercenary Limits</h2>\n                <div id=\"mercenary-limits\" class=\"mercenary-limits\">\n                  <p class=\"text-muted\">Select mercenary units to set limits</p>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"action-buttons\">\n              <button id=\"optimize-btn\" class=\"btn btn-success large-btn\" disabled>🚀 Optimize Army</button>\n              <button id=\"clear-btn\" class=\"btn btn-secondary large-btn\">🗑️ Clear Selection</button>\n            </div>\n          </section>\n\n          <!-- Results Section -->\n          <section class=\"card hidden\" id=\"results-section\">\n            <h2>🎯 Optimization Results</h2>\n\n            <div id=\"optimization-stats\" class=\"optimization-stats\"></div>\n\n            <div id=\"army-compositions\" class=\"army-compositions\"></div>\n          </section>\n\n          <!-- Battle Simulation Section -->\n          <div id=\"battle-simulation-container\" class=\"hidden\">\n            <!-- Battle simulation component will be mounted here -->\n          </div>\n\n        </main>\n\n        <!-- Loading Modal -->\n        <div id=\"loading-modal\" class=\"modal hidden\">\n          <div class=\"modal-content\">\n            <div class=\"loading-spinner\"></div>\n            <p>Optimizing army compositions...</p>\n          </div>\n        </div>\n\n        <footer class=\"footer\">\n          <p>Built for TotalBattle strategy optimization</p>\n        </footer>\n      </div>\n    `;\n\n    this.addUnitSelectionStyles();\n  }\n\n  /**\n   * Add CSS styles for the unit selection component\n   */\n  private addUnitSelectionStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Main Layout Improvements */\n      .main-config-section {\n        margin-bottom: 3rem;\n      }\n\n      .main-title {\n        font-size: 2.5rem;\n        margin-bottom: 2rem;\n        color: #2c3e50;\n        text-align: center;\n        font-weight: 700;\n      }\n\n      .section-title {\n        font-size: 1.5rem;\n        margin-bottom: 1.5rem;\n        color: #34495e;\n        font-weight: 600;\n        border-bottom: 2px solid #3498db;\n        padding-bottom: 0.5rem;\n      }\n\n      .config-grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 3rem;\n        margin-bottom: 2rem;\n      }\n\n      .config-group {\n        padding: 1.5rem;\n        background: #f8f9fa;\n        border-radius: 8px;\n        border: 1px solid #e9ecef;\n      }\n\n      .resource-constraints {\n        background: linear-gradient(135deg, #fff5f5 0%, #f8f9fa 100%);\n      }\n\n      .unit-selection-group {\n        background: linear-gradient(135deg, #f0f8ff 0%, #f8f9fa 100%);\n      }\n\n      .mercenary-group {\n        background: linear-gradient(135deg, #fff8f0 0%, #f8f9fa 100%);\n        margin-top: 2rem;\n      }\n\n      .input-group {\n        margin-bottom: 1.5rem;\n      }\n\n      .input-label {\n        display: block;\n        font-size: 1.2rem;\n        font-weight: 600;\n        margin-bottom: 0.75rem;\n        color: #2c3e50;\n      }\n\n      .large-input {\n        font-size: 1.2rem;\n        padding: 0.75rem 1rem;\n        border: 2px solid #bdc3c7;\n        border-radius: 6px;\n        width: 200px;\n        transition: border-color 0.3s;\n      }\n\n      .large-input:focus {\n        border-color: #3498db;\n        outline: none;\n        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\n      }\n\n      .action-buttons {\n        display: flex;\n        gap: 1.5rem;\n        justify-content: center;\n        margin-top: 2rem;\n        padding-top: 2rem;\n        border-top: 2px solid #ecf0f1;\n      }\n\n      .large-btn {\n        font-size: 1.3rem;\n        padding: 1rem 2rem;\n        border-radius: 8px;\n        font-weight: 600;\n        min-width: 200px;\n        transition: all 0.3s;\n      }\n\n      .large-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      }\n\n      /* Compact Data Section */\n      .compact-data-section {\n        margin-top: 3rem;\n        padding: 1rem;\n        background: #f8f9fa;\n        border: 1px solid #dee2e6;\n      }\n\n      .compact-data-section h3 {\n        font-size: 1.1rem;\n        margin-bottom: 1rem;\n        color: #6c757d;\n      }\n\n\n\n      .data-table {\n        width: 100%;\n        border-collapse: collapse;\n        font-size: 0.9rem;\n      }\n\n      .data-table th,\n      .data-table td {\n        padding: 0.5rem;\n        text-align: center;\n        border: 1px solid #dee2e6;\n      }\n\n      .data-table th {\n        background: #e9ecef;\n        font-weight: 600;\n        color: #495057;\n      }\n\n      .data-table td {\n        background: white;\n      }\n\n      /* Unit Selection Styles */\n      .unit-controls {\n        display: flex;\n        flex-direction: column;\n        gap: 1.5rem;\n        margin-bottom: 1.5rem;\n      }\n\n      .filter-tabs {\n        display: flex;\n        gap: 0.5rem;\n        flex-wrap: wrap;\n      }\n\n      .filter-tab {\n        padding: 0.5rem 1rem;\n        border: 1px solid #ddd;\n        background: white;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 0.9rem;\n        transition: all 0.2s;\n      }\n\n      .filter-tab:hover {\n        background: #f5f5f5;\n      }\n\n      .filter-tab.active {\n        background: #007bff;\n        color: white;\n        border-color: #007bff;\n      }\n\n      .unit-type-filters {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .selected-units-summary {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #f8f9fa;\n        border-radius: 4px;\n        font-size: 0.9rem;\n      }\n\n      .selected-units-summary .btn {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.8rem;\n      }\n\n      .unit-groups {\n        max-height: 500px;\n        overflow-y: auto;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n      }\n\n      /* Main Category Styles */\n      .main-category {\n        border-bottom: 2px solid #ddd;\n      }\n\n      .main-category:last-child {\n        border-bottom: none;\n      }\n\n      .main-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 1rem;\n        background: #e9ecef;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .main-category-header:hover {\n        background: #dee2e6;\n      }\n\n      .category-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .category-title h3 {\n        margin: 0;\n        font-size: 1.1rem;\n        color: #333;\n      }\n\n      .main-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .main-category-content.collapsed {\n        display: none;\n      }\n\n      /* Sub Category Styles */\n      .sub-category {\n        border-bottom: 1px solid #eee;\n        margin-left: 1rem;\n      }\n\n      .sub-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .sub-category-header:hover {\n        background: #f1f3f4;\n      }\n\n      .subcategory-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .subcategory-title h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #444;\n      }\n\n      .sub-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .sub-category-content.collapsed {\n        display: none;\n      }\n\n      /* Unit Family Styles */\n      .unit-family {\n        border-bottom: 1px solid #f0f0f0;\n        margin-left: 1rem;\n      }\n\n      .unit-family-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #fafbfc;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .unit-family-header:hover {\n        background: #f5f6f7;\n      }\n\n      .family-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .family-title h5 {\n        margin: 0;\n        font-size: 0.9rem;\n        color: #555;\n      }\n\n      .unit-family-content {\n        transition: all 0.3s ease;\n      }\n\n      .unit-family-content.collapsed {\n        display: none;\n      }\n\n      /* Expand Icons */\n      .expand-icon {\n        font-size: 0.8rem;\n        color: #666;\n        transition: transform 0.2s;\n      }\n\n      /* Action Buttons */\n      .category-actions,\n      .subcategory-actions,\n      .family-actions {\n        display: flex;\n        gap: 0.25rem;\n      }\n\n      .unit-group-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        border-bottom: 1px solid #eee;\n      }\n\n      .group-title {\n        display: flex;\n        flex-direction: column;\n        gap: 0.25rem;\n      }\n\n      .hierarchy {\n        font-size: 0.75rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      .unit-group-header h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #333;\n      }\n\n      .group-actions {\n        display: flex;\n        gap: 0.5rem;\n      }\n\n      .btn-xs {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.75rem;\n        border-radius: 3px;\n      }\n\n      /* Unit Cards Grid */\n      .unit-family-content {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 0.5rem;\n        padding: 0.75rem;\n        background: white;\n      }\n\n      .unit-card {\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        padding: 0.75rem;\n        cursor: pointer;\n        transition: all 0.2s;\n        background: white;\n      }\n\n      .unit-card:hover {\n        border-color: #007bff;\n        box-shadow: 0 2px 4px rgba(0,123,255,0.1);\n      }\n\n      .unit-card.selected {\n        border-color: #28a745;\n        background: #f8fff9;\n        box-shadow: 0 2px 4px rgba(40,167,69,0.2);\n      }\n\n      .unit-card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 0.5rem;\n      }\n\n      .unit-name {\n        font-weight: 600;\n        color: #333;\n        font-size: 0.9rem;\n        line-height: 1.2;\n      }\n\n      .unit-cost {\n        font-size: 0.8rem;\n        color: #666;\n        white-space: nowrap;\n      }\n\n      .unit-stats {\n        display: flex;\n        gap: 1rem;\n        margin-bottom: 0.5rem;\n      }\n\n      .stat {\n        font-size: 0.8rem;\n        color: #555;\n      }\n\n      .unit-types {\n        font-size: 0.75rem;\n        color: #777;\n        font-style: italic;\n      }\n\n      .no-units {\n        text-align: center;\n        padding: 2rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 768px) {\n        .main-title {\n          font-size: 2rem;\n        }\n\n        .section-title {\n          font-size: 1.3rem;\n        }\n\n        .large-input {\n          width: 100%;\n          font-size: 1.1rem;\n        }\n\n        .action-buttons {\n          flex-direction: column;\n          align-items: center;\n        }\n\n        .large-btn {\n          width: 100%;\n          max-width: 300px;\n        }\n\n        .unit-family-content {\n          grid-template-columns: 1fr;\n        }\n\n        .filter-tabs {\n          flex-direction: column;\n        }\n\n        .selected-units-summary {\n          flex-direction: column;\n          gap: 0.5rem;\n          align-items: stretch;\n        }\n\n        .data-table {\n          font-size: 0.8rem;\n        }\n\n        .data-table th,\n        .data-table td {\n          padding: 0.3rem;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Load initial unit data\n   */\n  private async loadInitialData(): Promise<void> {\n    try {\n\n\n      await this.unitLoader.loadUnits('./final_units.json');\n\n\n\n      this.displayUnitList();\n      this.updateOptimizeButton();\n\n    } catch (error) {\n      console.error('Failed to load unit data:', error);\n    }\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    const unitSearch = document.getElementById('unit-search') as HTMLInputElement;\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const clearBtn = document.getElementById('clear-btn') as HTMLButtonElement;\n    const selectAllVisible = document.getElementById('select-all-visible') as HTMLButtonElement;\n    const clearSelection = document.getElementById('clear-selection') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    if (unitSearch) {\n      unitSearch.addEventListener('input', () => this.filterAndDisplayUnits());\n    }\n\n    if (unitTypeFilter) {\n      unitTypeFilter.addEventListener('change', () => this.filterAndDisplayUnits());\n    }\n\n    if (optimizeBtn) {\n      optimizeBtn.addEventListener('click', () => this.optimizeArmy());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (selectAllVisible) {\n      selectAllVisible.addEventListener('click', () => this.selectAllVisible());\n    }\n\n    if (clearSelection) {\n      clearSelection.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (leadershipBudget) {\n      leadershipBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    if (dominanceBudget) {\n      dominanceBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    // Filter tab listeners\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.classList.contains('filter-tab')) {\n        this.handleFilterTabClick(target);\n      }\n    });\n  }\n\n\n\n  /**\n   * Display unit list with initial setup\n   */\n  private displayUnitList(): void {\n    this.setupUnitTypeFilter();\n    this.updateFilterTabCounts();\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Setup unit type filter dropdown\n   */\n  private setupUnitTypeFilter(): void {\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    if (!unitTypeFilter) return;\n\n    const allTypes = this.unitLoader.getUniqueUnitTypes();\n    unitTypeFilter.innerHTML = '<option value=\"\">All Unit Types</option>';\n\n    allTypes.forEach(type => {\n      const option = document.createElement('option');\n      option.value = type;\n      option.textContent = type;\n      unitTypeFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Update filter tab counts\n   */\n  private updateFilterTabCounts(): void {\n    const allUnits = this.unitLoader.getAllUnits();\n    const tabs = document.querySelectorAll('.filter-tab');\n\n    tabs.forEach(tab => {\n      const filter = tab.getAttribute('data-filter');\n      let count = 0;\n\n      if (filter === 'all') {\n        count = allUnits.length;\n      } else {\n        count = allUnits.filter(unit => this.getMainCategory(unit) === filter).length;\n      }\n\n      tab.textContent = `${filter === 'all' ? 'All' : filter} (${count})`;\n    });\n  }\n\n  /**\n   * Handle filter tab clicks\n   */\n  private handleFilterTabClick(tab: HTMLElement): void {\n    // Update active tab\n    document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));\n    tab.classList.add('active');\n\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Filter and display units based on current filters\n   */\n  private filterAndDisplayUnits(): void {\n    const searchQuery = (document.getElementById('unit-search') as HTMLInputElement)?.value || '';\n    const activeTab = document.querySelector('.filter-tab.active')?.getAttribute('data-filter') || 'all';\n    const unitTypeFilter = (document.getElementById('unit-type-filter') as HTMLSelectElement)?.value || '';\n\n    let units = this.unitLoader.getAllUnits();\n\n    // Apply main category filter\n    if (activeTab !== 'all') {\n      units = units.filter(unit => this.getMainCategory(unit) === activeTab);\n    }\n\n    // Apply unit type filter\n    if (unitTypeFilter) {\n      units = units.filter(unit => unit.unit_types.includes(unitTypeFilter));\n    }\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      units = units.filter(unit =>\n        unit.name.toLowerCase().includes(query) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(query))\n      );\n    }\n\n    this.renderGroupedUnits(units);\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Render units in hierarchical tree structure\n   */\n  private renderGroupedUnits(units: Unit[]): void {\n    const unitGroupsElement = document.getElementById('unit-groups');\n    if (!unitGroupsElement) return;\n\n    unitGroupsElement.innerHTML = '';\n\n    if (units.length === 0) {\n      unitGroupsElement.innerHTML = '<div class=\"no-units\">No units match your filters</div>';\n      return;\n    }\n\n    // Create hierarchical tree structure\n    const hierarchicalGroups = this.createHierarchicalGroups(units);\n\n    // Render main categories\n    Object.entries(hierarchicalGroups).forEach(([mainCategory, subCategories]) => {\n      const mainElement = this.createMainCategoryElement(mainCategory, subCategories);\n      unitGroupsElement.appendChild(mainElement);\n    });\n\n    // Attach all event listeners after DOM is created\n    this.attachAllEventListeners(hierarchicalGroups);\n  }\n\n  /**\n   * Create hierarchical group structure for tree display\n   */\n  private createHierarchicalGroups(units: Unit[]): Record<string, Record<string, Record<string, Unit[]>>> {\n    const hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>> = {\n      'Guardsmen': {},\n      'Specialists': {},\n      'Engineer Corps': {},\n      'Monsters': {},\n      'Mercenaries': {}\n    };\n\n    units.forEach(unit => {\n      const mainCategory = this.getMainCategory(unit);\n      const subCategory = this.getSubCategory(unit);\n      const familyName = this.getUnitFamily(unit);\n\n      if (!hierarchicalGroups[mainCategory][subCategory]) {\n        hierarchicalGroups[mainCategory][subCategory] = {};\n      }\n      if (!hierarchicalGroups[mainCategory][subCategory][familyName]) {\n        hierarchicalGroups[mainCategory][subCategory][familyName] = [];\n      }\n\n      hierarchicalGroups[mainCategory][subCategory][familyName].push(unit);\n    });\n\n    // Sort units within each family by strength\n    Object.values(hierarchicalGroups).forEach(subCategories => {\n      Object.values(subCategories).forEach(families => {\n        Object.values(families).forEach(units => {\n          units.sort((a, b) => a.strength - b.strength);\n        });\n      });\n    });\n\n    return hierarchicalGroups;\n  }\n\n  /**\n   * Determine main category for a unit based on actual unit_types\n   */\n  private getMainCategory(unit: Unit): string {\n    // Check if it's a mercenary first\n    if (unit.cost_type === 'Mercenary' || unit.authority_cost > 0) {\n      return 'Mercenaries';\n    }\n\n    // Check unit types for category indicators (case-sensitive to match data)\n    const types = unit.unit_types;\n\n    // Engineer Corps: explicitly marked or siege engines\n    if (types.includes('Engineer corps') || types.includes('Siege engine')) {\n      return 'Engineer Corps';\n    }\n\n    // Guardsmen: explicitly marked as Guardsman\n    if (types.includes('Guardsman')) {\n      return 'Guardsmen';\n    }\n\n    // Specialists: explicitly marked as Specialist\n    if (types.includes('Specialist')) {\n      return 'Specialists';\n    }\n\n    // Monsters: non-human creatures (Beast, Dragon, Giant, Elemental, Flying creatures without Human)\n    if (types.includes('Beast') || types.includes('Dragon') || types.includes('Giant') ||\n        types.includes('Elemental') || types.includes('ELEMENTAL')) {\n      return 'Monsters';\n    }\n\n    // Flying units without Human are typically monsters\n    if (types.includes('Flying') && !types.includes('Human')) {\n      return 'Monsters';\n    }\n\n    // Remaining units are likely specialists or guardsmen\n    // If they have Human and basic combat types, they're probably guardsmen\n    if (types.includes('Human') && (types.includes('Melee') || types.includes('Ranged') || types.includes('Mounted'))) {\n      return 'Guardsmen';\n    }\n\n    // Default to Specialists for edge cases\n    return 'Specialists';\n  }\n\n  /**\n   * Determine subcategory for a unit based on combat role/type\n   */\n  private getSubCategory(unit: Unit): string {\n    const types = unit.unit_types;\n    const name = unit.name.toUpperCase();\n    const mainCategory = this.getMainCategory(unit);\n\n    // For Mercenaries, group by type\n    if (mainCategory === 'Mercenaries') {\n      if (types.includes('Guardsman')) return 'Elite Forces';\n      return 'Special Forces';\n    }\n\n    // For Engineer Corps, group by siege engine type\n    if (mainCategory === 'Engineer Corps') {\n      if (name.includes('CATAPULT')) return 'Catapults';\n      if (name.includes('BALLISTA')) return 'Ballistae';\n      if (name.includes('JOSEPHINE')) return 'Heavy Artillery';\n      if (types.includes('Siege engine')) return 'Siege Engines';\n    }\n\n    // For Monsters, group by creature type\n    if (mainCategory === 'Monsters') {\n      if (types.includes('Dragon')) return 'Dragons';\n      if (types.includes('Giant')) return 'Giants';\n      if (types.includes('Beast')) return 'Beasts';  // Flying Beasts go into Beasts\n      if (types.includes('Elemental') || types.includes('ELEMENTAL')) return 'Elementals';\n      if (types.includes('Flying')) return 'Flying';\n    }\n\n    // For Guardsmen and Specialists, group by combat role (your requested categories)\n    if (mainCategory === 'Guardsmen' || mainCategory === 'Specialists') {\n      if (types.includes('Ranged')) return 'Ranged';\n      if (types.includes('Melee')) return 'Melee';\n      if (types.includes('Mounted')) return 'Mounted';\n      if (types.includes('Flying')) return 'Flying';  // Flying Beasts go into Flying\n      if (types.includes('Beast')) return 'Flying';   // Non-flying Beasts also go into Flying for Specialists\n      if (types.includes('Scout')) return 'Scouts';\n    }\n\n    // Fallback groupings\n    if (types.includes('Human')) return 'Infantry';\n\n    return 'Other';\n  }\n\n  /**\n   * Get unit family name (base unit name without tier)\n   */\n  private getUnitFamily(unit: Unit): string {\n    // Extract base name by removing Roman numerals and common suffixes\n    let baseName = unit.name;\n\n    // Remove Roman numerals (I, II, III, IV, V, VI, VII)\n    baseName = baseName.replace(/\\s+(I{1,3}|IV|V|VI{0,2}|VII)$/, '');\n\n    // Handle special cases\n    if (baseName.includes('HEAVY ')) {\n      return baseName; // Keep \"HEAVY KNIGHT\", \"HEAVY HALBERDIER\", etc.\n    }\n\n    return baseName;\n  }\n\n  /**\n   * Create main category element (e.g., \"Guardsmen\")\n   */\n  private createMainCategoryElement(mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): HTMLElement {\n    const mainDiv = document.createElement('div');\n    mainDiv.className = 'main-category';\n\n    const totalUnits = this.countUnitsInCategory(subCategories);\n    const selectedUnits = this.countSelectedUnitsInCategory(subCategories);\n\n    mainDiv.innerHTML = `\n      <div class=\"main-category-header\" data-category=\"${mainCategory}\">\n        <div class=\"category-title\">\n          <h3>${mainCategory} (${selectedUnits}/${totalUnits})</h3>\n          <span class=\"expand-icon\">▼</span>\n        </div>\n        <div class=\"category-actions\">\n          <button class=\"btn btn-xs select-category\" data-category=\"${mainCategory}\">Select All</button>\n          <button class=\"btn btn-xs deselect-category\" data-category=\"${mainCategory}\">Deselect All</button>\n        </div>\n      </div>\n      <div class=\"main-category-content collapsed\">\n        ${Object.entries(subCategories).map(([subCategory, families]) =>\n          this.createSubCategoryHTML(mainCategory, subCategory, families)\n        ).join('')}\n      </div>\n    `;\n\n    return mainDiv;\n  }\n\n  /**\n   * Create sub category HTML string\n   */\n  private createSubCategoryHTML(mainCategory: string, subCategory: string, families: Record<string, Unit[]>): string {\n    const totalUnits = Object.values(families).reduce((sum, units) => sum + units.length, 0);\n    const selectedUnits = Object.values(families).reduce((sum, units) =>\n      sum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0);\n\n    return `\n      <div class=\"sub-category\" data-category=\"${mainCategory}\" data-subcategory=\"${subCategory}\">\n        <div class=\"sub-category-header\">\n          <div class=\"subcategory-title\">\n            <h4>${subCategory} (${selectedUnits}/${totalUnits})</h4>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"subcategory-actions\">\n            <button class=\"btn btn-xs select-subcategory\">Select All</button>\n            <button class=\"btn btn-xs deselect-subcategory\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"sub-category-content collapsed\">\n          ${Object.entries(families).map(([familyName, units]) =>\n            this.createUnitFamilyHTML(familyName, units)\n          ).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create unit family HTML string\n   */\n  private createUnitFamilyHTML(familyName: string, units: Unit[]): string {\n    const selectedUnits = units.filter(unit => this.selectedUnits.has(unit.name)).length;\n\n    return `\n      <div class=\"unit-family\" data-family=\"${familyName}\">\n        <div class=\"unit-family-header\">\n          <div class=\"family-title\">\n            <h5>${familyName} (${selectedUnits}/${units.length})</h5>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"family-actions\">\n            <button class=\"btn btn-xs select-family\">Select All</button>\n            <button class=\"btn btn-xs deselect-family\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"unit-family-content collapsed\">\n          ${units.map(unit => this.createUnitCard(unit)).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create a compact unit card\n   */\n  private createUnitCard(unit: Unit): string {\n    const isSelected = this.selectedUnits.has(unit.name);\n    const cost = this.getUnitCost(unit);\n\n    return `\n      <div class=\"unit-card ${isSelected ? 'selected' : ''}\" data-unit=\"${unit.name}\">\n        <div class=\"unit-card-header\">\n          <div class=\"unit-name\">${unit.name}</div>\n          <div class=\"unit-cost\">${unit.cost_type}: ${cost}</div>\n        </div>\n        <div class=\"unit-stats\">\n          <span class=\"stat\">HP: ${unit.health.toLocaleString()}</span>\n          <span class=\"stat\">STR: ${unit.strength.toLocaleString()}</span>\n        </div>\n        <div class=\"unit-types\">${unit.unit_types.slice(0, 3).join(', ')}${unit.unit_types.length > 3 ? '...' : ''}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Attach all event listeners after DOM is created\n   */\n  private attachAllEventListeners(hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>>): void {\n    // Attach main category listeners\n    document.querySelectorAll('.main-category').forEach((mainElement, index) => {\n      const mainCategories = Object.keys(hierarchicalGroups);\n      const mainCategory = mainCategories[index];\n      if (mainCategory) {\n        const subCategories = hierarchicalGroups[mainCategory];\n        this.attachMainCategoryListeners(mainElement as HTMLElement, mainCategory, subCategories);\n      }\n    });\n\n    // Attach sub category listeners\n    document.querySelectorAll('.sub-category').forEach((subElement) => {\n      const mainCategory = subElement.getAttribute('data-category');\n      const subCategory = subElement.getAttribute('data-subcategory');\n\n      if (mainCategory && subCategory && hierarchicalGroups[mainCategory]?.[subCategory]) {\n        const families = hierarchicalGroups[mainCategory][subCategory];\n        this.attachSubCategoryListeners(subElement as HTMLElement, families);\n      }\n    });\n\n    // Attach unit family listeners\n    document.querySelectorAll('.unit-family').forEach((familyElement) => {\n      const familyName = familyElement.getAttribute('data-family');\n\n      // Find the units for this family\n      let units: Unit[] = [];\n      Object.values(hierarchicalGroups).forEach(subCategories => {\n        Object.values(subCategories).forEach(families => {\n          if (families[familyName!]) {\n            units = families[familyName!];\n          }\n        });\n      });\n\n      if (units.length > 0) {\n        this.attachUnitFamilyListeners(familyElement as HTMLElement, units);\n      }\n    });\n  }\n\n  /**\n   * Count total units in a category\n   */\n  private countUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) => familySum + units.length, 0), 0);\n  }\n\n  /**\n   * Count selected units in a category\n   */\n  private countSelectedUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) =>\n        familySum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0), 0);\n  }\n\n  /**\n   * Attach event listeners to main category\n   */\n  private attachMainCategoryListeners(element: HTMLElement, mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): void {\n    const header = element.querySelector('.main-category-header') as HTMLElement;\n    const content = element.querySelector('.main-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing main-category elements for', mainCategory, { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Main category header clicked:', mainCategory, 'collapsed:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in category\n    const selectBtn = element.querySelector('.select-category') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-category') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInCategory(subCategories);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInCategory(subCategories);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to sub category\n   */\n  private attachSubCategoryListeners(element: HTMLElement, families: Record<string, Unit[]>): void {\n    const header = element.querySelector('.sub-category-header') as HTMLElement;\n    const content = element.querySelector('.sub-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing sub-category elements:', { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Sub-category header clicked, toggling:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in subcategory\n    const selectBtn = element.querySelector('.select-subcategory') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-subcategory') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInFamilies(families);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInFamilies(families);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to unit family\n   */\n  private attachUnitFamilyListeners(element: HTMLElement, units: Unit[]): void {\n    const header = element.querySelector('.unit-family-header') as HTMLElement;\n    const content = element.querySelector('.unit-family-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      if ((e.target as HTMLElement).classList.contains('btn')) return;\n\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in family\n    const selectBtn = element.querySelector('.select-family') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-family') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllUnits(units);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllUnits(units);\n      });\n    }\n\n    // Individual unit selection\n    const unitCards = element.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      card.addEventListener('click', () => {\n        const unitName = card.getAttribute('data-unit');\n        if (unitName) {\n          const unit = this.unitLoader.getUnitByName(unitName);\n          if (unit) {\n            this.toggleUnitSelection(unit);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Get unit cost for display\n   */\n  private getUnitCost(unit: Unit): number {\n    switch (unit.cost_type) {\n      case 'Leadership': return unit.leadership_cost;\n      case 'Dominance': return unit.dominance_cost;\n      case 'Authority':\n      case 'Mercenary': return unit.authority_cost;\n      default: return 0;\n    }\n  }\n\n  /**\n   * Toggle unit selection\n   */\n  private toggleUnitSelection(unit: Unit): void {\n    if (this.selectedUnits.has(unit.name)) {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    } else {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary') {\n        this.mercenaryLimits[unit.name] = 1; // Default limit\n      }\n    }\n\n    this.updateSelectionDisplay(); // Update selection without rebuilding\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Update selection display without rebuilding the tree\n   */\n  private updateSelectionDisplay(): void {\n    // Update unit card selection states\n    document.querySelectorAll('.unit-card').forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        if (this.selectedUnits.has(unitName)) {\n          card.classList.add('selected');\n        } else {\n          card.classList.remove('selected');\n        }\n      }\n    });\n\n    // Update all counters in headers\n    this.updateAllCounters();\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Update all selection counters in headers\n   */\n  private updateAllCounters(): void {\n    // Update main category counters\n    document.querySelectorAll('.main-category').forEach((element, index) => {\n      const titleElement = element.querySelector('.category-title h3');\n      if (titleElement) {\n        const mainCategories = ['Guardsmen', 'Specialists', 'Engineer Corps', 'Monsters', 'Mercenaries'];\n        const mainCategory = mainCategories[index];\n        if (mainCategory) {\n          const { selected, total } = this.countUnitsInMainCategory(mainCategory);\n          const originalText = titleElement.textContent || '';\n          const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n          titleElement.textContent = `${baseText} (${selected}/${total})`;\n        }\n      }\n    });\n\n    // Update sub category counters\n    document.querySelectorAll('.sub-category').forEach(element => {\n      const titleElement = element.querySelector('.subcategory-title h4');\n      const mainCategory = element.getAttribute('data-category');\n      const subCategory = element.getAttribute('data-subcategory');\n\n      if (titleElement && mainCategory && subCategory) {\n        const { selected, total } = this.countUnitsInSubCategory(mainCategory, subCategory);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n\n    // Update family counters\n    document.querySelectorAll('.unit-family').forEach(element => {\n      const titleElement = element.querySelector('.family-title h5');\n      const familyName = element.getAttribute('data-family');\n\n      if (titleElement && familyName) {\n        const { selected, total } = this.countUnitsInFamily(familyName);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n  }\n\n  /**\n   * Count units in main category\n   */\n  private countUnitsInMainCategory(mainCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const categoryUnits = allUnits.filter(unit => this.getMainCategory(unit) === mainCategory);\n    const selectedCount = categoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: categoryUnits.length };\n  }\n\n  /**\n   * Count units in sub category\n   */\n  private countUnitsInSubCategory(mainCategory: string, subCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const subCategoryUnits = allUnits.filter(unit =>\n      this.getMainCategory(unit) === mainCategory && this.getSubCategory(unit) === subCategory\n    );\n    const selectedCount = subCategoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: subCategoryUnits.length };\n  }\n\n  /**\n   * Count units in family\n   */\n  private countUnitsInFamily(familyName: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const familyUnits = allUnits.filter(unit => this.getUnitFamily(unit) === familyName);\n    const selectedCount = familyUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: familyUnits.length };\n  }\n\n  /**\n   * Update selected units summary\n   */\n  private updateSelectedSummary(): void {\n    const selectedCountElement = document.getElementById('selected-count');\n    if (selectedCountElement) {\n      selectedCountElement.textContent = `${this.selectedUnits.size} units selected`;\n    }\n  }\n\n  /**\n   * Select all visible units\n   */\n  private selectAllVisible(): void {\n    const visibleUnitCards = document.querySelectorAll('.unit-card');\n    visibleUnitCards.forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        const unit = this.unitLoader.getUnitByName(unitName);\n        if (unit) {\n          this.selectedUnits.add(unit.name);\n          if (unit.cost_type === 'Mercenary') {\n            this.mercenaryLimits[unit.name] = 1;\n          }\n        }\n      }\n    });\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Select all units in a category\n   */\n  private selectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.selectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Deselect all units in a category\n   */\n  private deselectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.deselectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Select all units in families\n   */\n  private selectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.selectAllUnits(units);\n    });\n  }\n\n  /**\n   * Deselect all units in families\n   */\n  private deselectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.deselectAllUnits(units);\n    });\n  }\n\n  /**\n   * Select all units in array\n   */\n  private selectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary') {\n        this.mercenaryLimits[unit.name] = 1;\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Deselect all units in array\n   */\n  private deselectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Update mercenary limits UI\n   */\n  private updateMercenaryLimits(): void {\n    const mercenaryLimitsElement = document.getElementById('mercenary-limits');\n    if (!mercenaryLimitsElement) return;\n\n    const mercenaryUnits = Array.from(this.selectedUnits)\n      .map(name => this.unitLoader.getUnitByName(name))\n      .filter(unit => unit && unit.cost_type === 'Mercenary');\n\n    if (mercenaryUnits.length === 0) {\n      mercenaryLimitsElement.innerHTML = '<p class=\"text-muted\">Select mercenary units to set limits</p>';\n      return;\n    }\n\n    mercenaryLimitsElement.innerHTML = '';\n\n    mercenaryUnits.forEach(unit => {\n      if (!unit) return;\n\n      const mercItem = document.createElement('div');\n      mercItem.className = 'mercenary-item';\n\n      mercItem.innerHTML = `\n        <div class=\"mercenary-label\">\n          <span class=\"unit-name\">🗡️ ${unit.name}</span>\n          <span class=\"unit-stats\">(STR: ${unit.strength}, HP: ${unit.health})</span>\n        </div>\n        <div class=\"mercenary-input\">\n          <label for=\"merc-${unit.name}\">Max Available:</label>\n          <input type=\"number\" id=\"merc-${unit.name}\" min=\"1\" max=\"100\" value=\"${this.mercenaryLimits[unit.name] || 1}\"\n                 data-unit=\"${unit.name}\" class=\"input\" placeholder=\"1\">\n        </div>\n      `;\n\n      const input = mercItem.querySelector('input') as HTMLInputElement;\n      input.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        this.mercenaryLimits[target.dataset.unit!] = parseInt(target.value) || 1;\n      });\n\n      mercenaryLimitsElement.appendChild(mercItem);\n    });\n  }\n\n\n\n  /**\n   * Update optimize button state\n   */\n  private updateOptimizeButton(): void {\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    if (!optimizeBtn || !leadershipBudget || !dominanceBudget) return;\n\n    const hasUnits = this.selectedUnits.size > 0;\n    const hasBudget = parseInt(leadershipBudget.value) > 0 ||\n                     parseInt(dominanceBudget.value) > 0 ||\n                     Object.keys(this.mercenaryLimits).length > 0;\n\n    optimizeBtn.disabled = !hasUnits || !hasBudget;\n  }\n\n  /**\n   * Optimize army composition\n   */\n  private async optimizeArmy(): Promise<void> {\n    try {\n      this.showLoadingModal();\n\n      const selectedUnitObjects = this.unitLoader.getAvailableUnits(Array.from(this.selectedUnits));\n      this.optimizer = new StackingOptimizer(selectedUnitObjects);\n\n      const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n      const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n      const constraints: OptimizationConstraints = {\n        leadershipBudget: parseInt(leadershipBudget.value) || 0,\n        dominanceBudget: parseInt(dominanceBudget.value) || 0,\n        mercenaryLimits: { ...this.mercenaryLimits },\n        availableUnits: Array.from(this.selectedUnits)\n      };\n\n      const result = await this.optimizer.optimizeArmy(constraints);\n\n      this.displayResults(result);\n\n    } catch (error) {\n      console.error('Optimization failed:', error);\n      alert('Optimization failed. Please check your inputs and try again.');\n    } finally {\n      this.hideLoadingModal();\n    }\n  }\n\n  /**\n   * Display optimization results\n   */\n  private displayResults(result: any): void {\n    const optimizationStats = document.getElementById('optimization-stats');\n    const armyCompositions = document.getElementById('army-compositions');\n    const resultsSection = document.getElementById('results-section');\n\n    if (!optimizationStats || !armyCompositions || !resultsSection) return;\n\n    // Display optimization statistics\n    optimizationStats.innerHTML = `\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.compositions.length}</div>\n        <div class=\"stat-label\">Valid Solutions</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.totalCombinationsEvaluated.toLocaleString()}</div>\n        <div class=\"stat-label\">Combinations Tested</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${Math.round(result.executionTimeMs)}ms</div>\n        <div class=\"stat-label\">Execution Time</div>\n      </div>\n    `;\n\n    // Display army compositions\n    armyCompositions.innerHTML = '';\n\n    if (result.compositions.length === 0) {\n      armyCompositions.innerHTML = '<p class=\"text-center text-muted\">No valid army compositions found. Try adjusting your constraints.</p>';\n    } else {\n      result.compositions.forEach((composition: ArmyComposition, index: number) => {\n        const compositionDiv = this.createCompositionElement(composition, index + 1);\n        armyCompositions.appendChild(compositionDiv);\n      });\n    }\n\n    resultsSection.classList.remove('hidden');\n\n    // Show battle simulation section if we have valid compositions\n    if (result.compositions.length > 0) {\n      this.currentOptimizedArmy = result.compositions[0]; // Use the best composition\n      this.showBattleSimulation();\n    }\n  }\n\n  /**\n   * Show battle simulation section\n   */\n  private showBattleSimulation(): void {\n    if (!this.currentOptimizedArmy) return;\n\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (!battleContainer) return;\n\n    // Initialize battle simulation component if not already done\n    if (!this.battleSimulation) {\n      this.battleSimulation = new BattleSimulationComponent();\n    }\n\n    // Mount the battle simulation component\n    this.battleSimulation.mount(battleContainer, this.currentOptimizedArmy);\n\n    // Show the container\n    battleContainer.classList.remove('hidden');\n\n    // Scroll to battle simulation section\n    setTimeout(() => {\n      battleContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }, 100);\n  }\n\n  /**\n   * Create composition element\n   */\n  private createCompositionElement(composition: ArmyComposition, rank: number): HTMLElement {\n    const div = document.createElement('div');\n    div.className = 'army-composition';\n\n    // Use the new cleaner format from the optimizer\n    const cleanFormat = this.optimizer?.explainStacking(composition) || 'No stacking explanation available';\n\n    // Create the header with solution info\n    const header = `\n      <div class=\"composition-header\">\n        <div class=\"composition-title\">Solution ${rank} ${composition.isValidStacking ? '✅' : '❌'}</div>\n        <div class=\"composition-score\">Efficiency: ${composition.efficiencyScore.toFixed(2)}</div>\n      </div>\n    `;\n\n    // Convert the clean format to HTML with proper styling\n    const formattedContent = cleanFormat\n      .split('\\n')\n      .map(line => {\n        // Headers with special characters\n        if (line.includes('🏆 OPTIMIZED ARMY COMPOSITION')) {\n          return `<h3 class=\"army-title\">${line}</h3>`;\n        }\n        if (line.includes('═'.repeat(60))) {\n          return '<hr class=\"title-divider\">';\n        }\n        if (line.includes('📊 ARMY SUMMARY') || line.includes('🗡️ MERCENARY FORCES') ||\n            line.includes('👑 LEADERSHIP FORCES') || line.includes('⚡ DOMINANCE FORCES') ||\n            line.includes('⚔️ BATTLE ORDER')) {\n          return `<h4 class=\"section-header\">${line}</h4>`;\n        }\n        if (line.includes('─'.repeat(30)) || line.includes('─'.repeat(40))) {\n          return '<hr class=\"section-divider\">';\n        }\n        // Unit entries with indentation\n        if (line.includes('└─')) {\n          return `<div class=\"unit-detail\">${line}</div>`;\n        }\n        // Regular unit lines\n        if (line.trim() && !line.includes('═') && !line.includes('─')) {\n          return `<div class=\"unit-line\">${line}</div>`;\n        }\n        // Empty lines for spacing\n        if (line.trim() === '') {\n          return '<div class=\"spacing\"></div>';\n        }\n        return '';\n      })\n      .filter(line => line !== '')\n      .join('');\n\n    div.innerHTML = header + '<div class=\"composition-content\">' + formattedContent + '</div>';\n\n    return div;\n  }\n\n  /**\n   * Clear selection\n   */\n  private clearSelection(): void {\n    this.selectedUnits.clear();\n    this.mercenaryLimits = {};\n    this.currentOptimizedArmy = null;\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const resultsSection = document.getElementById('results-section');\n    const battleContainer = document.getElementById('battle-simulation-container');\n\n    if (leadershipBudget) leadershipBudget.value = '0';\n    if (dominanceBudget) dominanceBudget.value = '0';\n    if (resultsSection) resultsSection.classList.add('hidden');\n    if (battleContainer) battleContainer.classList.add('hidden');\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Show loading modal\n   */\n  private showLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Hide loading modal\n   */\n  private hideLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.add('hidden');\n    }\n  }\n}\n","/**\n * Main entry point for the TotalBattle Army Calculator\n */\n\nimport './style.css';\nimport { ArmyCalculatorApp } from './components/ArmyCalculator/ArmyCalculatorApp';\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n  const appContainer = document.getElementById('app');\n  \n  if (!appContainer) {\n    throw new Error('App container not found');\n  }\n\n  // Create and mount the main application\n  const app = new ArmyCalculatorApp();\n  app.mount(appContainer);\n\n  // Add global error handling\n  window.addEventListener('error', (event) => {\n    console.error('Global error:', event.error);\n    // You could add error reporting here\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason);\n    // You could add error reporting here\n  });\n\n  // Add service worker registration for PWA (future enhancement)\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      // Service worker registration would go here\n      console.log('Service worker support detected');\n    });\n  }\n\n  console.log('TotalBattle Army Calculator initialized');\n});\n"],"names":["UnitUtils","unit","cost","UnitLoader","__publicField","source","unitsData","response","unitData","error","costType","a","b","name","availableUnitNames","availableUnits","filter","filtered","u","type","query","lowerQuery","strengths","healths","types","StackingOptimizer","constraints","startTime","validCompositions","compositions","totalCombinations","armyUnits","composition","endTime","leadershipUnits","dominanceUnits","mercenaryUnits","combinedArmies","comp","hasLeadership","hasDominance","hasMercenary","hasType","aBudgetUsage","selectedLeadershipUnits","selectedDominanceUnits","selectedMercenaryUnits","leadershipMercenaryUnits","allUnits","properComposition","dominanceComposition","mercenaryComposition","combinedComposition","mercComposition","limit","leadershipBudget","mercenaryLimits","pattern","strongestUnit","i","currentUnit","strongerUnit","strongerTotalHealth","requiredQuantity","sortedUnits","basePattern","strongestTotalHealth","quantityNeeded","unitType","nextUnit","currentTotalHealth","nextTotalHealth","baseCost","unitName","quantity","baseQuantity","maxStacks","scaledQuantity","mercenaryLimit","dominanceBudget","total","stacksFromThisMerc","dominanceCostPerStack","pureMercComp","maxStacksByBudget","maxStacksByMercenaries","maxCombinedStacks","stacks","baseQty","remainingBudget","dominanceOnlyComps","finalMercenaryState","dominanceComp","combinedComp","units","budget","costProperty","unitCost","maxMultiplier","multiplier","scaledComposition","allLeadershipMercenaryUnits","leadershipCompositions","maxLeadershipComp","leadershipComp","strongestDominanceUnit","comparisonLeadershipUnit","comparisonUnitQuantity","comparisonTotalHealth","strongestDominanceHealth","independentDominanceComps","maxDominanceComp","targetUnit","closestUnit","smallestDifference","difference","maxTotalHealth","maxQuantityByHealth","maxQuantityByBudget","maxQuantity","strongestQty","testComposition","usedBudget","weakerUnit","requiredForStacking","maxByBudget","totalDominanceHealth","qty","baseUnits","baseBudget","baseCompositions","baseComp","strongestMercenary","comparisonBaseUnit","strongestMercenaryHealth","mercenaryTotalHealth","maxMercenaryQuantity","mixedComp","sortedByHealth","totalHealth","alternativeComp","variations","strongestFocus","strongestCost","maxStrongest","minimalComposition","leadershipUsed","dominanceUsed","cheapestLeadership","focusedComposition","remaining","balancedComposition","budgetPerUnit","combinations","mercName","maxCount","newCombinations","combo","count","newCombo","totalStrength","totalLeadershipCost","totalDominanceCost","totalMercenaryCount","unitGroups","groupHealth","groupStrength","isValidStacking","stackingOrder","j","strongerGroupHealth","tolerance","totalCost","efficiencyScore","diversityBonus","costTypeCount","balanceBonus","lines","group","unitInfo","sum","typeIcon","BattleUtils","groupIndex","battlePhase","attackerGroup","enemyGroupIndex","damage","targetGroup","combatLog","action","totalDamage","playerAttacks","enemyAttacks","damageByUnitType","attacksByUnitType","result","stats","BATTLE_CONSTANTS","BattleSimulationService","config","state","statistics","playerArmy","enemyGroupCount","bestCaseConfig","bestCase","worstCaseConfig","worstCase","comparison","groups","playerGoesFirst","playerTurnsTaken","enemyTurnsTaken","maxPlayerTurns","maxEnemyTurns","totalTurns","turnIndex","attackIndex","currentAttackOrder","attackingGroup","targetEnemyIndex","currentTargetOrder","BattleSimulationComponent","container","army","runBtn","clearBtn","enemyGroupsInput","input","value","isValid","enemyGroups","resultsContainer","logTabs","tab","e","target","scenario","t","log","activeLog","show","loadingEl","resultsEl","message","style","ArmyCalculatorApp","unitSearch","unitTypeFilter","optimizeBtn","selectAllVisible","clearSelection","allTypes","option","searchQuery","_a","activeTab","_b","_c","unitGroupsElement","hierarchicalGroups","mainCategory","subCategories","mainElement","subCategory","familyName","families","baseName","mainDiv","totalUnits","selectedUnits","isSelected","index","subElement","familyElement","familySum","element","header","content","expandIcon","selectBtn","deselectBtn","card","titleElement","selected","baseText","categoryUnits","subCategoryUnits","familyUnits","selectedCountElement","mercenaryLimitsElement","mercItem","hasUnits","hasBudget","selectedUnitObjects","optimizationStats","armyCompositions","resultsSection","compositionDiv","battleContainer","rank","div","cleanFormat","formattedContent","line","loadingModal","appContainer","event"],"mappings":"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"}