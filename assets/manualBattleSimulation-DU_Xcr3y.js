var v=Object.defineProperty;var p=(h,t,e)=>t in h?v(h,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):h[t]=e;var f=(h,t,e)=>p(h,typeof t!="symbol"?t+"":t,e);import{E as g,M as c}from"./main-BUFU8ldd.js";class A{constructor(t){f(this,"battleService");this.battleService=new g,t&&this.battleService.initialize(t)}async simulateBattle(t){const e=c.validateArmyConfiguration(t.playerArmy),n=c.validateArmyConfiguration(t.enemyArmy);if(!e.isValid||!n.isValid){const s=[...e.errors,...n.errors];throw new Error(`Invalid battle configuration: ${s.join(", ")}`)}const a=this.convertToEnemyUnitBattleConfig(t),r=this.battleService.simulateBattleWithEnemyUnits(a);return this.convertToManualBattleResult(r,t)}async simulateBothScenarios(t){var l,o,y;const e=c.validateArmyConfiguration(t.playerArmy),n=c.validateArmyConfiguration(t.enemyArmy);if(!e.isValid||!n.isValid){const i=[...e.errors,...n.errors];throw new Error(`Invalid battle configuration: ${i.join(", ")}`)}const a=this.convertToArmyComposition(t.playerArmy,"player"),r=this.convertToEnemyUnits(t.enemyArmy);console.log("ðŸ“Š Manual Battle Debug - Player Army:",{units:((l=t.playerArmy.units)==null?void 0:l.length)||0,stackingGroups:((o=a.stackingOrder)==null?void 0:o.length)||0,stackingDetails:(y=a.stackingOrder)==null?void 0:y.map(i=>`${i.unitName}: ${i.count} units, ${i.totalHealth} HP`)}),console.log("ðŸ“Š Manual Battle Debug - Enemy Units:",{enemyUnitsCount:r.length,enemyDetails:r.slice(0,3).map(i=>`${i.name}: ${i.health} HP, ${i.strength} STR`)});const s=this.battleService.simulateBothScenariosWithEnemyUnits(a,r),u=this.convertToManualBattleResult(s.bestCase,{...t,playerGoesFirst:!0}),m=this.convertToManualBattleResult(s.worstCase,{...t,playerGoesFirst:!1});return{bestCase:u,worstCase:m,comparison:s.comparison,manualConfiguration:t}}convertToEnemyUnitBattleConfig(t){const e=this.convertToArmyComposition(t.playerArmy,"player"),n=this.convertToEnemyUnits(t.enemyArmy);return{playerArmy:e,enemyUnits:n,playerGoesFirst:t.playerGoesFirst,useEnemyModifiers:!0}}convertToEnemyUnits(t){const e=[];for(const n of t.units){const a=n.unit,r=n.isInfinite?50:n.quantity;for(let s=0;s<r;s++)e.push({name:r>1?`${a.name} ${s+1}`:a.name,unit_types:a.unit_types,health:a.health,strength:a.strength,attack_modifiers:a.attack_modifiers||[]})}return e}convertToArmyComposition(t,e){const n=c.convertToStackingGroups(t);let a=0,r=0,s=0,u=0,m=0;const l={};for(const o of t.units){const y=o.isInfinite?999999:o.quantity,i=o.unit;l[i.name]=y,a+=y*i.strength,r+=y*i.health,s+=y*(i.leadership_cost||i.leadershipCost||0),u+=y*(i.dominance_cost||i.dominanceCost||0),(i.cost_type==="Mercenary"||i.class==="Mercenary")&&(m+=y)}return{units:l,totalStrength:a,totalHealth:r,totalLeadershipCost:s,totalDominanceCost:u,totalMercenaryCount:m,stackingOrder:n,isValidStacking:this.validateStacking(n),efficiencyScore:a/Math.max(s+u,1)}}validateStacking(t){if(t.length<=1)return!0;for(let e=1;e<t.length;e++)if(t[e-1].totalHealth>t[e].totalHealth)return!1;return!0}convertToManualBattleResult(t,e){return{...t,manualConfiguration:e,enemySurvivors:this.calculateEnemySurvivors(e.enemyArmy,t)}}calculateEnemySurvivors(t,e){return t.units.map(n=>({...n,quantity:(n.isInfinite,n.quantity),survived:!0}))}getBattleMetrics(t){const{bestCase:e,worstCase:n,comparison:a}=t;return{efficiency:{bestCaseEfficiency:e.totalDamageDealtToEnemies/e.battleDuration,worstCaseEfficiency:n.totalDamageDealtToEnemies/n.battleDuration,averageEfficiency:a.averageDamage/((e.battleDuration+n.battleDuration)/2)},consistency:{damageVariability:Math.abs(a.damageDifference)/a.averageDamage,survivalVariability:Math.abs(a.survivalDifference)/a.averageSurvival,overallConsistency:1-(Math.abs(a.damageDifference)+Math.abs(a.survivalDifference))/(a.averageDamage+a.averageSurvival)},playerArmyStats:this.getArmyStats(t.manualConfiguration.playerArmy),enemyArmyStats:this.getArmyStats(t.manualConfiguration.enemyArmy)}}getArmyStats(t){let e=0,n=0,a=0,r=0,s=t.units.length;const u={};for(const m of t.units){const l=m.unit,o=m.isInfinite?999999:m.quantity;m.isInfinite&&r++,e+=o,n+=o*l.strength,a+=o*l.health;for(const y of l.unit_types)u[y]||(u[y]={count:0,strength:0,health:0}),u[y].count+=o,u[y].strength+=o*l.strength,u[y].health+=o*l.health}return{totalUnits:e,totalStrength:n,totalHealth:a,averageStrengthPerUnit:e>0?n/e:0,averageHealthPerUnit:e>0?a/e:0,unitTypeCount:s,infiniteUnitTypes:r,hasInfiniteUnits:r>0,unitTypeBreakdown:u,strengthToHealthRatio:a>0?n/a:0}}validateConfiguration(t){const e=[],n=[],a=c.validateArmyConfiguration(t.playerArmy);e.push(...a.errors),n.push(...a.warnings);const r=c.validateArmyConfiguration(t.enemyArmy);e.push(...r.errors),n.push(...r.warnings);const s=this.calculateEnemyGroupCount(t.enemyArmy),u=t.playerArmy.units.reduce((l,o)=>l+(o.isInfinite?0:o.quantity),0);return s>50&&u<10&&n.push("Large enemy army vs small player army may result in very short battle"),s>80&&n.push("Very large enemy army may affect simulation performance"),t.enemyArmy.units.filter(l=>l.isInfinite).length>5&&n.push("Many infinite enemy unit types may make battle analysis less meaningful"),{isValid:e.length===0,errors:e,warnings:n}}}export{A as ManualBattleSimulationService};
//# sourceMappingURL=manualBattleSimulation-DU_Xcr3y.js.map
