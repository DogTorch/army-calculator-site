{"version":3,"mappings":"42DAyMO,MAAMA,CAAU,CAIrB,OAAO,aAAaC,EAAqB,CACvC,OAAOA,EAAK,YAAc,QAAaA,EAAK,UAAY,SAM1D,OAAO,YAAYA,EAAqB,CACtC,OAAOA,EAAK,YAAc,QAAaA,EAAK,UAAY,QAM1D,OAAO,cAAcA,EAAqB,CACxC,OAAOD,EAAU,YAAYC,CAAI,IAAMA,EAAK,WAAa,IAAQA,EAAK,QAAU,QAMlF,OAAO,gBAAgBA,EAAqB,CAC1C,OAAOD,EAAU,YAAYC,CAAI,GAAK,CAACD,EAAU,cAAcC,CAAI,EAMrE,OAAO,uBAAuBA,EAAgC,CAC5D,OAAOD,EAAU,cAAcC,CAAI,EAAIA,EAAK,MAAQ,OAMtD,OAAO,sBAAsBA,EAAoB,CAC/C,OAAIA,EAAK,gBAAkB,OAClBA,EAAK,eAGAA,EAAK,OAAS,GACbA,EAAK,OAMtB,OAAO,YAAYA,EAAqB,CACtC,OAAOA,EAAK,YAAc,cAAgBA,EAAK,gBAAkB,GAAK,EAMxE,OAAO,eAAeA,EAAoB,CACxC,GAAI,CAACD,EAAU,aAAaC,CAAI,EAAG,MAAO,GAE1C,OAAQA,EAAK,WACX,IAAK,aACH,OAAOA,EAAK,iBAAmB,EACjC,IAAK,YACH,OAAOA,EAAK,gBAAkB,EAChC,IAAK,YACL,IAAK,YACH,OAAOA,EAAK,gBAAkB,EAChC,QACE,MAAO,GACX,CAMF,OAAO,mBAAmBA,EAAoB,CAC5C,GAAID,EAAU,aAAaC,CAAI,EAAG,CAChC,MAAMC,EAAOF,EAAU,eAAeC,CAAI,EAC1C,OAAOC,EAAO,EAAID,EAAK,SAAWC,EAAO,MAGzC,QAAOD,EAAK,OAAS,EAAIA,EAAK,SAAWA,EAAK,OAAS,CACzD,CAMF,OAAO,mBAAmBA,EAAoB,CAC5C,MAAMC,EAAOF,EAAU,eAAeC,CAAI,EAC1C,OAAOC,EAAO,EAAID,EAAK,SAAWC,EAAO,EAM3C,OAAO,iBAAiBD,EAAoB,CAC1C,MAAMC,EAAOF,EAAU,eAAeC,CAAI,EAC1C,OAAOC,EAAO,EAAID,EAAK,OAASC,EAAO,EAMzC,OAAO,qBAAqBD,EAAoB,CAC9C,OAAOA,EAAK,OAAS,EAAIA,EAAK,SAAWA,EAAK,OAAS,EAMzD,OAAO,sBAAsBA,EAAoB,CAC/C,GAAID,EAAU,aAAaC,CAAI,EAAG,CAEhC,MAAMC,EAAOF,EAAU,eAAeC,CAAI,EAC1C,OAAOC,EAAO,EAAKD,EAAK,SAAWA,EAAK,OAAUC,EAAO,MAGzD,QAAQD,EAAK,SAAWA,EAAK,OAAU,GACzC,CAMF,OAAO,YAAYA,EAAYE,EAA2B,CACxD,OAAOF,EAAK,WAAW,KAAKG,GAC1BA,EAAK,gBAAkBD,EAAS,aAAY,CAC9C,CAMF,OAAO,yBAAyBF,EAAYI,EAA4B,CACtE,GAAI,CAACJ,EAAK,iBAAkB,MAAO,GAEnC,MAAMK,EAAWL,EAAK,iBAAiB,QACrCM,EAAI,YAAY,gBAAkBF,EAAW,aAAY,EAG3D,OAAOC,EAAWA,EAAS,MAAQ,EAMrC,OAAO,wBAAwBL,EAAYI,EAA4B,CACrE,MAAMG,EAAeP,EAAK,SACpBK,EAAWN,EAAU,yBAAyBC,EAAMI,CAAU,EACpE,OAAOG,EAAeF,CAAA,CAMxB,OAAO,oBAAoBG,EAA+B,CACxD,MAAMC,MAAU,KAChB,MAAO,CACL,KAAMD,EAAS,MAAQ,gBACvB,WAAYA,EAAS,YAAc,CAAC,cAAc,EAClD,OAAQA,EAAS,QAAU,IAC3B,SAAUA,EAAS,UAAY,IAC/B,iBAAkBA,EAAS,kBAAoB,GAC/C,QAAS,QACT,GAAI,cAAc,KAAK,KAAK,IAAI,KAAK,SAAS,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,GACvE,UAAWC,EACX,WAAYA,CAAA,CACd,CAMF,OAAO,eAAeT,EAAYU,EAA8B,CAC9D,MAAO,CACL,GAAGV,EACH,GAAGU,EACH,eAAgB,IAAK,CACvB,CAMF,OAAO,aAAaV,EAAkF,CACpG,MAAMW,EAAmB,GACnBC,EAAqB,GAG3B,OAAI,CAACZ,EAAK,MAAQA,EAAK,KAAK,SAAW,KACrCW,EAAO,KAAK,uBAAuB,GAGjC,CAACX,EAAK,YAAc,CAAC,MAAM,QAAQA,EAAK,UAAU,GAAKA,EAAK,WAAW,SAAW,IACpFW,EAAO,KAAK,oCAAoC,GAG9C,OAAOX,EAAK,QAAW,UAAYA,EAAK,QAAU,IACpDW,EAAO,KAAK,kCAAkC,GAG5C,OAAOX,EAAK,UAAa,UAAYA,EAAK,UAAY,IACxDW,EAAO,KAAK,oCAAoC,EAI9CX,EAAK,mBACF,MAAM,QAAQA,EAAK,gBAAgB,EAGtCA,EAAK,iBAAiB,QAAQ,CAACK,EAAUQ,IAAU,EAC7C,CAACR,EAAS,aAAeA,EAAS,YAAY,SAAW,KAC3DM,EAAO,KAAK,mBAAmBE,EAAQ,CAAC,2BAA2B,GAEjE,CAACR,EAAS,eAAiBA,EAAS,cAAc,SAAW,KAC/DM,EAAO,KAAK,mBAAmBE,EAAQ,CAAC,6BAA6B,GAEnE,OAAOR,EAAS,OAAU,UAAYA,EAAS,MAAQ,IACzDM,EAAO,KAAK,mBAAmBE,EAAQ,CAAC,uCAAuC,CACjF,CACD,EAZDF,EAAO,KAAK,mCAAmC,IAiB/CX,EAAK,WAAaA,EAAK,UAAY,WACjCA,EAAK,WAAa,CAAC,CAAC,aAAc,YAAa,YAAa,WAAW,EAAE,SAASA,EAAK,SAAS,GAClGW,EAAO,KAAK,2EAA2E,EAKvFX,EAAK,QAAUA,EAAK,OAAS,KAC/BY,EAAS,KAAK,gCAAgC,EAG5CZ,EAAK,UAAYA,EAAK,SAAW,KACnCY,EAAS,KAAK,kCAAkC,EAG3C,CACL,QAASD,EAAO,SAAW,EAC3B,OAAAA,EACA,SAAUC,EAAS,OAAS,EAAIA,EAAW,OAC7C,CAOF,OAAO,kBAAkBZ,EAAkF,CACzG,OAAOD,EAAU,aAAaC,CAAI,EAMpC,OAAO,4BAA4Bc,EAI6B,CAC9D,MAAMH,EAAmB,GACnBC,EAAqB,GAG3B,OAAKE,EAAO,YAED,CAACA,EAAO,WAAW,eAAiBA,EAAO,WAAW,cAAc,SAAW,IACxFH,EAAO,KAAK,+CAA+C,EAF3DA,EAAO,KAAK,yBAAyB,EAMnCG,EAAO,kBAAoB,QAEzBA,EAAO,gBAAkB,GAC3BH,EAAO,KAAK,sCAAsC,EAIlDG,EAAO,aAAe,SAEpB,CAAC,MAAM,QAAQA,EAAO,UAAU,GAAKA,EAAO,WAAW,SAAW,IACpEH,EAAO,KAAK,qCAAqC,EAOjDG,EAAO,kBAAoB,QAAaA,EAAO,aAAe,OAChEH,EAAO,KAAK,2DAA2D,EAC9DG,EAAO,aAAe,QAAaA,EAAO,WAAW,SAAW,GAEzEH,EAAO,KAAK,6EAA6E,EAGpF,CACL,QAASA,EAAO,SAAW,EAC3B,OAAAA,EACA,SAAUC,EAAS,OAAS,EAAIA,EAAW,OAC7C,CAEJ,CAKO,MAAMG,GAAa,CACxB,QAAS,QAAS,SAAU,QAAS,YAAa,YAClD,QAAS,SAAU,QAAS,QAAS,UAAW,SAAU,UAC1D,YAAa,UAAW,YAAa,aAAc,QAAS,QAAS,QACrE,eAAgB,QAAS,SAAU,eACrC,EAIaC,GAAwB,CAAC,UAAU,EAEnCC,GAAe,CAC1B,QAAS,SAAU,SAAU,UAAW,QAAS,QAAS,QAC1D,SAAU,YAAa,QAAS,gBAAiB,SAAU,OAC7D,ECzgBMC,EAAW,yBAKJC,EAAa,CACxB,YAAa,GAAGD,CAAQ,mBACxB,YAAa,GAAGA,CAAQ,kBAC1B,ECCO,MAAME,EAAW,CAUtB,aAAc,CATNC,EAAA,aAAgB,IAChBA,EAAA,uBAAqC,KACrCA,EAAA,uBAA4C,CAClD,WAAY,GACZ,UAAW,GACX,UAAW,GACX,UAAW,EAAC,GAIZ,KAAK,WAAU,CAMjB,MAAM,iBAAmC,CACvC,OAAO,KAAK,UAAUF,EAAW,WAAW,EAM9C,MAAM,UAAUG,EAA0C,CACxD,GAAI,CACF,IAAIC,EAEJ,GAAI,OAAOD,GAAW,SAAU,CAC9B,QAAQ,IAAI,uBAAuBA,CAAM,EAAE,EAC3C,MAAME,EAAW,MAAM,MAAMF,CAAM,EAEnC,GAAI,CAACE,EAAS,GACZ,MAAM,IAAI,MAAM,0BAA0BA,EAAS,MAAM,IAAIA,EAAS,UAAU,EAAE,EAGpFD,EAAY,MAAMC,EAAS,MAAK,MAEhCD,EAAYD,EAGd,GAAI,CAAC,MAAM,QAAQC,CAAS,EAC1B,MAAM,IAAI,MAAM,4BAA4B,EAG9C,YAAK,MAAQA,EAAU,OAAgB,KAAK,yBAAyBE,CAAQ,CAAC,EAC9E,KAAK,eAEL,QAAQ,IAAI,YAAY,KAAK,MAAM,MAAM,qBAAqB,EACvD,KAAK,YACLC,EAAO,CACd,cAAQ,MAAM,yBAA0BA,CAAK,EACvCA,CAAA,CACR,CAMM,yBAAyBD,EAAqB,CAEpD,MAAMzB,EAAa,CACjB,KAAMyB,EAAS,MAAQ,UACvB,WAAY,MAAM,QAAQA,EAAS,UAAU,EAAIA,EAAS,WAAa,GACvE,UAAWA,EAAS,WAAa,aACjC,OAAQ,OAAOA,EAAS,MAAM,GAAK,EACnC,SAAU,OAAOA,EAAS,QAAQ,GAAK,EACvC,gBAAiB,OAAOA,EAAS,eAAe,GAAK,EACrD,eAAgB,OAAOA,EAAS,cAAc,GAAK,EACnD,eAAgB,OAAOA,EAAS,cAAc,GAAK,EACnD,iBAAkB,OAAOA,EAAS,gBAAgB,GAAK,EACvD,kBAAmB,OAAOA,EAAS,iBAAiB,GAAK,EACzD,kBAAmB,OAAOA,EAAS,iBAAiB,GAAK,EACzD,oBAAqB,OAAOA,EAAS,mBAAmB,GAAK,EAC7D,YAAaA,EAAS,aAAe,GACrC,iBAAkB,MAAM,QAAQA,EAAS,gBAAgB,EAAIA,EAAS,iBAAmB,QAI3F,MAAK,CAAC,aAAc,YAAa,YAAa,WAAW,EAAE,SAASzB,EAAK,SAAS,IAChF,QAAQ,KAAK,8BAA8BA,EAAK,IAAI,KAAKA,EAAK,SAAS,EAAE,EACzEA,EAAK,UAAY,cAGZA,CAAA,CAMD,cAAqB,CAC3B,KAAK,YAEL,KAAK,YAAc,IAAI,IAAI,KAAK,MAAM,IAAIA,GAAQ,CAACA,EAAK,KAAMA,CAAI,CAAC,CAAC,EAGpE,KAAK,MAAM,QAAQA,GAAQ,CACrBD,EAAU,YAAYC,CAAI,EAC5B,KAAK,gBAAgB,UAAU,KAAKA,CAAI,EAC/BA,EAAK,aAAa,KAAK,iBAChC,KAAK,gBAAgBA,EAAK,SAAqB,EAAE,KAAKA,CAAI,CAC5D,CACD,EAGD,OAAO,KAAK,KAAK,eAAe,EAAE,QAAQ2B,GAAY,CACpD,KAAK,gBAAgBA,CAAoB,EAAE,KAAK,CAACC,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAClF,EAMK,WAAkB,CACxB,KAAK,YAAY,QACjB,KAAK,gBAAkB,CACrB,WAAY,GACZ,UAAW,GACX,UAAW,GACX,UAAW,EAAC,CACd,CAMF,aAAsB,CACpB,MAAO,CAAC,GAAG,KAAK,KAAK,EAMvB,cAAcC,EAAgC,CAC5C,OAAO,KAAK,YAAY,IAAIA,CAAI,EAMlC,mBAAmBH,EAA4B,CAC7C,MAAO,CAAC,GAAG,KAAK,gBAAgBA,CAAQ,CAAC,EAM3C,kBAAkBI,EAAsC,CACtD,MAAMC,EAAyB,GAE/B,UAAWF,KAAQC,EAAoB,CACrC,MAAM/B,EAAO,KAAK,cAAc8B,CAAI,EAChC9B,EACFgC,EAAe,KAAKhC,CAAI,EAExB,QAAQ,KAAK,SAAS8B,CAAI,4BAA4B,CACxD,CAGF,OAAOE,CAAA,CAMT,YAAYC,EAA4B,CACtC,IAAIC,EAAW,KAAK,MAEpB,OAAID,EAAO,WACTC,EAAWA,EAAS,OAAOC,GAAKA,EAAE,YAAcF,EAAO,QAAQ,GAG7DA,EAAO,WAAaA,EAAO,UAAU,OAAS,IAChDC,EAAWA,EAAS,OAAOC,GACzBF,EAAO,UAAW,QAAaE,EAAE,WAAW,SAAShC,CAAI,CAAC,IAI1D8B,EAAO,cAAgB,SACzBC,EAAWA,EAAS,OAAOC,GAAKA,EAAE,UAAYF,EAAO,WAAY,GAG/DA,EAAO,UAAY,SACrBC,EAAWA,EAAS,OAAOC,GAAKpC,EAAU,eAAeoC,CAAC,GAAKF,EAAO,OAAQ,GAGzEC,CAAA,CAMT,YAAYE,EAAuB,CACjC,GAAI,CAACA,EAAM,OACT,OAAO,KAAK,cAGd,MAAMC,EAAaD,EAAM,cACzB,OAAO,KAAK,MAAM,UAChBpC,EAAK,KAAK,cAAc,SAASqC,CAAU,EAC7C,CAMF,kBAA8C,CAC5C,OAAO,KAAK,MAAM,IAAIrC,IAAS,CAC7B,GAAGA,EACH,IAAI,aAAuB,CACzB,OAAOD,EAAU,YAAYC,CAAI,GAEnC,IAAI,aAAsB,CACxB,OAAOD,EAAU,eAAeC,CAAI,GAEtC,IAAI,iBAA0B,CAC5B,OAAOD,EAAU,mBAAmBC,CAAI,GAE1C,IAAI,eAAwB,CAC1B,OAAOD,EAAU,iBAAiBC,CAAI,EACxC,EACA,EAMJ,gBAA8B,CAC5B,GAAI,KAAK,MAAM,SAAW,EACxB,MAAO,CACL,WAAY,EACZ,WAAY,CAAE,WAAY,EAAG,UAAW,EAAG,UAAW,EAAG,UAAW,GACpE,cAAe,CAAE,IAAK,EAAG,IAAK,GAC9B,YAAa,CAAE,IAAK,EAAG,IAAK,EAAE,EAIlC,MAAMsC,EAAY,KAAK,MAAM,IAAIH,GAAKA,EAAE,QAAQ,EAC1CI,EAAU,KAAK,MAAM,IAAIJ,GAAKA,EAAE,MAAM,EAE5C,MAAO,CACL,WAAY,KAAK,MAAM,OACvB,WAAY,CACV,WAAY,KAAK,gBAAgB,WAAW,OAC5C,UAAW,KAAK,gBAAgB,UAAU,OAC1C,UAAW,KAAK,gBAAgB,UAAU,OAC1C,UAAW,KAAK,gBAAgB,UAAU,QAE5C,cAAe,CACb,IAAK,KAAK,IAAI,GAAGG,CAAS,EAC1B,IAAK,KAAK,IAAI,GAAGA,CAAS,GAE5B,YAAa,CACX,IAAK,KAAK,IAAI,GAAGC,CAAO,EACxB,IAAK,KAAK,IAAI,GAAGA,CAAO,EAC1B,CACF,CAMF,oBAA+B,CAC7B,MAAMC,MAAY,IAClB,YAAK,MAAM,QAAQxC,GAAQ,CACzBA,EAAK,WAAW,QAAQG,GAAQqC,EAAM,IAAIrC,CAAI,CAAC,EAChD,EACM,MAAM,KAAKqC,CAAK,EAAE,MAAK,CAMhC,eAAgB,CACd,GAAI,KAAK,MAAM,SAAW,EACxB,MAAO,CACL,WAAY,EACZ,qBAAsB,CAAE,WAAY,EAAG,UAAW,EAAG,UAAW,EAAG,UAAW,GAC9E,cAAe,CAAE,IAAK,EAAG,IAAK,EAAG,IAAK,GACtC,YAAa,CAAE,IAAK,EAAG,IAAK,EAAG,IAAK,GACpC,mBAAoB,GACpB,iBAAkB,EAAC,EAIvB,MAAMF,EAAY,KAAK,MAAM,IAAIH,GAAKA,EAAE,QAAQ,EAC1CI,EAAU,KAAK,MAAM,IAAIJ,GAAKA,EAAE,MAAM,EAE5C,MAAO,CACL,WAAY,KAAK,MAAM,OACvB,qBAAsB,CACpB,WAAY,KAAK,gBAAgB,WAAW,OAC5C,UAAW,KAAK,gBAAgB,UAAU,OAC1C,UAAW,KAAK,gBAAgB,UAAU,OAC1C,UAAW,KAAK,gBAAgB,UAAU,QAE5C,cAAe,CACb,IAAK,KAAK,IAAI,GAAGG,CAAS,EAC1B,IAAK,KAAK,IAAI,GAAGA,CAAS,EAC1B,IAAK,KAAK,MAAMA,EAAU,OAAO,CAACV,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAAIS,EAAU,MAAM,GAEzE,YAAa,CACX,IAAK,KAAK,IAAI,GAAGC,CAAO,EACxB,IAAK,KAAK,IAAI,GAAGA,CAAO,EACxB,IAAK,KAAK,MAAMA,EAAQ,OAAO,CAACX,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAAIU,EAAQ,MAAM,GAErE,mBAAoB,CAAC,GAAG,KAAK,KAAK,EAC/B,KAAK,CAACX,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EACtC,MAAM,EAAG,EAAE,EACd,iBAAkB,CAAC,GAAG,KAAK,KAAK,EAC7B,KAAK,CAACA,EAAGC,IAAMA,EAAE,OAASD,EAAE,MAAM,EAClC,MAAM,EAAG,EAAE,EAChB,CAEJ,CCzTO,MAAMa,CAAkB,CAO7B,YAAYT,EAAwB,CAN5BX,EAAA,uBACAA,EAAA,oBACAA,EAAA,wBACAA,EAAA,uBACAA,EAAA,uBAGN,KAAK,eAAiB,CAAC,GAAGW,CAAc,EACxC,KAAK,YAAc,IAAI,IAAIA,EAAe,IAAIhC,GAAQ,CAACA,EAAK,KAAMA,CAAI,CAAC,CAAC,EAGxE,KAAK,gBAAkBgC,EACpB,OAAOG,GAAKA,EAAE,YAAc,YAAY,EACxC,KAAK,CAACP,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAEzC,KAAK,eAAiBG,EACnB,OAAOG,GAAKA,EAAE,YAAc,WAAW,EACvC,KAAK,CAACP,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAEzC,KAAK,eAAiBG,EACnB,OAAOG,GAAKpC,EAAU,YAAYoC,CAAC,CAAC,EACpC,KAAK,CAACP,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAO3C,MAAM,aACJa,EAC6B,CAC7B,MAAMC,EAAY,YAAY,MAE9B,QAAQ,IAAI,6BAA6BD,EAAY,gBAAgB,MAAMA,EAAY,eAAe,MAAM,OAAO,KAAKA,EAAY,eAAe,EAAE,MAAM,EAAE,EAC7J,QAAQ,IAAI,sBAAsBA,EAAY,eAAe,KAAK,IAAI,CAAC,EAAE,EAEzE,MAAME,EAAuC,GAGvCC,EAAe,KAAK,oCAAoCH,CAAW,EAEzE,QAAQ,IAAI,aAAaG,EAAa,MAAM,qCAAqC,EAEjF,IAAIC,EAAoB,EAGxB,UAAWC,KAAaF,EAAc,CACpCC,IAEA,MAAME,EAAc,KAAK,oBAAoBD,CAAS,EACtDH,EAAkB,KAAKI,CAAW,EAGpC,MAAMC,EAAU,YAAY,MAE5B,QAAQ,IAAI,aAAaH,CAAiB,wBAAwBF,EAAkB,MAAM,kBAAkB,EAG5G,MAAMM,EAAkB,KAAK,eAAe,OAAOf,GACjDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKA,EAAE,YAAc,cAE3DgB,EAAiB,KAAK,eAAe,OAAOhB,GAChDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKA,EAAE,YAAc,aAE3DiB,EAAiB,KAAK,eAAe,OAAOjB,GAChDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKpC,EAAU,YAAYoC,CAAC,GAGlEkB,EAAiBT,EAAkB,OAAOU,GAAQ,CACtD,MAAMC,EAAgBL,EAAgB,KAAKlD,GAAQsD,EAAK,MAAMtD,EAAK,IAAI,GAAKsD,EAAK,MAAMtD,EAAK,IAAI,EAAI,CAAC,EAC/FwD,EAAeL,EAAe,KAAKnD,GAAQsD,EAAK,MAAMtD,EAAK,IAAI,GAAKsD,EAAK,MAAMtD,EAAK,IAAI,EAAI,CAAC,EAC7FyD,EAAeL,EAAe,KAAKpD,GAAQsD,EAAK,MAAMtD,EAAK,IAAI,GAAKsD,EAAK,MAAMtD,EAAK,IAAI,EAAI,CAAC,EASnG,MANsB,CACpBkD,EAAgB,OAAS,EAAIK,EAAgB,GAC7CJ,EAAe,OAAS,EAAIK,EAAe,GAC3CJ,EAAe,OAAS,EAAIK,EAAe,IAGxB,MAAMC,GAAWA,CAAO,EAC9C,EAGD,OAAAL,EAAe,KAAK,CAACzB,EAAGC,IAAM,CAC5B,MAAM8B,EAAgB/B,EAAE,oBAAsBc,EAAY,iBAAqBd,EAAE,mBAAqBc,EAAY,gBAElH,OADsBb,EAAE,oBAAsBa,EAAY,iBAAqBb,EAAE,mBAAqBa,EAAY,gBAC5FiB,CAAA,CACvB,EAKM,CACL,aAHwBN,EAAe,OAAS,EAAI,CAACA,EAAe,CAAC,CAAC,EAAIT,EAAkB,MAAM,EAAG,CAAC,EAItG,2BAA4BE,EAC5B,oBAAqBF,EAAkB,OACvC,gBAAiBK,EAAUN,CAAA,CAC7B,CAMM,oCAAoCD,EAAgE,CAC1G,MAAMG,EAAyC,GAGzCe,EAA0B,KAAK,eAAe,OAAOzB,GACzDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKA,EAAE,YAAc,cAC/D,KAAK,CAACP,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAElCiC,EAAyB,KAAK,eAAe,OAAO1B,GACxDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKA,EAAE,YAAc,aAC/D,KAAK,CAACP,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAElCkC,EAAyB,KAAK,eAAe,OAAO3B,GACxDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKpC,EAAU,YAAYoC,CAAC,GAaxE,GAVA,QAAQ,IAAI,qBAAqByB,EAAwB,MAAM,MAAMC,EAAuB,MAAM,MAAMC,EAAuB,MAAM,EAAE,EACvI,QAAQ,IAAI,oBAAqBF,EAAwB,IAAIzB,GAAKA,EAAE,IAAI,CAAC,EACzE,QAAQ,IAAI,mBAAoB0B,EAAuB,IAAI1B,GAAKA,EAAE,IAAI,CAAC,EACvE,QAAQ,IAAI,mBAAoB2B,EAAuB,IAAI3B,GAAKA,EAAE,IAAI,CAAC,EAGvE,QAAQ,IAAI,qCAAqCyB,EAAwB,MAAM,MAAMC,EAAuB,MAAM,MAAMC,EAAuB,MAAM,EAAE,EACvJ,QAAQ,IAAI,uBAAuBpB,EAAY,gBAAgB,cAAcA,EAAY,eAAe,EAAE,EAGtGkB,EAAwB,OAAS,GAAKC,EAAuB,OAAS,GAAKC,EAAuB,OAAS,GAC3GpB,EAAY,iBAAmB,GAAKA,EAAY,gBAAkB,EAAG,CACvE,QAAQ,IAAI,4CAA4C,EACxD,MAAMqB,EAA2B,CAAC,GAAGH,EAAyB,GAAGE,CAAsB,EACvFjB,EAAa,KAAK,GAAG,KAAK,oCACxBkB,EACAF,EACAnB,EAAY,iBACZA,EAAY,gBACZA,EAAY,gBACb,UAGMkB,EAAwB,OAAS,GAAKE,EAAuB,OAAS,GACtED,EAAuB,SAAW,GAAKnB,EAAY,iBAAmB,EAAG,CAChF,QAAQ,IAAI,qEAAqE,EACjF,MAAMsB,EAAW,CAAC,GAAGJ,EAAyB,GAAGE,CAAsB,EACjEG,EAAoB,KAAK,kCAC7BD,EACAtB,EAAY,iBACZA,EAAY,iBAEdG,EAAa,KAAKoB,CAAiB,UAG5BJ,EAAuB,OAAS,GAAKC,EAAuB,OAAS,GACrEF,EAAwB,SAAW,GAAKlB,EAAY,gBAAkB,EAAG,CAChF,QAAQ,IAAI,wEAAwE,EAGpF,MAAMwB,EAAuB,KAAK,8CAChCL,EACAnB,EAAY,iBAIRyB,EAA+C,GACrD,UAAWnE,KAAQ8D,EACjBK,EAAqBnE,EAAK,IAAI,EAAI0C,EAAY,gBAAgB1C,EAAK,IAAI,GAAK,EAI9E,MAAMoE,EAAsB,CAAE,GAAGF,EAAsB,GAAGC,CAAA,EAC1DtB,EAAa,KAAKuB,CAAmB,UAG9BR,EAAwB,OAAS,GAAKC,EAAuB,OAAS,GACtEC,EAAuB,SAAW,GAClCpB,EAAY,iBAAmB,GAAKA,EAAY,gBAAkB,EACzE,QAAQ,IAAI,mDAAmD,EAC/DG,EAAa,KAAK,GAAG,KAAK,oCACxBe,EACAC,EACAnB,EAAY,iBACZA,EAAY,gBACZ,EAAC,CACF,UAGMkB,EAAwB,OAAS,GAAKC,EAAuB,SAAW,GACxEC,EAAuB,SAAW,GAAKpB,EAAY,iBAAmB,EAAG,CAChF,QAAQ,IAAI,kEAAkE,EAC9E,MAAMuB,EAAoB,KAAK,kCAC7BL,EACAlB,EAAY,iBACZ,EAAC,EAEHG,EAAa,KAAKoB,CAAiB,UAG5BJ,EAAuB,OAAS,GAAKD,EAAwB,SAAW,GACxEE,EAAuB,SAAW,GAAKpB,EAAY,gBAAkB,EAAG,CAC/E,QAAQ,IAAI,gEAAgE,EAC5E,MAAMwB,EAAuB,KAAK,8CAChCL,EACAnB,EAAY,iBAEdG,EAAa,KAAKqB,CAAoB,UAG/BJ,EAAuB,OAAS,GAAKF,EAAwB,SAAW,GACxEC,EAAuB,SAAW,EAAG,CAC5C,QAAQ,IAAI,4CAA4C,EACxD,MAAMQ,EAA0C,GAChD,UAAWrE,KAAQ8D,EAAwB,CACzC,MAAMQ,EAAQ5B,EAAY,gBAAgB1C,EAAK,IAAI,GAAK,EACxDqE,EAAgBrE,EAAK,IAAI,EAAIsE,CAAA,CAE3B,OAAO,KAAKD,CAAe,EAAE,OAAS,GACxCxB,EAAa,KAAKwB,CAAe,CACnC,MAGA,QAAQ,IAAI,sDAAsD,EAIpE,OAAIT,EAAwB,OAAS,GAAKE,EAAuB,OAAS,GAAKpB,EAAY,iBAAmB,GAC5GG,EAAa,KAAK,GAAG,KAAK,mCACxBe,EACAE,EACApB,EAAY,iBACZA,EAAY,gBACZ,kBACD,EAICmB,EAAuB,OAAS,GAAKC,EAAuB,OAAS,GAAKpB,EAAY,gBAAkB,GAC1GG,EAAa,KAAK,GAAG,KAAK,mCACxBgB,EACAC,EACApB,EAAY,gBACZA,EAAY,gBACZ,iBACD,EAGIG,CAAA,CAOD,2CACNK,EACAE,EACAmB,EACAC,EAC0B,CAC1B,QAAQ,IAAI,iCAAiC,EAC7C,QAAQ,IAAI,qEAAqE,EAGjF,MAAMR,EAAW,CAAC,GAAGd,EAAiB,GAAGE,CAAc,EACvD,QAAQ,IAAI,2DAA2DY,EAAS,MAAM,QAAQ,EAE9F,MAAMC,EAAoB,KAAK,kCAC7BD,EACAO,EACAC,CAAA,EAGF,eAAQ,IAAI,2BAA4BP,CAAiB,EAClD,CAACA,CAAiB,EAWnB,8BACND,EAEAQ,EACwB,CACxB,MAAMC,EAAkC,GAExC,GAAIT,EAAS,SAAW,EACtB,OAAOS,EAIT,MAAMC,EAAgBV,EAAS,CAAC,EAChCS,EAAQC,EAAc,IAAI,EAAI,EAE9B,QAAQ,IAAI,uBAAuBA,EAAc,IAAI,UAAUA,EAAc,QAAQ,GAAG,EAGxF,QAASC,EAAI,EAAGA,EAAIX,EAAS,OAAQW,IAAK,CACxC,MAAMC,EAAcZ,EAASW,CAAC,EACxBE,EAAeb,EAASW,EAAI,CAAC,EAE7BG,EAAsBD,EAAa,QAAUJ,EAAQI,EAAa,IAAI,GAAK,GAC3EE,EAAmB,KAAK,MAAMD,EAAsB,GAAKF,EAAY,MAAM,EAEjFH,EAAQG,EAAY,IAAI,EAAIG,EAE5B,QAAQ,IAAI,MAAMH,EAAY,IAAI,UAAUG,CAAgB,WAAWA,EAAmBH,EAAY,MAAM,kBAAkBC,EAAa,IAAI,KAAKC,CAAmB,MAAM,EAG/K,OAAOL,CAAA,CAMD,kCACNT,EACAO,EACAC,EACwB,CACxB,QAAQ,IAAI,4CAA4CD,CAAgB,EAAE,EAC1E,MAAMvB,EAAsC,GAGtCgC,EAAc,CAAC,GAAGhB,CAAQ,EAAE,KAAK,CAACpC,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAGlEsB,EAAkB8B,EAAY,OAAO7C,GAAKA,EAAE,YAAc,YAAY,EACtEiB,EAAiB4B,EAAY,UAAYjF,EAAU,YAAYoC,CAAC,CAAC,EAEvE,GAAI6C,EAAY,SAAW,EACzB,eAAQ,IAAI,uCAAuC,EAC5ChC,EAGT,QAAQ,IAAI,kDAAkDgC,EAAY,MAAM,WAAW9B,EAAgB,MAAM,iBAAiBE,EAAe,MAAM,aAAa,EAGpK,MAAMsB,EAAgBM,EAAY,CAAC,EAC7BC,EAAsC,GAG5CA,EAAYP,EAAc,IAAI,EAAI,EAElC,MAAMQ,EAAuBR,EAAc,OAAS,EACpD,QAAQ,IAAI,eAAeA,EAAc,IAAI,MAAMQ,CAAoB,iBAAiB,EAGxF,QAASP,EAAI,EAAGA,EAAIK,EAAY,OAAQL,IAAK,CAC3C,MAAMC,EAAcI,EAAYL,CAAC,EAG3BQ,EAAiB,KAAK,MAAMD,EAAuB,GAAKN,EAAY,MAAM,EAChFK,EAAYL,EAAY,IAAI,EAAIO,EAEhC,MAAMjF,EAAWH,EAAU,YAAY6E,CAAW,EAAI,YAAc,aACpE,QAAQ,IAAI,YAAYO,CAAc,KAAKP,EAAY,IAAI,MAAMO,EAAiBP,EAAY,MAAM,cAAcM,CAAoB,MAAMhF,CAAQ,GAAG,EAIzJ,QAAQ,IAAI,8CAA8C,EAE1D,QAASyE,EAAI,EAAGA,EAAIK,EAAY,OAAS,EAAGL,IAAK,CAC/C,MAAMC,EAAcI,EAAYL,CAAC,EAC3BS,EAAWJ,EAAYL,EAAI,CAAC,EAE5BU,EAAqBT,EAAY,OAASK,EAAYL,EAAY,IAAI,EAC5E,IAAIU,EAAkBF,EAAS,OAASH,EAAYG,EAAS,IAAI,EAGjE,GAAIE,GAAmBD,EACrB,GAAItF,EAAU,YAAYqF,CAAQ,EAEhC,QAAQ,IAAI,eAAeA,EAAS,IAAI,qBAAqBH,EAAYG,EAAS,IAAI,CAAC,WAAWE,CAAe,mBAAmBD,CAAkB,KAAK,MACtJ,CACL,MAAMN,EAAmB,KAAK,MAAMM,EAAqB,GAAKD,EAAS,MAAM,EAC7EH,EAAYG,EAAS,IAAI,EAAIL,EAC7BO,EAAkBF,EAAS,OAASL,EACpC,QAAQ,IAAI,aAAaK,EAAS,IAAI,iBAAiBL,CAAgB,YAAYO,CAAe,kBAAkBD,CAAkB,GAAG,OAG3I,QAAQ,IAAI,UAAUD,EAAS,IAAI,IAAIH,EAAYG,EAAS,IAAI,CAAC,YAAYE,CAAe,cAAcD,CAAkB,GAAG,CACjI,CAIF,IAAIE,EAAW,EACf,SAAW,CAACC,EAAUC,CAAQ,IAAK,OAAO,QAAQR,CAAW,EAAG,CAC9D,MAAMjF,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EACtCxF,GAAQA,EAAK,YAAc,eAC7BuF,GAAYE,GAAYzF,EAAK,iBAAmB,GAClD,CAMF,GAHA,QAAQ,IAAI,oCAAoCuF,CAAQ,EAAE,EAGtDA,IAAa,EAAG,CAClB,QAAQ,IAAI,gDAAgD,EAE5D,SAAW,CAACC,EAAUE,CAAY,IAAK,OAAO,QAAQT,CAAW,EAC/DjC,EAAYwC,CAAQ,EAAIE,CAC1B,KACK,CACL,MAAMC,EAAY,KAAK,MAAMpB,EAAmBgB,CAAQ,EACxD,QAAQ,IAAI,iBAAiBI,CAAS,iBAAiBpB,CAAgB,MAAMgB,CAAQ,GAAG,EAGxF,SAAW,CAACC,EAAUE,CAAY,IAAK,OAAO,QAAQT,CAAW,EAAG,CAClE,MAAMjF,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EAC1C,GAAIxF,GAAQD,EAAU,YAAYC,CAAI,EAAG,CAEvC,MAAM4F,EAAiBF,EAAeC,EAChCE,EAAiBrB,EAAgBgB,CAAQ,GAAK,EACpDxC,EAAYwC,CAAQ,EAAI,KAAK,IAAII,EAAgBC,CAAc,EAE3DD,EAAiBC,EACnB,QAAQ,IAAI,gBAAgBL,CAAQ,YAAYI,CAAc,qBAAqBC,CAAc,EAAE,EAEnG,QAAQ,IAAI,gBAAgBL,CAAQ,eAAeI,CAAc,iBAAiBC,CAAc,GAAG,CACrG,MAGA7C,EAAYwC,CAAQ,EAAIE,EAAeC,CACzC,CACF,CAGF,eAAQ,IAAI,yCAA0C3C,CAAW,EAC1DA,CAAA,CAMD,8CACNG,EACA2C,EACwB,CACxB,QAAQ,IAAI,+CAA+CA,CAAe,EAAE,EAC5E,MAAM9C,EAAsC,GAGtCgC,EAAc,CAAC,GAAG7B,CAAc,EAAE,KAAK,CAACvB,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAE9E,GAAIoD,EAAY,SAAW,EACzB,eAAQ,IAAI,oDAAoD,EACzDhC,EAGT,QAAQ,IAAI,qDAAqDgC,EAAY,MAAM,kBAAkB,EAGrG,MAAMN,EAAgBM,EAAY,CAAC,EAC7BC,EAAsC,GAC5CA,EAAYP,EAAc,IAAI,EAAI,EAElC,MAAMQ,EAAuBR,EAAc,OAAS,EACpD,QAAQ,IAAI,eAAeA,EAAc,IAAI,MAAMQ,CAAoB,iBAAiB,EAGxF,QAASP,EAAI,EAAGA,EAAIK,EAAY,OAAQL,IAAK,CAC3C,MAAMC,EAAcI,EAAYL,CAAC,EAC3BQ,EAAiB,KAAK,MAAMD,EAAuB,GAAKN,EAAY,MAAM,EAChFK,EAAYL,EAAY,IAAI,EAAIO,EAEhC,QAAQ,IAAI,YAAYA,CAAc,KAAKP,EAAY,IAAI,MAAMO,EAAiBP,EAAY,MAAM,cAAcM,CAAoB,GAAG,EAI3I,QAAQ,IAAI,wDAAwD,EAEpE,QAASP,EAAI,EAAGA,EAAIK,EAAY,OAAS,EAAGL,IAAK,CAC/C,MAAMC,EAAcI,EAAYL,CAAC,EAC3BS,EAAWJ,EAAYL,EAAI,CAAC,EAE5BU,EAAqBT,EAAY,OAASK,EAAYL,EAAY,IAAI,EAC5E,IAAIU,EAAkBF,EAAS,OAASH,EAAYG,EAAS,IAAI,EAGjE,GAAIE,GAAmBD,EAAoB,CACzC,MAAMN,EAAmB,KAAK,MAAMM,EAAqB,GAAKD,EAAS,MAAM,EAC7EH,EAAYG,EAAS,IAAI,EAAIL,EAC7BO,EAAkBF,EAAS,OAASL,EAEpC,QAAQ,IAAI,aAAaK,EAAS,IAAI,iBAAiBL,CAAgB,YAAYO,CAAe,kBAAkBD,CAAkB,GAAG,OAEzI,QAAQ,IAAI,UAAUD,EAAS,IAAI,IAAIH,EAAYG,EAAS,IAAI,CAAC,YAAYE,CAAe,cAAcD,CAAkB,GAAG,CACjI,CAIF,IAAIE,EAAW,EACf,SAAW,CAACC,EAAUC,CAAQ,IAAK,OAAO,QAAQR,CAAW,EAAG,CAC9D,MAAMjF,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EACtCxF,GAAQA,EAAK,YAAc,cAC7BuF,GAAYE,EAAWzF,EAAK,eAC9B,CAMF,GAHA,QAAQ,IAAI,mCAAmCuF,CAAQ,EAAE,EAGrDA,IAAa,EACf,eAAQ,IAAI,6BAA6B,EAClCvC,EAGT,MAAM2C,EAAY,KAAK,MAAMG,EAAkBP,CAAQ,EACvD,QAAQ,IAAI,iBAAiBI,CAAS,iBAAiBG,CAAe,MAAMP,CAAQ,GAAG,EAGvF,SAAW,CAACC,EAAUE,CAAY,IAAK,OAAO,QAAQT,CAAW,EAC/DjC,EAAYwC,CAAQ,EAAIE,EAAeC,EAGzC,eAAQ,IAAI,4CAA6C3C,CAAW,EAC7DA,CAAA,CAOD,wBAAwByB,EAAyC,CACvE,OAAO,OAAO,QAAQA,CAAO,EAAE,OAAO,CAACsB,EAAO,CAACP,EAAUC,CAAQ,IAAM,CACrE,MAAMzF,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EAC1C,OAAIxF,GAAQA,EAAK,YAAc,aACtB+F,EAASN,EAAWzF,EAAK,gBAE3B+F,CAAA,EACN,CAAC,EAME,gCACNtB,EACAD,EACQ,CACR,IAAImB,EAAY,IAEhB,SAAW,CAACH,EAAUE,CAAY,IAAK,OAAO,QAAQjB,CAAO,EAAG,CAC9D,MAAMzE,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EAC1C,GAAIxF,GAAQD,EAAU,YAAYC,CAAI,EAAG,CACvC,MAAMsE,EAAQE,EAAgBgB,CAAQ,GAAK,EACrCQ,EAAqB,KAAK,MAAM1B,EAAQoB,CAAY,EAC1DC,EAAY,KAAK,IAAIA,EAAWK,CAAkB,EAElD,QAAQ,IAAI,OAAOR,CAAQ,WAAWlB,CAAK,eAAeoB,CAAY,YAAYM,CAAkB,SAAS,EAC/G,CAGF,OAAOL,IAAc,IAAW,IAAMA,CAAA,CAOhC,uCACNxC,EACAC,EACA0C,EACAtB,EAC0B,CAC1B,MAAM3B,EAAyC,GAE/C,QAAQ,IAAI,8CAA8C,EAG1D,MAAMmB,EAAW,CAAC,GAAGb,EAAgB,GAAGC,CAAc,EAAE,KAAK,CAACxB,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAE9F,GAAIoC,EAAS,SAAW,EACtB,OAAOnB,EAIT,MAAMoC,EAAc,KAAK,8BAA8BjB,EAAUQ,CAAe,EAChF,QAAQ,IAAI,yCAA0CS,CAAW,EAGjE,MAAMgB,EAAwB,OAAO,QAAQhB,CAAW,EAAE,OAAO,CAACc,EAAO,CAACP,EAAUC,CAAQ,IAAM,CAChG,MAAMzF,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EAC1C,OAAIxF,GAAQA,EAAK,YAAc,YACtB+F,EAASN,EAAWzF,EAAK,eAE3B+F,CAAA,EACN,CAAC,EAIJ,GAFA,QAAQ,IAAI,gCAAgCE,CAAqB,EAAE,EAE/DA,EAAwBH,EAAiB,CAC3C,QAAQ,IAAI,iEAAiE,EAG7E,MAAMI,EAAuC,GAC7C,UAAWlG,KAAQoD,EACjB8C,EAAalG,EAAK,IAAI,EAAIwE,EAAgBxE,EAAK,IAAI,GAAK,EAE1D,OAAA6C,EAAa,KAAKqD,CAAY,EAE1B/C,EAAe,OAAS,GAC1BN,EAAa,KAAK,GAAG,KAAK,4BAA4BM,EAAgB2C,EAAiB,gBAAgB,CAAC,EAGnGjD,CAAA,CAIT,MAAMsD,EAAoB,KAAK,MAAML,EAAkBG,CAAqB,EACtEG,EAAyB,KAAK,gCAAgCnB,EAAaT,CAAe,EAC1F6B,EAAoB,KAAK,IAAIF,EAAmBC,CAAsB,EAE5E,QAAQ,IAAI,sCAAsCC,CAAiB,EAAE,EAGrE,QAASC,EAAS,EAAGA,GAAU,KAAK,IAAID,EAAmB,CAAC,EAAGC,IAAU,CACvE,MAAMtD,EAAsC,GAE5C,SAAW,CAACwC,EAAUe,CAAO,IAAK,OAAO,QAAQtB,CAAW,EAAG,CAC7D,MAAMjF,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EACtCxF,GAAQD,EAAU,YAAYC,CAAI,EACpCgD,EAAYwC,CAAQ,EAAI,KAAK,IAAIe,EAAUD,EAAQ9B,EAAgBgB,CAAQ,GAAK,CAAC,EAEjFxC,EAAYwC,CAAQ,EAAIe,EAAUD,CACpC,CAGFzD,EAAa,KAAKG,CAAW,EAI/B,GAAIoD,EAAyBD,GAAqBhD,EAAe,OAAS,EAAG,CAC3E,MAAMqD,EAAkBV,EAAmBO,EAAoBJ,EACzDQ,EAAqB,KAAK,4BAA4BtD,EAAgBqD,EAAiB,gBAAgB,EAEvGE,EAA8C,GACpD,UAAW1G,KAAQoD,EACjBsD,EAAoB1G,EAAK,IAAI,EAAIwE,EAAgBxE,EAAK,IAAI,GAAK,EAGjE,UAAW2G,KAAiBF,EAAmB,MAAM,EAAG,CAAC,EAAG,CAC1D,MAAMG,EAAe,CAAE,GAAGF,EAAqB,GAAGC,CAAA,EAClD9D,EAAa,KAAK+D,CAAY,EAChC,CAGF,OAAO/D,CAAA,CASD,4BACNgE,EACAC,EACAC,EAC0B,CAC1B,MAAMlE,EAAyC,GAE/C,GAAIgE,EAAM,SAAW,GAAKC,GAAU,EAClC,OAAOjE,EAIT,MAAM6B,EAAgBmC,EAAM,CAAC,EAC7B,QAAQ,IAAI,sBAAsBnC,EAAc,IAAI,UAAUA,EAAc,QAAQ,GAAG,EAGvF,MAAMO,EAAc,KAAK,yBAAyB4B,CAAK,EACvD,QAAQ,IAAI,4BAA6B5B,CAAW,EAGpD,MAAMM,EAAW,OAAO,QAAQN,CAAW,EAAE,OAAO,CAACc,EAAO,CAACP,EAAUC,CAAQ,IAAM,CACnF,MAAMzF,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EAC1C,GAAIxF,EAAM,CACR,MAAMgH,EAAWhH,EAAK+G,CAAY,EAClC,OAAOhB,EAASN,EAAWuB,CAAA,CAE7B,OAAOjB,CAAA,EACN,CAAC,EAIJ,GAFA,QAAQ,IAAI,yBAAyBR,CAAQ,EAAE,EAE3CA,GAAY,EACd,OAAO1C,EAIT,MAAMoE,EAAgB,KAAK,MAAMH,EAASvB,CAAQ,EAClD,QAAQ,IAAI,sBAAsB0B,CAAa,EAAE,EAEjD,QAASC,EAAa,EAAGA,GAAc,KAAK,IAAID,EAAe,EAAE,EAAGC,IAAc,CAChF,MAAMC,EAA4C,GAElD,SAAW,CAAC3B,EAAUE,CAAY,IAAK,OAAO,QAAQT,CAAW,EAC/DkC,EAAkB3B,CAAQ,EAAIE,EAAewB,EAG/CrE,EAAa,KAAKsE,CAAiB,EAIrC,OAAIN,EAAM,OAAS,GACjBhE,EAAa,KAAK,GAAG,KAAK,2BAA2BgE,EAAOC,EAAQC,CAAY,CAAC,EAG5ElE,CAAA,CAMD,yBAAyBgE,EAAuC,CACtE,MAAMpC,EAAkC,GAExC,GAAIoC,EAAM,SAAW,EACnB,OAAOpC,EAIT,MAAMC,EAAgBmC,EAAM,CAAC,EAC7BpC,EAAQC,EAAc,IAAI,EAAI,EAG9B,QAAS,EAAI,EAAG,EAAImC,EAAM,OAAQ,IAAK,CACrC,MAAMjC,EAAciC,EAAM,CAAC,EACrBhC,EAAegC,EAAM,EAAI,CAAC,EAG1B/B,EAAsBD,EAAa,QAAUJ,EAAQI,EAAa,IAAI,GAAK,GAC3EE,EAAmB,KAAK,MAAMD,EAAsB,GAAKF,EAAY,MAAM,EAEjFH,EAAQG,EAAY,IAAI,EAAIG,EAE5B,QAAQ,IAAI,MAAMH,EAAY,IAAI,UAAUG,CAAgB,WAAWA,EAAmBH,EAAY,MAAM,kBAAkBC,EAAa,IAAI,KAAKC,CAAmB,MAAM,EAG/K,OAAOL,CAAA,CAOD,oCACNV,EACAZ,EACAoB,EACAuB,EACAtB,EAA0C,GAChB,CAC1B,MAAM3B,EAAyC,GAE/C,QAAQ,IAAI,kEAAkE,EAG9E,MAAMK,EAAkBa,EAAyB,OAAO5B,GAAKA,EAAE,YAAc,YAAY,EACnFiB,EAAiBW,EAAyB,UAAYhE,EAAU,YAAYoC,CAAC,CAAC,EAGpF,QAAQ,IAAI,yEAAyE,EAErF,MAAMiF,EAA8B,CAAC,GAAGlE,EAAiB,GAAGE,CAAc,EAOpEiE,EAAyB,CANL,KAAK,kCAC7BD,EACA7C,EACAC,CAAA,CAG+C,EAEjD,GAAI6C,EAAuB,SAAW,EACpC,OAAOxE,EAIT,MAAMyE,EAAoBD,EAAuBA,EAAuB,OAAS,CAAC,EAClF,GAAI,CAACC,EACH,OAAOzE,EAGT,QAAQ,IAAI,yDAAyD,EACrE,MAAM0E,EAAiBD,EAGfE,EAAyBrE,EAAe,CAAC,EAC/C,QAAQ,IAAI,gCAAgCqE,EAAuB,IAAI,UAAUA,EAAuB,QAAQ,GAAG,EAGnH,MAAMC,EAA2B,KAAK,wBAAwBD,EAAwBzD,CAAwB,EAE9G,GAAI,CAAC0D,EACH,eAAQ,IAAI,oDAAoD,EACzD5E,EAGT,QAAQ,IAAI,oCAAoC4E,EAAyB,IAAI,UAAUA,EAAyB,QAAQ,GAAG,EAG3H,MAAMC,EAAyBH,EAAeE,EAAyB,IAAI,GAAK,EAC1EE,EAAwBF,EAAyB,OAASC,EAIhE,GAFA,QAAQ,IAAI,oCAAoCC,CAAqB,KAAKD,CAAsB,KAAKD,EAAyB,MAAM,GAAG,EAEnIE,GAAyB,EAC3B,eAAQ,IAAI,iDAAiD,EACtD9E,EAIT,MAAM+E,EAA2BJ,EAAuB,OACpDI,GAA4BD,IAC9B,QAAQ,IAAI,wCAAwCC,CAAwB,UAAUD,CAAqB,KAAK,EAChH,QAAQ,IAAI,+EAA+E,GAO7F,QAAQ,IAAI,wFAAwF,EAEpG,MAAME,EAA4B,CADD,KAAK,8CAA8C1E,EAAgB2C,CAAe,CACxD,EAE3D,GAAI+B,EAA0B,OAAS,EAAG,CAExC,MAAMC,EAAmBD,EAA0BA,EAA0B,OAAS,CAAC,EAGjFjB,EAAe,CAAE,GAAGW,EAAgB,GAAGO,CAAA,EAC7CjF,EAAa,KAAK+D,CAAY,EAE9B,QAAQ,IAAI,mEAAmE,OAG/E,QAAQ,IAAI,gDAAgD,EAC5D/D,EAAa,KAAK0E,CAAc,EAGpC,OAAO1E,CAAA,CAMD,wBAAwBkF,EAAkB7E,EAAsC,CACtF,GAAIA,EAAgB,SAAW,EAC7B,OAAO,KAGT,IAAI8E,EAAc9E,EAAgB,CAAC,EAC/B+E,EAAqB,KAAK,IAAIF,EAAW,SAAWC,EAAY,QAAQ,EAE5E,UAAWhI,KAAQkD,EAAiB,CAClC,MAAMgF,EAAa,KAAK,IAAIH,EAAW,SAAW/H,EAAK,QAAQ,EAC3DkI,EAAaD,IACfA,EAAqBC,EACrBF,EAAchI,EAChB,CAGF,eAAQ,IAAI,qBAAqBgI,EAAY,IAAI,UAAUA,EAAY,QAAQ,QAAQD,EAAW,IAAI,UAAUA,EAAW,QAAQ,YAAYE,CAAkB,EAAE,EAC5JD,CAAA,CAMD,mCACN7E,EACA2D,EACAqB,EACwB,CACxB,MAAMnF,EAAsC,GAI5C,GAFA,QAAQ,IAAI,8DAA8DmF,CAAc,EAAE,EAEtFhF,EAAe,SAAW,GAAK2D,GAAU,GAAKqB,GAAkB,EAClE,OAAOnF,EAIT,MAAM0B,EAAgBvB,EAAe,CAAC,EAGhCiF,EAAsB,KAAK,OAAOD,EAAiB,GAAKzD,EAAc,MAAM,EAC5E2D,EAAsB,KAAK,MAAMvB,EAASpC,EAAc,cAAc,EACtE4D,EAAc,KAAK,IAAIF,EAAqBC,CAAmB,EAErE,GAAIC,GAAe,EACjB,eAAQ,IAAI,oBAAoB5D,EAAc,IAAI,qBAAqB,EAChE1B,EAIT,QAASuF,EAAe,KAAK,IAAID,EAAa,CAAC,EAAGC,GAAgB,EAAGA,IAAgB,CACnF,MAAMC,EAA0C,GAChDA,EAAgB9D,EAAc,IAAI,EAAI6D,EAEtC,IAAIE,EAAaF,EAAe7D,EAAc,eAC1CQ,EAAuBqD,EAAe7D,EAAc,OAExD,QAAQ,IAAI,cAAc6D,CAAY,KAAK7D,EAAc,IAAI,KAAKQ,CAAoB,QAAQuD,CAAU,QAAQ,EAGhH,QAAS9D,EAAI,EAAGA,EAAIxB,EAAe,QAAUsF,EAAa3B,EAAQnC,IAAK,CACrE,MAAM+D,EAAavF,EAAewB,CAAC,EAC7B6B,EAAkBM,EAAS2B,EAG3BE,EAAsB,KAAK,MAAMzD,EAAuB,GAAKwD,EAAW,MAAM,EAC9EE,EAAc,KAAK,MAAMpC,EAAkBkC,EAAW,cAAc,EACpEjD,EAAW,KAAK,IAAIkD,EAAqBC,CAAW,EAEtDnD,EAAW,IACb+C,EAAgBE,EAAW,IAAI,EAAIjD,EACnCgD,GAAchD,EAAWiD,EAAW,eAEpC,QAAQ,IAAI,aAAajD,CAAQ,KAAKiD,EAAW,IAAI,KAAKjD,EAAWiD,EAAW,MAAM,MAAM,EAC9F,CAIF,MAAMG,EAAuB,OAAO,QAAQL,CAAe,EAAE,OAAO,CAACzC,EAAO,CAACP,EAAUsD,CAAG,IAAM,CAC9F,MAAM9I,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EAC1C,OAAOxF,EAAO+F,EAAS+C,EAAM9I,EAAK,OAAU+F,CAAA,EAC3C,CAAC,EAEJ,GAAI8C,EAAuBV,EACzB,eAAQ,IAAI,4BAA4BU,CAAoB,SAASV,CAAc,WAAW,EACvFK,EAEP,QAAQ,IAAI,iCAAiCK,CAAoB,UAAUV,CAAc,WAAW,CACtG,CAGF,eAAQ,IAAI,sDAAsD,EAC3DnF,CAAA,CAMD,mCACN+F,EACA3F,EACA4F,EACAxE,EACAuC,EAC0B,CAC1B,MAAMlE,EAAyC,GAE/C,QAAQ,IAAI,oDAAoD,EAGhE,MAAMoG,EAAmB,KAAK,4BAA4BF,EAAWC,EAAYjC,CAAY,EAE7F,GAAIkC,EAAiB,SAAW,EAC9B,OAAOpG,EAIT,UAAWqG,KAAYD,EAAiB,MAAM,EAAG,CAAC,EAAG,CAGnD,MAAME,EAAqB/F,EAAe,KAAK,CAACxB,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAAE,CAAC,EAEnF,GAAI,CAACuH,EACH,SAGF,QAAQ,IAAI,2BAA2BA,EAAmB,IAAI,UAAUA,EAAmB,QAAQ,GAAG,EAGtG,MAAMC,EAAqB,KAAK,wBAAwBD,EAAoBJ,CAAS,EAErF,GAAI,CAACK,EAAoB,CACvB,QAAQ,IAAI,8CAA8C,EAC1D,SAIF,MAAM1B,EAAyBwB,EAASE,EAAmB,IAAI,GAAK,EAC9DzB,EAAwByB,EAAmB,OAAS1B,EAI1D,GAFA,QAAQ,IAAI,yCAAyCC,CAAqB,EAAE,EAExEA,GAAyB,EAAG,CAC9B,QAAQ,IAAI,2CAA2C,EACvD,SAIF,MAAM0B,EAA2BF,EAAmB,OAC9CtD,EAAiBrB,EAAgB2E,EAAmB,IAAI,GAAK,EAC7DG,EAAuBD,EAA2BxD,EAExD,GAAIyD,GAAwB3B,EAAuB,CACjD,QAAQ,IAAI,4BAA4B2B,CAAoB,UAAU3B,CAAqB,KAAK,EAChG,QAAQ,IAAI,sDAAsD,EAGlE,MAAM4B,EAAuB,KAAK,OAAO5B,EAAwB,GAAK0B,CAAwB,EAE9F,GAAIE,EAAuB,EAAG,CAC5B,QAAQ,IAAI,WAAWA,CAAoB,KAAKJ,EAAmB,IAAI,eAAetD,CAAc,EAAE,EAGtG,MAAM2D,EAAY,CAAE,GAAGN,CAAA,EACvBM,EAAUL,EAAmB,IAAI,EAAII,EAGrC,UAAWvJ,KAAQoD,EACjB,GAAIpD,EAAK,OAASmJ,EAAmB,KAAM,CACzC,MAAM7E,EAAQE,EAAgBxE,EAAK,IAAI,GAAK,EAC5CwJ,EAAUxJ,EAAK,IAAI,EAAIsE,CAAA,CAI3BzB,EAAa,KAAK2G,CAAS,EAC3B,QAAQ,IAAI,sDAAsD,OAElE,QAAQ,IAAI,+DAA+D,EAE3E3G,EAAa,KAAKqG,CAAQ,EAE5B,SAIF,MAAMM,EAAY,CAAE,GAAGN,CAAA,EACvB,UAAWlJ,KAAQoD,EAAgB,CACjC,MAAMkB,EAAQE,EAAgBxE,EAAK,IAAI,GAAK,EAC5CwJ,EAAUxJ,EAAK,IAAI,EAAIsE,CAAA,CAGzBzB,EAAa,KAAK2G,CAAS,EAC3B,QAAQ,IAAI,8CAA8C,EAG5D,OAAO3G,CAAA,CAMD,gCACNM,EACA2C,EACAqC,EACwB,CACxB,MAAMnF,EAAsC,GAE5C,QAAQ,IAAI,4DAA4DmF,CAAc,EAAE,EAGxF,MAAMsB,EAAiB,CAAC,GAAGtG,CAAc,EAAE,KAAK,CAACvB,EAAGC,IAAMD,EAAE,OAASC,EAAE,MAAM,EAE7E,IAAI4G,EAAa,EACbiB,EAAc,EAElB,UAAW1J,KAAQyJ,EAAgB,CACjC,MAAMrB,EAAsB,KAAK,OAAOD,EAAiBuB,EAAc,GAAK1J,EAAK,MAAM,EACjFqI,EAAsB,KAAK,OAAOvC,EAAkB2C,GAAczI,EAAK,cAAc,EACrFsI,EAAc,KAAK,IAAIF,EAAqBC,CAAmB,EAEjEC,EAAc,IAChBtF,EAAYhD,EAAK,IAAI,EAAIsI,EACzBG,GAAcH,EAActI,EAAK,eACjC0J,GAAepB,EAActI,EAAK,OAElC,QAAQ,IAAI,WAAWsI,CAAW,KAAKtI,EAAK,IAAI,KAAKsI,EAActI,EAAK,MAAM,QAAQsI,EAActI,EAAK,cAAc,QAAQ,EACjI,CAGF,eAAQ,IAAI,mCAAmC0J,CAAW,cAAcjB,CAAU,OAAO,EAClFzF,CAAA,CAOD,iCACNG,EACA2C,EACAqC,EACwB,CACxB,QAAQ,IAAI,mCAAmCrC,CAAe,uBAAuBqC,CAAc,EAAE,EAGrG,MAAMwB,EAAkB,KAAK,gCAAgCxG,EAAgB2C,EAAiBqC,CAAc,EAE5G,OAAI,OAAO,KAAKwB,CAAe,EAAE,OAAS,EACjCA,EAIF,KAAK,mCAAmCxG,EAAgB2C,EAAiBqC,CAAc,EAMxF,2BACNtB,EACAC,EACAC,EAC0B,CAC1B,MAAM6C,EAAuC,GAGvCC,EAAyC,GACzCnF,EAAgBmC,EAAM,CAAC,EACvBiD,EAAgBpF,EAAcqC,CAAY,EAEhD,GAAI+C,EAAgB,EAAG,CACrB,MAAMC,EAAe,KAAK,MAAMjD,EAASgD,CAAa,EACtDD,EAAenF,EAAc,IAAI,EAAI,KAAK,IAAIqF,EAAc,CAAC,EAG7D,IAAIvD,EAAkBM,EAAU+C,EAAenF,EAAc,IAAI,EAAIoF,EAErE,QAASnF,EAAI,EAAGA,EAAIkC,EAAM,QAAUL,EAAkB,EAAG7B,IAAK,CAC5D,MAAM3E,EAAO6G,EAAMlC,CAAC,EACdqC,EAAWhH,EAAK+G,CAAY,EAElC,GAAIC,EAAW,GAAKA,GAAYR,EAAiB,CAC/C,MAAMf,EAAW,KAAK,MAAMe,EAAkBQ,GAAYH,EAAM,OAASlC,EAAE,EACvEc,EAAW,IACboE,EAAe7J,EAAK,IAAI,EAAIyF,EAC5Be,GAAmBf,EAAWuB,EAChC,CACF,CAGF4C,EAAW,KAAKC,CAAc,EAGhC,OAAOD,CAAA,CAOD,0CAA0ClH,EAAgE,CAChH,MAAMG,EAAyC,GAGzCe,EAA0B,KAAK,eAAe,OAAOzB,GACzDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKA,EAAE,YAAc,cAE3D0B,EAAyB,KAAK,eAAe,OAAO1B,GACxDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKA,EAAE,YAAc,aAE3D2B,EAAyB,KAAK,eAAe,OAAO3B,GACxDO,EAAY,eAAe,SAASP,EAAE,IAAI,GAAKpC,EAAU,YAAYoC,CAAC,GAIlE6H,EAA6C,GACnD,IAAIC,EAAiB,EACjBC,EAAgB,EAGpB,UAAWlK,KAAQ4D,EACbqG,EAAiBjK,EAAK,iBAAmB0C,EAAY,mBACvDsH,EAAmBhK,EAAK,IAAI,EAAI,EAChCiK,GAAkBjK,EAAK,iBAK3B,UAAWA,KAAQ6D,EACbqG,EAAgBlK,EAAK,gBAAkB0C,EAAY,kBACrDsH,EAAmBhK,EAAK,IAAI,EAAI,EAChCkK,GAAiBlK,EAAK,gBAK1B,UAAWA,KAAQ8D,EAAwB,CACzC,MAAMQ,EAAQ5B,EAAY,gBAAgB1C,EAAK,IAAI,GAAK,EACxDgK,EAAmBhK,EAAK,IAAI,EAAI,KAAK,IAAI,EAAGsE,CAAK,EAQnD,GALI,OAAO,KAAK0F,CAAkB,EAAE,OAAS,GAC3CnH,EAAa,KAAKmH,CAAkB,EAIlCpG,EAAwB,OAAS,GAAKlB,EAAY,iBAAmB,EAAG,CAC1E,MAAMyH,EAAqBvG,EAAwB,KAAK,CAAChC,EAAGC,IAAMD,EAAE,gBAAkBC,EAAE,eAAe,EAAE,CAAC,EACpGyG,EAAc,KAAK,MAAM5F,EAAY,iBAAmByH,EAAmB,eAAe,EAEhG,GAAI7B,EAAc,EAAG,CACnB,MAAM8B,EAA6C,GACnDA,EAAmBD,EAAmB,IAAI,EAAI,KAAK,IAAI7B,EAAa,EAAE,EAGtE,MAAM+B,EAAY3H,EAAY,iBAAoB0H,EAAmBD,EAAmB,IAAI,EAAIA,EAAmB,gBACnH,UAAWnK,KAAQ4D,EAAwB,MAAM,EAAG,CAAC,EAAG,CACtD,MAAM6B,EAAW,KAAK,MAAM4E,EAAYrK,EAAK,gBAAkB,CAAC,EAC5DyF,EAAW,IACb2E,EAAmBpK,EAAK,IAAI,EAAIyF,EAClC,CAGF5C,EAAa,KAAKuH,CAAkB,EACtC,CAIF,GAAIxG,EAAwB,OAAS,GAAKC,EAAuB,OAAS,EAAG,CAC3E,MAAMyG,EAA8C,GAGpD,GAAI1G,EAAwB,OAAS,GAAKlB,EAAY,iBAAmB,EAAG,CAC1E,MAAM6H,EAAgB,KAAK,MAAM7H,EAAY,iBAAmBkB,EAAwB,MAAM,EAC9F,UAAW5D,KAAQ4D,EAAyB,CAC1C,MAAM6B,EAAW,KAAK,MAAM8E,EAAgBvK,EAAK,eAAe,EAC5DyF,EAAW,IACb6E,EAAoBtK,EAAK,IAAI,EAAIyF,EACnC,CACF,CAIF,GAAI5B,EAAuB,OAAS,GAAKnB,EAAY,gBAAkB,EAAG,CACxE,MAAM6H,EAAgB,KAAK,MAAM7H,EAAY,gBAAkBmB,EAAuB,MAAM,EAC5F,UAAW7D,KAAQ6D,EAAwB,CACzC,MAAM4B,EAAW,KAAK,MAAM8E,EAAgBvK,EAAK,cAAc,EAC3DyF,EAAW,IACb6E,EAAoBtK,EAAK,IAAI,EAAIyF,EACnC,CACF,CAIF,UAAWzF,KAAQ8D,EAAwB,CACzC,MAAMQ,EAAQ5B,EAAY,gBAAgB1C,EAAK,IAAI,GAAK,EACxDsK,EAAoBtK,EAAK,IAAI,EAAI,KAAK,IAAI,EAAG,KAAK,MAAMsE,EAAQ,CAAC,CAAC,EAGhE,OAAO,KAAKgG,CAAmB,EAAE,OAAS,GAC5CzH,EAAa,KAAKyH,CAAmB,CACvC,CAGF,OAAOzH,CAAA,CAOD,8BAA8B2B,EAAmE,CACvG,GAAI,OAAO,KAAKA,CAAe,EAAE,SAAW,EAC1C,MAAO,CAAC,EAAE,EAGZ,IAAIgG,EAAyC,CAAC,EAAE,EAEhD,SAAW,CAACC,EAAUC,CAAQ,IAAK,OAAO,QAAQlG,CAAe,EAAG,CAClE,GAAI,CAAC,KAAK,YAAY,IAAIiG,CAAQ,EAChC,SAGF,MAAME,EAA4C,GAClD,UAAWC,KAASJ,EAClB,QAASK,EAAQ,EAAGA,GAASH,EAAUG,IAAS,CAC9C,MAAMC,EAAW,CAAE,GAAGF,CAAA,EAClBC,EAAQ,IACVC,EAASL,CAAQ,EAAII,GAEvBF,EAAgB,KAAKG,CAAQ,EAGjCN,EAAeG,CAAA,CAGjB,OAAOH,CAAA,CAMD,oBAAoBzH,EAAoD,CAE9E,IAAIgI,EAAgB,EAChBrB,EAAc,EACdsB,EAAsB,EACtBC,EAAqB,EACrBC,EAAsB,EAE1B,MAAMC,EAKD,GAEL,SAAW,CAAC3F,EAAUqF,CAAK,IAAK,OAAO,QAAQ9H,CAAS,EAAG,CACzD,MAAM/C,EAAO,KAAK,YAAY,IAAIwF,CAAQ,EAC1C,GAAI,CAACxF,EAAM,SAEX,MAAMoL,EAAcpL,EAAK,OAAS6K,EAC5BQ,EAAgBrL,EAAK,SAAW6K,EAEtCE,GAAiBM,EACjB3B,GAAe0B,EACfJ,GAAuBhL,EAAK,gBAAkB6K,EAC9CI,GAAsBjL,EAAK,eAAiB6K,EAExC9K,EAAU,YAAYC,CAAI,IAC5BkL,GAAuBL,GAGzBM,EAAW,KAAK,CACd,KAAAnL,EACA,MAAA6K,EACA,YAAaO,EACb,aAAcpL,EAAK,SACpB,EAIHmL,EAAW,KAAK,CAACvJ,EAAGC,IAAMD,EAAE,KAAK,SAAWC,EAAE,KAAK,QAAQ,EAG3D,IAAIyJ,EAAkB,GACtB,MAAMC,EAAiC,GAEvC,QAAS5G,EAAI,EAAGA,EAAIwG,EAAW,OAAQxG,IAAK,CAC1C,KAAM,CAAE,KAAA3E,EAAM,MAAA6K,EAAO,YAAaO,CAAA,EAAgBD,EAAWxG,CAAC,EAE9D4G,EAAc,KAAK,CACjB,MAAAV,EACA,YAAaO,EACb,KAAApL,CAAA,CACD,EAKD,QAASwL,EAAI7G,EAAI,EAAG6G,EAAIL,EAAW,OAAQK,IAAK,CAC9C,MAAM3G,EAAesG,EAAWK,CAAC,EAAE,KAC7BC,EAAsBN,EAAWK,CAAC,EAAE,YAG1C,GAAIxL,EAAK,WAAa6E,EAAa,SAAU,CAC3C,MAAM6G,EAAY,KAAK,IAAIN,EAAaK,CAAmB,EAAI,GAC/D,GAAI,KAAK,IAAIL,EAAcK,CAAmB,GAAKC,EACjD,QACF,CAGEN,GAAeK,GACjB,QAAQ,IAAI,yBAAyBzL,EAAK,IAAI,SAASA,EAAK,QAAQ,KAAKoL,CAAW,WAAWvG,EAAa,IAAI,SAASA,EAAa,QAAQ,KAAK4G,CAAmB,MAAM,CAK9K,CAKF,CAIF,MAAME,EAAYX,EAAsBC,EAAqBC,EAC7D,IAAIU,EAAkBD,EAAY,EAAIZ,EAAgBY,EAAY,EAIhEC,GAAmB,IAKrB,MAAMC,EAAiB,GADD,OAAO,KAAK9I,CAAS,EAAE,OACD,GAAK,IACjD6I,GAAmBC,EAGnB,IAAIC,EAAgB,EAChBd,EAAsB,GAAGc,IACzBb,EAAqB,GAAGa,IACxBZ,EAAsB,GAAGY,IAE7B,MAAMC,EAAe,GAAKD,EAAgB,GAAK,GAC/C,OAAAF,GAAmBG,EAEZ,CACL,MAAOhJ,EACP,cAAAgI,EACA,YAAArB,EACA,oBAAAsB,EACA,mBAAAC,EACA,oBAAAC,EACA,cAAAK,EACA,gBAAAD,EACA,gBAAAM,CAAA,CACF,CAMF,gBAAgB5I,EAAsC,CACpD,MAAMgJ,EAAkB,GAGlB9I,EAA+F,GAC/FC,EAA8F,GAC9FC,EAA8F,GAEpG,OAAAJ,EAAY,cAAc,QAAQiJ,GAAS,CACzC,MAAMjM,EAAOiM,EAAM,KACnB,GAAI,CAACjM,EAAM,OAEX,MAAMkM,EAAW,CACf,KAAMD,EAAM,KAAK,KACjB,MAAOA,EAAM,MACb,YAAaA,EAAM,YACnB,SAAUjM,EAAK,UAGbD,EAAU,YAAYC,CAAI,EAC5BoD,EAAe,KAAK8I,CAAQ,EACnBlM,EAAK,YAAc,aAC5BkD,EAAgB,KAAKgJ,CAAQ,EACpBlM,EAAK,YAAc,aAC5BmD,EAAe,KAAK+I,CAAQ,CAC9B,CACD,EAGDF,EAAM,KAAK,+BAA+B,EAC1CA,EAAM,KAAK,IAAI,OAAO,EAAE,CAAC,EACzBA,EAAM,KAAK,EAAE,EAGbA,EAAM,KAAK,iBAAiB,EAC5BA,EAAM,KAAK,IAAI,OAAO,EAAE,CAAC,EACzBA,EAAM,KAAK,gBAAgB,OAAO,OAAOhJ,EAAY,KAAK,EAAE,OAAO,CAACmJ,EAAKtB,IAAUsB,EAAMtB,EAAO,CAAC,EAAE,gBAAgB,EAAE,EACrHmB,EAAM,KAAK,mBAAmBhJ,EAAY,cAAc,gBAAgB,EAAE,EAC1EgJ,EAAM,KAAK,iBAAiBhJ,EAAY,YAAY,gBAAgB,EAAE,EACtEgJ,EAAM,KAAK,mBAAmBhJ,EAAY,mBAAmB,MAAMA,EAAY,kBAAkB,MAAMA,EAAY,mBAAmB,EAAE,EACxIgJ,EAAM,KAAK,EAAE,EAGT5I,EAAe,OAAS,IAC1B4I,EAAM,KAAK,sBAAsB,EACjCA,EAAM,KAAK,IAAI,OAAO,EAAE,CAAC,EACzB5I,EAAe,QAAQpD,GAAQ,CAC7BgM,EAAM,KAAK,GAAGhM,EAAK,MAAM,gBAAgB,KAAKA,EAAK,IAAI,EAAE,EACzDgM,EAAM,KAAK,SAAShM,EAAK,YAAY,gBAAgB,mBAAmBA,EAAK,QAAQ,GAAG,EACzF,EACDgM,EAAM,KAAK,EAAE,GAIX9I,EAAgB,OAAS,IAC3B8I,EAAM,KAAK,sBAAsB,EACjCA,EAAM,KAAK,IAAI,OAAO,EAAE,CAAC,EAEzB9I,EAAgB,KAAK,CAACtB,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EACtDsB,EAAgB,QAAQlD,GAAQ,CAC9BgM,EAAM,KAAK,GAAGhM,EAAK,MAAM,gBAAgB,KAAKA,EAAK,IAAI,EAAE,EACzDgM,EAAM,KAAK,SAAShM,EAAK,YAAY,gBAAgB,mBAAmBA,EAAK,QAAQ,GAAG,EACzF,EACDgM,EAAM,KAAK,EAAE,GAIX7I,EAAe,OAAS,IAC1B6I,EAAM,KAAK,oBAAoB,EAC/BA,EAAM,KAAK,IAAI,OAAO,EAAE,CAAC,EAEzB7I,EAAe,KAAK,CAACvB,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EACrDuB,EAAe,QAAQnD,GAAQ,CAC7BgM,EAAM,KAAK,GAAGhM,EAAK,MAAM,gBAAgB,KAAKA,EAAK,IAAI,EAAE,EACzDgM,EAAM,KAAK,SAAShM,EAAK,YAAY,gBAAgB,mBAAmBA,EAAK,QAAQ,GAAG,EACzF,EACDgM,EAAM,KAAK,EAAE,GAIfA,EAAM,KAAK,uCAAuC,EAClDA,EAAM,KAAK,IAAI,OAAO,EAAE,CAAC,EACzBhJ,EAAY,cAAc,QAAQ,CAACiJ,EAAOtH,IAAM,CAC9C,MAAM3E,EAAOiM,EAAM,KACnB,GAAI,CAACjM,EAAM,OAEX,MAAMoM,EAAWrM,EAAU,YAAYC,CAAI,EAAI,MAC/BA,EAAK,YAAc,aAAe,KAClCA,EAAK,YAAc,YAAc,IAAM,IAEvDgM,EAAM,KAAK,GAAGrH,EAAI,CAAC,KAAKyH,CAAQ,IAAIH,EAAM,MAAM,gBAAgB,KAAKA,EAAM,KAAK,IAAI,KAAKA,EAAM,YAAY,gBAAgB,MAAM,EAClI,EAEMD,EAAM,KAAK;AAAA,CAAI,EAMxB,mBAA4B,CAC1B,MAAO,CAAC,GAAG,KAAK,cAAc,EAMhC,oBAA+C,CAC7C,MAAO,CACL,WAAY,CAAC,GAAG,KAAK,eAAe,EACpC,UAAW,CAAC,GAAG,KAAK,cAAc,EAClC,UAAW,GACX,UAAW,CAAC,GAAG,KAAK,cAAc,EACpC,CAEJ,CChuCO,MAAMK,EAA2B,CACtC,iBAAkB,IAClB,qBAAsB,IACtB,qBAAsB,SACxB,EC/QO,MAAMC,EAAa,CAKxB,YAAYC,EAA2B,GAAM,CAJrClL,EAAA,YAAyB,IACzBA,EAAA,iBAAoB,GACpBA,EAAA,uBAA2B,IAGjC,KAAK,gBAAkBkL,EACvB,KAAK,UAAY,KAAK,KAAI,CAMrB,gBACLC,EACAC,EACAC,EACAC,EACAC,EACAC,EACgB,CAChB,MAAMC,EAAa,KAAK,oBAAoBL,CAAM,EAE5CM,EAA2B,CAC/B,KAAAJ,EACA,SAAU,GAAGH,EAAS,KAAK,KAAKA,EAAS,KAAK,IAAI,GAClD,OAAQM,EACR,OAAQ,UAAUA,CAAU,QAAQJ,EAAa,WAAW,UAAYA,EAAa,iBAAmB,cAAcA,EAAa,gBAAgB,oBAAoBA,EAAa,YAAY,GAAK,EAAG,GAAGA,EAAa,iBAAmB,gBAAkB,EAAE,GAC/P,YAAaA,EAAa,YAC1B,WAAYA,EAAa,iBACzB,aAAc,SACd,UAAW,KAAK,MAAQ,KAAK,WAG/B,OAAI,KAAK,kBACPK,EAAS,YAAc,KAAK,oBAAoBJ,EAAMC,CAAW,EACjEG,EAAS,cAAgB,KAAK,4BAA4BP,EAAUC,EAAQC,CAAY,EAEpFG,IACFE,EAAS,cAAgB,KAAK,oBAAoBF,CAAW,IAIjE,KAAK,KAAK,KAAKE,CAAQ,EAChBA,CAAA,CAMF,eACLP,EACAC,EACAC,EACAC,EACAC,EACAC,EACgB,CAChB,MAAME,EAA2B,CAC/B,KAAAJ,EACA,SAAU,KAAK,oBAAoBH,CAAQ,EAC3C,OAAQC,EAAO,KAAK,KACpB,OAAQ,UAAUA,EAAO,KAAK,IAAI,QAAQC,EAAa,WAAW,UAAUA,EAAa,iBAAmB,gBAAkB,EAAE,GAChI,YAAaA,EAAa,YAC1B,WAAYA,EAAa,iBACzB,aAAc,QACd,UAAW,KAAK,MAAQ,KAAK,WAG/B,OAAI,KAAK,kBACPK,EAAS,YAAc,KAAK,oBAAoBJ,EAAMC,CAAW,EACjEG,EAAS,cAAgB,KAAK,2BAA2BP,EAAUC,EAAQC,CAAY,EAEnFG,IACFE,EAAS,cAAgB,KAAK,oBAAoBF,CAAW,IAIjE,KAAK,KAAK,KAAKE,CAAQ,EAChBA,CAAA,CAMF,kBACLC,EACAC,EACAJ,EACM,CACN,GAAI,CAAC,KAAK,gBAAiB,OAE3B,MAAME,EAA2B,CAC/B,KAAME,EACN,YAAa,EACb,aAAc,SACd,cAAe,EACf,WAAY,kBACZ,WAAY,SACZ,YAAa,EACb,iBAAkB,GAClB,aAAc,SACd,UAAW,KAAK,MAAQ,KAAK,UAC7B,YAAa,QAAQD,CAAY,iCAAiCC,CAAO,GACzE,cAAe,yBAAyB,KAAK,uBAAuBJ,CAAW,CAAC,qBAAqB,KAAK,uBAAuBA,CAAW,CAAC,WAC7I,cAAe,KAAK,oBAAoBA,CAAW,GAGrD,KAAK,KAAK,KAAKE,CAAQ,EAMlB,eACLG,EACAC,EACAC,EACM,CACN,MAAML,EAA2B,CAC/B,KAAM,EACN,YAAa,EACb,aAAc,SACd,cAAe,EACf,WAAY,eACZ,WAAY,SACZ,YAAa,EACb,iBAAkB,GAClB,aAAc,SACd,UAAW,EACX,YAAa,gBACb,cAAe,GAAGG,EAAa,MAAM,qBAAqBC,EAAQ,MAAM,aAAaC,EAAkB,SAAW,OAAO,cACzH,cAAe,CACb,kBAAmBF,EAAa,OAChC,kBAAmBC,EAAQ,OAC3B,kBAAmBD,EAAa,OAAO,CAACf,EAAKF,IAAUE,EAAMF,EAAM,YAAa,CAAC,EACnF,EAGF,KAAK,KAAK,KAAKc,CAAQ,EAMlB,aACLM,EACAR,EACAS,EAAiB,mBACX,CACN,MAAMP,EAA2B,CAC/B,KAAMF,EAAY,YAClB,YAAaA,EAAY,cACzB,aAAc,SACd,cAAe,EACf,WAAY,aACZ,WAAY,SACZ,YAAaA,EAAY,iBACzB,iBAAkB,GAClB,aAAc,SACd,UAAW,KAAK,MAAQ,KAAK,UAC7B,YAAa,iBAAiBQ,CAAO,GACrC,cAAe,GAAGC,CAAM,yBAAyBT,EAAY,gBAAgB,GAC7E,cAAe,KAAK,oBAAoBA,CAAW,GAGrD,KAAK,KAAK,KAAKE,CAAQ,EAMlB,eAAkC,CACvC,MAAO,CAAC,GAAG,KAAK,IAAI,EAMf,eAAeJ,EAAgC,CACpD,OAAO,KAAK,KAAK,OAAOY,GAAOA,EAAI,OAASZ,CAAI,EAM3C,cAAca,EAAuD,CAC1E,OAAO,KAAK,KAAK,OAAOD,GAAOA,EAAI,eAAiBC,CAAI,EAMnD,uBAA0C,CAC/C,MAAMC,EAAgB,KAAK,KAAK,OAAOF,GAAOA,EAAI,eAAiB,QAAQ,EACrEG,EAAe,KAAK,KAAK,OAAOH,GAAOA,EAAI,eAAiB,OAAO,EACnEI,EAAe,KAAK,KAAK,OAAOJ,GAAOA,EAAI,gBAAgB,EAE3DK,EAAU,KAAK,KAAK,KAAK,KAAK,OAAS,CAAC,EACxCC,EAAiBD,EAAUA,EAAQ,KAAO,EAC1CE,EAAc,KAAK,KACtB,OAAOP,GAAOA,EAAI,eAAiB,QAAQ,EAC3C,OAAO,CAACpB,EAAKoB,IAAQpB,EAAMoB,EAAI,YAAa,CAAC,EAEhD,MAAO,CACL,WAAYM,EACZ,aAAcJ,EAAc,OAASC,EAAa,OAClD,iBAAkBI,EAClB,mBAAoBL,EAAc,OAClC,kBAAmBC,EAAa,OAChC,kBAAmBC,EAAa,OAChC,eAAAE,EACA,QAAS,KAAK,wBAAuB,CACvC,CAMK,WAAWE,EAAkC,OAAgB,CAClE,OAAQA,EAAA,CACN,IAAK,OACH,OAAO,KAAK,UAAU,KAAK,KAAM,KAAM,CAAC,EAC1C,IAAK,MACH,OAAO,KAAK,cACd,IAAK,OACH,OAAO,KAAK,eACd,QACE,OAAO,KAAK,UAAU,KAAK,KAAM,KAAM,CAAC,EAC5C,CAMK,WAAkB,CACvB,KAAK,KAAO,GACZ,KAAK,UAAY,KAAK,KAAI,CAMrB,mBAAmBC,EAAwB,CAChD,KAAK,gBAAkBA,CAAA,CAMlB,WAAWC,EAMG,CACnB,OAAO,KAAK,KAAK,OAAOV,GAClB,EAAAU,EAAS,UAAY,CAACV,EAAI,aAAa,cAAc,SAASU,EAAS,SAAS,aAAa,GAG7FA,EAAS,QAAU,CAACV,EAAI,WAAW,cAAc,SAASU,EAAS,OAAO,aAAa,GAGvFA,EAAS,WAAaV,EAAI,YAAcU,EAAS,WAGjDA,EAAS,YAAcV,EAAI,KAAOU,EAAS,UAAU,CAAC,GAAKV,EAAI,KAAOU,EAAS,UAAU,CAAC,IAG1FA,EAAS,iBAAmB,CAACV,EAAI,iBAItC,EAKK,oBAAoBW,EAAsB,SAChD,OAAQA,EAAM,MACZ,IAAK,UACH,OAAOA,EAAM,MAAQ,gBACvB,IAAK,WACH,QAAOC,EAAAD,EAAM,OAAN,YAAAC,EAAY,OAAQ,iBAC7B,IAAK,SACH,QAAOC,EAAAF,EAAM,OAAN,YAAAE,EAAY,OAAQ,eAC7B,QACE,MAAO,gBACX,CAGM,cAAcF,EAAsB,CAC1C,OAAQA,EAAM,MACZ,IAAK,UACH,MAAO,GACT,IAAK,WACH,MAAO,QACT,IAAK,SACH,OAAOA,EAAM,aACf,QACE,MAAO,GACX,CAGM,oBAAoBvB,EAAcC,EAA6B,CACrE,MAAO,QAAQD,CAAI,YAAYC,CAAW,GAGpC,4BACNJ,EACAC,EACA4B,EACQ,CACR,MAAMvB,EAAa,KAAK,oBAAoBL,CAAM,EAClD,IAAI6B,EAAU,GAAG9B,EAAS,KAAK,KAAKA,EAAS,QAAQ,YAAYM,CAAU,GAC3E,OAAAwB,GAAW,QAAQD,EAAO,WAAW,UAEjCA,EAAO,mBACTC,GAAW,iBAGNA,CAAA,CAGD,2BACN9B,EACAC,EACA4B,EACQ,CAER,IAAIC,EAAU,GADO,KAAK,oBAAoB9B,CAAQ,CACzB,GAE7B,OAAIA,EAAS,OAAS,WACpB8B,GAAW,KAAK9B,EAAS,YAAY,WAGvC8B,GAAW,YAAY7B,EAAO,KAAK,KAAKA,EAAO,QAAQ,GACvD6B,GAAW,QAAQD,EAAO,WAAW,UAEjCA,EAAO,mBACTC,GAAW,iBAGNA,CAAA,CAGD,oBAAoBzB,EAI1B,CACA,MAAO,CACL,kBAAmB,KAAK,uBAAuBA,CAAW,EAC1D,kBAAmB,KAAK,uBAAuBA,CAAW,EAC1D,kBAAmBA,EAAY,aAAa,OAAO,CAACV,EAAKF,IAAUE,EAAMF,EAAM,YAAa,CAAC,EAC/F,CAGM,uBAAuBY,EAAyC,CACtE,OAAOA,EAAY,aAAa,UAAgBZ,EAAM,YAAc,CAAC,EAAE,OAGjE,uBAAuBY,EAAyC,CACtE,OAAOA,EAAY,QAAQ,OAAOqB,GAAS,CACzC,OAAQA,EAAM,MACZ,IAAK,UACL,IAAK,WACH,MAAO,GACT,IAAK,SACH,OAAOA,EAAM,aAAe,EAC9B,QACE,MAAO,GACX,CACD,EAAE,OAGG,wBAAiC,CACvC,MAAMK,EAAgB,CAAC,GAAG,KAAK,IAAI,EAAE,UAAU,QAAYhB,EAAI,eAAiB,UAAYA,EAAI,aAAe,YAAY,EAC3H,OAAIgB,GAAiBA,EAAc,YAC1BA,EAAc,YAAY,QAAQ,iBAAkB,EAAE,EAExD,UAGD,aAAsB,CAC5B,MAAMC,EAAU,CAAC,OAAQ,SAAU,gBAAiB,WAAY,SAAU,SAAU,aAAc,WAAW,EACvGC,EAAO,KAAK,KAAK,IAAIlB,GAAO,CAChCA,EAAI,KACJA,EAAI,YACJA,EAAI,aACJ,GAAGA,EAAI,aAAa,KAAKA,EAAI,YAAY,GACzCA,EAAI,WACJA,EAAI,YACJA,EAAI,iBAAmB,MAAQ,KAC/BA,EAAI,UACL,EAED,MAAO,CAACiB,EAAS,GAAGC,CAAI,EAAE,IAAIC,GAAOA,EAAI,KAAK,GAAG,CAAC,EAAE,KAAK;AAAA,CAAI,EAGvD,cAAuB,CAC7B,MAAMC,EAAU,KAAK,wBACrB,IAAIC,EAAO;AAAA,EACXA,GAAQ,gBAAgBD,EAAQ,UAAU;AAAA,EAC1CC,GAAQ,kBAAkBD,EAAQ,YAAY;AAAA,EAC9CC,GAAQ,iBAAiBD,EAAQ,gBAAgB;AAAA,EACjDC,GAAQ,mBAAmBD,EAAQ,kBAAkB;AAAA,EACrDC,GAAQ,kBAAkBD,EAAQ,iBAAiB;AAAA,EACnDC,GAAQ,iBAAiBD,EAAQ,iBAAiB;AAAA,EAClDC,GAAQ,YAAYD,EAAQ,OAAO;AAAA;AAAA,EAEnCC,GAAQ;AAAA,EACRA,GAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;AAAA,EAEzB,UAAWrB,KAAO,KAAK,KACjBA,EAAI,eAAiB,SACvBqB,GAAQ,YAAYrB,EAAI,WAAW,KAAKA,EAAI,aAAa;AAAA,EAEzDqB,GAAQ,SAASrB,EAAI,IAAI,IAAIA,EAAI,WAAW,KAAKA,EAAI,aAAa;AAAA,EAItE,OAAOqB,CAAA,CAEX,CC7bO,MAAMC,EAAY,CAIvB,YAAY/N,EAAoC,CAHxCO,EAAA,cACAA,EAAA,qBAGN,KAAK,MAAQ,KAAK,sBAAsBP,CAAM,EAC9C,KAAK,aAAe,IAAIwL,EAAa,CAM/B,sBAAsBxL,EAAwD,CACpF,MAAO,CACL,YAAa,EACb,cAAe,EACf,aAAcA,EAAO,WAAW,cAAc,IAAImL,IAAU,CAAE,GAAGA,CAAA,EAAQ,EACzE,QAASnL,EAAO,QAAQ,QAAc,CAAE,GAAGoN,GAAQ,EACnD,mBAAoB,CAClB,YAAa,IACb,YAAa,GAAY,EAE3B,UAAW,GACX,YAAa,GACb,iBAAkB,EACpB,CAMM,eAAeY,EAA+C,CACpE,MAAO,CACL,GAAGA,EAEH,mBAAoB,CAClB,QAAS,IAAI,IAAIA,EAAM,mBAAmB,OAAO,EACjD,QAAS,IAAI,IAAIA,EAAM,mBAAmB,OAAO,GAGnD,aAAcA,EAAM,aAAa,QAAc,CAAE,GAAG7C,GAAQ,EAC5D,QAAS6C,EAAM,QAAQ,QAAc,CAAE,GAAGZ,GAAQ,EAClD,UAAW,CAAC,GAAGY,EAAM,SAAS,EAChC,CAMK,gBAA+C,CACpD,OAAO,KAAK,eAAe,KAAK,KAAK,EAOhC,iBAAiBC,EAAoC,CAE1D,GAAI,CAACA,GAAY,OAAOA,EAAS,aAAgB,UAAY,OAAOA,EAAS,eAAkB,SAC7F,MAAM,IAAI,MAAM,+CAA+C,EAGjE,KAAK,MAAQA,CAAA,CAMR,sBAA4C,CACjD,OAAO,KAAK,MAAM,aAAa,OAAO9C,GAASA,EAAM,YAAc,CAAC,EAM/D,sBAAgC,CACrC,OAAO,KAAK,MAAM,QAAQ,OAAOiC,GAAS,CACxC,OAAQA,EAAM,MACZ,IAAK,UACH,MAAO,GACT,IAAK,WACH,MAAO,GACT,IAAK,SACH,OAAOA,EAAM,aAAe,EAC9B,QACE,MAAO,GACX,CACD,EAQI,kBAAkBc,EAAmBC,EAAmBC,EAAoB,EAAS,CAC1F,MAAMjD,EAAQ,KAAK,MAAM,aAAa,KAAKkD,GAAKA,EAAE,KAAK,OAASH,CAAS,EACrE/C,IACFA,EAAM,YAAc,KAAK,IAAI,EAAGgD,CAAS,EACrCC,EAAY,IACdjD,EAAM,MAAQ,KAAK,IAAI,EAAGA,EAAM,MAAQiD,CAAS,GAErD,CAMK,kBAAkBE,EAAoBF,EAAyB,CACpE,MAAMhB,EAAQ,KAAK,MAAM,QAAQkB,CAAU,EACvClB,GAASA,EAAM,OAAS,WAC1BA,EAAM,aAAe,KAAK,IAAI,EAAGA,EAAM,aAAegB,CAAS,EACjE,CAOK,oBAAoBJ,EAA2BO,EAA4C,SAChG,MAAMN,EAAW,KAAK,eAAeD,CAAK,EAGpCpC,EAA6B,CACjC,YAAa2C,EAAW,YACxB,kBAAkBlB,EAAAkB,EAAW,kBAAX,YAAAlB,EAA4B,YAC9C,cAAgBC,EAAAiB,EAAW,kBAAX,MAAAjB,EAA4B,kBAAmBiB,EAAW,gBAAgB,iBAAiB,OAAS,EAAIA,EAAW,gBAAgB,iBAAiB,CAAC,EAAE,YAA0B,OACjM,iBAAkBA,EAAW,iBAC7B,mBAAoB,GACpB,aAAcA,EAAW,cAGrBC,EAAiC,KAAK,cAAcD,EAAW,QAAQ,EACzE,KAAK,aAAa,gBAChBA,EAAW,SACXA,EAAW,OACX3C,EACAoC,EAAM,YACNA,EAAM,cACNA,CAAA,EAEF,KAAK,aAAa,eAChBO,EAAW,SACXA,EAAW,OACX3C,EACAoC,EAAM,YACNA,EAAM,cACNA,CAAA,EAUN,GANAC,EAAS,UAAU,KAAKO,CAAc,EAGtCP,EAAS,kBAAoBM,EAAW,YAGpC,KAAK,cAAcA,EAAW,QAAQ,EAExCN,EAAS,mBAAmB,QAAQ,IAAIM,EAAW,SAAS,KAAK,IAAI,MAChE,CAEL,MAAMD,EAAaL,EAAS,QAAQ,aAAeQ,EAAE,aAAgBF,EAAW,SAAmB,UAAU,EACzGD,GAAc,GAChBL,EAAS,mBAAmB,QAAQ,IAAIK,CAAU,CACpD,CAOF,GAHAL,EAAS,gBAGLM,EAAW,kBAEb,GAAI,KAAK,cAAcA,EAAW,MAAM,EAAG,CAEzC,MAAMG,EAAcT,EAAS,aAAa,KAAKI,GAAKA,EAAE,KAAK,OAAUE,EAAW,OAA6B,KAAK,IAAI,EAClHG,IACFA,EAAY,YAAc,EAC1BA,EAAY,MAAQ,EACtB,SAGIH,EAAW,OAAO,OAAS,SAAU,CACvC,MAAMD,EAAaL,EAAS,QAAQ,aAAeQ,EAAE,aAAgBF,EAAW,OAAiB,UAAU,EACvGD,GAAc,GAAKL,EAAS,QAAQK,CAAU,EAAE,OAAS,WAC1DL,EAAS,QAAQK,CAAU,EAAU,aAAe,EACvD,UAKA,KAAK,cAAcC,EAAW,MAAM,EAAG,CAEzC,MAAMG,EAAcT,EAAS,aAAa,KAAKI,GAAKA,EAAE,KAAK,OAAUE,EAAW,OAA6B,KAAK,IAAI,EACtH,GAAIG,GAAeH,EAAW,YAAc,EAAG,CAC7CG,EAAY,YAAc,KAAK,IAAI,EAAGA,EAAY,YAAcH,EAAW,WAAW,EAEtF,MAAMI,EAAaD,EAAY,KAAK,OAC9BN,EAAY,KAAK,MAAMG,EAAW,YAAcI,CAAU,EAChED,EAAY,MAAQ,KAAK,IAAI,EAAGA,EAAY,MAAQN,CAAS,EAC/D,SAGIG,EAAW,OAAO,OAAS,SAAU,CACvC,MAAMD,EAAaL,EAAS,QAAQ,aAAeQ,EAAE,aAAgBF,EAAW,OAAiB,UAAU,EAC3G,GAAID,GAAc,GAAKL,EAAS,QAAQK,CAAU,EAAE,OAAS,SAAU,CACrE,MAAMlB,EAAQa,EAAS,QAAQK,CAAU,EACnCF,EAAY,KAAK,MAAMG,EAAW,YAAcnB,EAAM,KAAK,MAAM,EACvEA,EAAM,aAAe,KAAK,IAAI,EAAGA,EAAM,aAAegB,CAAS,EACjE,CAKN,OAAOH,CAAA,CAMD,cAAc/O,EAAsC,CAC1D,MAAO,SAAUA,GAAQ,gBAAiBA,GAAQ,EAAE,SAAUA,EAAA,CAMzD,kBAAkB8O,EAA2BT,EAA4G,CAC9J,MAAMU,EAAW,KAAK,eAAeD,CAAK,EAY1C,GATAC,EAAS,UAAU,KAAK,CACtB,GAAGV,EAAO,aACV,KAAMS,EAAM,YACb,EAGDC,EAAS,kBAAoBV,EAAO,YAGhCA,EAAO,iBAET,GAAIA,EAAO,aAAa,SAAS,SAAS,IAAI,EAAG,CAE/C,MAAMe,EAAaL,EAAS,QAAQ,aAClCQ,EAAE,OAAS,UAAY,KAAK,oBAAoBA,CAAC,IAAMlB,EAAO,aAAa,MAAM,EAC/Ee,GAAc,GAAKL,EAAS,QAAQK,CAAU,EAAE,OAAS,WAC1DL,EAAS,QAAQK,CAAU,EAAU,aAAe,EACvD,KACK,CAEL,MAAMI,EAAcT,EAAS,aAAa,KAAKI,GAAKA,EAAE,KAAK,OAASd,EAAO,aAAa,MAAM,EAC1FmB,IACFA,EAAY,YAAc,EAC1BA,EAAY,MAAQ,EACtB,KAEG,CAEL,MAAMA,EAAcT,EAAS,aAAa,KAAKI,GAAKA,EAAE,KAAK,OAASd,EAAO,aAAa,MAAM,EAC9F,GAAImB,GAAenB,EAAO,YAAc,EAAG,CACzCmB,EAAY,YAAc,KAAK,IAAI,EAAGA,EAAY,YAAcnB,EAAO,WAAW,EAElF,MAAMoB,EAAaD,EAAY,KAAK,OAC9BN,EAAY,KAAK,MAAMb,EAAO,YAAcoB,CAAU,EAC5DD,EAAY,MAAQ,KAAK,IAAI,EAAGA,EAAY,MAAQN,CAAS,EAC/D,CAGF,OAAOH,CAAA,CAMD,oBAAoBb,EAAsB,CAChD,OAAQA,EAAM,MACZ,IAAK,UACH,OAAOA,EAAM,KACf,IAAK,WACH,OAAOA,EAAM,KAAK,KACpB,IAAK,SACH,OAAOA,EAAM,KAAK,KACpB,QACE,MAAO,gBACX,CAMK,gBAAgBwB,EAA4B,CACjD,KAAK,MAAM,UAAU,KAAK,CACxB,GAAGA,EACH,KAAM,KAAK,MAAM,YAClB,EAMI,eAAeC,EAAsB,CAC1C,KAAK,MAAM,kBAAoBA,CAAA,CAO1B,mBAAmBb,EAA2Bc,EAAmBvD,EAAyB,iBAAsC,CACrI,MAAMwD,EAAef,EAAM,aAAa,OAAO7C,GAASA,EAAM,YAAc,CAAC,EACvE6D,EAAoBhB,EAAM,QAAQ,OAAOZ,GAAS,CACtD,OAAQA,EAAM,MACZ,IAAK,UACH,MAAO,GACT,IAAK,WACH,MAAO,GACT,IAAK,SACH,OAAOA,EAAM,aAAe,EAC9B,QACE,MAAO,GACX,CACD,EAGK6B,EAAoBF,EAAa,SAAW,EAM5CG,EADuBlB,EAAM,QAAQ,MAAMS,GAAKA,EAAE,OAAS,QAAQ,GACvBO,EAAkB,SAAW,EAGzEG,EAAkBnB,EAAM,aAAec,EAI7C,MAAO,CACL,GAAGd,EACH,YAJgBiB,GAAqBC,GAAqBC,CAI7C,CACf,CAMK,gBAAuB,CAC5B,MAAMC,EAAe,KAAK,iBACpBnB,EAAW,KAAK,mBAAmBmB,CAAY,EACrD,KAAK,iBAAiBnB,CAAQ,EAMxB,eAAeb,EAAuB,CAC5C,OAAQA,EAAM,MACZ,IAAK,UACH,MAAO,GACT,IAAK,WACH,MAAO,GACT,IAAK,SACH,OAAOA,EAAM,aAAe,EAC9B,QACE,MAAO,GACX,CAMK,iBAAiB0B,EAAmBvD,EAAyB,iBAAwE,CAC1I,MAAMwD,EAAe,KAAK,uBACpBC,EAAoB,KAAK,uBAE/B,OAAID,EAAa,SAAW,EACnB,oBAGLC,EAAkB,SAAW,GAAK,KAAK,MAAM,QAAQ,MAAMP,GAAKA,EAAE,OAAS,QAAQ,EAC9E,kBAGL,KAAK,MAAM,aAAeK,EACrB,YAIF,CAMF,eAAyB,CAC9B,OAAO,KAAK,MAAM,YAMb,gBAAyB,CAC9B,OAAO,KAAK,MAAM,YAMb,kBAA2B,CAChC,OAAO,KAAK,MAAM,cAMb,qBAA8B,CACnC,OAAO,KAAK,MAAM,iBAMb,cAA+B,CACpC,MAAO,CAAC,GAAG,KAAK,MAAM,SAAS,EAM1B,WAAkB,CACvB,KAAK,MAAM,YAAc,GAMpB,YAAY9O,EAA0C,CAC3D,KAAK,MAAQ,KAAK,sBAAsBA,CAAM,EAElD,CCzbO,MAAMqP,EAAwD,CAM5D,uBAAuBrB,EAA8C,CAE1E,MAAMsB,EAAmBtB,EAAM,aAAa,OAAO7C,GACjDA,EAAM,YAAc,GACpB,CAAC6C,EAAM,mBAAmB,QAAQ,IAAI7C,EAAM,KAAK,IAAI,GAGvD,GAAImE,EAAiB,SAAW,EAC9B,OAAO,KAGT,MAAMN,EAAoB,KAAK,qBAAqBhB,CAAK,EACzD,GAAIgB,EAAkB,SAAW,EAC/B,OAAO,KAIT,IAAIO,EAAoC,KACpCC,EAAY,EAEhB,UAAWC,KAAUH,EACnB,UAAWlC,KAAS4B,EAAmB,CACrC,MAAMU,EAAe,KAAK,6BAA6BD,EAAQrC,CAAK,EAEpE,GAAIsC,EAAa,YAAcF,EAAW,CACxCA,EAAYE,EAAa,YAGzB,IAAIC,EAAmB,GACvB,GAAIvC,EAAM,OAAS,SAAU,CAC3B,MAAMwC,EAAmBxC,EAAM,KAAK,OAASA,EAAM,aACnDuC,EAAmBD,EAAa,aAAeE,CAAA,CAKjDL,EAAiB,CACf,SAAUE,EACV,OAAQrC,EACR,YAAasC,EAAa,YAC1B,gBAAiBA,EACjB,iBAAAC,EACA,aAAc,EAAC,CACjB,CACF,CAIJ,OAAOJ,CAAA,CAOF,sBAAsBvB,EAA8C,CACzE,MAAM6B,EAAmB7B,EAAM,QAAQ,OAAO,CAACZ,EAAOrN,IACpD,KAAK,eAAeqN,CAAK,GACzB,CAACY,EAAM,mBAAmB,QAAQ,IAAIjO,CAAK,GAG7C,GAAI8P,EAAiB,SAAW,EAC9B,OAAO,KAGT,MAAMd,EAAef,EAAM,aAAa,OAAO7C,GAASA,EAAM,YAAc,CAAC,EAC7E,GAAI4D,EAAa,SAAW,EAC1B,OAAO,KAIT,IAAIQ,EAAoC,KACpCC,EAAY,EAEhB,UAAWpC,KAASyC,EAClB,UAAWJ,KAAUV,EAAc,CACjC,MAAMe,EAAc,KAAK,6BAA6B1C,EAAOqC,CAAM,EAEnE,GAAIK,EAAY,YAAcN,EAAW,CACvCA,EAAYM,EAAY,YAGxB,MAAMH,EAAmBG,EAAY,aAAeL,EAAO,YAG3DF,EAAiB,CACf,SAAUnC,EACV,OAAQqC,EACR,YAAaK,EAAY,YACzB,gBAAiBA,EACjB,iBAAAH,EACA,aAAc,EAAC,CACjB,CACF,CAIJ,OAAOJ,CAAA,CAMF,oBAAoBnC,EAAsB,CAC/C,OAAQA,EAAM,MACZ,IAAK,UACH,OAAOA,EAAM,KACf,IAAK,WACH,OAAOA,EAAM,KAAK,KACpB,IAAK,SACH,MAAO,GAAGA,EAAM,KAAK,IAAI,KAAKA,EAAM,YAAY,IAAIA,EAAM,KAAK,IACjE,QACE,MAAO,gBACX,CASK,iBAAiBY,EAAqD,CAC3E,MAAMsB,EAAmBtB,EAAM,aAAa,OAAO7C,GACjDA,EAAM,YAAc,GACpB,CAAC6C,EAAM,mBAAmB,QAAQ,IAAI7C,EAAM,KAAK,IAAI,GAGvD,GAAImE,EAAiB,SAAW,EAC9B,OAAO,KAGT,MAAMN,EAAoB,KAAK,qBAAqBhB,CAAK,EACzD,GAAIgB,EAAkB,SAAW,EAC/B,OAAO,KAIT,IAAIe,EAAuC,KACvCC,EAAwB,EAE5B,UAAWP,KAAUH,EAAkB,CACrC,MAAMW,EAA8B,KAAK,yBAAyBR,EAAQT,CAAiB,EAEvFiB,EAA8BD,IAChCA,EAAwBC,EACxBF,EAAaN,EACf,CAGF,OAAOM,CAAA,CASF,gBAAgB/B,EAAyC,CAC9D,MAAM6B,EAAmB7B,EAAM,QAAQ,OAAO,CAACZ,EAAOrN,IACpD,KAAK,eAAeqN,CAAK,GACzB,CAACY,EAAM,mBAAmB,QAAQ,IAAIjO,CAAK,GAG7C,GAAI8P,EAAiB,SAAW,EAC9B,OAAO,KAGT,MAAMd,EAAef,EAAM,aAAa,OAAO7C,GAASA,EAAM,YAAc,CAAC,EAC7E,GAAI4D,EAAa,SAAW,EAC1B,OAAO,KAIT,IAAImB,EAA0B,KAC1BF,EAAwB,EAE5B,UAAW5C,KAASyC,EAAkB,CACpC,MAAMM,EAA6B,KAAK,wBAAwB/C,EAAO2B,CAAY,EAE/EoB,EAA6BH,IAC/BA,EAAwBG,EACxBD,EAAY9C,EACd,CAGF,OAAO8C,CAAA,CAOD,yBAAyBT,EAA2BpD,EAA0B,CACpF,IAAI2D,EAAwB,EAE5B,UAAW5C,KAASf,EAAS,CAC3B,MAAM+D,EAAqB,KAAK,6BAA6BX,EAAQrC,CAAK,EAC1E4C,EAAwB,KAAK,IAAIA,EAAuBI,CAAkB,EAG5E,OAAOJ,CAAA,CAOD,wBAAwB5C,EAAciD,EAAsC,CAClF,IAAIL,EAAwB,EAE5B,UAAWP,KAAUY,EAAS,CAC5B,MAAMD,EAAqB,KAAK,6BAA6BhD,EAAOqC,CAAM,EAC1EO,EAAwB,KAAK,IAAIA,EAAuBI,CAAkB,EAG5E,OAAOJ,CAAA,CAMD,6BAA6BP,EAA2BrC,EAA+B,CAC7F,MAAMkD,EAAab,EAAO,MAAQA,EAAO,KAAK,SAC9C,IAAIc,EAAkBD,EACtB,MAAME,EAAkB,KAAK,sBAAsBF,CAAU,EAG7D,IAAKlD,EAAM,OAAS,YAAcA,EAAM,OAAS,WAAaA,EAAM,KAAM,CACxE,MAAMqD,EAAe,KAAK,sBAAsBhB,EAAQrC,EAAM,IAAI,EAE9DqD,IACFF,EAAkB,KAAK,qBAAqBD,EAAYG,EAAcD,CAAe,EACvF,CAIF,GAAIpD,EAAM,OAAS,SAAU,CAC3B,MAAMwC,EAAmBxC,EAAM,KAAK,OAASA,EAAM,aACnDmD,EAAkB,KAAK,IAAIA,EAAiBX,CAAgB,EAG9D,OAAAY,EAAgB,YAAcD,EACvBC,CAAA,CAMD,6BAA6BpD,EAAcqC,EAA4C,CAC7F,IAAIc,EACAC,EAGJ,GAAIpD,EAAM,OAAS,UACjBmD,EAAkBhF,EAAyB,qBAC3CiF,EAAkB,KAAK,sBAAsBD,CAAe,UACnDnD,EAAM,OAAS,WAAY,CACpC,MAAMkD,EAAab,EAAO,YAC1Be,EAAkB,KAAK,sBAAsBF,CAAU,EACvD,MAAMG,EAAe,KAAK,2BAA2BrD,EAAM,KAAMqC,CAAM,EAEnEgB,GAAgBA,EAAa,MAAQ,EACvCF,EAAkB,KAAK,qBAAqBD,EAAYG,EAAcD,CAAe,EAErFD,EAAkBD,CACpB,SACSlD,EAAM,OAAS,SAAU,CAClC,MAAMkD,EAAalD,EAAM,aAAeA,EAAM,KAAK,SACnDoD,EAAkB,KAAK,sBAAsBF,CAAU,EACvD,MAAMG,EAAe,KAAK,2BAA2BrD,EAAM,KAAMqC,CAAM,EAEnEgB,GAAgBA,EAAa,MAAQ,EACvCF,EAAkB,KAAK,qBAAqBD,EAAYG,EAAcD,CAAe,EAErFD,EAAkBD,CACpB,MAEAC,EAAkB,EAClBC,EAAkB,KAAK,sBAAsB,CAAC,EAIhD,OAAAA,EAAgB,YAAc,KAAK,IAAID,EAAiBd,EAAO,WAAW,EAEnEe,CAAA,CAMD,sBAAsBf,EAA2BiB,EAAwC,CAE/F,GAAI,CAACjB,EAAO,MAAQ,CAACA,EAAO,KAAK,kBAAoBA,EAAO,KAAK,iBAAiB,SAAW,EAC3F,OAAO,KAGT,IAAIgB,EAAe,KACfE,EAAoB,EAGxB,UAAWpR,KAAYkQ,EAAO,KAAK,iBAE7BiB,EAAU,YAAcA,EAAU,WAAW,SAASnR,EAAS,WAAW,IAC5EoR,EAAoB,KAAK,IAAIA,EAAmBpR,EAAS,KAAK,EAC9DkR,EAAelR,GAInB,OAAOkR,CAAA,CAMD,2BAA2BC,EAAiBjB,EAAmD,CAErG,GAAI,CAACiB,GAAa,CAACA,EAAU,kBAAoBA,EAAU,iBAAiB,SAAW,EACrF,OAAO,KAGT,IAAID,EAAe,KACfE,EAAoB,EAGxB,UAAWpR,KAAYmR,EAAU,iBAE3BjB,EAAO,KAAK,YAAcA,EAAO,KAAK,WAAW,SAASlQ,EAAS,WAAW,IAChFoR,EAAoB,KAAK,IAAIA,EAAmBpR,EAAS,KAAK,EAC9DkR,EAAelR,GAInB,OAAOkR,CAAA,CAMD,qBAAqBzC,EAAoC,CAC/D,OAAOA,EAAM,QAAQ,UAAgB,KAAK,eAAeZ,CAAK,CAAC,EAMzD,eAAeA,EAAuB,CAC5C,OAAQA,EAAM,MACZ,IAAK,UACH,MAAO,GACT,IAAK,WACH,MAAO,GACT,IAAK,SACH,OAAOA,EAAM,aAAe,EAC9B,QACE,MAAO,GACX,CAMM,sBAAsBkD,EAAqC,CACjE,MAAO,CACL,WAAAA,EACA,YAAa,EACb,YAAaA,EACb,iBAAkB,EAAC,CACrB,CAMM,qBAAqBA,EAAoB/Q,EAA0BiR,EAA0C,CACnH,MAAMpK,EAAa,EAAK7G,EAAS,MAAQ,IACnCqR,EAAc,KAAK,MAAMN,EAAalK,CAAU,EAEtD,OAAAoK,EAAgB,YAAc,KAAK,MAAMF,GAAc/Q,EAAS,MAAQ,IAAI,EAC5EiR,EAAgB,iBAAmB,CAACjR,CAAQ,EAErCqR,CAAA,CAOF,0BAA0BnB,EAA2BpD,EAAgC,CAC1F,GAAIA,EAAQ,SAAW,EAAG,OAAO,KAEjC,IAAIwE,EAA2B,KAC3BrB,EAAY,EAEhB,UAAWpC,KAASf,EAAS,CAC3B,MAAMwC,EAAS,KAAK,6BAA6BY,EAAQrC,CAAK,EAC1DyB,EAASW,IACXA,EAAYX,EACZgC,EAAazD,EACf,CAGF,OAAOyD,CAAA,CAOF,yBAAyBzD,EAAciD,EAAwD,CACpG,GAAIA,EAAQ,SAAW,EAAG,OAAO,KAEjC,IAAIQ,EAAuC,KACvCrB,EAAY,EAEhB,UAAWC,KAAUY,EAAS,CAC5B,MAAMxB,EAAS,KAAK,6BAA6BzB,EAAOqC,CAAM,EAC1DZ,EAASW,IACXA,EAAYX,EACZgC,EAAapB,EACf,CAGF,OAAOoB,CAAA,CAEX,CCpbO,MAAMC,EAA8D,CAKlE,UAAU1D,EAA8B,CAC7C,MAAO,GAMF,gBAAgBA,EAAqBzB,EAAmC,CAC7E,OAAOJ,EAAyB,qBAO3B,cAAc6B,EAAqBzB,EAAyC,CACjF,MAAMmE,EAAc,KAAK,gBAAgB1C,EAAOzB,CAAM,EAGhDgE,EAAmB,GAGnBoB,EAA6B,CACjC,KAAM,EACN,SAAU,KAAK,eAAe3D,CAAK,EACnC,OAAQzB,EAAO,KAAK,KACpB,OAAQ,wBAAwBA,EAAO,KAAK,IAAI,GAChD,YAAAmE,EACA,WAAYH,CAAA,EAGd,MAAO,CACL,YAAAG,EACA,iBAAAH,EACA,mBAAoB,GACpB,aAAAoB,CAAA,CACF,CAMK,aAAa3D,EAA8B,CAChD,MAAO,GAMF,eAAeA,EAA6B,CACjD,OAAOA,EAAM,KAMR,YAAYA,EAA6B,CAC9C,OAAO7B,EAAyB,qBAM3B,cAA0B,CAC/B,MAAO,UAOF,sBAAsB6B,EAAqB4D,EAAgD,CAChG,OAAOzF,EAAyB,qBAO3B,8BAA8B6B,EAAqB4D,EAA+C,CAGvG,OAAOzF,EAAyB,qBAAuByF,EAAiB,OAOnE,sBAAsB5D,EAAqBzB,EAGhD,CACA,MAAO,CACL,WAAYA,EAAO,YACnB,YAAaA,EAAO,MACtB,CAOK,oBAAoByB,EAA8B,CACvD,MAAO,GAOF,kBAAkBA,EAAqBzB,EAAmC,CAC/E,MAAO,GAOF,qBAAqByB,EAA8B,CACxD,MAAO,GAGX,CCjIO,MAAM6D,EAAgE,CAKpE,UAAU7D,EAA+B,CAC9C,MAAO,GAMF,gBAAgBA,EAAsBzB,EAAmC,CAC9E,MAAM2E,EAAalD,EAAM,KAAK,SAGxB8D,EAAqB,KAAK,sBAAsB9D,EAAOzB,CAAM,EAEnE,GAAIuF,IAAuB,EAAG,CAE5B,MAAM9K,EAAa,EAAK8K,EAAqB,IAC7C,OAAO,KAAK,MAAMZ,EAAalK,CAAU,EAG3C,OAAOkK,CAAA,CAMF,cAAclD,EAAsBzB,EAAyC,CAElF,MAAMwF,EADe,KAAK,sBAAsB/D,EAAOzB,CAAM,EACtB,WAEjCgE,EAAmBwB,GAAqBxF,EAAO,YAG/CoF,EAA6B,CACjC,KAAM,EACN,SAAU,KAAK,eAAe3D,CAAK,EACnC,OAAQzB,EAAO,KAAK,KACpB,OAAQ,UAAUA,EAAO,KAAK,IAAI,QAAQwF,CAAiB,UAAUxB,EAAmB,gBAAkB,EAAE,GAC5G,YAAawB,EACb,WAAYxB,CAAA,EAGd,MAAO,CACL,YAAawB,EACb,iBAAAxB,EACA,mBAAoB,GACpB,aAAAoB,CAAA,CACF,CAMK,aAAa3D,EAA+B,CACjD,MAAO,GAMF,eAAeA,EAA8B,CAClD,OAAOA,EAAM,KAAK,KAMb,YAAYA,EAA8B,CAC/C,OAAOA,EAAM,KAAK,SAMb,sBAAsBA,EAAsBzB,EAGjD,CACA,MAAMqB,EAAc,KAAK,gBAAgBI,EAAOzB,CAAM,EAGhDyF,EAAc,KAAK,IACvB,KAAK,MAAMpE,EAAcrB,EAAO,KAAK,MAAM,EAC3CA,EAAO,OAMT,MAAO,CACL,WAHiB,KAAK,IAAIqB,EAAarB,EAAO,WAAW,EAIzD,YAAAyF,CAAA,CACF,CAMM,sBAAsBhE,EAAsBzB,EAAmC,OACrF,GAAI,CAACyB,EAAM,KAAK,kBAAoBA,EAAM,KAAK,iBAAiB,SAAW,EACzE,MAAO,GAIT,IAAIC,EAAA1B,EAAO,OAAP,MAAA0B,EAAa,WAAY,CAC3B,IAAIoD,EAAe,EAEnB,UAAWlR,KAAY6N,EAAM,KAAK,iBAE5BzB,EAAO,KAAK,WAAW,SAASpM,EAAS,WAAW,GACpDA,EAAS,gBAAkB,aAC7BkR,EAAe,KAAK,IAAIA,EAAclR,EAAS,KAAK,GAIxD,OAAOkR,CAAA,CAIT,MAAO,GAMF,oBAAoBrD,EAA+B,CACxD,OAAOA,EAAM,KAAK,kBAAoBA,EAAM,KAAK,iBAAiB,OAAS,EAOtE,kBAAkBA,EAAsBzB,EAAmC,CAEhF,MAAMpM,EAAW,KAAK,sBAAsB6N,EAAOzB,CAAM,EAEzD,OAAIpM,EAAW,EAEN,EAAgBA,EAAW,IAG7B,EAOF,qBAAqB6N,EAA+B,CACzD,MAAO,GAMF,UAAUA,EAA8B,CAC7C,OAAOA,EAAM,KAAK,OAMb,aAAaA,EAAgC,CAClD,OAAOA,EAAM,KAAK,YAAc,EAAC,CAM5B,mBAAmBA,EAA6B,CACrD,OAAOA,EAAM,KAAK,kBAAoB,EAAC,CAMlC,cAA2B,CAChC,MAAO,WAQF,sBAAsBA,EAAsB4D,EAAgD,CACjG,MAAMV,EAAalD,EAAM,KAAK,SAE9B,GAAI,CAAC4D,GAAoBA,EAAiB,SAAW,EAEnD,OAAOV,EAIT,IAAId,EAAYc,EAEhB,UAAW3E,KAAUqF,EAAkB,CACrC,MAAMZ,EAAqB,KAAK,gBAAgBhD,EAAOzB,CAAM,EAC7D6D,EAAY,KAAK,IAAIA,EAAWY,CAAkB,EAGpD,OAAOZ,CAAA,CAOF,8BAA8BpC,EAAsB4D,EAA+C,CACxG,IAAIhE,EAAc,EAElB,UAAWrB,KAAUqF,EACnBhE,GAAe,KAAK,gBAAgBI,EAAOzB,CAAM,EAGnD,OAAOqB,CAAA,CAEX,CC9NO,MAAMqE,EAA4D,CAKhE,UAAUjE,EAA6B,CAC5C,OAAOA,EAAM,aAAe,EAOvB,gBAAgBA,EAAoBzB,EAAmC,CAC5E,GAAIyB,EAAM,cAAgB,EACxB,MAAO,GAIT,MAAMkD,EAAalD,EAAM,aAAeA,EAAM,KAAK,SAG7C8D,EAAqB,KAAK,sBAAsB9D,EAAOzB,CAAM,EAEnE,GAAIuF,IAAuB,EAAG,CAE5B,MAAM9K,EAAa,EAAK8K,EAAqB,IAC7C,OAAO,KAAK,MAAMZ,EAAalK,CAAU,EAG3C,OAAOkK,CAAA,CAMF,cAAclD,EAAoBzB,EAAyC,CAEhF,MAAMwF,EADe,KAAK,sBAAsB/D,EAAOzB,CAAM,EACtB,WAEjCgE,EAAmBwB,GAAqBxF,EAAO,YAG/CoF,EAA6B,CACjC,KAAM,EACN,SAAU,KAAK,eAAe3D,CAAK,EACnC,OAAQzB,EAAO,KAAK,KACpB,OAAQ,UAAUA,EAAO,KAAK,IAAI,QAAQwF,CAAiB,UAAUxB,EAAmB,gBAAkB,EAAE,GAC5G,YAAawB,EACb,WAAYxB,CAAA,EAGd,MAAO,CACL,YAAawB,EACb,iBAAAxB,EACA,mBAAoB,GACpB,aAAAoB,CAAA,CACF,CAMK,aAAa3D,EAA6B,CAC/C,OAAOA,EAAM,cAAgB,EAMxB,eAAeA,EAA4B,CAChD,MAAO,GAAGA,EAAM,KAAK,IAAI,KAAKA,EAAM,YAAY,IAAIA,EAAM,KAAK,IAO1D,YAAYA,EAA4B,CAC7C,OAAOA,EAAM,aAAeA,EAAM,KAAK,SAMlC,sBAAsBA,EAAoBzB,EAG/C,CACA,MAAMqB,EAAc,KAAK,gBAAgBI,EAAOzB,CAAM,EAGhDyF,EAAc,KAAK,IACvB,KAAK,MAAMpE,EAAcrB,EAAO,KAAK,MAAM,EAC3CA,EAAO,OAMT,MAAO,CACL,WAHiB,KAAK,IAAIqB,EAAarB,EAAO,WAAW,EAIzD,YAAAyF,CAAA,CACF,CAOK,mBAAmBhE,EAAoBkE,EAI5C,CACA,GAAIA,GAAkB,GAAKlE,EAAM,cAAgB,EAC/C,MAAO,CACL,YAAa,EACb,eAAgBA,EAAM,aACtB,gBAAiB,KAAK,aAAaA,CAAK,GAK5C,MAAMgE,EAAc,KAAK,IACvB,KAAK,MAAME,EAAiBlE,EAAM,KAAK,MAAM,EAC7CA,EAAM,cAIR,OAAAA,EAAM,aAAe,KAAK,IAAI,EAAGA,EAAM,aAAegE,CAAW,EAE1D,CACL,YAAAA,EACA,eAAgBhE,EAAM,aACtB,gBAAiB,KAAK,aAAaA,CAAK,EAC1C,CAMM,sBAAsBA,EAAoBzB,EAAmC,OACnF,GAAI,CAACyB,EAAM,KAAK,kBAAoBA,EAAM,KAAK,iBAAiB,SAAW,EACzE,MAAO,GAIT,IAAIC,EAAA1B,EAAO,OAAP,MAAA0B,EAAa,WAAY,CAC3B,IAAIoD,EAAe,EAEnB,UAAWlR,KAAY6N,EAAM,KAAK,iBAE5BzB,EAAO,KAAK,WAAW,SAASpM,EAAS,WAAW,GACpDA,EAAS,gBAAkB,aAC7BkR,EAAe,KAAK,IAAIA,EAAclR,EAAS,KAAK,GAIxD,OAAOkR,CAAA,CAIT,MAAO,GAMF,oBAAoBrD,EAA6B,CACtD,OAAOA,EAAM,KAAK,kBAAoBA,EAAM,KAAK,iBAAiB,OAAS,EAOtE,kBAAkBA,EAAoBzB,EAAmC,CAE9E,MAAMpM,EAAW,KAAK,sBAAsB6N,EAAOzB,CAAM,EAEzD,OAAIpM,EAAW,EAEN,EAAgBA,EAAW,IAG7B,EAOF,qBAAqB6N,EAA6B,CACvD,OAAOA,EAAM,aAAe,EAMvB,eAAeA,EAA4B,CAChD,OAAOA,EAAM,aAAeA,EAAM,KAAK,OAMlC,cAAcA,EAA4B,CAC/C,OAAOA,EAAM,KAAK,OAMb,aAAaA,EAA8B,CAChD,OAAOA,EAAM,KAAK,YAAc,EAAC,CAM5B,mBAAmBA,EAA2B,CACnD,OAAOA,EAAM,KAAK,kBAAoB,EAAC,CAMlC,gBAAgBA,EAA4B,CACjD,OAAOA,EAAM,aAMR,iBAAiBA,EAA4B,CAClD,OAAOA,EAAM,MAMR,cAAyB,CAC9B,MAAO,SAQF,sBAAsBA,EAAoB4D,EAAgD,CAC/F,GAAI5D,EAAM,cAAgB,EACxB,MAAO,GAGT,MAAMkD,EAAalD,EAAM,aAAeA,EAAM,KAAK,SAEnD,GAAI,CAAC4D,GAAoBA,EAAiB,SAAW,EAEnD,OAAOV,EAIT,IAAId,EAAYc,EAEhB,UAAW3E,KAAUqF,EAAkB,CACrC,MAAMZ,EAAqB,KAAK,gBAAgBhD,EAAOzB,CAAM,EAC7D6D,EAAY,KAAK,IAAIA,EAAWY,CAAkB,EAGpD,OAAOZ,CAAA,CAOF,8BAA8BpC,EAAoB4D,EAA+C,CACtG,GAAI5D,EAAM,cAAgB,EACxB,MAAO,GAGT,IAAIJ,EAAc,EAElB,UAAWrB,KAAUqF,EACnBhE,GAAe,KAAK,gBAAgBI,EAAOzB,CAAM,EAGnD,OAAOqB,CAAA,CAMF,qBAAqBI,EAA0B,CACpDA,EAAM,aAAeA,EAAM,MAE/B,CC7SO,MAAMmE,EAAN,MAAMA,CAAa,CAIhB,aAAc,CAFdhR,EAAA,oBAAiD,KAGvD,KAAK,oBAAmB,CAM1B,OAAc,aAA4B,CACxC,OAAKgR,EAAa,WAChBA,EAAa,SAAW,IAAIA,GAEvBA,EAAa,SAMd,oBAA2B,CACjC,KAAK,SAAS,IAAI,UAAW,IAAIT,EAAqB,EACtD,KAAK,SAAS,IAAI,WAAY,IAAIG,EAAsB,EACxD,KAAK,SAAS,IAAI,SAAU,IAAII,EAAoB,EAM/C,WAAWG,EAAwC,CACxD,MAAMC,EAAU,KAAK,SAAS,IAAID,CAAS,EAC3C,GAAI,CAACC,EACH,MAAM,IAAI,MAAM,oCAAoCD,CAAS,EAAE,EAEjE,OAAOC,CAAA,CAMF,mBAAmBrE,EAAgC,CACxD,OAAO,KAAK,WAAWA,EAAM,IAAI,EAM5B,WAAWoE,EAA+B,CAC/C,OAAO,KAAK,SAAS,IAAIA,CAAS,EAM7B,wBAAsC,CAC3C,OAAO,MAAM,KAAK,KAAK,SAAS,MAAM,EAMjC,kBAAoE,CACzE,MAAME,EAA6B,CAAC,UAAW,WAAY,QAAQ,EAC7DC,EAA4B,GAElC,UAAWtS,KAAQqS,EACZ,KAAK,WAAWrS,CAAI,GACvBsS,EAAa,KAAKtS,CAAI,EAI1B,MAAO,CACL,QAASsS,EAAa,SAAW,EACjC,aAAAA,CAAA,CACF,CAMK,yBAAyBC,EAAuB,CACrD,GAAI,CAACA,EAAU,MAAQ,OAAOA,EAAU,MAAS,SAC/C,MAAM,IAAI,MAAM,4CAA4C,EAG9D,MAAMJ,EAAYI,EAAU,KAE5B,GAAI,CAAC,KAAK,WAAWJ,CAAS,EAC5B,MAAM,IAAI,MAAM,2BAA2BA,CAAS,EAAE,EAIxD,OAAQA,EAAA,CACN,IAAK,UACH,OAAO,KAAK,mBAAmBI,CAAS,EAC1C,IAAK,WACH,OAAO,KAAK,oBAAoBA,CAAS,EAC3C,IAAK,SACH,OAAO,KAAK,kBAAkBA,CAAS,EACzC,QACE,MAAM,IAAI,MAAM,uBAAuBJ,CAAS,EAAE,EACtD,CAMM,mBAAmBK,EAAkB,CAC3C,GAAI,CAACA,EAAK,MAAQ,OAAOA,EAAK,MAAS,SACrC,MAAM,IAAI,MAAM,gCAAgC,EAGlD,MAAO,CACL,KAAM,UACN,KAAMA,EAAK,KACX,WAAYA,EAAK,YAAc,EACjC,CAMM,oBAAoBA,EAAkB,CAC5C,GAAI,CAACA,EAAK,MAAQ,OAAOA,EAAK,MAAS,SACrC,MAAM,IAAI,MAAM,oCAAoC,EAItD,MAAM3S,EAAO2S,EAAK,KAClB,GAAI,CAAC3S,EAAK,MAAQ,OAAOA,EAAK,MAAS,SACrC,MAAM,IAAI,MAAM,sCAAsC,EAExD,GAAI,OAAOA,EAAK,UAAa,UAAYA,EAAK,SAAW,EACvD,MAAM,IAAI,MAAM,8CAA8C,EAEhE,GAAI,OAAOA,EAAK,QAAW,UAAYA,EAAK,QAAU,EACpD,MAAM,IAAI,MAAM,4CAA4C,EAG9D,MAAO,CACL,KAAM,WACN,KAAM,CACJ,GAAGA,EACH,WAAYA,EAAK,YAAc,GAC/B,iBAAkBA,EAAK,kBAAoB,EAAC,EAE9C,WAAY2S,EAAK,YAAc,EACjC,CAMM,kBAAkBA,EAAkB,CAC1C,GAAI,CAACA,EAAK,MAAQ,OAAOA,EAAK,MAAS,SACrC,MAAM,IAAI,MAAM,kCAAkC,EAEpD,GAAI,OAAOA,EAAK,OAAU,UAAYA,EAAK,OAAS,EAClD,MAAM,IAAI,MAAM,yCAAyC,EAI3D,MAAM3S,EAAO2S,EAAK,KAClB,GAAI,CAAC3S,EAAK,MAAQ,OAAOA,EAAK,MAAS,SACrC,MAAM,IAAI,MAAM,oCAAoC,EAEtD,GAAI,OAAOA,EAAK,UAAa,UAAYA,EAAK,SAAW,EACvD,MAAM,IAAI,MAAM,4CAA4C,EAE9D,GAAI,OAAOA,EAAK,QAAW,UAAYA,EAAK,QAAU,EACpD,MAAM,IAAI,MAAM,0CAA0C,EAG5D,MAAO,CACL,KAAM,SACN,KAAM,CACJ,GAAGA,EACH,WAAYA,EAAK,YAAc,GAC/B,iBAAkBA,EAAK,kBAAoB,EAAC,EAE9C,MAAO2S,EAAK,MACZ,aAAcA,EAAK,cAAgBA,EAAK,MACxC,WAAYA,EAAK,YAAc,EACjC,CAMK,eAAsB,EAQtB,iBAA0C,CAC/C,MAAMC,EAA6B,GAEnC,SAAW,CAACzS,EAAMoS,CAAO,IAAK,KAAK,SACjCK,EAAMzS,CAAI,EAAI,CACZ,KAAMoS,EAAQ,eACd,UAAW,IAIf,OAAOK,CAAA,CAMF,WAAW1E,EAAqB,CACrC,OAAQA,EAAM,MACZ,IAAK,UACH,MAAO,CAAE,GAAGA,CAAA,EACd,IAAK,WACH,MAAO,CACL,GAAGA,EACH,KAAM,CAAE,GAAGA,EAAM,KAAK,EAE1B,IAAK,SACH,MAAO,CACL,GAAGA,EACH,KAAM,CAAE,GAAGA,EAAM,MAEjB,aAAcA,EAAM,OAExB,QACE,MAAM,IAAI,MAAM,oCAAqCA,EAAc,IAAI,EAAE,EAC7E,CAMK,sBAAsB2E,EAAgC,CAC3D,MAAM1F,EAAmB,GAEzB,QAASxI,EAAI,EAAGA,EAAIkO,EAAe,OAAQlO,IACzC,GAAI,CACF,MAAMuJ,EAAQ,KAAK,yBAAyB,CAC1C,GAAG2E,EAAelO,CAAC,EACnB,WAAYkO,EAAelO,CAAC,EAAE,YAAcA,CAAA,CAC7C,EACDwI,EAAQ,KAAKe,CAAK,QACXxM,EAAO,CACd,MAAM,IAAI,MAAM,iCAAiCiD,CAAC,KAAKjD,CAAK,EAAE,EAIlE,OAAOyL,CAAA,CAEX,EA9PE9L,EADWgR,EACI,YADV,IAAMS,EAANT,ECcA,MAAMU,EAAoC,CAMxC,oBAAoBjE,EAA2B1B,EAAmC,CACvF,MAAMgD,EAAmB,KAAK,yBAAyBtB,CAAK,EACtD6B,EAAmB,KAAK,oBAAoB7B,CAAK,EAGvD,GAAIsB,EAAiB,SAAW,EAC9B,MAAO,GAET,GAAIO,EAAiB,SAAW,EAC9B,MAAO,GAIT,MAAMqC,EAAelE,EAAM,cAAgB,IAAM,EAEjD,OAAI1B,EACK4F,EAEA,CAACA,CACV,CAMK,yBAAyBlE,EAAgD,CAC9E,OAAOA,EAAM,aAAa,OAAO7C,GAC/BA,EAAM,YAAc,GACpB,CAAC6C,EAAM,mBAAmB,QAAQ,IAAI7C,EAAM,KAAK,IAAI,EACvD,CAMK,oBAAoB6C,EAAoC,CAC7D,OAAOA,EAAM,QAAQ,OAAO,CAACZ,EAAOrN,IAClC,KAAK,eAAeqN,CAAK,GACzB,CAACY,EAAM,mBAAmB,QAAQ,IAAIjO,CAAK,EAC7C,CAOK,gBAAgBiO,EAA2B9O,EAAqD,CACrG,MAAMiT,EAAwC,CAC5C,QAAS,IAAI,IAAInE,EAAM,mBAAmB,OAAO,EACjD,QAAS,IAAI,IAAIA,EAAM,mBAAmB,OAAO,GAGnD,GAAI,KAAK,cAAc9O,CAAI,EAEzBiT,EAAsB,QAAQ,IAAIjT,EAAK,KAAK,IAAI,MAC3C,CAEL,MAAMoP,EAAaN,EAAM,QAAQ,aAAeS,EAAE,aAAevP,EAAK,UAAU,EAC5EoP,GAAc,EAChB6D,EAAsB,QAAQ,IAAI7D,CAAU,EAE5C,QAAQ,KAAK,mDAAoDpP,CAAI,CACvE,CAGF,MAAO,CACL,GAAG8O,EACH,cAAeA,EAAM,cAAgB,EACrC,mBAAoBmE,CAAA,CACtB,CASK,eAAenE,EAAoC,CACxD,MAAMsB,EAAmB,KAAK,yBAAyBtB,CAAK,EACtD6B,EAAmB,KAAK,oBAAoB7B,CAAK,EAGvD,OAAOsB,EAAiB,SAAW,GAAKO,EAAiB,SAAW,EAM/D,gBAAgB7B,EAAoC,CACzD,MAAMoE,EAAoBpE,EAAM,aAAa,OAAO7C,GAASA,EAAM,YAAc,CAAC,EAC5E6D,EAAoBhB,EAAM,QAAQ,UAAgB,KAAK,eAAeZ,CAAK,CAAC,EAGlF,OAAOgF,EAAkB,SAAW,GAAKpD,EAAkB,SAAW,EAOjE,kBAAkBhB,EAA+C,CACtE,MAAO,CACL,GAAGA,EACH,YAAaA,EAAM,YAAc,EACjC,cAAe,EACf,mBAAoB,CAClB,YAAa,IACb,YAAa,GAAY,CAC3B,CACF,CAMM,eAAeZ,EAAuB,CAC5C,OAAQA,EAAM,MACZ,IAAK,UACH,MAAO,GACT,IAAK,WACH,MAAO,GACT,IAAK,SACH,OAAOA,EAAM,aAAe,EAC9B,QACE,MAAO,GACX,CAMM,cAAclO,EAA4D,CAChF,MAAO,SAAUA,GAAQ,UAAWA,GAAQ,gBAAiBA,CAAA,CAMxD,aAAa8O,EASlB,CACA,MAAO,CACL,YAAaA,EAAM,YACnB,cAAeA,EAAM,cACrB,gBAAiBA,EAAM,mBAAmB,QAAQ,KAAOA,EAAM,mBAAmB,QAAQ,KAC1F,qBAAsBA,EAAM,mBAAmB,QAAQ,KACvD,qBAAsBA,EAAM,mBAAmB,QAAQ,KACvD,sBAAuB,KAAK,yBAAyBA,CAAK,EAAE,OAC5D,iBAAkB,KAAK,oBAAoBA,CAAK,EAAE,OAClD,aAAc,KAAK,eAAeA,CAAK,EACzC,CAMK,kBAAkBA,EAIvB,CACA,MAAMnO,EAAmB,GACnBC,EAAqB,GAGvBkO,EAAM,YAAc,GACtBnO,EAAO,KAAK,wBAAwBmO,EAAM,WAAW,mBAAmB,EAGtEA,EAAM,cAAgB,GACxBnO,EAAO,KAAK,0BAA0BmO,EAAM,aAAa,mBAAmB,EAI9E,MAAMqE,EAAsBrE,EAAM,mBAAmB,QAAQ,KAAOA,EAAM,mBAAmB,QAAQ,KACjGqE,EAAsBrE,EAAM,eAC9BlO,EAAS,KAAK,+BAA+BuS,CAAmB,gCAAgCrE,EAAM,aAAa,GAAG,EAIxH,UAAWsE,KAActE,EAAM,mBAAmB,QAAS,CACzD,MAAMyB,EAASzB,EAAM,aAAa,QAAUuE,EAAE,KAAK,OAASD,CAAU,EACjE7C,EAEMA,EAAO,aAAe,GAC/B3P,EAAS,KAAK,eAAewS,CAAU,4BAA4B,EAFnExS,EAAS,KAAK,UAAUwS,CAAU,0CAA0C,CAG9E,CAGF,UAAWhE,KAAcN,EAAM,mBAAmB,QAAS,CACzD,MAAMZ,EAAQY,EAAM,QAAQM,CAAU,EACjClB,EAEO,KAAK,eAAeA,CAAK,GACnCtN,EAAS,KAAK,SAASsN,EAAM,IAAI,aAAakB,CAAU,oCAAoC,EAF5FxO,EAAS,KAAK,kBAAkBwO,CAAU,gCAAgC,CAG5E,CAGF,MAAO,CACL,QAASzO,EAAO,SAAW,EAC3B,OAAAA,EACA,SAAAC,CAAA,CACF,CAMK,uBAAuBkO,EAA2B1B,EAKvD,CACA,MAAMgD,EAAmB,KAAK,yBAAyBtB,CAAK,EACtD6B,EAAmB,KAAK,oBAAoB7B,CAAK,EAGvD,IAAIwE,EAAkB,GAEtB,MAAMC,EAAenD,EAAiB,OAAStB,EAAM,mBAAmB,QAAQ,KAC1E0E,EAAe7C,EAAiB,OAAS7B,EAAM,mBAAmB,QAAQ,KAC1E2E,EAAe,KAAK,IAAIF,EAAeC,EAAc1E,EAAM,aAAa,EAE9E,QAASnK,EAAI,EAAGA,EAAI8O,EAAc9O,IAAK,CACrC,MAAM+O,EAAiB,KAAK,oBAAoB,CAAE,GAAG5E,EAAO,cAAenK,CAAA,EAAKyI,CAAe,EAC/FkG,GAAmBI,EAAiB,IAAM,IAI5C,MAAMC,EAAgB,IAAI,OAAO7E,EAAM,mBAAmB,QAAQ,IAAI,EAAI,IAAI,OAAOA,EAAM,mBAAmB,QAAQ,IAAI,EAEpH8E,EAAe,KAAK,oBAAoB9E,EAAO1B,CAAe,EAAI,SAAW,QAEnF,MAAO,CACL,gBAAAkG,EACA,cAAAK,EACA,qBAAsB,GACtB,aAAAC,CAAA,CACF,CAOK,UAAU9E,EAA+C,CAC9D,MAAO,CACL,GAAGA,EACH,YAAa,EACb,cAAe,EACf,mBAAoB,CAClB,YAAa,IACb,YAAa,GAAY,CAC3B,CACF,CAMK,eAAeA,EAAmC,CACvD,MAAM8D,EAAQ,KAAK,aAAa9D,CAAK,EACrC,MAAO,QAAQ8D,EAAM,WAAW,YAAYA,EAAM,aAAa,KAAKA,EAAM,oBAAoB,OAAOA,EAAM,oBAAoB,YAAYA,EAAM,qBAAqB,OAAOA,EAAM,gBAAgB,cAEvM,CC5RO,MAAMiB,CAAwB,CAMnC,aAAc,CALNxS,EAAA,oBACAA,EAAA,yBACAA,EAAA,qBACAA,EAAA,oBAGN,KAAK,iBAAmB,IAAI8O,GAC5B,KAAK,aAAe2C,EAAa,cACjC,KAAK,YAAc,IAAIC,GACvB,KAAK,uBAAsB,CAMtB,eAAejS,EAAyD,CAE7E,YAAK,YAAc,IAAI+N,GAAY/N,CAAM,EAGzC,KAAK,sBAAsBA,CAAM,EAGjC,KAAK,cAAcA,EAAO,gBAAiBA,CAAM,EAG1C,KAAK,kBAAkBA,CAAM,EAM9B,cAAcsM,EAA0BtM,EAA0C,CACxF,IAAIgT,EAAc,EAClB,MAAMlE,EAAW9O,EAAO,gBAAkBuL,EAAyB,iBAC7D0H,EAAoBjT,EAAO,mBAAqBuL,EAAyB,qBACzE2H,EAAsBpE,EAAWmE,EAEvC,KAAO,CAAC,KAAK,YAAY,iBAAmBD,EAAcE,GAAqB,CAC7E,MAAM9D,EAAe,KAAK,YAAY,iBAGd,KAAK,YAAY,oBAAoBA,EAAc9C,CAAe,EAIxF,KAAK,oBAAoB8C,CAAY,EAErC,KAAK,mBAAmBA,CAAY,EAGtC4D,IAGA,MAAMG,EAAmB,KAAK,YAAY,iBAC1C,GAAI,KAAK,YAAY,gBAAgBA,CAAgB,EAAG,CACtD,MAAMC,EAAW,KAAK,YAAY,mBAAmBD,EAAkBrE,CAAQ,EAC/E,KAAK,YAAY,iBAAiBsE,CAAQ,EAC1C,MAIF,MAAMC,EAAa,KAAK,YAAY,mBAAmBF,EAAkBrE,CAAQ,EACjF,KAAK,YAAY,iBAAiBuE,CAAU,EAG5C,MAAMC,EAA6B,KAAK,YAAY,iBACpD,GAAI,CAAC,KAAK,YAAY,iBAAmB,KAAK,YAAY,eAAeA,CAA0B,EAAG,CACpG,MAAMrF,EAAW,KAAK,YAAY,kBAAkBqF,CAA0B,EAC9E,KAAK,YAAY,iBAAiBrF,CAAQ,EAC5C,CAIE+E,GAAeE,GACjB,KAAK,YAAY,WACnB,CAMM,oBAAoB9D,EAAwC,CAElE,MAAMb,EAAa,KAAK,iBAAiB,uBAAuBa,CAAY,EAC5E,GAAI,CAACb,EACH,OAIF,MAAMN,EAAW,KAAK,YAAY,oBAAoBmB,EAAcb,CAAU,EAC9E,KAAK,YAAY,iBAAiBN,CAAQ,EAMpC,mBAAmBmB,EAAwC,CAEjE,MAAMb,EAAa,KAAK,iBAAiB,sBAAsBa,CAAY,EAC3E,GAAI,CAACb,EACH,OAIF,MAAMN,EAAW,KAAK,YAAY,oBAAoBmB,EAAcb,CAAU,EAC9E,KAAK,YAAY,iBAAiBN,CAAQ,EAQpC,uBAA8B,CACpC,MAAMsF,EAAa,KAAK,aAAa,mBACrC,GAAI,CAACA,EAAW,QACd,MAAM,IAAI,MAAM,gCAAgCA,EAAW,aAAa,KAAK,IAAI,CAAC,EAAE,CACtF,CAMM,sBAAsBvT,EAA0C,OACtE,GAAI,CAACA,EAAO,YAAc,CAACA,EAAO,WAAW,eAAiBA,EAAO,WAAW,cAAc,SAAW,EACvG,MAAM,IAAI,MAAM,+CAA+C,EAGjE,GAAI,CAACA,EAAO,SAAWA,EAAO,QAAQ,SAAW,EAC/C,MAAM,IAAI,MAAM,qCAAqC,EAIvD,UAAWoN,KAASpN,EAAO,QACzB,GAAIoN,EAAM,OAAS,WAAa,CAACA,EAAM,OAASA,EAAM,OAAS,GAC7D,MAAM,IAAI,MAAM,kBAAgBC,EAAAD,EAAM,OAAN,YAAAC,EAAY,OAAQ,SAAS,6BAA6B,CAE9F,CAMM,kBAAkBrN,EAAyD,CACjF,MAAMgO,EAAQ,KAAK,YAAY,iBACzBc,EAAW9O,EAAO,gBAAkBuL,EAAyB,iBAG7DiI,EAA+B,CACnC,OAHc,KAAK,YAAY,iBAAiB1E,CAAQ,EAIxD,sBAAuB,KAAK,YAAY,uBACxC,iBAAkB,KAAK,YAAY,uBACnC,WAAY,KAAK,YAAY,iBAC7B,aAAcd,EAAM,eAAiB,KAAK,YAAY,iBAAmB,GAAKzC,EAAyB,sBAGzG,MAAO,CACL,QAASiI,EACT,UAAW,KAAK,YAAY,eAC5B,iBAAkB,KAAK,YAAY,sBACnC,eAAgB,KAAK,KAAKA,EAAc,UAAU,EACpD,CAMK,gBAA+C,OACpD,QAAOnG,EAAA,KAAK,cAAL,YAAAA,EAAkB,mBAAoB,EAAC,CAMzC,gBAA0B,CAC/B,OAAO,KAAK,YAAc,CAAC,KAAK,YAAY,gBAAkB,GAElE,+HCpFO,MAAMoG,EAAgB,CAG3B,YACEC,EACA,CAJMnT,EAAA,kBAMN,KAAK,UAAYmT,GAAa,IAAIC,EAA+B,CAMnE,aAAaD,EAA+C,CAC1D,KAAK,UAAYA,CAAA,CAMX,eAAe9R,EAA4CgS,EAA4C,CACzGhS,EAAY,YACdA,EAAY,WAAWgS,CAAQ,CACjC,CAMM,kBAAkBhS,EAAkD,OAC1E,IAAIyL,EAAAzL,EAAY,SAAZ,MAAAyL,EAAoB,QACtB,MAAM,IAAI,MAAM,iCAAiC,CACnD,CAMF,MAAM,kBACJzL,EACAmE,EACoC,CACpC,MAAMlE,EAAY,YAAY,MACxBgS,EAAe,KAErB,QAAQ,IAAI,wCAAwC,KAAK,UAAU,IAAI,EAAE,EACzE,QAAQ,IAAI,qBAAqBjS,EAAY,gBAAgB,MAAMA,EAAY,eAAe,OAAOA,EAAY,eAAe,UAAU,EAC1I,QAAQ,IAAI,+BAA+BiS,EAAe,GAAI,UAAU,EAGxE,KAAK,eAAejS,EAAa,CAC/B,MAAO,eACP,SAAU,EACV,QAAS,mCACT,UAAW,EACZ,EAGD,KAAK,gCAAgCA,CAAW,EAGhD,KAAK,eAAeA,EAAa,CAC/B,MAAO,aACP,SAAU,GACV,QAAS,kCACT,UAAW,YAAY,MAAQC,CAAA,CAChC,EAGD,MAAMiS,EAAmB,MAAM,KAAK,UAAU,qBAAqBlS,EAAamE,CAAK,EAErF,QAAQ,IAAI,gBAAgB+N,EAAiB,MAAM,gCAAgC,EAGnF,KAAK,eAAelS,EAAa,CAC/B,MAAO,aACP,SAAU,GACV,QAAS,kCACT,sBAAuBkS,EAAiB,OACxC,kBAAmBA,EAAiB,OACpC,sBAAuB,EACvB,gBAAiBA,EAAiB,OAClC,UAAW,YAAY,MAAQjS,CAAA,CAChC,EAGD,MAAMkS,EAAsC,GAC5C,IAAIC,EAAwB,EAE5B,QAASnQ,EAAI,EAAGA,EAAIiQ,EAAiB,OAAQjQ,IAAK,CAEhD,KAAK,kBAAkBjC,CAAW,EAGlC,MAAMqS,EAAc,YAAY,MAChC,GAAIA,EAAcpS,EAAYgS,EAAc,CAC1C,QAAQ,KAAK,kCAAkCI,EAAcpS,GAAa,GAAI,mBAAmBmS,CAAqB,eAAe,EACrI,MAGF,MAAME,EAAOJ,EAAiBjQ,CAAC,EAE/B,GAAI,CACF,MAAM0J,EAAS,MAAM,KAAK,wBAAwB2G,EAAMtS,EAAY,gBAAiBmE,EAAOnE,EAAY,kBAAkB,EAC1HmS,EAAQ,KAAKxG,CAAM,EACnByG,GAAA,OACOpT,EAAO,CACd,QAAQ,KAAK,0CAA2CA,CAAK,EAU/D,GALIoT,EAAwB,IAAM,GAChC,MAAM,IAAI,QAAQG,GAAW,WAAWA,EAAS,CAAC,CAAC,EAIjDH,EAAwB,KAAO,GAAKA,IAA0BF,EAAiB,OAAQ,CACzF,MAAMM,EAAY,YAAY,MAAQvS,EAChCwS,EAAkB,GAAK,KAAK,MAAOL,EAAwBF,EAAiB,OAAU,EAAE,EACxFQ,EAAuBN,EAAwB,EAChDI,EAAYJ,GAA0BF,EAAiB,OAASE,GACjE,OAEJ,KAAK,eAAepS,EAAa,CAC/B,MAAO,aACP,SAAUyS,EACV,QAAS,+BAA+BL,CAAqB,IAAIF,EAAiB,MAAM,IACxF,sBAAuBA,EAAiB,OACxC,kBAAmBA,EAAiB,OACpC,sBAAAE,EACA,gBAAiBF,EAAiB,OAClC,UAAAM,EACA,qBAAAE,CAAA,CACD,EAIH,GAAIN,EAAwB,KAAO,EAAG,CACpC,MAAMO,GAAW,YAAY,MAAQ1S,GAAa,IAClD,QAAQ,IAAI,gBAAgBmS,CAAqB,IAAIF,EAAiB,MAAM,kBAAkBS,EAAQ,QAAQ,CAAC,CAAC,YAAY,EAC9H,CAIF,KAAK,eAAe3S,EAAa,CAC/B,MAAO,aACP,SAAU,GACV,QAAS,wBACT,sBAAuBkS,EAAiB,OACxC,kBAAmBA,EAAiB,OACpC,sBAAAE,EACA,gBAAiBF,EAAiB,OAClC,UAAW,YAAY,MAAQjS,CAAA,CAChC,EAGD,MAAM2S,EAAgBT,EAAQ,KAAK,CAACjT,EAAGC,IAAM,CAE3C,MAAM0T,EAAa1T,EAAE,uBAAyBD,EAAE,uBAChD,OAAI,KAAK,IAAI2T,CAAU,EAAI,IAAaA,EAGjC1T,EAAE,sBAAwBD,EAAE,sBACpC,EAGK4T,EADU,YAAY,MACS7S,EAErC,eAAQ,IAAI,4BAA4B2S,EAAc,MAAM,qBAAqBE,EAAmB,QAAQ,CAAC,CAAC,IAAI,EAGlH,KAAK,eAAe9S,EAAa,CAC/B,MAAO,aACP,SAAU,IACV,QAAS,yBACT,sBAAuBkS,EAAiB,OACxC,kBAAmBA,EAAiB,OACpC,sBAAAE,EACA,gBAAiBF,EAAiB,OAClC,UAAWY,CAAA,CACZ,EAEM,CACL,cAAAF,EACA,sBAAAR,EACA,mBAAAU,EACA,cAAe,KAAK,UAAU,KAC9B,aAAcZ,EAAiB,QAAUlS,EAAY,iBAAmB,IAC1E,CAMF,MAAc,wBACZsS,EACAS,EACA5O,EACA6O,EACmC,CAEnC,MAAMC,EAAuB,IAAI9B,EACjC,IAAI+B,EAEJ,GAAIF,GAAsBA,EAAmB,OAAS,EAAG,CAEvD,MAAMG,EAAiBH,EAAmB,IAAI,CAACxH,EAAOrN,KAAW,CAC/D,KAAMqN,EAAM,SAAW,SAAW,WAClC,KAAM,CACJ,KAAMA,EAAM,KACZ,SAAUA,EAAM,SAChB,OAAQA,EAAM,OACd,WAAYA,EAAM,YAAc,GAChC,iBAAkBA,EAAM,kBAAoB,EAAC,EAE/C,MAAOA,EAAM,OAAS,EACtB,aAAcA,EAAM,OAAS,EAC7B,WAAYrN,CAAA,EACZ,EAGIiV,EAA6C,CACjD,WAAY,CACV,cAAe,KAAK,MAAM,KAAK,UAAUd,EAAK,aAAa,CAAC,EAC5D,cAAeA,EAAK,cACpB,YAAaA,EAAK,aAEpB,QAAS,KAAK,MAAM,KAAK,UAAUa,CAAc,CAAC,EAClD,gBAAiB,IAGbE,EAAiBJ,EAAqB,eAAeG,CAAc,EAGnEE,EAA8C,CAClD,WAAY,CACV,cAAe,KAAK,MAAM,KAAK,UAAUhB,EAAK,aAAa,CAAC,EAC5D,cAAeA,EAAK,cACpB,YAAaA,EAAK,aAEpB,QAAS,KAAK,MAAM,KAAK,UAAUa,CAAc,CAAC,EAClD,gBAAiB,IAGbI,EAAkBN,EAAqB,eAAeK,CAAe,EAG3EJ,EAAiB,CACf,SAAUG,EACV,UAAWE,CAAA,CACb,KACK,CAEL,MAAMC,EAAiB,MAAM,KAAK,CAAE,OAAQT,CAAA,EAAmB,CAACU,EAAGtV,KAAW,CAC5E,KAAM,UACN,KAAM,iBAAiBA,EAAQ,CAAC,GAChC,WAAYA,CAAA,EACZ,EAGIiV,EAA6C,CACjD,WAAY,CACV,cAAe,KAAK,MAAM,KAAK,UAAUd,EAAK,aAAa,CAAC,EAC5D,cAAeA,EAAK,cACpB,YAAaA,EAAK,aAEpB,QAAS,KAAK,MAAM,KAAK,UAAUkB,CAAc,CAAC,EAClD,gBAAiB,IAGbH,EAAiBJ,EAAqB,eAAeG,CAAc,EAGnEE,EAA8C,CAClD,WAAY,CACV,cAAe,KAAK,MAAM,KAAK,UAAUhB,EAAK,aAAa,CAAC,EAC5D,cAAeA,EAAK,cACpB,YAAaA,EAAK,aAEpB,QAAS,KAAK,MAAM,KAAK,UAAUkB,CAAc,CAAC,EAClD,gBAAiB,IAGbD,EAAkBN,EAAqB,eAAeK,CAAe,EAG3EJ,EAAiB,CACf,SAAUG,EACV,UAAWE,CAAA,CACb,CAIF,MAAMG,EAAkB,KAAK,oBAAoBpB,EAAMnO,CAAK,EACtDwP,EAAuB,KAAK,yBAAyBrB,EAAMnO,CAAK,EAChEyP,EAAmB,KAAK,qBAAqBtB,EAAMnO,CAAK,EAGxD0P,EAAsBX,EAAe,SAAS,iBAC9CY,EAAuBZ,EAAe,UAAU,iBAEhDa,GAA0BF,EAAsBC,GAAwB,EAGxEE,EAAoB1B,EAAK,oBAAsBA,EAAK,mBAAqBoB,EACzEO,EAAwBD,EAAoB,EAAID,EAAyBC,EAAoB,EAEnG,MAAO,CACL,gBAAiB1B,EACjB,eAAAY,EACA,gBAAAQ,EACA,qBAAAC,EACA,iBAAAC,EACA,uBAAAG,EACA,sBAAAE,CAAA,CACF,CAMM,oBAAoB3B,EAAuBnO,EAAuB,CACxE,MAAM+P,EAAc,IAAI,IAAI/P,EAAM,IAAI7G,GAAQ,CAACA,EAAK,KAAMA,CAAI,CAAC,CAAC,EAChE,IAAIoW,EAAkB,EAEtB,SAAW,CAAC5Q,EAAUC,CAAQ,IAAK,OAAO,QAAQuP,EAAK,KAAK,EAAG,CAC7D,MAAMhV,EAAO4W,EAAY,IAAIpR,CAAQ,EACjCxF,IAEFoW,IAAoBpW,EAAK,qBAAuB,GAAKyF,EACvD,CAGF,OAAO2Q,CAAA,CAMD,yBAAyBpB,EAAuBnO,EAAuB,CAC7E,MAAM+P,EAAc,IAAI,IAAI/P,EAAM,IAAI7G,GAAQ,CAACA,EAAK,KAAMA,CAAI,CAAC,CAAC,EAChE,IAAIqW,EAAuB,EAE3B,SAAW,CAAC7Q,EAAUC,CAAQ,IAAK,OAAO,QAAQuP,EAAK,KAAK,EAAG,CAC7D,MAAMhV,EAAO4W,EAAY,IAAIpR,CAAQ,EACjCxF,IACFqW,IAAyBrW,EAAK,kBAAoB,GAAKyF,EACzD,CAGF,OAAO4Q,CAAA,CAMD,qBAAqBrB,EAAuBnO,EAAuB,CAEzE,OAAO,KAAK,oBAAoBmO,EAAMnO,CAAK,EAMrC,gCAAgCnE,EAAkD,CACxF,GAAIA,EAAY,gBAAkB,GAAKA,EAAY,gBAAkB,IACnE,MAAM,IAAI,MAAM,6CAA6C,EAG/D,GAAIA,EAAY,iBAAmB,EACjC,MAAM,IAAI,MAAM,sCAAsC,EAGxD,GAAIA,EAAY,gBAAkB,EAChC,MAAM,IAAI,MAAM,qCAAqC,EAGvD,GAAI,CAACA,EAAY,gBAAkBA,EAAY,eAAe,SAAW,EACvE,MAAM,IAAI,MAAM,2DAA2D,EAG7E,GAAIA,EAAY,iBAAmBA,EAAY,gBAAkB,EAC/D,MAAM,IAAI,MAAM,yCAAyC,CAC3D,CAEJ,CAMO,MAAM+R,EAAuE,CAA7E,cACLpT,EAAA,YAAO,kCAEP,MAAM,qBACJqB,EACAmE,EAC4B,CAC5B,MAAMgQ,EAAsB,YAAY,MAClCC,EAAsB,IAE5B,QAAQ,IAAI,+DAA+D,EAG3E,MAAM9U,EAAiB6E,EAAM,OAAO7G,GAClC0C,EAAY,eAAe,SAAS1C,EAAK,IAAI,GAG/C,QAAQ,IAAI,wCAAwCgC,EAAe,MAAM,EAAE,EAG3E,MAAM+U,EAAkBrU,EAAY,iBAAmB,GACjDsU,EAAmB,KAAK,yBAAyBhV,EAAe,IAAIG,GAAKA,EAAE,IAAI,EAAG4U,CAAe,EACvG,QAAQ,IAAI,cAAcC,EAAiB,MAAM,iDAAiDD,CAAe,GAAG,EAEpH,MAAMlC,EAA6B,GAGnC,QAASlQ,EAAI,EAAGA,EAAIqS,EAAiB,OAAQrS,IAAK,CAEhD,MAAMoQ,EAAc,YAAY,MAChC,GAAIA,EAAc8B,EAAsBC,EAAqB,CAC3D,QAAQ,KAAK,gCAAgC/B,EAAc8B,GAAuB,GAAI,mBAAmBlS,CAAC,eAAe,EACzH,MAGF,MAAMsS,EAAcD,EAAiBrS,CAAC,EAEtC,GAAI,CACF,MAAMqQ,EAAO,MAAM,KAAK,qCAAqCiC,EAAavU,EAAamE,CAAK,EACxFmO,GACFH,EAAQ,KAAKG,CAAI,CACnB,OACOtT,EAAO,CACd,QAAQ,KAAK,kCAAkCuV,EAAY,KAAK,IAAI,CAAC,KAAMvV,CAAK,EASlF,GALIiD,EAAI,IAAM,GACZ,MAAM,IAAI,QAAQsQ,GAAW,WAAWA,EAAS,CAAC,CAAC,EAIjDtQ,EAAI,KAAO,GAAKA,EAAI,EAAG,CACzB,MAAM0Q,GAAW,YAAY,MAAQwB,GAAuB,IAC5D,QAAQ,IAAI,2BAA2BlS,CAAC,IAAIqS,EAAiB,MAAM,yBAAyB3B,EAAQ,QAAQ,CAAC,CAAC,IAAI,EACpH,CAGF,eAAQ,IAAI,eAAeR,EAAQ,MAAM,yCAAyC,EAC3EA,CAAA,CAMD,yBAAyBqC,EAAqBH,EAAqC,CAEzF,MAAMI,EAAgB,KAAK,IAAI,EAAGD,EAAU,MAAM,EAAI,EAItD,GAHA,QAAQ,IAAI,mCAAmCC,CAAa,qBAAqBJ,CAAe,EAAE,EAG9FI,EAAgBJ,EAClB,OAAO,KAAK,4BAA4BG,EAAWH,CAAe,EAIpE,MAAMK,EAA8B,GAEpC,QAASzS,EAAI,EAAGA,GAAKwS,EAAexS,IAAK,CACvC,MAAMsS,EAAwB,GAC9B,QAASzL,EAAI,EAAGA,EAAI0L,EAAU,OAAQ1L,IAChC7G,EAAK,GAAK6G,GACZyL,EAAY,KAAKC,EAAU1L,CAAC,CAAC,EAGjC4L,EAAgB,KAAKH,CAAW,EAIlC,OAAAG,EAAgB,KAAK,CAAC,EAAGvV,IAAMA,EAAE,OAAS,EAAE,MAAM,EAElD,QAAQ,IAAI,oBAAoBuV,EAAgB,MAAM,4CAA4C,EAClG,QAAQ,IAAI,sBAAsBL,CAAe,4DAA4D,EACtGK,CAAA,CAOD,4BAA4BF,EAAqBH,EAAqC,CAC5F,MAAMvM,EAA2B,GAGjCA,EAAa,KAAK,CAAC,GAAG0M,CAAS,CAAC,EAGhC,QAAS,EAAI,EAAG,EAAIA,EAAU,QAAU1M,EAAa,OAASuM,EAAiB,IAAK,CAClF,MAAME,EAAcC,EAAU,OAAO,CAACf,EAAGtV,IAAUA,IAAU,CAAC,EAC9D2J,EAAa,KAAKyM,CAAW,EAI/B,QAAS,EAAI,EAAG,EAAIC,EAAU,QAAU1M,EAAa,OAASuM,EAAiB,IAC7E,QAASvL,EAAI,EAAI,EAAGA,EAAI0L,EAAU,QAAU1M,EAAa,OAASuM,EAAiBvL,IAAK,CACtF,MAAMyL,EAAcC,EAAU,OAAO,CAACf,EAAGtV,IAAUA,IAAU,GAAKA,IAAU2K,CAAC,EACzEyL,EAAY,OAAS,GACvBzM,EAAa,KAAKyM,CAAW,CAC/B,CAKJ,QAAS,EAAI,EAAG,EAAIC,EAAU,QAAU1M,EAAa,OAASuM,EAAiB,IAC7E,QAASvL,EAAI,EAAI,EAAGA,EAAI0L,EAAU,QAAU1M,EAAa,OAASuM,EAAiBvL,IACjF,QAAS6L,EAAI7L,EAAI,EAAG6L,EAAIH,EAAU,QAAU1M,EAAa,OAASuM,EAAiBM,IAAK,CACtF,MAAMJ,EAAcC,EAAU,OAAO,CAACf,EAAGtV,IAAUA,IAAU,GAAKA,IAAU2K,GAAK3K,IAAUwW,CAAC,EACxFJ,EAAY,OAAS,GACvBzM,EAAa,KAAKyM,CAAW,CAC/B,CAMN,GAAIzM,EAAa,OAASuM,EAAiB,CAEzC,MAAMO,EAAW,KAAK,MAAMJ,EAAU,OAAS,CAAC,EAChD,QAASK,EAAU,EAAGA,EAAU,IAAM/M,EAAa,OAASuM,EAAiBQ,IAAW,CACtF,MAAMN,EAAc,KAAK,qBAAqBC,EAAWI,CAAQ,EAG5D9M,EAAa,KAAKgN,GACrBA,EAAS,SAAWP,EAAY,QAChCO,EAAS,MAAMxX,GAAQiX,EAAY,SAASjX,CAAI,CAAC,IAEjDwK,EAAa,KAAKyM,CAAW,CAC/B,CAIF,MAAMQ,EAAc,KAAK,IAAI,EAAG,KAAK,MAAMP,EAAU,OAAS,CAAC,CAAC,EAChE,QAASK,EAAU,EAAGA,EAAU,GAAK/M,EAAa,OAASuM,EAAiBQ,IAAW,CACrF,MAAMN,EAAc,KAAK,qBAAqBC,EAAWO,CAAW,EAG/DjN,EAAa,KAAKgN,GACrBA,EAAS,SAAWP,EAAY,QAChCO,EAAS,MAAMxX,GAAQiX,EAAY,SAASjX,CAAI,CAAC,IAEjDwK,EAAa,KAAKyM,CAAW,CAC/B,CACF,CAGF,eAAQ,IAAI,gBAAgBzM,EAAa,MAAM,+BAA+B0M,EAAU,MAAM,QAAQ,EACtG,QAAQ,IAAI,iCAAiCA,EAAU,MAAM,2CAA2C,EACxG,QAAQ,IAAI,sBAAsBH,CAAe,+CAA+C,EACzFvM,CAAA,CAMD,qBAAqB0M,EAAqBQ,EAAwB,CAExE,MADiB,CAAC,GAAGR,CAAS,EAAE,KAAK,IAAM,KAAK,SAAW,EAAG,EAC9C,MAAM,EAAGQ,CAAI,EAM/B,MAAc,qCACZC,EACAjV,EACAsB,EACiC,CACjC,GAAI,CAEF,MAAM4T,EAAoB,IAAInV,EAAkBuB,CAAQ,EAGlD6T,EAA+C,CACnD,iBAAkBnV,EAAY,iBAC9B,gBAAiBA,EAAY,gBAC7B,gBAAiBA,EAAY,gBAC7B,eAAgBiV,CAAA,EAIZtJ,EAAS,MAAMuJ,EAAkB,aAAaC,CAAmB,EAGvE,OAAIxJ,EAAO,cAAgBA,EAAO,aAAa,OAAS,EAC/CA,EAAO,aAAa,CAAC,EAGvB,WAEA3M,EAAO,CACd,eAAQ,KAAK,+BAA+BiW,EAAgB,KAAK,IAAI,CAAC,KAAMjW,CAAK,EAC1E,KACT,CAIJ,CCvsBO,MAAMoW,CAAgB,CAK3B,aAAc,CAJNzW,EAAA,kBAA0B,IAC1BA,EAAA,4BAA+C,KAC/CA,EAAA,4BAAiD,KAGvD,KAAK,WAAU,CAMjB,MAAM,sBAA6C,CACjD,OAAO,KAAK,eAAeF,EAAW,WAAW,EAMnD,MAAM,eAAeG,EAAoD,CACvE,GAAI,CACF,IAAIyW,EAEJ,GAAI,OAAOzW,GAAW,SAAU,CAC9B,QAAQ,IAAI,6BAA6BA,CAAM,EAAE,EACjD,MAAME,EAAW,MAAM,MAAMF,CAAM,EAEnC,GAAI,CAACE,EAAS,GACZ,MAAM,IAAI,MAAM,gCAAgCA,EAAS,MAAM,IAAIA,EAAS,UAAU,EAAE,EAG1FuW,EAAiB,MAAMvW,EAAS,MAAK,MAErCuW,EAAiBzW,EAGnB,GAAI,CAAC,MAAM,QAAQyW,CAAc,EAC/B,MAAM,IAAI,MAAM,kCAAkC,EAGpD,YAAK,WAAaA,EAAe,OAAgB,KAAK,8BAA8BtW,CAAQ,CAAC,EAC7F,KAAK,eAEL,QAAQ,IAAI,YAAY,KAAK,WAAW,MAAM,2BAA2B,EAClE,KAAK,iBACLC,EAAO,CACd,cAAQ,MAAM,+BAAgCA,CAAK,EAC7CA,CAAA,CACR,CAMM,8BAA8BD,EAA0B,CAE9D,MAAM+P,EAAuB,CAC3B,KAAM/P,EAAS,MAAQ,gBACvB,WAAY,MAAM,QAAQA,EAAS,UAAU,EAAIA,EAAS,WAAa,GACvE,OAAQ,OAAOA,EAAS,MAAM,GAAK,EACnC,SAAU,OAAOA,EAAS,QAAQ,GAAK,EACvC,iBAAkB,MAAM,QAAQA,EAAS,gBAAgB,EAAIA,EAAS,iBAAmB,EAAC,EAI5F,OAAI,CAAC,MAAM,QAAQ+P,EAAU,UAAU,GAAKA,EAAU,WAAW,SAAW,KAC1E,QAAQ,KAAK,cAAcA,EAAU,IAAI,sCAAsC,EAC/EA,EAAU,WAAa,CAAC,SAAS,GAI/BA,EAAU,QAAU,IACtB,QAAQ,KAAK,cAAcA,EAAU,IAAI,wBAAwBA,EAAU,MAAM,EAAE,EACnFA,EAAU,OAAS,GAGjBA,EAAU,SAAW,IACvB,QAAQ,KAAK,cAAcA,EAAU,IAAI,2BAA2BA,EAAU,QAAQ,EAAE,EACxFA,EAAU,SAAW,GAInBA,EAAU,kBAAoB,MAAM,QAAQA,EAAU,gBAAgB,IACxEA,EAAU,iBAAmBA,EAAU,iBAAiB,OAAOnR,GACzD,CAACA,GAAY,OAAOA,GAAa,UACnC,QAAQ,KAAK,cAAcmR,EAAU,IAAI,qCAAqC,EACvE,IAEL,CAACnR,EAAS,aAAe,OAAOA,EAAS,OAAU,UACrD,QAAQ,KAAK,cAAcmR,EAAU,IAAI,iCAAiC,KAAK,UAAUnR,CAAQ,CAAC,EAAE,EAC7F,IAEF,EACR,GAGImR,CAAA,CAMD,cAAqB,CAC3B,KAAK,YAEL,KAAK,iBAAmB,IAAI,IAAI,KAAK,WAAW,IAAIxR,GAAQ,CAACA,EAAK,KAAMA,CAAI,CAAC,CAAC,EAG9E,KAAK,WAAW,QAAQA,GAAQ,CAC9BA,EAAK,WAAW,QAAQG,GAAQ,CACzB,KAAK,iBAAiB,IAAIA,CAAI,GACjC,KAAK,iBAAiB,IAAIA,EAAM,EAAE,EAEpC,KAAK,iBAAiB,IAAIA,CAAI,EAAG,KAAKH,CAAI,EAC3C,EACF,EAGD,KAAK,iBAAiB,QAAQ6G,GAAS,CACrCA,EAAM,KAAK,CAACjF,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAC7C,EAMK,WAAkB,CACxB,KAAK,iBAAiB,QACtB,KAAK,iBAAiB,OAAM,CAM9B,kBAAgC,CAC9B,MAAO,CAAC,GAAG,KAAK,UAAU,EAM5B,mBAAmBE,EAAqC,CACtD,OAAO,KAAK,iBAAiB,IAAIA,CAAI,EAMvC,oBAAoB5B,EAA+B,CACjD,MAAO,CAAC,GAAI,KAAK,iBAAiB,IAAIA,CAAQ,GAAK,EAAG,EAMxD,yBAAoC,CAClC,OAAO,MAAM,KAAK,KAAK,iBAAiB,MAAM,EAAE,MAAK,CAMvD,iBAAiB+B,EAAsC,CACrD,IAAIC,EAAW,KAAK,WAEpB,OAAID,EAAO,WAAaA,EAAO,UAAU,OAAS,IAChDC,EAAWA,EAAS,OAAOC,GACzBF,EAAO,UAAW,QAAaE,EAAE,WAAW,SAAShC,CAAI,CAAC,IAI1D8B,EAAO,cAAgB,SACzBC,EAAWA,EAAS,OAAOC,GAAKA,EAAE,UAAYF,EAAO,WAAY,GAG/DA,EAAO,cAAgB,SACzBC,EAAWA,EAAS,OAAOC,GAAKA,EAAE,UAAYF,EAAO,WAAY,GAG/DA,EAAO,YAAc,SACvBC,EAAWA,EAAS,OAAOC,GAAKA,EAAE,QAAUF,EAAO,SAAU,GAG3DA,EAAO,YAAc,SACvBC,EAAWA,EAAS,OAAOC,GAAKA,EAAE,QAAUF,EAAO,SAAU,GAKxDC,CAAA,CAMT,iBAAiBE,EAA4B,CAC3C,GAAI,CAACA,EAAM,OACT,OAAO,KAAK,mBAGd,MAAMC,EAAaD,EAAM,cACzB,OAAO,KAAK,WAAW,UACrBpC,EAAK,KAAK,cAAc,SAASqC,CAAU,EAC7C,CAMF,uBAAwD,CACtD,OAAO,KAAK,WAAW,IAAIrC,IAAS,CAClC,GAAGA,EACH,IAAI,mBAA4B,CAC9B,OAAOgY,EAAe,qBAAqBhY,CAAI,GAEjD,IAAI,oBAA6B,CAC/B,OAAOgY,EAAe,sBAAsBhY,CAAI,EAClD,EACA,EAMJ,qBAAwC,CACtC,GAAI,KAAK,WAAW,SAAW,EAC7B,MAAO,CACL,WAAY,EACZ,WAAY,GACZ,cAAe,CAAE,IAAK,EAAG,IAAK,EAAG,QAAS,GAC1C,YAAa,CAAE,IAAK,EAAG,IAAK,EAAG,QAAS,EAAE,EAI9C,MAAMsC,EAAY,KAAK,WAAW,IAAIH,GAAKA,EAAE,QAAQ,EAC/CI,EAAU,KAAK,WAAW,IAAIJ,GAAKA,EAAE,MAAM,EAG3C8V,EAAqC,GAC3C,YAAK,iBAAiB,QAAQ,CAACpR,EAAO1G,IAAS,CAC7C8X,EAAW9X,CAAI,EAAI0G,EAAM,OAC1B,EAEM,CACL,WAAY,KAAK,WAAW,OAC5B,WAAAoR,EACA,cAAe,CACb,IAAK,KAAK,IAAI,GAAG3V,CAAS,EAC1B,IAAK,KAAK,IAAI,GAAGA,CAAS,EAC1B,QAAS,KAAK,MAAMA,EAAU,OAAO,CAACV,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAAIS,EAAU,MAAM,GAE7E,YAAa,CACX,IAAK,KAAK,IAAI,GAAGC,CAAO,EACxB,IAAK,KAAK,IAAI,GAAGA,CAAO,EACxB,QAAS,KAAK,MAAMA,EAAQ,OAAO,CAACX,EAAGC,IAAMD,EAAIC,EAAG,CAAC,EAAIU,EAAQ,MAAM,EACzE,CACF,CAMF,eAAgB,CACd,GAAI,KAAK,WAAW,SAAW,EAC7B,MAAO,CACL,WAAY,EACZ,qBAAsB,GACtB,cAAe,CAAE,IAAK,EAAG,IAAK,EAAG,IAAK,GACtC,YAAa,CAAE,IAAK,EAAG,IAAK,EAAG,IAAK,GACpC,mBAAoB,GACpB,iBAAkB,GAClB,yBAA0B,GAI9B,MAAMD,EAAY,KAAK,WAAW,IAAIH,GAAKA,EAAE,QAAQ,EAC/CI,EAAU,KAAK,WAAW,IAAIJ,GAAKA,EAAE,MAAM,EAG3C+V,EAA+C,GACrD,KAAK,iBAAiB,QAAQ,CAACrR,EAAO1G,IAAS,CAC7C+X,EAAqB/X,CAAI,EAAI0G,EAAM,OACpC,EAGD,MAAMsR,EAA2B,KAAK,WAAW,OAAOhW,GACtDA,EAAE,kBAAoB,MAAM,QAAQA,EAAE,gBAAgB,GAAKA,EAAE,iBAAiB,OAAS,GACvF,OAEF,MAAO,CACL,WAAY,KAAK,WAAW,OAC5B,qBAAA+V,EACA,cAAe,CACb,IAAK,KAAK,IAAI,GAAG5V,CAAS,EAC1B,IAAK,KAAK,IAAI,GAAGA,CAAS,EAC1B,IAAK,KAAK,MAAMA,EAAU,OAAO,CAAC,EAAGT,IAAM,EAAIA,EAAG,CAAC,EAAIS,EAAU,MAAM,GAEzE,YAAa,CACX,IAAK,KAAK,IAAI,GAAGC,CAAO,EACxB,IAAK,KAAK,IAAI,GAAGA,CAAO,EACxB,IAAK,KAAK,MAAMA,EAAQ,OAAO,CAAC,EAAGV,IAAM,EAAIA,EAAG,CAAC,EAAIU,EAAQ,MAAM,GAErE,mBAAoB,CAAC,GAAG,KAAK,UAAU,EACpC,KAAK,CAAC,EAAGV,IAAMA,EAAE,SAAW,EAAE,QAAQ,EACtC,MAAM,EAAG,EAAE,EACd,iBAAkB,CAAC,GAAG,KAAK,UAAU,EAClC,KAAK,CAAC,EAAGA,IAAMA,EAAE,OAAS,EAAE,MAAM,EAClC,MAAM,EAAG,EAAE,EACd,yBAAAsW,CAAA,CACF,CAMF,kCAAkCC,EAAkC,CAClE,OAAO,KAAK,WAAW,OAAOpY,GACxB,CAACA,EAAK,kBAAoB,CAAC,MAAM,QAAQA,EAAK,gBAAgB,EAAU,GACrEoY,EAAU,KAAKjY,GACpBH,EAAK,iBAAkB,QACrBK,EAAS,YAAY,gBAAkBF,EAAK,aAAY,CAC1D,CAEH,EAMH,wBAAwBkY,EAA2B/T,EAAgB,EAAgB,CACjF,OAAO,KAAK,WACT,IAAItE,IAAS,CACZ,KAAAA,EACA,cAAe,KAAK,8BAA8BA,EAAMqY,CAAe,GACvE,EACD,KAAK,CAACzW,EAAGC,IAAMA,EAAE,cAAgBD,EAAE,aAAa,EAChD,MAAM,EAAG0C,CAAK,EACd,IAAIgU,GAAQA,EAAK,IAAI,EAMlB,8BAA8BtY,EAAiBqY,EAAmC,CACxF,IAAIE,EAAqBP,EAAe,sBAAsBhY,CAAI,EAElE,OAAIA,EAAK,kBAAoB,MAAM,QAAQA,EAAK,gBAAgB,GAC9DqY,EAAgB,QAAQG,GAAc,CACpC,MAAMnY,EAAW2X,EAAe,yBAAyBhY,EAAMwY,CAAU,EACzED,GAAsBlY,EAAW,GAClC,EAGIkY,CAAA,CAEX,CClWO,MAAME,CAA2B,CAKtC,OAAO,kBAAkBzY,EAAqD,CAC5E,OAAOgY,EAAe,kBAAkBhY,CAAI,EAM9C,OAAO,sBAAsBA,EAAyD,CACpF,MAAM0Y,EAAiBV,EAAe,kBAAkBhY,CAAI,EACtDW,EAAS,CAAC,GAAG+X,EAAe,MAAM,EAClC9X,EAAW,CAAC,GAAI8X,EAAe,UAAY,EAAG,EAGpD,OAAI,CAAC1Y,EAAK,IAAM,OAAOA,EAAK,IAAO,UAAYA,EAAK,GAAG,SAAW,KAChEW,EAAO,KAAK,sCAAsC,GAGhD,CAACX,EAAK,WAAa,EAAEA,EAAK,qBAAqB,QACjDW,EAAO,KAAK,iDAAiD,GAG3D,CAACX,EAAK,YAAc,EAAEA,EAAK,sBAAsB,QACnDW,EAAO,KAAK,qDAAqD,EAI/DX,EAAK,WAAaA,EAAK,YACvBA,EAAK,qBAAqB,MAAQA,EAAK,sBAAsB,MAC3DA,EAAK,WAAaA,EAAK,WACzBW,EAAO,KAAK,kDAAkD,EAI3D,CACL,QAASA,EAAO,SAAW,EAC3B,OAAAA,EACA,SAAUC,EAAS,OAAS,EAAIA,EAAW,OAC7C,CAMF,OAAO,aAAakB,EAAoD,CACtE,GAAI,CAACA,GAAQ,OAAOA,GAAS,SAC3B,MAAO,CAAE,QAAS,GAAO,MAAO,mCAGlC,MAAM6W,EAAc7W,EAAK,OACzB,OAAI6W,EAAY,SAAW,EAClB,CAAE,QAAS,GAAO,MAAO,2CAG9BA,EAAY,OAAS,IAChB,CAAE,QAAS,GAAO,MAAO,qCAIb,WACJ,KAAKA,CAAW,EACxB,CAAE,QAAS,GAAO,MAAO,oDAG3B,CAAE,QAAS,GAAK,CAMzB,OAAO,kBAAkBP,EAA2E,CAClG,MAAMxX,EAAqB,GAE3B,GAAI,CAAC,MAAM,QAAQwX,CAAS,EAC1B,MAAO,CAAE,QAAS,GAAO,MAAO,+BAGlC,GAAIA,EAAU,SAAW,EACvB,MAAO,CAAE,QAAS,GAAO,MAAO,sCAGlC,GAAIA,EAAU,OAAS,GACrB,MAAO,CAAE,QAAS,GAAO,MAAO,uCAIlC,QAAS,EAAI,EAAG,EAAIA,EAAU,OAAQ,IAAK,CACzC,MAAMjY,EAAOiY,EAAU,CAAC,EACxB,GAAI,OAAOjY,GAAS,UAAYA,EAAK,SAAW,GAC9C,MAAO,CAAE,QAAS,GAAO,MAAO,aAAa,EAAI,CAAC,+BAI/CyY,GAAiB,SAASzY,CAAW,GACxCS,EAAS,KAAK,cAAcT,CAAI,0BAA0B,CAC5D,CAKF,OADoB,IAAI,IAAIiY,CAAS,EACrB,OAASA,EAAU,OAC1B,CAAE,QAAS,GAAO,MAAO,wCAG3B,CACL,QAAS,GACT,SAAUxX,EAAS,OAAS,EAAIA,EAAW,OAC7C,CAMF,OAAO,eAAeiY,EAAwE,CAC5F,MAAMjY,EAAqB,GAE3B,OAAI,OAAOiY,GAAW,SACb,CAAE,QAAS,GAAO,MAAO,2BAG7B,OAAO,SAASA,CAAM,EAIvBA,GAAU,EACL,CAAE,QAAS,GAAO,MAAO,iCAG9BA,EAAS,IACJ,CAAE,QAAS,GAAO,MAAO,oCAI9BA,EAAS,KACXjY,EAAS,KAAK,+CAA+C,EAG3DiY,EAAS,KACXjY,EAAS,KAAK,0DAA0D,EAGnE,CACL,QAAS,GACT,SAAUA,EAAS,OAAS,EAAIA,EAAW,SAtBpC,CAAE,QAAS,GAAO,MAAO,iCAuBlC,CAMF,OAAO,iBAAiBkY,EAA0E,CAChG,MAAMlY,EAAqB,GAE3B,OAAI,OAAOkY,GAAa,SACf,CAAE,QAAS,GAAO,MAAO,6BAG7B,OAAO,SAASA,CAAQ,EAIzBA,EAAW,EACN,CAAE,QAAS,GAAO,MAAO,+BAG9BA,EAAW,KACN,CAAE,QAAS,GAAO,MAAO,sCAI9BA,IAAa,GACflY,EAAS,KAAK,wDAAwD,EAGpEkY,EAAW,IACblY,EAAS,KAAK,gDAAgD,EAG5DkY,EAAW,KACblY,EAAS,KAAK,2DAA2D,EAGpE,CACL,QAAS,GACT,SAAUA,EAAS,OAAS,EAAIA,EAAW,SA1BpC,CAAE,QAAS,GAAO,MAAO,mCA2BlC,CAMF,OAAO,wBAAwBmY,EAAiF,CAC9G,MAAMnY,EAAqB,GAG3B,GAAqCmY,GAAoB,KACvD,MAAO,CAAE,QAAS,IAGpB,GAAI,CAAC,MAAM,QAAQA,CAAe,EAChC,MAAO,CAAE,QAAS,GAAO,MAAO,qCAGlC,GAAIA,EAAgB,OAAS,GAC3B,MAAO,CAAE,QAAS,GAAO,MAAO,6CAIlC,QAASpU,EAAI,EAAGA,EAAIoU,EAAgB,OAAQpU,IAAK,CAC/C,MAAMtE,EAAW0Y,EAAgBpU,CAAC,EAElC,GAAI,CAACtE,GAAY,OAAOA,GAAa,SACnC,MAAO,CAAE,QAAS,GAAO,MAAO,mBAAmBsE,EAAI,CAAC,sBAI1D,GAAI,CAACtE,EAAS,aAAe,OAAOA,EAAS,aAAgB,SAC3D,MAAO,CAAE,QAAS,GAAO,MAAO,mBAAmBsE,EAAI,CAAC,kDAQ1D,GALKqU,GAAmB,SAAS3Y,EAAS,WAAkB,GAC1DO,EAAS,KAAK,mBAAmB+D,EAAI,CAAC,MAAMtE,EAAS,WAAW,iCAAiC,EAI/F,CAACA,EAAS,eAAiB,CAAC4Y,GAA4B,SAAS5Y,EAAS,aAAoB,EAChG,MAAO,CAAE,QAAS,GAAO,MAAO,mBAAmBsE,EAAI,CAAC,sCAI1D,GAAI,OAAOtE,EAAS,OAAU,UAAY,CAAC,OAAO,SAASA,EAAS,KAAK,EACvE,MAAO,CAAE,QAAS,GAAO,MAAO,mBAAmBsE,EAAI,CAAC,mCAG1D,GAAItE,EAAS,MAAQ,EACnB,MAAO,CAAE,QAAS,GAAO,MAAO,mBAAmBsE,EAAI,CAAC,8BAG1D,GAAItE,EAAS,MAAQ,IACnB,MAAO,CAAE,QAAS,GAAO,MAAO,mBAAmBsE,EAAI,CAAC,oCAItDtE,EAAS,MAAQ,KACnBO,EAAS,KAAK,mBAAmB+D,EAAI,CAAC,8BAA8BtE,EAAS,KAAK,GAAG,CACvF,CAIF,MAAM6Y,EAAcH,EAAgB,IAAIzY,GAAA,OAAO,OAAA6N,EAAA7N,EAAI,cAAJ,YAAA6N,EAAiB,cAAa,EAAE,OAAO,OAAO,EAE7F,OAD0B,IAAI,IAAI+K,CAAW,EACvB,OAASA,EAAY,OAClC,CAAE,QAAS,GAAO,MAAO,uDAG3B,CACL,QAAS,GACT,SAAUtY,EAAS,OAAS,EAAIA,EAAW,OAC7C,CAMF,OAAO,kBAAkB+R,EAAsC,CAC7D,MAAMhS,EAAmB,GACnBC,EAAqB,GAE3B,GAAI,CAAC+R,GAAQ,OAAOA,GAAS,SAC3B,MAAO,CACL,QAAS,GACT,OAAQ,CAAC,wBAAwB,GAKrC,MAAMwG,EAAiB,KAAK,aAAaxG,EAAK,IAAI,EAC7CwG,EAAe,SAClBxY,EAAO,KAAKwY,EAAe,KAAM,EAGnC,MAAMC,EAAsB,KAAK,kBAAkBzG,EAAK,UAAU,EAC7DyG,EAAoB,QAEdA,EAAoB,UAC7BxY,EAAS,KAAK,GAAGwY,EAAoB,QAAQ,EAF7CzY,EAAO,KAAKyY,EAAoB,KAAM,EAKxC,MAAMC,EAAmB,KAAK,eAAe1G,EAAK,MAAM,EACnD0G,EAAiB,QAEXA,EAAiB,UAC1BzY,EAAS,KAAK,GAAGyY,EAAiB,QAAQ,EAF1C1Y,EAAO,KAAK0Y,EAAiB,KAAM,EAKrC,MAAMC,EAAqB,KAAK,iBAAiB3G,EAAK,QAAQ,EACzD2G,EAAmB,QAEbA,EAAmB,UAC5B1Y,EAAS,KAAK,GAAG0Y,EAAmB,QAAQ,EAF5C3Y,EAAO,KAAK2Y,EAAmB,KAAM,EAKvC,MAAMC,EAA4B,KAAK,wBAAwB5G,EAAK,gBAAgB,EACpF,OAAK4G,EAA0B,QAEpBA,EAA0B,UACnC3Y,EAAS,KAAK,GAAG2Y,EAA0B,QAAQ,EAFnD5Y,EAAO,KAAK4Y,EAA0B,KAAM,EAKvC,CACL,QAAS5Y,EAAO,SAAW,EAC3B,OAAAA,EACA,SAAUC,EAAS,OAAS,EAAIA,EAAW,OAC7C,CAMF,OAAO,sBAAsBiG,EAI3B,CACA,GAAI,CAAC,MAAM,QAAQA,CAAK,EACtB,MAAO,CACL,QAAS,GACT,QAAS,GACT,QAAS,CAAE,MAAO,EAAG,MAAO,EAAG,QAAS,EAAG,SAAU,EAAE,EAI3D,MAAMgO,EAAUhO,EAAM,IAAI,CAAC7G,EAAMa,KAAW,CAC1C,MAAAA,EACA,WAAY,KAAK,kBAAkBb,CAAI,GACvC,EAEI2O,EAAU,CACd,MAAO9H,EAAM,OACb,MAAOgO,EAAQ,UAAY2E,EAAE,WAAW,OAAO,EAAE,OACjD,QAAS3E,EAAQ,OAAO2E,GAAK,CAACA,EAAE,WAAW,OAAO,EAAE,OACpD,SAAU3E,EAAQ,OAAO2E,GAAKA,EAAE,WAAW,UAAYA,EAAE,WAAW,SAAS,OAAS,CAAC,EAAE,QAG3F,MAAO,CACL,QAAS7K,EAAQ,UAAY,EAC7B,QAAAkG,EACA,QAAAlG,CAAA,CACF,CAMF,OAAO,kBAAkBgE,EAAsB,CAC7C,MAAM8G,EAAuB,CAC3B,KAAM,OAAO9G,EAAK,MAAS,SAAWA,EAAK,KAAK,OAAS,gBACzD,WAAY,MAAM,QAAQA,EAAK,UAAU,EACvCA,EAAK,WAAW,OAAQxS,GAAc,OAAOA,GAAS,UAAYA,EAAK,SAAW,EAAE,EACpF,CAAC,cAAc,EACjB,OAAQ,OAAOwS,EAAK,QAAW,UAAYA,EAAK,OAAS,EAAI,KAAK,IAAIA,EAAK,OAAQ,GAAQ,EAAI,IAC/F,SAAU,OAAOA,EAAK,UAAa,UAAYA,EAAK,UAAY,EAAI,KAAK,IAAIA,EAAK,SAAU,IAAQ,EAAI,IACxG,iBAAkB,MAAM,QAAQA,EAAK,gBAAgB,EACnDA,EAAK,iBACF,OAAQrS,GAAaA,GAAO,OAAOA,GAAQ,UAC9B,OAAOA,EAAI,aAAgB,UAC3B,OAAOA,EAAI,OAAU,UACrBA,EAAI,OAAS,CAAC,EAC3B,IAAKA,IAAc,CAClB,YAAaA,EAAI,YACjB,cAAe,WACf,MAAO,KAAK,IAAIA,EAAI,MAAO,GAAQ,GACnC,EACJ,EAAC,EAIL,OAAImZ,EAAU,KAAK,SAAW,IAC5BA,EAAU,KAAO,iBAIfA,EAAU,WAAW,SAAW,IAClCA,EAAU,WAAa,CAAC,cAAc,GAGjCA,CAAA,CAEX,CCtXO,MAAMC,EAAN,MAAMA,CAAwB,CAUnC,YAAYC,EAAmC,GAAI,CAL3CtY,EAAA,mBACAA,EAAA,oBACAA,EAAA,iBACAA,EAAA,uBAGN,KAAK,WAAasY,EAAQ,cACxB,GAAGA,EAAQ,aAAa,oBACxBD,EAAwB,oBAE1B,KAAK,YAAcC,EAAQ,cACzB,GAAGA,EAAQ,aAAa,wBACxBD,EAAwB,aAE1B,KAAK,SAAWC,EAAQ,UAAYD,EAAwB,kBAC5D,KAAK,eAAiBC,EAAQ,iBAAmB,GAM3C,oBAA8B,CACpC,GAAI,CACF,MAAMC,EAAO,mBACb,oBAAa,QAAQA,EAAMA,CAAI,EAC/B,aAAa,WAAWA,CAAI,EACrB,QACD,CACN,MAAO,GACT,CAMF,sBAAwC,CACtC,GAAI,CAAC,KAAK,qBACR,eAAQ,KAAK,+BAA+B,EACrC,GAGT,GAAI,CACF,MAAMC,EAAS,aAAa,QAAQ,KAAK,UAAU,EACnD,GAAI,CAACA,EACH,MAAO,GAMT,MAAMC,EAHyB,KAAK,MAAMD,CAAM,EAGnB,IAAI7Z,IAAS,CACxC,GAAGA,EACH,UAAW,IAAI,KAAKA,EAAK,SAAS,EAClC,WAAY,IAAI,KAAKA,EAAK,UAAU,GACpC,EAGF,OAAI,KAAK,eACA8Z,EAAe,OAAO9Z,GAAQ,CACnC,MAAMqU,EAAaoE,EAA2B,sBAAsBzY,CAAI,EACxE,OAAKqU,EAAW,QAIT,IAHL,QAAQ,KAAK,sCAAsCrU,EAAK,IAAI,GAAIqU,EAAW,MAAM,EAC1E,GAEF,CACR,EAGIyF,CAAA,OACApY,EAAO,CACd,eAAQ,MAAM,+CAAgDA,CAAK,EAC5D,EAAC,CACV,CAMM,sBAAsBmF,EAAiC,CAC7D,GAAI,CAAC,KAAK,qBACR,eAAQ,KAAK,+BAA+B,EACrC,GAGT,GAAI,CACF,oBAAa,QAAQ,KAAK,WAAY,KAAK,UAAUA,CAAK,CAAC,EAC3D,KAAK,iBACE,SACAnF,EAAO,CACd,eAAQ,MAAM,4CAA6CA,CAAK,EACzD,GACT,CAMF,iBAAiB8P,EAAkF,CAEjG,MAAM6C,EAAaoE,EAA2B,kBAAkBjH,CAAS,EACzE,GAAI,CAAC6C,EAAW,QACd,MAAO,CACL,QAAS,GACT,MAAO,sBAAsBA,EAAW,OAAO,KAAK,IAAI,CAAC,IAI7D,MAAMxN,EAAQ,KAAK,uBAGnB,GAAIA,EAAM,QAAU,KAAK,SACvB,MAAO,CACL,QAAS,GACT,MAAO,4BAA4B,KAAK,QAAQ,aAKpD,GAAIA,EAAM,KAAK7G,GAAQA,EAAK,KAAK,gBAAkBwR,EAAU,KAAK,aAAa,EAC7E,MAAO,CACL,QAAS,GACT,MAAO,yBAAyBA,EAAU,IAAI,oBAKlD,MAAMuI,EAAW/B,EAAe,oBAAoBxG,CAAS,EAI7D,OAHA3K,EAAM,KAAKkT,CAAQ,EAEL,KAAK,sBAAsBlT,CAAK,EAQvC,CACL,QAAS,GACT,KAAMkT,CAAA,EARC,CACL,QAAS,GACT,MAAO,iCAOX,CAMF,oBAAoBC,EAAYtZ,EAAyF,CACvH,MAAMmG,EAAQ,KAAK,uBACboT,EAAYpT,EAAM,UAAU7G,GAAQA,EAAK,KAAOga,CAAE,EAExD,GAAIC,IAAc,GAChB,MAAO,CACL,QAAS,GACT,MAAO,kBAIX,MAAMC,EAAerT,EAAMoT,CAAS,EAC9BE,EAAc,CAAE,GAAGD,EAAc,GAAGxZ,CAAA,EAGpC2T,EAAaoE,EAA2B,sBAAsB0B,CAAW,EAC/E,GAAI,CAAC9F,EAAW,QACd,MAAO,CACL,QAAS,GACT,MAAO,sBAAsBA,EAAW,OAAO,KAAK,IAAI,CAAC,IAK7D,GAAI3T,EAAQ,MACRmG,EAAM,KAAK,CAAC7G,EAAMa,IAChBA,IAAUoZ,GACVja,EAAK,KAAK,gBAAkBU,EAAQ,KAAM,aAAY,EAE1D,MAAO,CACL,QAAS,GACT,MAAO,yBAAyBA,EAAQ,IAAI,oBAKhD,MAAM0Z,EAAYpC,EAAe,oBAAoBkC,EAAcxZ,CAAO,EAI1E,OAHAmG,EAAMoT,CAAS,EAAIG,EAEL,KAAK,sBAAsBvT,CAAK,EAQvC,CACL,QAAS,GACT,KAAMuT,CAAA,EARC,CACL,QAAS,GACT,MAAO,yCAOX,CAMF,oBAAoBJ,EAAkD,CACpE,MAAMnT,EAAQ,KAAK,uBACboT,EAAYpT,EAAM,UAAU7G,GAAQA,EAAK,KAAOga,CAAE,EAExD,OAAIC,IAAc,GACT,CACL,QAAS,GACT,MAAO,mBAIXpT,EAAM,OAAOoT,EAAW,CAAC,EAEX,KAAK,sBAAsBpT,CAAK,EAQvC,CAAE,QAAS,IANT,CACL,QAAS,GACT,MAAO,qCAIY,CAMzB,qBAAqBmT,EAAkC,CAErD,OADc,KAAK,uBACN,KAAKha,GAAQA,EAAK,KAAOga,CAAE,GAAK,KAM/C,qBAAqB5X,EAAgC,CACnD,MAAMyE,EAAQ,KAAK,uBACnB,GAAI,CAACzE,EAAM,OACT,OAAOyE,EAGT,MAAMxE,EAAaD,EAAM,cACzB,OAAOyE,EAAM,UACX7G,EAAK,KAAK,cAAc,SAASqC,CAAU,EAC7C,CAMF,wBAA+D,CAC7D,GAAI,CAAC,KAAK,qBACR,MAAO,CACL,QAAS,GACT,MAAO,iCAIX,GAAI,CACF,oBAAa,WAAW,KAAK,UAAU,EACvC,aAAa,WAAW,KAAK,WAAW,EACjC,CAAE,QAAS,GAAK,MACT,CACd,MAAO,CACL,QAAS,GACT,MAAO,0BACT,CACF,CAMF,sBAA4E,CAC1E,GAAI,CACF,MAAMwE,EAAQ,KAAK,uBACbwT,EAAa,CACjB,QAAS,MACT,WAAY,IAAI,OAAO,cACvB,MAAOxT,EAAM,IAAI7G,GAAA,SAAS,OACxB,KAAMA,EAAK,KACX,WAAYA,EAAK,WACjB,OAAQA,EAAK,OACb,SAAUA,EAAK,SACf,iBAAkBA,EAAK,iBACvB,YAAWmO,EAAAnO,EAAK,YAAL,YAAAmO,EAAgB,gBAAiB,IAAI,OAAO,cACvD,aAAYC,EAAApO,EAAK,aAAL,YAAAoO,EAAiB,gBAAiB,IAAI,OAAO,aAAY,EACrE,GAGJ,MAAO,CACL,QAAS,GACT,KAAM,KAAK,UAAUiM,EAAY,KAAM,CAAC,EAC1C,MACc,CACd,MAAO,CACL,QAAS,GACT,MAAO,yBACT,CACF,CAMF,qBAAqBC,EAAkBX,EAA2D,GACnB,CAE7E,GAAI,CACF,MAAMY,EAAa,KAAK,MAAMD,CAAQ,EAEtC,GAAI,CAACC,EAAW,OAAS,CAAC,MAAM,QAAQA,EAAW,KAAK,EACtD,MAAO,CACL,QAAS,GACT,OAAQ,CAAC,8CAA8C,GAI3D,MAAMC,EAAgBb,EAAQ,QAAU,GAAK,KAAK,uBAC5ChZ,EAAmB,GACzB,IAAI8Z,EAAW,EACXC,EAAU,EAEd,UAAWjZ,KAAY8Y,EAAW,MAAO,CAEvC,MAAMlG,EAAaoE,EAA2B,kBAAkBhX,CAAQ,EACxE,GAAI,CAAC4S,EAAW,QAAS,CACvB1T,EAAO,KAAK,SAASc,EAAS,MAAQ,SAAS,MAAM4S,EAAW,OAAO,KAAK,IAAI,CAAC,EAAE,EACnFqG,IACA,SAQF,GAJoBF,EAAc,QAChChD,EAAS,KAAK,gBAAkB/V,EAAS,KAAK,aAAY,EAI1D,GAAIkY,EAAQ,eAAgB,CAC1Be,IACA,aACK,CACL/Z,EAAO,KAAK,SAASc,EAAS,IAAI,kBAAkB,EACpDiZ,IACA,SAKJ,GAAIF,EAAc,QAAU,KAAK,SAAU,CACzC7Z,EAAO,KAAK,4BAA4B,KAAK,QAAQ,WAAW,EAChE,MAIF,MAAMoZ,EAAW/B,EAAe,oBAAoB,CAClD,KAAMvW,EAAS,KACf,WAAYA,EAAS,WACrB,OAAQA,EAAS,OACjB,SAAUA,EAAS,SACnB,iBAAkBA,EAAS,kBAAoB,EAAC,CACjD,EAED+Y,EAAc,KAAKT,CAAQ,EAC3BU,GAAA,CAKF,OADc,KAAK,sBAAsBD,CAAa,EAQ/C,CACL,QAAS,GACT,SAAAC,EACA,QAAAC,EACA,OAAQ/Z,EAAO,OAAS,EAAIA,EAAS,QAV9B,CACL,QAAS,GACT,OAAQ,CAAC,0CAA0C,EASvD,MAEc,CACd,MAAO,CACL,QAAS,GACT,OAAQ,CAAC,qBAAqB,EAChC,CACF,CAMF,iBAAyC,OACvC,MAAMkG,EAAQ,KAAK,uBACb8T,MAAY,KAClBA,EAAM,SAAS,EAAG,EAAG,EAAG,CAAC,EAEzB,MAAMC,EAAoB/T,EAAM,OAAO7G,GACrCA,EAAK,WAAaA,EAAK,WAAa2a,CAAA,EACpC,OAEF,IAAIE,EAA4B,KAC5BhU,EAAM,OAAS,IACjBgU,EAAe,IAAI,KAAK,KAAK,IAAI,GAAGhU,EAAM,IAAI7G,GAAA,OAAQ,QAAAmO,EAAAnO,EAAK,aAAL,YAAAmO,EAAiB,YAAa,EAAC,CAAC,CAAC,GAIzF,MAAM2M,EAAc,KAAK,wBACtB3M,EAAA,aAAa,QAAQ,KAAK,UAAU,IAApC,YAAAA,EAAuC,SAAU,GAAK,EAAI,EAE7D,MAAO,CACL,WAAYtH,EAAM,OAClB,YAAAiU,EACA,aAAAD,EACA,kBAAAD,CAAA,CACF,CAMM,gBAAuB,CAC7B,GAAK,KAAK,qBAEV,GAAI,CACF,MAAMG,EAAW,CACf,aAAc,IAAI,OAAO,cACzB,QAAS,OAEX,aAAa,QAAQ,KAAK,YAAa,KAAK,UAAUA,CAAQ,CAAC,QACxDrZ,EAAO,CACd,QAAQ,KAAK,6BAA8BA,CAAK,EAClD,CAMF,mBAA4B,CAC1B,OAAO,KAAK,IAAI,EAAG,KAAK,SAAW,KAAK,uBAAuB,MAAM,EAMvE,eAAesZ,EAAoB,GAAc,CAE/C,OADc,KAAK,uBACN,QAAW,KAAK,SAAWA,CAAA,CAE5C,EAzcE3Z,EADWqY,EACa,sBAAsB,oCAC9CrY,EAFWqY,EAEa,eAAe,wCACvCrY,EAHWqY,EAGa,oBAAoB,KAHvC,IAAMuB,EAANvB,ECdA,MAAMwB,CAAkB,CAY7B,YAAYC,EAA+B,CAXnC9Z,EAAA,iBAAgC,MAChCA,EAAA,cACAA,EAAA,eACAA,EAAA,gBACAA,EAAA,mBAA2B,IAC3BA,EAAA,iBAA6B,IAC7BA,EAAA,qBAA6B,IAC7BA,EAAA,qBAAwB,IACxBA,EAAA,uBAA6C,OAC7CA,EAAA,4BAAoC,IAG1C,KAAK,MAAQ8Z,EACb,KAAK,OAAS,IAAIrD,EAClB,KAAK,QAAU,IAAImD,EACnB,KAAK,qBAAuBE,EAAM,cAAgB,CAAC,GAAGA,EAAM,aAAa,EAAI,EAAC,CAGhF,MAAa,MAAMC,EAAuC,CACxD,KAAK,UAAYA,EACjB,MAAM,KAAK,WACX,KAAK,SACL,KAAK,sBAAqB,CAG5B,MAAc,UAA0B,CACtC,GAAI,CAEF,KAAK,YAAc,MAAM,KAAK,OAAO,uBAGrC,KAAK,UAAY,KAAK,QAAQ,uBAG9B,KAAK,qBAAoB,OAClB1Z,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EACrD,KAAK,YAAc,GACnB,KAAK,UAAY,GACjB,KAAK,cAAgB,EAAC,CACxB,CAGM,qBAA4B,CAClC,IAAIsC,EAAwB,GAE5B,OAAQ,KAAK,iBACX,IAAK,SACHA,EAAW,CAAC,GAAG,KAAK,WAAW,EAC/B,MACF,IAAK,OACHA,EAAW,CAAC,GAAG,KAAK,SAAS,EAC7B,MACF,IAAK,MACL,QACEA,EAAW,CAAC,GAAG,KAAK,YAAa,GAAG,KAAK,SAAS,EAClD,MAGJ,GAAI,KAAK,cAAc,OAAQ,CAC7B,MAAMqX,EAAc,KAAK,cAAc,cACvC,KAAK,cAAgBrX,EAAS,UAC5BhE,EAAK,KAAK,cAAc,SAASqb,CAAW,GAC5Crb,EAAK,WAAW,KAAKG,GAAQA,EAAK,cAAc,SAASkb,CAAW,CAAC,EACvE,MAEA,KAAK,cAAgBrX,EAIvB,KAAK,cAAc,KAAK,CAACpC,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,EAGxD,QAAe,CACrB,GAAI,CAAC,KAAK,UAAW,OAErB,MAAMyZ,EAAQ,KAAK,MAAM,OAAS,oBAElC,KAAK,UAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,4DAK6BA,CAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAclC,KAAK,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAUD,KAAK,kBAAoB,MAAQ,SAAW,EAAE;AAAA,sCACxD,KAAK,YAAY,OAAS,KAAK,UAAU,MAAM;AAAA;AAAA,gDAErC,KAAK,kBAAoB,SAAW,SAAW,EAAE;AAAA,oCAC7D,KAAK,YAAY,MAAM;AAAA;AAAA,gDAEX,KAAK,kBAAoB,OAAS,SAAW,EAAE;AAAA,mCAC5D,KAAK,UAAU,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUlC,KAAK,cAAc,MAAM,QAAQ,KAAK,cAAc,SAAW,EAAI,IAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,oBAK7E,KAAK,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBASzB,KAAK,MAAM,aAAe;AAAA;AAAA,8BAEZ,KAAK,MAAM,aAAa,IAAI;AAAA;AAAA,gBAExC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,MAOhB,KAAK,WAAU,CAGT,gBAAyB,CAC/B,OAAI,KAAK,cAAc,SAAW,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAKD,KAAK,kBAAoB,QAAU,KAAK,UAAU,SAAW,EAAI;AAAA;AAAA;AAAA;AAAA,YAI/D,EAAE;AAAA;AAAA,QAKL,KAAK,cAAc,IAAItb,GAAQ,OACpC,MAAMub,EAAa,KAAK,MAAM,OAAS,WACnC,KAAK,qBAAqB,KAAKC,GAAYA,EAAS,OAASxb,EAAK,IAAI,IACtEmO,EAAA,KAAK,MAAM,eAAX,YAAAA,EAAyB,QAASnO,EAAK,KACrCyb,EAAa,OAAQzb,EAE3B,MAAO;AAAA,gCACmBub,EAAa,WAAa,EAAE,qBAAqBvb,EAAK,IAAI;AAAA;AAAA;AAAA;AAAA,kBAIxEA,EAAK,IAAI;AAAA,kBACTyb,EAAa,qCAAuC,uCAAuC;AAAA;AAAA;AAAA,kBAG3Fzb,EAAK,WAAW,IAAIG,GAAQ,+BAA+BA,CAAI,SAAS,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA,uFAIbH,EAAK,IAAI;AAAA,kBAC9Eub,EAAa,aAAe,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CASdvb,EAAK,OAAO,gBAAgB;AAAA;AAAA;AAAA;AAAA,2CAI5BA,EAAK,SAAS,gBAAgB;AAAA;AAAA;AAAA;AAAA,4CAI7BA,EAAK,SAAWA,EAAK,QAAQ,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,cAIrEA,EAAK,kBAAoBA,EAAK,iBAAiB,OAAS,EAAI;AAAA;AAAA;AAAA;AAAA,oBAItDA,EAAK,iBAAiB,IAAIM,GAC1B,+BAA+BA,EAAI,MAAM,gBAAgB,OAAOA,EAAI,WAAW,WAC/E,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,cAGZ,EAAE;AAAA;AAAA;AAAA,QAIb,EAAE,KAAK,EAAE,EAGJ,WAAkB,CACxB,MAAMob,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAckYpB,SAAS,KAAK,YAAYA,CAAK,EAGzB,sBAA6B,CAEnC,MAAMC,EAAW,SAAS,eAAe,gBAAgB,EACrDA,GACFA,EAAS,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAC,EAIjE,MAAMC,EAAY,SAAS,eAAe,kBAAkB,EACxDA,GACFA,EAAU,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAC,EAIlE,MAAMC,EAAa,SAAS,eAAe,mBAAmB,EAC1DA,GACFA,EAAW,iBAAiB,QAAS,KAAK,cAAc,KAAK,IAAI,CAAC,EAIpE,MAAMC,EAAc,SAAS,eAAe,aAAa,EACrDA,GACFA,EAAY,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAC,EAIpE,MAAMC,EAAW,SAAS,eAAe,cAAc,EACnDA,GACFA,EAAS,iBAAiB,QAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAItE,SAAS,iBAAiB,aAAa,EAAE,QAAQC,GAAO,CACtDA,EAAI,iBAAiB,QAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACjE,EAGD,SAAS,iBAAiB,kBAAkB,EAAE,QAAQC,GAAO,CAC3DA,EAAI,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC/D,EAGD,SAAS,iBAAiB,YAAY,EAAE,QAAQC,GAAQ,CACtDA,EAAK,iBAAiB,QAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC,EAC/D,EAGD,MAAMC,EAAU,SAAS,cAAc,gBAAgB,EACnDA,GACFA,EAAQ,iBAAiB,QAAU5M,GAAM,CACnCA,EAAE,SAAW4M,GACf,KAAK,cACP,CACD,EAIH,SAAS,iBAAiB,UAAW,KAAK,cAAc,KAAK,IAAI,CAAC,EAG5D,aAAaC,EAAoB,CACvC,MAAMC,EAAQD,EAAM,OACpB,KAAK,cAAgBC,EAAM,MAC3B,KAAK,sBACL,KAAK,iBAAgB,CAGf,mBAA0B,CAChC,KAAK,cAAgB,GACrB,MAAMP,EAAc,SAAS,eAAe,aAAa,EACrDA,IACFA,EAAY,MAAQ,IAEtB,KAAK,sBACL,KAAK,iBAAgB,CAGf,mBAAmBM,EAAoB,CAE7C,MAAME,EADMF,EAAM,OACG,QAAQ,SAEzBE,GAAYA,IAAa,KAAK,kBAChC,KAAK,gBAAkBA,EACvB,KAAK,sBACL,KAAK,oBACL,KAAK,kBACP,CAGM,iBAAiBF,EAAoB,CAC3CA,EAAM,kBAEN,MAAM5W,EADM4W,EAAM,OACG,QAAQ,SAE7B,GAAI5W,EAAU,CACZ,MAAMxF,EAAO,KAAK,cAAc,KAAKmC,GAAKA,EAAE,OAASqD,CAAQ,EAC7D,GAAIxF,EAAM,CACR,GAAI,KAAK,MAAM,OAAS,WAAY,CAElC,MAAMuc,EAAgB,KAAK,qBAAqB,aAAsBf,EAAS,OAASxb,EAAK,IAAI,EAEjG,GAAIuc,GAAiB,EAEnB,KAAK,qBAAqB,OAAOA,EAAe,CAAC,MAC5C,CAEL,MAAMC,EAAgB,KAAK,MAAM,eAAiB,EAC9C,KAAK,qBAAqB,OAASA,EACrC,KAAK,qBAAqB,KAAKxc,CAAI,GAGnC,KAAK,qBAAqB,QAC1B,KAAK,qBAAqB,KAAKA,CAAI,EACrC,CAIF,KAAK,iBAAgB,CAIvB,KAAK,MAAM,SAASA,CAAI,EAC1B,CACF,CAGM,gBAAgBoc,EAAoB,CAE1C,MAAMK,EADOL,EAAM,OACG,QAAQ,YAAY,EAE1C,GAAIK,EAAU,CACZ,MAAMjX,EAAWiX,EAAS,QAAQ,SAClC,GAAIjX,EAAU,CACZ,MAAMxF,EAAO,KAAK,cAAc,KAAKmC,GAAKA,EAAE,OAASqD,CAAQ,EAC7D,GAAIxF,EAAM,CACR,GAAI,KAAK,MAAM,OAAS,WAAY,CAElC,MAAMuc,EAAgB,KAAK,qBAAqB,aAAsBf,EAAS,OAASxb,EAAK,IAAI,EAEjG,GAAIuc,GAAiB,EAEnB,KAAK,qBAAqB,OAAOA,EAAe,CAAC,MAC5C,CAEL,MAAMC,EAAgB,KAAK,MAAM,eAAiB,EAC9C,KAAK,qBAAqB,OAASA,EACrC,KAAK,qBAAqB,KAAKxc,CAAI,GAGnC,KAAK,qBAAqB,QAC1B,KAAK,qBAAqB,KAAKA,CAAI,EACrC,CAIF,KAAK,iBAAgB,CAIvB,KAAK,MAAM,SAASA,CAAI,EAC1B,CACF,CACF,CAGM,cAAqB,CAC3B,KAAK,MAAM,UAAS,CAGd,eAAsB,CACxB,KAAK,MAAM,cACb,KAAK,MAAM,SAAS,KAAK,MAAM,YAAY,CAC7C,CAGM,cAAcoc,EAA4B,CAC5CA,EAAM,MAAQ,UAChB,KAAK,cACP,CAGM,iBAAwB,CAC9B,MAAMM,EAAW,SAAS,eAAe,WAAW,EAChDA,IACFA,EAAS,UAAY,KAAK,iBAG1B,SAAS,iBAAiB,kBAAkB,EAAE,QAAQT,GAAO,CAC3DA,EAAI,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC/D,EAED,SAAS,iBAAiB,YAAY,EAAE,QAAQC,GAAQ,CACtDA,EAAK,iBAAiB,QAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC,EAC/D,GAIH,MAAMS,EAAe,SAAS,cAAc,gBAAgB,EACxDA,IACFA,EAAa,YAAc,GAAG,KAAK,cAAc,MAAM,QAAQ,KAAK,cAAc,SAAW,EAAI,IAAM,EAAE,SAC3G,CAGM,mBAA0B,CAChC,SAAS,iBAAiB,aAAa,EAAE,QAAQX,GAAO,CACrCA,EAAI,aAAa,eAAe,IAChC,KAAK,gBACpBA,EAAI,UAAU,IAAI,QAAQ,EAE1BA,EAAI,UAAU,OAAO,QAAQ,CAC/B,CACD,EAGI,SAAgB,CAErB,SAAS,oBAAoB,UAAW,KAAK,cAAc,KAAK,IAAI,CAAC,EAEjE,KAAK,YACP,KAAK,UAAU,UAAY,GAC7B,CAMK,YAAYY,EAAwB,CACzC,KAAK,MAAM,MAAQA,EACnB,MAAMC,EAAe,SAAS,eAAe,aAAa,EACtDA,IACFA,EAAa,YAAc,MAAMD,CAAQ,GAC3C,CAMK,oBAAoBE,EAAkC,CAC3D,KAAK,qBAAuB,CAAC,GAAGA,CAAa,EAC7C,KAAK,iBAAgB,CAEzB,yHC91BO,MAAMC,CAAqB,CAIhC,OAAO,oBACLC,EACAC,EACAtD,EAAuC,GAC/B,CACR,KAAM,CAAE,eAAAuD,EAAiB,GAAM,MAAA5B,EAAQ,0BAA2B,SAAA6B,GAAaxD,EAGzEyD,EAAmBJ,EAAS,iBAAmBC,EAAU,iBACzDI,EAAqBL,EAAS,eAAiBC,EAAU,eACzDK,GAAiBN,EAAS,iBAAmBC,EAAU,kBAAoB,EAE3EM,EAAgB;AAAA;AAAA,iBAETjC,CAAK;AAAA;AAAA;AAAA,UAGZ6B,EAAW,8BAA8BA,CAAQ,OAAS;AAAA;AAAA;AAAA;AAAA,SAI3D;AAAA;AAAA,MAICK,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAUaR,EAAS,iBAAiB,gBAAgB;AAAA;AAAA;AAAA;AAAA,yCAI1CA,EAAS,cAAc;AAAA;AAAA;AAAA;AAAA,yCAIvBA,EAAS,QAAQ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAa7BC,EAAU,iBAAiB,gBAAgB;AAAA;AAAA;AAAA;AAAA,yCAI3CA,EAAU,cAAc;AAAA;AAAA;AAAA;AAAA,yCAIxBA,EAAU,QAAQ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,MAO7DQ,EAAoBP,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAMTE,GAAoB,EAAI,WAAa,UAAU;AAAA,gBACrEA,GAAoB,EAAI,IAAM,EAAE,GAAGA,EAAiB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,sCAK9CC,GAAsB,EAAI,WAAa,UAAU;AAAA,gBACvEA,GAAsB,EAAI,IAAM,EAAE,GAAGA,CAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,uCAKhC,KAAK,MAAMC,CAAa,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,cAKnEF,EAAmB,EACjB,sEAAsEA,EAAiB,gBAAgB,iBACvGA,EAAmB,EACnB,0FAA0F,KAAK,IAAIA,CAAgB,EAAE,gBAAgB,IACrI,sFACJ;AAAA;AAAA;AAAA;AAAA,MAIJ,GAEEM,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAQlB,KAAK,gBAAgBV,EAAS,SAAS,CAAC;AAAA;AAAA;AAAA,cAGxC,KAAK,gBAAgBC,EAAU,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA,MAMnD,OAAOM,EAAgBC,EAAkBC,EAAoBC,CAAA,CAM/D,OAAO,eACLtC,EACA4B,EACAC,EACAtD,EAAuC,GACjC,CACNyB,EAAU,UAAY,KAAK,oBAAoB4B,EAAUC,EAAWtD,CAAO,EAG3E,KAAK,sBAAsByB,EAAWzB,EAAQ,cAAc,EAM9D,OAAe,gBAAgBgE,EAA0B,CACvD,OAAIA,EAAU,SAAW,EAChB,oDAgBF,4BAbYA,EAAU,IAAIjO,GAKxB;AAAA,sBAHcA,EAAO,eAAiB,SACZ,wBAA0B,sBAGlC;AAAA,2CACYA,EAAO,IAAI;AAAA,sCAChBA,EAAO,QAAQ,IAAIA,EAAO,MAAM;AAAA;AAAA,OAGjE,EAAE,KAAK,EAAE,CAEmC,SAM/C,OAAe,sBAAsB0L,EAAwBwC,EAAgC,CAC3F,MAAMC,EAAUzC,EAAU,iBAAiB,UAAU,EACrDyC,EAAQ,QAAQ7B,GAAO,CACrBA,EAAI,iBAAiB,QAAUzM,GAAM,CACnC,MAAM9C,EAAS8C,EAAE,OACXuO,EAAWrR,EAAO,QAAQ,SAGhCoR,EAAQ,QAAQE,GAAKA,EAAE,UAAU,OAAO,QAAQ,CAAC,EACjDtR,EAAO,UAAU,IAAI,QAAQ,EAGhB2O,EAAU,iBAAiB,aAAa,EAChD,QAAQ7N,GAAO,CAClBA,EAAI,UAAU,OAAO,QAAQ,EAC7BA,EAAI,UAAU,IAAI,QAAQ,EAC3B,EAED,MAAMyQ,EAAY5C,EAAU,cAAc,IAAI0C,CAAQ,WAAW,EAC7DE,IACFA,EAAU,UAAU,IAAI,QAAQ,EAChCA,EAAU,UAAU,OAAO,QAAQ,GAIjCJ,GACFA,EAAA,CACF,CACD,EACF,EAEL,CC7MO,MAAMK,CAA0B,CAkErC,aAAc,CAjEN5c,EAAA,iBAAgC,MAChCA,EAAA,6BACAA,EAAA,mBAAsC,MACtCA,EAAA,uBAA8C,MAC9CA,EAAA,wBAA+C,MAC/CA,EAAA,yBAAsC,MACtCA,EAAA,yBAA8C,MAC9CA,EAAA,mBAAsC,CAC5C,6BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ9B,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQhB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlB,yBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAO1B,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlB,qBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQtB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWvB,KAAK,qBAAuB,IAAIwS,CAAwB,CAMnD,MAAMuH,EAAwBpG,EAA6B,CAChE,KAAK,UAAYoG,EACjB,KAAK,YAAcpG,EACnB,KAAK,SACL,KAAK,uBAGL,KAAK,wBAAuB,CAMvB,WAAWkJ,EAAwB,EAOlC,QAAe,CAChqI3B,KAAK,4BAA0B,CAMzB,sBAA6B,CACnC,MAAMC,EAAS,SAAS,eAAe,oBAAoB,EACrDpC,EAAW,SAAS,eAAe,sBAAsB,EACzDqC,EAAmB,SAAS,eAAe,cAAc,EACzDC,EAAiB,SAAS,eAAe,kBAAkB,EAC3DC,EAAgB,SAAS,eAAe,iBAAiB,EAE3DH,GACFA,EAAO,iBAAiB,QAAS,IAAM,KAAK,eAAe,EAGzDpC,GACFA,EAAS,iBAAiB,QAAS,IAAM,KAAK,cAAc,EAG1DqC,GACFA,EAAiB,iBAAiB,QAAS,IAAM,KAAK,eAAe,EAGnEC,GACFA,EAAe,iBAAiB,QAAS,IAAM,KAAK,uBAAuB,EAGzEC,GACFA,EAAc,iBAAiB,QAAS,IAAM,KAAK,wBAAwB,EAIrD,SAAS,iBAAiB,0BAA0B,EAC5D,QAAQC,GAAS,CAC/BA,EAAM,iBAAiB,SAAWhP,GAAM,KAAK,sBAAsBA,CAAU,CAAC,EAC/E,EAGD,KAAK,wBAAuB,CAMtB,sBAAsB6M,EAAoB,CAEhD,MAAM9J,EADS8J,EAAM,OACI,MAEnBoC,EAAiB,SAAS,eAAe,qBAAqB,EAC9DC,EAAkB,SAAS,eAAe,sBAAsB,EAElEnM,IAAc,WAChBkM,GAAA,MAAAA,EAAgB,UAAU,OAAO,UACjCC,GAAA,MAAAA,EAAiB,UAAU,IAAI,WACtBnM,IAAc,aACvBkM,GAAA,MAAAA,EAAgB,UAAU,IAAI,UAC9BC,GAAA,MAAAA,EAAiB,UAAU,OAAO,WAIpC,KAAK,eAAc,CAMrB,MAAc,uBAAuC,CAEnD,MAAMC,EAAiB,SAAS,cAAc,KAAK,EACnDA,EAAe,GAAK,4BACpB,SAAS,KAAK,YAAYA,CAAc,EAGxC,KAAK,kBAAoB,IAAIxD,EAAkB,CAC7C,SAAWyD,GAA4B,CACrC,KAAK,kBAAoBA,EACzB,KAAK,2BACL,KAAK,gBACL,KAAK,wBAAuB,EAE9B,SAAU,IAAM,CACd,KAAK,wBAAuB,EAE9B,aAAc,KAAK,kBACnB,KAAM,SACN,MAAO,+BACR,EAGD,MAAM,KAAK,kBAAkB,MAAMD,CAAc,EAM3C,wBAA+B,CACjC,KAAK,oBACP,KAAK,kBAAkB,UACvB,KAAK,kBAAoB,MAG3B,MAAMA,EAAiB,SAAS,eAAe,2BAA2B,EACtEA,GACFA,EAAe,QACjB,CAMM,wBAA+B,CACrC,KAAK,kBAAoB,KACzB,KAAK,2BACL,KAAK,eAAc,CAMb,0BAAiC,CACvC,MAAME,EAAgB,SAAS,eAAe,mBAAmB,EAC3DC,EAAiB,SAAS,eAAe,qBAAqB,EAC9DP,EAAgB,SAAS,eAAe,iBAAiB,EAE/D,GAAI,GAACM,GAAiB,CAACC,GAAkB,CAACP,GAE1C,GAAI,CAAC,KAAK,kBACRM,EAAc,UAAU,OAAO,QAAQ,EACvCC,EAAe,UAAU,IAAI,QAAQ,EACrCP,EAAc,MAAM,QAAU,WACzB,CACLM,EAAc,UAAU,IAAI,QAAQ,EACpCC,EAAe,UAAU,OAAO,QAAQ,EACxCP,EAAc,MAAM,QAAU,eAG9B,MAAMte,EAAO,KAAK,kBACZ8e,EAAsB9e,EAAK,kBAAoB,OAAO,KAAKA,EAAK,gBAAgB,EAAE,OAAS,EAC7F,OAAO,QAAQA,EAAK,gBAAgB,EACjC,IAAI,CAAC,CAACG,EAAM4e,CAAK,IAAM,IAAIA,CAAK,OAAO5e,CAAI,EAAE,EAC7C,KAAK,IAAI,EACZ,OAEJ0e,EAAe,UAAY;AAAA;AAAA;AAAA,0CAGS7e,EAAK,IAAI;AAAA;AAAA,gBAEnCA,EAAK,WAAW,IAAIG,GAAQ,+BAA+BA,CAAI,SAAS,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAMzDH,EAAK,OAAO,gBAAgB;AAAA;AAAA;AAAA;AAAA,yCAI5BA,EAAK,SAAS,gBAAgB;AAAA;AAAA;AAAA;AAAA,yCAI9B8e,CAAmB;AAAA;AAAA;AAAA;AAAA,QAKxD,CAMM,eAAyB,CAC/B,MAAMX,EAAS,SAAS,eAAe,oBAAoB,EAC3D,GAAI,CAACA,EAAQ,MAAO,GAGpB,MAAMa,EAAiB,SAAS,cAAc,kCAAkC,EAC1E1M,GAAY0M,GAAA,YAAAA,EAAgB,QAAS,UAE3C,IAAIC,EAAU,GACVC,EAAe,GAEnB,GAAI5M,IAAc,UAAW,CAE3B,MAAM+J,EAAQ,SAAS,eAAe,cAAc,EACpD,GAAI,CAACA,EAAO,MAAO,GAEnB,MAAM8C,EAAa9C,EAAM,MAAM,OAG1B8C,EAKI,MAAM,OAAOA,CAAU,CAAC,GAAK,CAAC,OAAO,UAAU,OAAOA,CAAU,CAAC,GACxEF,EAAU,GACVC,EAAe,qCAGD,SAASC,CAAU,EAGrB,IACVF,EAAU,GACVC,EAAe,8CAdjBD,EAAU,GACVC,EAAe,2CAmBZD,GAIH5C,EAAM,UAAU,OAAO,OAAO,EAC9B,KAAK,eAAe,cAAc,IAJlCA,EAAM,UAAU,IAAI,OAAO,EAC3B,KAAK,eAAe,eAAgB6C,CAAY,EAIlD,MACS5M,IAAc,aAElB,KAAK,oBACR2M,EAAU,GACVC,EAAe,0DAKnB,OAAAf,EAAO,SAAW,CAACc,GAAW,CAAC,KAAK,0BAE7BA,CAAA,CAMD,yBAAmC,SAMzC,GALI,CAAC,KAAK,aAKN,CAAC,KAAK,YAAY,eAAiB,KAAK,YAAY,cAAc,SAAW,EAC/E,MAAO,GAIT,UAAWhT,KAAS,KAAK,YAAY,cACnC,GAAI,GAACkC,EAAAlC,EAAM,OAAN,MAAAkC,EAAY,OAAQlC,EAAM,OAAS,GAAK,GAACmC,EAAAnC,EAAM,OAAN,MAAAmC,EAAY,WAAYnC,EAAM,KAAK,UAAY,GAAKA,EAAM,aAAe,EACrH,MAAO,GAIX,MAAO,GAMD,eAAemT,EAAiBC,EAAuB,OAC7D,MAAMhD,EAAQ,SAAS,eAAe+C,CAAO,EAC7C,GAAI,CAAC/C,EAAO,OAGZ,KAAK,eAAe+C,CAAO,EAG3B,MAAME,EAAe,SAAS,cAAc,KAAK,EACjDA,EAAa,UAAY,sBACzBA,EAAa,GAAK,GAAGF,CAAO,SAC5BE,EAAa,YAAcD,GAG3BlR,EAAAkO,EAAM,aAAN,MAAAlO,EAAkB,aAAamR,EAAcjD,EAAM,YAAW,CAMxD,eAAe+C,EAAuB,CAC5C,MAAME,EAAe,SAAS,eAAe,GAAGF,CAAO,QAAQ,EAC3DE,GACFA,EAAa,QACf,CAMM,wBAA+B,CACnB,SAAS,iBAAiB,0BAA0B,EAE5D,QAAQC,GAAQ,CACxBA,EAAK,iBAAiB,aAAehQ,GAAM,KAAK,YAAYA,CAAe,CAAC,EAC5EgQ,EAAK,iBAAiB,aAAc,IAAM,KAAK,aAAa,EAC5DA,EAAK,iBAAiB,QAAUhQ,GAAM,CACpCA,EAAE,iBACF,KAAK,cAAcA,CAAe,EACnC,EACF,EAGD,SAAS,iBAAiB,QAAUA,GAAM,CACxC,MAAM9C,EAAS8C,EAAE,OACb,CAAC9C,EAAO,QAAQ,YAAY,GAAK,CAACA,EAAO,QAAQ,UAAU,GAC7D,KAAK,aACP,CACD,EAMK,YAAY2P,EAAyB,CAC3C,MAAM3P,EAAS2P,EAAM,OACfoD,EAAa/S,EAAO,aAAa,cAAc,EAErD,GAAI,CAAC+S,GAAc,CAAC,KAAK,YAAYA,CAAU,EAAG,OAElD,MAAMC,EAAU,SAAS,eAAe,SAAS,EAC3CC,EAAiBD,GAAA,YAAAA,EAAS,cAAc,oBAE1C,CAACA,GAAW,CAACC,IAEjBA,EAAe,UAAY,KAAK,YAAYF,CAAU,EACtDC,EAAQ,UAAU,OAAO,QAAQ,EAGjC,KAAK,gBAAgBA,EAAShT,CAAM,GAM9B,aAAoB,CAC1B,MAAMgT,EAAU,SAAS,eAAe,SAAS,EAC7CA,GACFA,EAAQ,UAAU,IAAI,QAAQ,CAChC,CAMM,cAAcrD,EAAyB,CAC7C,MAAMqD,EAAU,SAAS,eAAe,SAAS,EAC7CA,GAAA,MAAAA,EAAS,UAAU,SAAS,UAC9B,KAAK,YAAYrD,CAAK,EAEtB,KAAK,aACP,CAMM,gBAAgBqD,EAAkBhT,EAAuB,CAC/D,MAAMkT,EAAalT,EAAO,wBACpBmT,EAAiBH,EAGvBG,EAAe,MAAM,IAAM,GAC3BA,EAAe,MAAM,KAAO,GAC5BA,EAAe,MAAM,UAAY,GAGjC,MAAMC,EAAcJ,EAAQ,wBACtBK,EAAgB,OAAO,WACvBC,EAAiB,OAAO,YAE9B,IAAIC,EAAML,EAAW,OAAS,GAC1BM,EAAON,EAAW,KAAQA,EAAW,MAAQ,EAAME,EAAY,MAAQ,EAGvEI,EAAO,GACTA,EAAO,GACEA,EAAOJ,EAAY,MAAQC,EAAgB,KACpDG,EAAOH,EAAgBD,EAAY,MAAQ,IAGzCG,EAAMH,EAAY,OAASE,EAAiB,KAC9CC,EAAML,EAAW,IAAME,EAAY,OAAS,IAG9CD,EAAe,MAAM,IAAM,GAAGI,CAAG,KACjCJ,EAAe,MAAM,KAAO,GAAGK,CAAI,KAMrC,MAAc,eAA+B,CAE3C,GAAI,CAAC,KAAK,gBAAiB,CACzB,KAAK,UAAU,4DAA4D,EAC3E,OAGF,GAAI,CAAC,KAAK,0BAA2B,CACnC,KAAK,UAAU,0FAA0F,EACzG,OAIF,MAAMjB,EAAiB,SAAS,cAAc,kCAAkC,EAC1E1M,GAAY0M,GAAA,YAAAA,EAAgB,QAAS,UAG3C,KAAK,YAAY,EAAI,EACrB,KAAK,YAEL,GAAI,CAEF,GAAI,CAAC,KAAK,aAAe,CAAC,KAAK,YAAY,cACzC,MAAM,IAAI,MAAM,wCAAwC,EAI1D,MAAMkB,EAAoB,IAAI,QAAc,CAACjL,EAASkL,IAAW,CAC/D,GAAI,CACF,GAAI7N,IAAc,YAAc,KAAK,kBAAmB,CAEtD,MAAMuD,EAAiB,CAAC,CACtB,KAAM,KAAK,kBAAkB,SAAW,SAAW,WACnD,KAAM,CACJ,KAAM,KAAK,kBAAkB,KAC7B,SAAU,KAAK,kBAAkB,SACjC,OAAQ,KAAK,kBAAkB,OAC/B,WAAY,KAAK,kBAAkB,YAAc,GACjD,iBAAkB,KAAK,kBAAkB,kBAAoB,EAAC,EAEhE,MAAO,KAAK,kBAAkB,OAAS,EACvC,aAAc,KAAK,kBAAkB,OAAS,EAC9C,WAAY,EACb,EAGKC,EAA6C,CACjD,WAAY,CACV,cAAe,KAAK,MAAM,KAAK,UAAU,KAAK,YAAa,aAAa,CAAC,EACzE,cAAe,KAAK,YAAa,cACjC,YAAa,KAAK,YAAa,aAEjC,QAAS,KAAK,MAAM,KAAK,UAAUD,CAAc,CAAC,EAClD,gBAAiB,IAEnB,KAAK,gBAAkB,KAAK,qBAAqB,eAAeC,CAAc,EAG9E,MAAME,EAA8C,CAClD,WAAY,CACV,cAAe,KAAK,MAAM,KAAK,UAAU,KAAK,YAAa,aAAa,CAAC,EACzE,cAAe,KAAK,YAAa,cACjC,YAAa,KAAK,YAAa,aAEjC,QAAS,KAAK,MAAM,KAAK,UAAUH,CAAc,CAAC,EAClD,gBAAiB,IAEnB,KAAK,iBAAmB,KAAK,qBAAqB,eAAeG,CAAe,MAC3E,CAEL,MAAMoI,EAAmB,SAAS,eAAe,cAAc,EACzDgC,EAAc,SAAShC,EAAiB,KAAK,EAE7CvI,EAAiB,GACvB,QAASlR,EAAI,EAAGA,EAAIyb,EAAazb,IAC/BkR,EAAe,KAAK,CAClB,KAAM,UACN,KAAM,eAAelR,EAAI,CAAC,GAC1B,WAAYA,CAAA,CACb,EAIH,MAAMmR,EAA6C,CACjD,WAAY,CACV,cAAe,KAAK,YAAa,cACjC,cAAe,KAAK,YAAa,cACjC,YAAa,KAAK,YAAa,aAEjC,QAASD,EACT,gBAAiB,IAEnB,KAAK,gBAAkB,KAAK,qBAAqB,eAAeC,CAAc,EAG9E,MAAME,EAA8C,CAClD,GAAGF,EACH,gBAAiB,IAEnB,KAAK,iBAAmB,KAAK,qBAAqB,eAAeE,CAAe,EAElFf,EAAA,CAAQ,OACDvT,EAAO,CACdye,EAAOze,CAAK,EACd,CACD,EAGK2e,EAAiB,IAAI,QAAc,CAAClK,EAAGgK,IAAW,CACtD,WAAW,IAAMA,EAAO,IAAI,MAAM,sBAAsB,CAAC,EAAG,GAAK,EAClE,EAKD,GAHA,MAAM,QAAQ,KAAK,CAACD,EAAmBG,CAAc,CAAC,EAGlD,CAAC,KAAK,iBAAmB,CAAC,KAAK,iBACjC,MAAM,IAAI,MAAM,8CAA8C,EAIhE,KAAK,iBAGL,KAAK,YAAY,EAAK,EACtB,KAAK,YAAY,EAAI,EAGrB,MAAMtE,EAAW,SAAS,eAAe,sBAAsB,EAC3DA,IAAUA,EAAS,MAAM,QAAU,sBAEhCra,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChD,KAAK,YAAY,EAAK,EAGtB,IAAIwd,EAAe,kDAEfxd,aAAiB,QACfA,EAAM,QAAQ,SAAS,SAAS,EAClCwd,EAAe,oFACNxd,EAAM,QAAQ,SAAS,SAAS,EACzCwd,EAAe,gEACNxd,EAAM,QAAQ,SAAS,kBAAkB,EAClDwd,EAAe,sEACNxd,EAAM,QAAQ,SAAS,YAAY,IAC5Cwd,EAAe,sEAInB,KAAK,UAAUA,CAAY,EAC7B,CAMM,gBAAuB,CAC7B,GAAI,CAAC,KAAK,iBAAmB,CAAC,KAAK,iBAAkB,OAErD,MAAMoB,EAAmB,SAAS,eAAe,oBAAoB,EAChEA,IAGLvD,EAAqB,eACnBuD,EACA,KAAK,gBACL,KAAK,iBACL,CACE,gBAAiB,GACjB,eAAgB,IAAM,KAAK,wBAAuB,CACpD,EAIF,KAAK,yBAAuB,CAOtB,cAAqB,CAC3B,KAAK,gBAAkB,KACvB,KAAK,iBAAmB,KACxB,KAAK,YAAY,EAAK,EAEtB,MAAMvE,EAAW,SAAS,eAAe,sBAAsB,EAC3DA,IAAUA,EAAS,MAAM,QAAU,QAMjC,YAAYwE,EAAqB,CACvC,MAAMC,EAAY,SAAS,eAAe,oBAAoB,EAC1DA,GACFA,EAAU,UAAU,OAAO,SAAU,CAACD,CAAI,CAC5C,CAMM,YAAYA,EAAqB,CACvC,MAAME,EAAY,SAAS,eAAe,oBAAoB,EAC1DA,GACFA,EAAU,UAAU,OAAO,SAAU,CAACF,CAAI,CAC5C,CAMM,UAAUlB,EAAuB,CAEvC,KAAK,YAGL,MAAMC,EAAe,SAAS,cAAc,KAAK,EACjDA,EAAa,UAAY,mBACzBA,EAAa,GAAK,mBAClBA,EAAa,UAAY;AAAA;AAAA;AAAA,sCAGSD,CAAO;AAAA;AAAA;AAAA,MAMzC,MAAMiB,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,GAAoBA,EAAiB,WACvCA,EAAiB,WAAW,aAAahB,EAAcgB,CAAgB,EAGnE,KAAK,WACP,KAAK,UAAU,YAAYhB,CAAY,EAK3C,WAAW,IAAM,CACf,KAAK,WAAU,EACd,GAAK,EAMF,WAAkB,CACxB,MAAMA,EAAe,SAAS,eAAe,kBAAkB,EAC3DA,GACFA,EAAa,QACf,CAMM,2BAAkC,CACxC,MAAM5D,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAcqBpB,SAAS,KAAK,YAAYA,CAAK,EAMjC,4BAA4B9F,EAA2B,CAKrD,GAJA,QAAQ,IAAI,gEAAiEA,CAAc,EAC3F,QAAQ,IAAI,iDAAkDA,EAAe,QAAQ,EACrF,QAAQ,IAAI,kDAAmDA,EAAe,SAAS,EAEnF,CAAC,KAAK,UAAW,CACnB,QAAQ,IAAI,yCAAyC,EACrD,OAIF,GAAIA,EAAe,UAAYA,EAAe,UAC5C,KAAK,gBAAkBA,EAAe,SACtC,KAAK,iBAAmBA,EAAe,UAEvC,QAAQ,IAAI,+DAAgE,KAAK,gBAAiB,gBAAgB,EAClH,QAAQ,IAAI,gEAAiE,KAAK,iBAAkB,gBAAgB,MAC/G,CACL,QAAQ,KAAK,2DAA2D,EACxE,OAIF,MAAM0K,EAAmB,KAAK,UAAU,cAAc,qBAAqB,EAC3E,GAAI,CAACA,EAAkB,CACrB,QAAQ,IAAI,mEAAmE,EAC/E,OAEF,QAAQ,IAAI,qDAAsDA,CAAgB,EAGlFA,EAAiB,UAAU,OAAO,QAAQ,EAG1C,KAAK,iBAGL,KAAK,YAAY,EAAI,EAGrB,MAAMI,EAAoB,KAAK,UAAU,cAAc,sBAAsB,EACvEC,EAAsB,KAAK,UAAU,cAAc,wBAAwB,EAC7ED,IACDA,EAAkC,MAAM,QAAU,QAEjDC,IACDA,EAAoC,MAAM,QAAU,QAIvD,MAAMC,EAAgB,KAAK,UAAU,cAAc,kBAAkB,EACjEA,IACFA,EAAc,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,QAM1BA,EAAc,UAAU,OAAO,QAAQ,EACzC,CAMM,wBAA+B,CACrC,GAAI,CAAC,KAAK,UAAW,OAErB,MAAMF,EAAoB,KAAK,UAAU,cAAc,sBAAsB,EACvEC,EAAsB,KAAK,UAAU,cAAc,wBAAwB,EAC7ED,IACDA,EAAkC,MAAM,QAAU,SAEjDC,IACDA,EAAoC,MAAM,QAAU,QACvD,CAEJ,CC1gDO,MAAME,CAAkB,CAI7B,OAAO,wBAAwB7L,EAAgD,CAC7E,OAAOA,EAAK,cACT,OAAO/I,GAASA,EAAM,MAAQ,CAAC,EAC/B,KAAK,CAACrK,EAAGC,IAAMD,EAAE,YAAcC,EAAE,WAAW,EAMjD,OAAO,6BACLif,EACqB,CACrB,MAAMC,EAAuB,KAAK,wBAAwBD,EAAa,UAAU,EAG3EV,EAAcU,EAAa,UAAU,cACxC,OAAO7U,GAASA,EAAM,MAAQ,CAAC,EAC/B,OAAO,CAAClG,EAAOkG,IAAUlG,EAAQ,KAAK,IAAIkG,EAAM,MAAO,GAAG,EAAG,CAAC,EAEjE,MAAO,CACL,WAAY,CACV,MAAO,GACP,cAAe8U,EACf,cAAeA,EAAqB,OAAO,CAAC5U,EAAKF,IAAUE,EAAOF,EAAM,MAAQA,EAAM,KAAK,SAAW,CAAC,EACvG,YAAa8U,EAAqB,OAAO,CAAC5U,EAAKF,IAAUE,EAAMF,EAAM,YAAa,CAAC,EACnF,oBAAqB,EACrB,mBAAoB,EACpB,oBAAqB,EACrB,gBAAiB,GACjB,gBAAiB,GAEnB,gBAAiB,KAAK,IAAImU,EAAa,GAAG,EAC1C,gBAAiBU,EAAa,gBAChC,CAMF,OAAO,0BAA0B9L,EAA2D,CAC1F,MAAMrU,EAAmB,GACnBC,EAAqB,GAC3B,IAAIogB,EAAa,EACbC,EAAmB,GAGnBjM,EAAK,cAAc,SAAW,GAChCrU,EAAO,KAAK,uCAAuC,EAIrD,UAAWsL,KAAS+I,EAAK,cAAe,CACtC,GAAI,CAAC/I,EAAM,KAAM,CACftL,EAAO,KAAK,4BAA4B,EACxC,SAGEsL,EAAM,OAAS,EACjBtL,EAAO,KAAK,SAASsL,EAAM,KAAK,IAAI,iCAAiC,EAC5DA,EAAM,MAAQ,KACvBrL,EAAS,KAAK,SAASqL,EAAM,KAAK,IAAI,gCAAgCA,EAAM,KAAK,GAAG,EAGtF+U,GAAc/U,EAAM,MAGhBA,EAAM,MAAQ,MAChBgV,EAAmB,GACrB,CAIE,CAACA,GAAoBD,EAAa,KACpCpgB,EAAS,KAAK,4BAA4BogB,CAAU,6CAA6C,EAInG,MAAM9J,EAAYlC,EAAK,cAAc,IAAI7F,GAAKA,EAAE,KAAK,IAAI,EACnD+R,EAAahK,EAAU,OAAO,CAACpV,EAAMjB,IAAUqW,EAAU,QAAQpV,CAAI,IAAMjB,CAAK,EACtF,OAAIqgB,EAAW,OAAS,GACtBvgB,EAAO,KAAK,0BAA0B,MAAM,KAAK,IAAI,IAAIugB,CAAU,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,EAG7E,CACL,QAASvgB,EAAO,SAAW,EAC3B,OAAAA,EACA,SAAAC,EACA,WAAAogB,EACA,iBAAAC,CAAA,CACF,CAMF,OAAO,gBAAgBzT,EAA0B1L,EAAuC,CACtF,MAAO,CACL,cAAe,GACf,cAAe,EACf,YAAa,EACb,KAAAA,EACA,KAAA0L,CAAA,CACF,CAMF,OAAO,cACLwH,EACAhV,EACAyF,EACA0b,EAAsB,GACG,CAEzB,MAAMC,EAAcD,EAAaE,EAAwB,oBAAsB5b,EACzEiE,EAAc1J,EAAK,OAASohB,EAG5B7E,EAAgBvH,EAAK,cAAc,aAAe7F,EAAE,KAAK,OAASnP,EAAK,IAAI,EAE3EshB,EAAmB,CAAC,GAAGtM,EAAK,aAAa,EACzCuM,EAA0B,CAC9B,MAAOH,EACP,YAAA1X,EACA,KAAA1J,CAAA,EAGEuc,GAAiB,EAEnB+E,EAAiB/E,CAAa,EAAIgF,EAGlCD,EAAiB,KAAKC,CAAQ,EAIhC,MAAMxW,EAAgBuW,EAAiB,OAAO,CAACnV,EAAKgD,IAAMhD,EAAOgD,EAAE,MAAQA,EAAE,KAAK,SAAW,CAAC,EACxFqS,EAAiBF,EAAiB,OAAO,CAACnV,EAAKgD,IAAMhD,EAAMgD,EAAE,YAAa,CAAC,EAEjF,MAAO,CACL,GAAG6F,EACH,cAAesM,EACf,cAAAvW,EACA,YAAayW,CAAA,CACf,CAMF,OAAO,mBAAmBxM,EAA+BxP,EAA2C,CAClG,MAAM8b,EAAmBtM,EAAK,cAAc,UAAY7F,EAAE,KAAK,OAAS3J,CAAQ,EAG1EuF,EAAgBuW,EAAiB,OAAO,CAACnV,EAAKgD,IAAMhD,EAAOgD,EAAE,MAAQA,EAAE,KAAK,SAAW,CAAC,EACxFzF,EAAc4X,EAAiB,OAAO,CAACnV,EAAKgD,IAAMhD,EAAMgD,EAAE,YAAa,CAAC,EAE9E,MAAO,CACL,GAAG6F,EACH,cAAesM,EACf,cAAAvW,EACA,YAAArB,CAAA,CACF,CAMF,OAAO,eAAesL,EAAuC,CAC3D,GAAIA,EAAK,cAAc,SAAW,EAChC,MAAO,sBAGT,MAAMyM,EAAazM,EAAK,cAAc,OAChC0M,EAAgB1M,EAAK,cAAc,UAAY7F,EAAE,MAAQ,GAAM,EAAE,OACjEwS,EAAc3M,EAAK,cACtB,OAAO7F,GAAKA,EAAE,OAAS,GAAM,EAC7B,OAAO,CAAChD,EAAKgD,IAAMhD,EAAMgD,EAAE,MAAO,CAAC,EAEtC,OAAIuS,EAAgB,EACX,GAAGD,CAAU,gBAAgBC,CAAa,cAAcC,CAAW,WAEnE,GAAGF,CAAU,gBAAgBE,CAAW,cACjD,CAEJ,CAKO,MAAMN,EAA0B,CAErC,iBAAkB,IAElB,oBAAqB,GAErB,oBAAqB,UAErB,iBAAkB,GACpB,ECrTO,MAAMO,EAAkB,CAM7B,YAAYzG,EAA2B,CAL/B9Z,EAAA,iBAAgC,MAChCA,EAAA,cACAA,EAAA,2BAA0C,KAAK,wBAC/CA,EAAA,0BAAyC,KAAK,wBAGpD,KAAK,MAAQ8Z,CAAA,CAMR,MAAMC,EAA8B,CACzC,KAAK,UAAYA,EACjB,KAAK,SACL,KAAK,sBAAqB,CAMrB,SAAgB,CACjB,KAAK,YACP,KAAK,UAAU,UAAY,GAC3B,KAAK,UAAY,KACnB,CAMK,YAAYD,EAA0C,CAC3D,KAAK,MAAQ,CAAE,GAAG,KAAK,MAAO,GAAGA,CAAA,EAC7B,KAAK,aAEHA,EAAM,YAAcA,EAAM,YAC5B,KAAK,mBAGHA,EAAM,gBAAkBA,EAAM,qBAAuBA,EAAM,WAAa,UAC1E,KAAK,SACL,KAAK,wBAET,CAMM,sBAA2C,CACjD,MAAO,CACL,aAAc,KACd,SAAU,EACV,WAAY,GACZ,QAAS,GACX,CAMM,QAAe,CAChB,KAAK,YAEV,KAAK,UAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAamB0F,EAAkB,eAAe,KAAK,MAAM,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUnF,KAAK,kBAAkB,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAW3BQ,EAAwB,gBAAgB;AAAA,6BACtC,KAAK,oBAAoB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAe1C,KAAK,eAAe,KAAK,MAAM,WAAY,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAWtBR,EAAkB,eAAe,KAAK,MAAM,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAUlF,KAAK,kBAAkB,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAYxBQ,EAAwB,gBAAgB;AAAA,+BACtC,KAAK,mBAAmB,QAAQ;AAAA;AAAA,wBAEvC,KAAK,mBAAmB,WAAa,WAAa,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAMlD,KAAK,mBAAmB,WAAa,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAiBzD,KAAK,eAAe,KAAK,MAAM,UAAW,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsBlE,KAAK,YAAU,CAMT,kBAAkB7T,EAA2B,SAAkB,CAKrE,OAJcA,IAAS,SACnB,KAAK,MAAM,eACV,KAAK,MAAM,qBAAuB,KAAK,MAAM,gBAG/C,KAAK,CAAC5L,EAAGC,IAAMD,EAAE,KAAK,cAAcC,EAAE,IAAI,CAAC,EAC3C,IAAI7B,GAAQ;AAAA,yBACMA,EAAK,IAAI,YAAY,KAAK,eAAeA,CAAI,CAAC;AAAA,YAC3DA,EAAK,IAAI,KAAKA,EAAK,QAAQ,SAASA,EAAK,MAAM;AAAA;AAAA,OAEpD,EAAE,KAAK,EAAE,EAMN,eAAeA,EAAoB,CACzC,MAAO,WAAWA,EAAK,MAAM,eAAeA,EAAK,QAAQ,YAAYA,EAAK,WAAW,KAAK,IAAI,CAAC,GAMzF,eAAegV,EAA+BxH,EAAkC,CACtF,OAAIwH,EAAK,cAAc,SAAW,EACzB,2CAGFA,EAAK,cAAc,IAAI/I,GAAS,CACrC,MAAMkV,EAAalV,EAAM,OAASoV,EAAwB,oBAC1D,MAAO;AAAA,sDACyCpV,EAAM,KAAK,IAAI;AAAA;AAAA,sCAE/BA,EAAM,KAAK,IAAI;AAAA,uCACdA,EAAM,KAAK,QAAQ,UAAUA,EAAM,KAAK,MAAM;AAAA;AAAA;AAAA,cAGvEkV,EACA,iDACA,gCAAgClV,EAAM,MAAM,gBAAgB,SAC9D;AAAA;AAAA;AAAA,oDAGwCuB,CAAI,gBAAgBvB,EAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,QAMlF,EAAE,KAAK,EAAE,EAMJ,sBAA6B,CACnC,GAAI,CAAC,KAAK,UAAW,OAGrB,MAAM4V,EAAmB,KAAK,UAAU,cAAc,qBAAqB,EACrEC,EAAiB,KAAK,UAAU,cAAc,kBAAkB,EAChEC,EAAgB,KAAK,UAAU,cAAc,kBAAkB,EAG/DC,EAAkB,KAAK,UAAU,cAAc,oBAAoB,EACnEC,EAAgB,KAAK,UAAU,cAAc,iBAAiB,EAC9DC,EAAgB,KAAK,UAAU,cAAc,iBAAiB,EAC9DC,EAAe,KAAK,UAAU,cAAc,iBAAiB,EAG7DC,EAAW,KAAK,UAAU,cAAc,mBAAmB,EAC3DC,EAAW,KAAK,UAAU,cAAc,kBAAkB,EAG5DR,GACFA,EAAiB,iBAAiB,SAAU,IAAM,KAAK,2BAA2B,EAEhFC,GACFA,EAAe,iBAAiB,QAAS,IAAM,KAAK,4BAA4B,EAE9EC,GACFA,EAAc,iBAAiB,QAAS,IAAM,KAAK,qBAAqB,EAItEC,GACFA,EAAgB,iBAAiB,SAAU,IAAM,KAAK,0BAA0B,EAE9EC,GACFA,EAAc,iBAAiB,QAAS,IAAM,KAAK,2BAA2B,EAE5EC,GACFA,EAAc,iBAAiB,SAAU,IAAM,KAAK,2BAA2B,EAE7EC,GACFA,EAAa,iBAAiB,QAAS,IAAM,KAAK,oBAAoB,EAIpEC,GACFA,EAAS,iBAAiB,QAAS,IAAM,KAAK,sBAAsB,EAElEC,GACFA,EAAS,iBAAiB,QAAS,IAAM,KAAK,sBAAsB,EAItE,KAAK,UAAU,iBAAiB,QAAU9S,GAAM,CAC9C,MAAM9C,EAAS8C,EAAE,OACjB,GAAI9C,EAAO,UAAU,SAAS,YAAY,EAAG,CAC3C,MAAMe,EAAOf,EAAO,QAAQ,KACtBjH,EAAWiH,EAAO,QAAQ,KAC5Be,GAAQhI,GACV,KAAK,iBAAiBgI,EAAMhI,CAAQ,CACtC,CACF,CACD,EAMK,2BAAkC,OACxC,MAAM8c,GAASnU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,uBAC7C,GAAI,CAACmU,EAAQ,OAEb,MAAM9c,EAAW8c,EAAO,MAClBtiB,EAAO,KAAK,MAAM,eAAe,KAAKmC,GAAKA,EAAE,OAASqD,CAAQ,GAAK,KAEzE,KAAK,oBAAsB,CACzB,GAAG,KAAK,oBACR,aAAcxF,EACd,QAASA,IAAS,MAAQ,KAAK,oBAAoB,SAAW,GAGhE,KAAK,gBAAgB,QAAQ,EAMvB,4BAAmC,OACzC,MAAMqc,GAAQlO,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,oBAC5C,GAAI,CAACkO,EAAO,OAEZ,MAAM5W,EAAW,SAAS4W,EAAM,KAAK,GAAK,EAE1C,KAAK,oBAAsB,CACzB,GAAG,KAAK,oBACR,SAAA5W,EACA,QAAS,KAAK,oBAAoB,eAAiB,MAAQA,EAAW,GAGxE,KAAK,gBAAgB,QAAQ,EAMvB,0BAAiC,OACvC,MAAM6c,GAASnU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,sBAC7C,GAAI,CAACmU,EAAQ,OAEb,MAAM9c,EAAW8c,EAAO,MAElBtiB,GADa,KAAK,MAAM,qBAAuB,KAAK,MAAM,gBACxC,QAAUmC,EAAE,OAASqD,CAAQ,GAAK,KAE1D,KAAK,mBAAqB,CACxB,GAAG,KAAK,mBACR,aAAcxF,EACd,QAASA,IAAS,OAAS,KAAK,mBAAmB,YAAc,KAAK,mBAAmB,SAAW,IAGtG,KAAK,gBAAgB,OAAO,EAMtB,2BAAkC,OACxC,MAAMqc,GAAQlO,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,mBAC5C,GAAI,CAACkO,EAAO,OAEZ,MAAM5W,EAAW,SAAS4W,EAAM,KAAK,GAAK,EAE1C,KAAK,mBAAqB,CACxB,GAAG,KAAK,mBACR,SAAA5W,EACA,QAAS,KAAK,mBAAmB,eAAiB,OACxC,KAAK,mBAAmB,YAAcA,EAAW,IAG7D,KAAK,gBAAgB,OAAO,EAMtB,2BAAkC,SACxC,MAAM8c,GAAWpU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,mBACzCqU,GAAgBpU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,mBAEpD,GAAI,CAACmU,GAAY,CAACC,EAAe,OAEjC,MAAMrB,EAAaoB,EAAS,QAE5B,KAAK,mBAAqB,CACxB,GAAG,KAAK,mBACR,WAAApB,EACA,QAAS,KAAK,mBAAmB,eAAiB,OACxCA,GAAc,KAAK,mBAAmB,SAAW,IAI7DqB,EAAc,SAAWrB,EACrBA,IACFqB,EAAc,MAAQ,KAGxB,KAAK,gBAAgB,OAAO,EAMtB,gBAAgBhV,EAAgC,OACtD,MAAMiV,GAAStU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,QAAQX,CAAI,SACzD,GAAI,CAACiV,EAAQ,OAEb,MAAMC,EAAYlV,IAAS,SAAW,KAAK,oBAAsB,KAAK,mBACtEiV,EAAO,SAAW,CAACC,EAAU,SAAW,KAAK,MAAM,UAAY,GAMzD,qBAA4B,CAClC,GAAI,CAAC,KAAK,oBAAoB,cAAgB,CAAC,KAAK,oBAAoB,QAAS,OAEjF,MAAMC,EAAc9B,EAAkB,cACpC,KAAK,MAAM,WACX,KAAK,oBAAoB,aACzB,KAAK,oBAAoB,SACzB,IAIF,KAAK,MAAM,mBAAmB8B,CAAW,EAEzC,KAAK,MAAQ,CAAE,GAAG,KAAK,MAAO,WAAYA,CAAA,EAC1C,KAAK,uBACL,KAAK,iBAAgB,CAMf,oBAA2B,CACjC,GAAI,CAAC,KAAK,mBAAmB,cAAgB,CAAC,KAAK,mBAAmB,QAAS,OAE/E,MAAMA,EAAc9B,EAAkB,cACpC,KAAK,MAAM,UACX,KAAK,mBAAmB,aACxB,KAAK,mBAAmB,SACxB,KAAK,mBAAmB,YAI1B,KAAK,MAAM,kBAAkB8B,CAAW,EAExC,KAAK,MAAQ,CAAE,GAAG,KAAK,MAAO,UAAWA,CAAA,EACzC,KAAK,sBACL,KAAK,iBAAgB,CAMf,iBAAiBnV,EAA0BhI,EAAwB,CACzE,GAAIgI,IAAS,SAAU,CACrB,MAAMmV,EAAc9B,EAAkB,mBAAmB,KAAK,MAAM,WAAYrb,CAAQ,EACxF,KAAK,MAAM,mBAAmBmd,CAAW,EAEzC,KAAK,MAAQ,CAAE,GAAG,KAAK,MAAO,WAAYA,CAAA,CAAY,KACjD,CACL,MAAMA,EAAc9B,EAAkB,mBAAmB,KAAK,MAAM,UAAWrb,CAAQ,EACvF,KAAK,MAAM,kBAAkBmd,CAAW,EAExC,KAAK,MAAQ,CAAE,GAAG,KAAK,MAAO,UAAWA,CAAA,CAAY,CAGvD,KAAK,iBAAgB,CAMf,sBAA6B,CACnC,MAAMC,EAAkB/B,EAAkB,gBAAgB,SAAU,aAAa,EAC3EgC,EAAiBhC,EAAkB,gBAAgB,QAAS,YAAY,EAE9E,KAAK,MAAM,mBAAmB+B,CAAe,EAC7C,KAAK,MAAM,kBAAkBC,CAAc,EAE3C,KAAK,MAAQ,CAAE,GAAG,KAAK,MAAO,WAAYD,EAAiB,UAAWC,CAAA,EAEtE,KAAK,iBAAgB,CAMf,sBAA6B,CACnC,MAAMC,EAAmBjC,EAAkB,0BAA0B,KAAK,MAAM,UAAU,EACpFkC,EAAkBlC,EAAkB,0BAA0B,KAAK,MAAM,SAAS,EAExF,KAAK,yBAAyBiC,EAAkBC,CAAe,EAMzD,iBAAwB,CAC9B,GAAI,CAAC,KAAK,UAAW,OAGrB,MAAMC,EAAiB,KAAK,UAAU,cAAc,mBAAmB,EACnEA,IACFA,EAAe,UAAY,KAAK,eAAe,KAAK,MAAM,WAAY,QAAQ,GAIhF,MAAMC,EAAgB,KAAK,UAAU,cAAc,kBAAkB,EACjEA,IACFA,EAAc,UAAY,KAAK,eAAe,KAAK,MAAM,UAAW,OAAO,GAI7E,MAAMC,EAAgB,KAAK,UAAU,cAAc,iCAAiC,EAChFA,IACFA,EAAc,YAAcrC,EAAkB,eAAe,KAAK,MAAM,UAAU,GAGpF,MAAMsC,EAAe,KAAK,UAAU,cAAc,gCAAgC,EAC9EA,IACFA,EAAa,YAActC,EAAkB,eAAe,KAAK,MAAM,SAAS,GAIlF,KAAK,4BAA2B,CAM1B,4BAAmC,CACzC,GAAI,CAAC,KAAK,UAAW,OAGC,KAAK,UAAU,iBAAiB,aAAa,EACrD,QAAQ4B,GAAU,OAC9B,MAAMW,EAAYX,EAAO,UAAU,EAAI,GACvCtU,EAAAsU,EAAO,aAAP,MAAAtU,EAAmB,aAAaiV,EAAWX,GAE3CW,EAAU,iBAAiB,QAAU7T,GAAM,CACzC,MAAM9C,EAAS8C,EAAE,OAEX/B,EAAQf,EAAO,QAAQ,MAAQ2W,EAAU,QAAQ,KACjD5d,EAAWiH,EAAO,QAAQ,MAAQ2W,EAAU,QAAQ,KACtD5V,GAAQhI,GACV,KAAK,iBAAiBgI,EAAMhI,CAAQ,CACtC,CACD,EACF,EAMK,yBACNsd,EACAC,EACM,OACN,MAAMzC,GAAmBnS,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,uBACvD,GAAI,CAACmS,EAAkB,OAEvB,MAAM+C,EAAY,CAAC,GAAGP,EAAiB,OAAQ,GAAGC,EAAgB,MAAM,EAClEO,EAAc,CAAC,GAAGR,EAAiB,SAAU,GAAGC,EAAgB,QAAQ,EACxE9D,EAAUoE,EAAU,SAAW,EAErC/C,EAAiB,UAAY;AAAA,uCACMrB,EAAU,QAAU,SAAS;AAAA,cACtDA,EAAU,iBAAmB,qBAAqB;AAAA;AAAA,UAEtDoE,EAAU,OAAS,EAAI;AAAA;AAAA;AAAA;AAAA,gBAIjBA,EAAU,IAAI3hB,GAAS,OAAOA,CAAK,OAAO,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,UAGxD,EAAE;AAAA;AAAA,UAEJ4hB,EAAY,OAAS,EAAI;AAAA;AAAA;AAAA;AAAA,gBAInBA,EAAY,IAAIC,GAAW,OAAOA,CAAO,OAAO,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,UAG9D,EAAE;AAAA;AAAA;AAAA,6CAG+B1C,EAAkB,eAAe,KAAK,MAAM,UAAU,CAAC;AAAA,4CACxDA,EAAkB,eAAe,KAAK,MAAM,SAAS,CAAC;AAAA;AAAA;AAAA,MAK9FP,EAAiB,UAAU,OAAO,QAAQ,EAMpC,sBAA6B,SACnC,KAAK,oBAAsB,KAAK,uBAChC,MAAMgC,GAASnU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,uBACvCkO,GAAQjO,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,oBAExCkU,MAAe,MAAQ,IACvBjG,MAAa,MAAQ,KAMnB,qBAA4B,WAClC,KAAK,mBAAqB,KAAK,uBAC/B,MAAMiG,GAASnU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,sBACvCkO,GAAQjO,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,mBACtCmU,GAAWiB,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,mBAE3ClB,MAAe,MAAQ,IACvBjG,IACFA,EAAM,MAAQ,IACdA,EAAM,SAAW,IAEfkG,MAAmB,QAAU,IAM3B,WAAkB,CACxB,MAAMkB,EAAU,yBAChB,GAAI,SAAS,eAAeA,CAAO,EAAG,OAEtC,MAAM/H,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK+H,EACX/H,EAAM,YAAcwTpB,SAAS,KAAK,YAAYA,CAAK,EAEnC,CCl8BO,MAAMgI,EAAgC,CAY3C,YAAYvI,EAAoC,CAXxC9Z,EAAA,iBAAgC,MAChCA,EAAA,cACAA,EAAA,oBAAyC,MACzCA,EAAA,sBAAyB,IACzBA,EAAA,kBAA0B,IAC1BA,EAAA,wBACAA,EAAA,yBACAA,EAAA,2BAAwD,MACxDA,EAAA,uBAA+C,MAC/CA,EAAA,iBAAqB,IAG3B,KAAK,MAAQ8Z,EACb,KAAK,gBAAkB,IAAIrD,EAC3B,KAAK,iBAAmB,IAAImD,EAC5B,KAAK,+BAA8B,CAMrC,MAAa,MAAMG,EAAuC,CACxD,KAAK,UAAYA,EACjB,MAAM,KAAK,YACX,KAAK,SACL,KAAK,sBAAqB,CAMrB,SAAgB,CACjB,KAAK,eACP,KAAK,aAAa,UAClB,KAAK,aAAe,MAElB,KAAK,YACP,KAAK,UAAU,UAAY,GAC3B,KAAK,UAAY,KACnB,CAMK,YAAYD,EAAmD,CACpE,KAAK,MAAQ,CAAE,GAAG,KAAK,MAAO,GAAGA,CAAA,CAAM,CAMjC,+BAAsC,CAC5C,KAAK,oBAAsB,CACzB,WAAY0F,EAAkB,gBAAgB,SAAU,aAAa,EACrE,UAAWA,EAAkB,gBAAgB,QAAS,YAAY,EAClE,gBAAiB,GACjB,WAAY,gBACd,CAMF,MAAc,WAA2B,CACvC,GAAI,CAEF,KAAK,eAAiB,KAAK,MAAM,WAAW,cACxC,KAAK,eAAe,SAAW,IAEjC,KAAK,eAAiB,MAAM,KAAK,MAAM,WAAW,mBAIpD,GAAI,CACF,KAAK,WAAa,MAAM,KAAK,gBAAgB,sBAAqB,OAC3Dnf,EAAO,CACd,QAAQ,KAAK,uEAAwEA,CAAK,EAC1F,KAAK,WAAa,EAAC,CAIrB,GAAI,CAGF,MAAMiiB,EAFiB,KAAK,iBAAiB,uBAEU,IAAK3jB,IAAe,CACzE,KAAMA,EAAK,KACX,WAAYA,EAAK,WACjB,OAAQA,EAAK,OACb,SAAUA,EAAK,SACf,iBAAkBA,EAAK,kBACvB,EAGF,KAAK,WAAW,KAAK,GAAG2jB,CAAkB,QACnCjiB,EAAO,CACd,QAAQ,KAAK,mCAAoCA,CAAK,EAGxD,QAAQ,IAAI,UAAU,KAAK,eAAe,MAAM,sBAAsB,KAAK,WAAW,MAAM,cAAc,QACnGA,EAAO,CACd,QAAQ,MAAM,wBAAyBA,CAAK,EAC5C,KAAK,UAAU,oDAAoD,EACrE,CAMM,uBAAuB8P,EAA4B,OACzD,MAAO,CACL,KAAM,GAAGA,EAAU,IAAI,WACvB,WAAYA,EAAU,WACtB,UAAW,aACX,OAAQA,EAAU,OAClB,SAAUA,EAAU,SACpB,gBAAiB,EACjB,eAAgB,EAChB,eAAgB,EAChB,iBAAkB,EAClB,kBAAmB,EACnB,kBAAmB,EACnB,oBAAqB,EACrB,YAAa,cACb,mBAAkBrD,EAAAqD,EAAU,mBAAV,YAAArD,EAA4B,IAAI7N,IAAQ,CACxD,YAAaA,EAAI,YACjB,cAAeA,EAAI,cACnB,MAAOA,EAAI,WACN,OACT,CAMM,mBAA4B,CAClC,MAAMsjB,EAAe,KAAK,eACpBC,EAAsB,KAAK,WAAW,OAAY,KAAK,uBAAuB7jB,CAAI,CAAC,EACzF,MAAO,CAAC,GAAG4jB,EAAc,GAAGC,CAAmB,EAMzC,QAAe,CACjB,CAAC,KAAK,WAAa,CAAC,KAAK,sBAE7B,KAAK,UAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAyBN,KAAK,oBAAoB,YAAc,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAczD,KAAK,oBAAoB,gBAAkB,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBASxD,KAAK,oBAAoB,gBAA8B,GAAZ,SAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA0D5E,KAAK,YACL,KAAK,oBACL,KAAK,uBAAqB,CAMpB,mBAA0B,OAChC,MAAMC,GAAgB3V,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,6BAChD,CAAC2V,GAAiB,CAAC,KAAK,sBAExB,KAAK,cACP,KAAK,aAAa,UAGpB,KAAK,aAAe,IAAIlC,GAAkB,CACxC,eAAgB,KAAK,eACrB,oBAAqB,KAAK,oBAC1B,WAAY,KAAK,oBAAoB,WACrC,UAAW,KAAK,oBAAoB,UACpC,mBAAqB5M,GAAS,KAAK,uBAAuBA,CAAI,EAC9D,kBAAoBA,GAAS,KAAK,sBAAsBA,CAAI,EAC5D,SAAU,KAAK,WAAa,KAAK,MAAM,SACxC,EAED,KAAK,aAAa,MAAM8O,CAA4B,GAM9C,sBAA6B,CACnC,GAAI,CAAC,KAAK,UAAW,OAGrB,MAAMC,EAAkB,KAAK,UAAU,cAAc,cAAc,EAC/DA,GACFA,EAAgB,iBAAiB,QAAS,IAAM,KAAK,wBAAwB,EAItD,KAAK,UAAU,iBAAiB,0BAA0B,EAClE,QAAQxF,GAAS,CAChCA,EAAM,iBAAiB,SAAU,IAAM,KAAK,wBAAwB,EACrE,EAGD,MAAMyF,EAAc,KAAK,UAAU,cAAc,kBAAkB,EAC7DC,EAAc,KAAK,UAAU,cAAc,YAAY,EACvDC,EAAgB,KAAK,UAAU,cAAc,cAAc,EAE7DF,GACFA,EAAY,iBAAiB,QAAS,IAAM,KAAK,sBAAsB,EAErEC,GACFA,EAAY,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,EAE/DC,GACFA,EAAc,iBAAiB,QAAS,IAAM,KAAK,kBAAkB,CACvE,CAMM,uBAAuBlP,EAAqC,CAC7D,KAAK,sBAEV,KAAK,oBAAsB,CACzB,GAAG,KAAK,oBACR,WAAYA,CAAA,EAGd,KAAK,uBACL,KAAK,eAAa,CAMZ,sBAAsBA,EAAqC,CAC5D,KAAK,sBAEV,KAAK,oBAAsB,CACzB,GAAG,KAAK,oBACR,UAAWA,CAAA,EAGb,KAAK,uBACL,KAAK,eAAa,CAMZ,wBAA+B,OACrC,MAAMqH,GAAQlO,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,gBACxC,CAACkO,GAAS,CAAC,KAAK,sBAEpB,KAAK,oBAAsB,CACzB,GAAG,KAAK,oBACR,WAAYA,EAAM,MAAM,QAAU,iBACpC,CAMM,wBAA+B,OACrC,MAAM8H,GAAgBhW,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,oCACpD,GAAI,CAACgW,GAAiB,CAAC,KAAK,oBAAqB,OAEjD,MAAMC,EAAQD,EAAc,OACxBC,IAAU,UAAYA,IAAU,WAClC,KAAK,oBAAsB,CACzB,GAAG,KAAK,oBACR,gBAAiBA,IAAU,UAE/B,CAOM,sBAA6B,OACnC,MAAM3B,GAAStU,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,oBAC7C,GAAI,CAACsU,GAAU,CAAC,KAAK,oBAAqB,OAE1C,MAAM4B,EAAc,KAAK,oBAAoB,WAAW,cAAc,OAAS,EACzEC,EAAa,KAAK,oBAAoB,UAAU,cAAc,OAAS,EACvEC,EAAcF,GAAeC,GAAc,CAAC,KAAK,WAAa,CAAC,KAAK,MAAM,SAEhF7B,EAAO,SAAW,CAAC8B,EAGf,CAACF,GAAe,CAACC,EACnB7B,EAAO,YAAc,kCACX4B,EAEAC,EAED,KAAK,UACd7B,EAAO,YAAc,kBAErBA,EAAO,YAAc,qBAJrBA,EAAO,YAAc,iCAFrBA,EAAO,YAAc,iCAOvB,CAMF,MAAc,sBAAsC,OAClD,GAAI,CAAC,KAAK,qBAAuB,KAAK,UAAW,OAGjD,MAAMK,EAAmBjC,EAAkB,0BAA0B,KAAK,oBAAoB,UAAU,EAClGkC,EAAkBlC,EAAkB,0BAA0B,KAAK,oBAAoB,SAAS,EAEtG,GAAI,CAACiC,EAAiB,SAAW,CAACC,EAAgB,QAAS,CACzD,MAAMM,EAAY,CAAC,GAAGP,EAAiB,OAAQ,GAAGC,EAAgB,MAAM,EACxE,KAAK,UAAU,2BAA2BM,EAAU,KAAK,IAAI,CAAC,EAAE,EAChE,OAGF,KAAK,WAAW,EAAI,EACpB,KAAK,YACL,KAAK,eAEL,GAAI,CAEF,MAAMmB,GAAkBrW,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,oCAChDsW,GAAkBD,GAAA,YAAAA,EAAiB,QAAS,OAG5C,CAAE,wBAAA3Q,CAAA,EAA4B,MAAA6Q,EAAA,wCAAA7Q,CAAA,QAAM,2BAAA8Q,EAAA,6CACpCC,EAAgB,IAAI/Q,EAE1B,IAAIgR,EAEJ,GAAIJ,IAAoB,OAAQ,CAE9B,MAAM3O,EAAiB,CACrB,WAAY,CACV,cAAe,KAAK,oBAAqB,WAAW,cACpD,cAAe,KAAK,oBAAqB,WAAW,cACpD,YAAa,KAAK,oBAAqB,WAAW,aAEpD,QAAS,KAAK,oBAAqB,UAAU,cAAc,IAAI,CAAC7J,EAAOpL,KAAW,CAChF,KAAMoL,EAAM,OAASoV,EAAwB,oBAAsB,WAAsB,SACzF,KAAMpV,EAAM,KACZ,WAAYpL,EACZ,MAAOoL,EAAM,MACb,aAAcA,EAAM,OACpB,EACF,gBAAiB,IAGb+J,EAAkB,CACtB,GAAGF,EACH,gBAAiB,IAGbkH,EAAW4H,EAAc,eAAe9O,CAAc,EACtDmH,EAAY2H,EAAc,eAAe5O,CAAe,EAE9D6O,EAAW,CACT,SAAA7H,EACA,UAAAC,EACA,WAAY,CACV,iBAAkBD,EAAS,iBAAmBC,EAAU,iBACxD,mBAAoBD,EAAS,eAAiBC,EAAU,eACxD,eAAgBD,EAAS,iBAAmBC,EAAU,kBAAoB,EAC1E,iBAAkBD,EAAS,eAAiBC,EAAU,gBAAkB,GAE1E,oBAAqB,KAAK,oBAC5B,KACK,CAEL,MAAM6H,EAAe,CACnB,WAAY,CACV,cAAe,KAAK,oBAAqB,WAAW,cACpD,cAAe,KAAK,oBAAqB,WAAW,cACpD,YAAa,KAAK,oBAAqB,WAAW,aAEpD,QAAS,KAAK,oBAAqB,UAAU,cAAc,IAAI,CAAC7Y,EAAOpL,KAAW,CAChF,KAAMoL,EAAM,OAASoV,EAAwB,oBAAsB,WAAsB,SACzF,KAAMpV,EAAM,KACZ,WAAYpL,EACZ,MAAOoL,EAAM,MACb,aAAcA,EAAM,OACpB,EACF,gBAAiBwY,IAAoB,UAGjCM,EAAeH,EAAc,eAAeE,CAAY,EAG9DD,EAAW,CACT,SAAUE,EACV,UAAWA,EACX,WAAY,CACV,iBAAkB,EAClB,mBAAoB,EACpB,cAAeA,EAAa,iBAC5B,gBAAiBA,EAAa,gBAEhC,oBAAqB,KAAK,oBAC5B,CAGF,KAAK,gBAAkBF,EACvB,KAAK,iBAGD,KAAK,MAAM,kBACb,KAAK,MAAM,iBAAiBA,CAAQ,CACtC,OAEOnjB,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChD,KAAK,UACHA,aAAiB,MACb,6BAA6BA,EAAM,OAAO,GAC1C,iDACN,QACF,CACE,KAAK,WAAW,EAAK,EACvB,CAMM,gBAAuB,CAC7B,KAAK,gCACL,KAAK,eACL,KAAK,YACL,KAAK,SACL,KAAK,sBAAqB,CAMpB,kBAAyB,CAC/B,GAAI,CAAC,KAAK,oBAAqB,OAG/B,MAAMZ,EAAS,KAAK,UAAU,KAAK,oBAAqB,KAAM,CAAC,EAC/D,QAAQ,IAAI,wBAAyBA,CAAM,EAE3C,KAAK,WAAW,0DAA2D,MAAM,EAM3E,gBAAuB,CAC7B,GAAI,CAAC,KAAK,iBAAmB,CAAC,KAAK,UAAW,OAE9C,MAAMkkB,EAAiB,KAAK,UAAU,cAAc,iBAAiB,EACrE,GAAI,CAACA,EAAgB,OAErB,KAAM,CAAE,SAAAhI,EAAU,UAAAC,EAAW,oBAAAgI,CAAA,EAAwB,KAAK,gBAGpDC,EAAe;AAAA;AAAA,iCAEQD,EAAoB,UAAU;AAAA;AAAA,YAEnDA,EAAoB,WAAW,IAAI,OAAOA,EAAoB,UAAU,IAAI;AAAA;AAAA;AAAA;AAAA,qBAInEA,EAAoB,WAAW,IAAI;AAAA,iBACvCpE,EAAkB,eAAeoE,EAAoB,UAAU,CAAC;AAAA;AAAA;AAAA,qBAG5DA,EAAoB,UAAU,IAAI;AAAA,iBACtCpE,EAAkB,eAAeoE,EAAoB,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA,MAOtEE,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAevBH,EAAe,UAAYE,EAG3B,MAAME,EAAyB,SAAS,cAAc,KAAK,EAC3DA,EAAuB,UAAY,wBACnCJ,EAAe,YAAYI,CAAsB,EAGjDrI,EAAqB,eACnBqI,EACApI,EACAC,EACA,CACE,MAAO,oBACP,SAAU,6DACZ,EAIF,MAAMoI,EAAa,SAAS,cAAc,KAAK,EAC/CA,EAAW,UAAYF,EACvBH,EAAe,YAAYK,CAAU,EAErCL,EAAe,UAAU,OAAO,QAAQ,EACxC,KAAK,6BAA4B,CAO3B,6BAAoC,CAC1C,GAAI,CAAC,KAAK,UAAW,OAGrB,MAAMnH,EAAU,KAAK,UAAU,iBAAiB,UAAU,EAC1DA,EAAQ,QAAQ7B,GAAO,CACrBA,EAAI,iBAAiB,QAAUzM,GAAM,CACnC,MAAM9C,EAAS8C,EAAE,OACXuO,EAAWrR,EAAO,QAAQ,SAGhCoR,EAAQ,QAAQE,GAAKA,EAAE,UAAU,OAAO,QAAQ,CAAC,EACjDtR,EAAO,UAAU,IAAI,QAAQ,EAGhB,KAAK,UAAW,iBAAiB,aAAa,EACtD,QAAQc,GAAO,CAClBA,EAAI,UAAU,OAAO,QAAQ,EAC7BA,EAAI,UAAU,IAAI,QAAQ,EAC3B,EAED,MAAMyQ,EAAY,KAAK,UAAW,cAAc,IAAIF,CAAQ,WAAW,EACnEE,IACFA,EAAU,UAAU,IAAI,QAAQ,EAChCA,EAAU,UAAU,OAAO,QAAQ,EACrC,CACD,EACF,EAGD,MAAMsH,EAAY,KAAK,UAAU,cAAc,iBAAiB,EAC1DC,EAAmB,KAAK,UAAU,cAAc,iBAAiB,EAEnED,GACFA,EAAU,iBAAiB,QAAS,IAAM,KAAK,qBAAqB,EAElEC,GACFA,EAAiB,iBAAiB,QAAS,IAAM,KAAK,qBAAqB,CAC7E,CAMM,qBAA4B,CAClC,GAAI,CAAC,KAAK,gBAAiB,OAG3B,MAAM1Q,EAAU,KAAK,UAAU,KAAK,gBAAiB,KAAM,CAAC,EAC5D,QAAQ,IAAI,kBAAmBA,CAAO,EAEtC,KAAK,WAAW,uDAAwD,MAAM,EAMxE,qBAA4B,CAClC,KAAK,eACL,KAAK,sBAAqB,CAMpB,WAAW2Q,EAAwB,SACzC,KAAK,UAAYA,EAEjB,MAAMhF,GAAYrS,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,kBAC1CsS,GAAYrS,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,mBAE5CoS,GACFA,EAAU,UAAU,OAAO,SAAU,CAACgF,CAAO,EAG3CA,GAAW/E,GACbA,EAAU,UAAU,IAAI,QAAQ,EAGlC,KAAK,uBAGD,KAAK,cACP,KAAK,aAAa,YAAY,CAAE,SAAU+E,GAAW,KAAK,MAAM,SAAU,CAC5E,CAMM,cAAqB,OAC3B,KAAK,gBAAkB,KACvB,MAAM/E,GAAYtS,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,mBAC5CsS,GACFA,EAAU,UAAU,IAAI,QAAQ,CAClC,CAMM,UAAUpB,EAAuB,OACvC,MAAMoG,GAAUtX,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,kBACzCsX,IAELA,EAAQ,UAAY;AAAA;AAAA;AAAA,sCAGcpG,CAAO;AAAA;AAAA;AAAA,MAKzCoG,EAAQ,UAAU,OAAO,QAAQ,EAGjC,WAAW,IAAM,KAAK,YAAa,GAAK,GAMlC,WAAkB,OACxB,MAAMA,GAAUtX,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,kBAC1CsX,GACFA,EAAQ,UAAU,IAAI,QAAQ,CAChC,CAMM,WAAWpG,EAAiBlf,EAAuC,OAAc,OACvF,MAAMulB,GAAWvX,EAAA,KAAK,YAAL,YAAAA,EAAgB,cAAc,kBAC1CuX,IAELA,EAAS,UAAY;AAAA,mCACUvlB,CAAI;AAAA,UAC7Bkf,CAAO;AAAA;AAAA,MAIbqG,EAAS,UAAU,OAAO,QAAQ,EAGlC,WAAW,IAAM,CACfA,EAAS,UAAU,IAAI,QAAQ,GAC9B,GAAI,GAMD,WAAkB,CACxB,MAAMjC,EAAU,kCAChB,GAAI,SAAS,eAAeA,CAAO,EAAG,OAEtC,MAAM/H,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK+H,EACX/H,EAAM,YAAcufpB,SAAS,KAAK,YAAYA,CAAK,EAEnC,CCzxCO,MAAMiK,EAAmB,CAM9B,YAAYxK,EAAgC,CALpC9Z,EAAA,iBAAgC,MAChCA,EAAA,cACAA,EAAA,gBACAA,EAAA,uBAA0C,IAGhD,KAAK,MAAQ8Z,EACb,KAAK,QAAU,IAAIF,CAAwB,CAGtC,MAAMG,EAA8B,CACzC,KAAK,UAAYA,EACjB,KAAK,iBACL,KAAK,SACL,KAAK,sBAAqB,CAGpB,gBAAuB,QAEzBjN,EAAA,KAAK,MAAM,cAAX,MAAAA,EAAwB,kBAE1B,KAAK,gBAAkB,GACvB,KAAK,MAAM,YAAY,iBAAiB,QAAQ9N,GAAY,CAC1D,KAAK,gBAAgBA,EAAS,WAAW,EAAIA,EAAS,MACvD,GAED,KAAK,gBAAkB,EACzB,CAGM,QAAe,OACrB,GAAI,CAAC,KAAK,UAAW,OAErB,MAAMulB,EAAS,KAAK,MAAM,OAAS,OAC7B5lB,EAAO,KAAK,MAAM,YAExB,KAAK,UAAU,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKf4lB,EAAS,qBAAuB,yBAAyB;AAAA;AAAA;AAAA,gBAGzDA,EAAS,sCAAwC,mDAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAevF5lB,GAAA,YAAAA,EAAM,OAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAiChBA,GAAA,YAAAA,EAAM,SAAU,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAelBA,GAAA,YAAAA,EAAM,WAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAepBmO,EAAAnO,GAAA,YAAAA,EAAM,aAAN,YAAAmO,EAAkB,KAAK,QAAS,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAmDrCyX,EAAS,uBAAyB,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,kBAK/DA,EAAS;AAAA;AAAA;AAAA;AAAA,kBAIP,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlB,KAAK,YACL,KAAK,yBAAwB,CAGvB,WAAkB,CACxB,MAAMlK,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAciQpB,SAAS,KAAK,YAAYA,CAAK,EAGzB,yBAAgC,CACtC,MAAMmK,EAAgB,SAAS,eAAe,uBAAuB,EACrE,GAAKA,EAEL,IAAI,OAAO,KAAK,KAAK,eAAe,EAAE,SAAW,EAAG,CAClDA,EAAc,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,QAM1B,OAGFA,EAAc,UAAY,OAAO,QAAQ,KAAK,eAAe,EAC1D,IAAI,CAAC,CAAC3lB,EAAU6e,CAAK,IAAM;AAAA,qDACmB7e,CAAQ;AAAA;AAAA,0CAEnBA,CAAQ;AAAA,4CACN6e,EAAM,gBAAgB;AAAA;AAAA;AAAA,uGAGqC7e,CAAQ;AAAA;AAAA;AAAA,sGAGTA,CAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,OAKvG,EAAE,KAAK,EAAE,EAEZ,KAAK,+BAA6B,CAG5B,sBAA6B,CACnC,MAAM4lB,EAAO,SAAS,eAAe,iBAAiB,EAChDC,EAAU,SAAS,eAAe,UAAU,EAC5CnK,EAAY,SAAS,eAAe,YAAY,EAChDoK,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAiB,SAAS,eAAe,kBAAkB,EAG7DH,GACFA,EAAK,iBAAiB,SAAU,KAAK,aAAa,KAAK,IAAI,CAAC,EAI1DC,GACFA,EAAQ,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAC,EAG5DnK,GACFA,EAAU,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAC,EAG9DoK,GACFA,EAAU,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAC,EAG9DC,GACFA,EAAe,iBAAiB,QAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAI5E,KAAK,yBAGL,MAAMC,EAAmB,SAAS,eAAe,oBAAoB,EACjEA,GACFA,EAAiB,iBAAiB,WAAa3W,GAAM,CAC/CA,EAAE,MAAQ,UACZA,EAAE,iBACF,KAAK,oBACP,CACD,CACH,CAGM,8BAAqC,CAE3C,SAAS,iBAAiB,oBAAoB,EAAE,QAAQ0M,GAAO,CAC7DA,EAAI,iBAAiB,QAAU1M,GAAM,CACnC,MAAMrP,EAAYqP,EAAE,OAAuB,QAAQ,SAC/CrP,GACF,KAAK,mBAAmBA,CAAQ,CAClC,CACD,EACF,EAGD,SAAS,iBAAiB,sBAAsB,EAAE,QAAQ+b,GAAO,CAC/DA,EAAI,iBAAiB,QAAU1M,GAAM,CACnC,MAAMrP,EAAYqP,EAAE,OAAuB,QAAQ,SAC/CrP,GACF,KAAK,qBAAqBA,CAAQ,CACpC,CACD,EACF,EAGK,wBAA+B,CACtB,CAAC,aAAc,eAAgB,iBAAkB,kBAAkB,EAE3E,QAAQimB,GAAW,CACxB,MAAM9J,EAAQ,SAAS,eAAe8J,CAAO,EACzC9J,IACFA,EAAM,iBAAiB,OAAQ,IAAM,KAAK,cAAc8J,CAAO,CAAC,EAChE9J,EAAM,iBAAiB,QAAS,IAAM,KAAK,gBAAgB8J,CAAO,CAAC,EACrE,CACD,EAGK,cAAcA,EAA0B,CAC9C,MAAM9J,EAAQ,SAAS,eAAe8J,CAAO,EACvC7G,EAAe,SAAS,eAAe,GAAG6G,CAAO,QAAQ,EAE/D,GAAI,CAAC9J,GAAS,CAACiD,EAAc,MAAO,GAEpC,IAAIjL,EAEJ,OAAQ8R,EAAA,CACN,IAAK,aACH9R,EAAaoE,EAA2B,aAAa4D,EAAM,KAAK,EAChE,MACF,IAAK,eACHhI,EAAaoE,EAA2B,eAAe,SAAS4D,EAAM,KAAK,CAAC,EAC5E,MACF,IAAK,iBACHhI,EAAaoE,EAA2B,iBAAiB,SAAS4D,EAAM,KAAK,CAAC,EAC9E,MACF,IAAK,mBACH,MAAM7Z,EAAQ6Z,EAAM,MAAM,MAAM,GAAG,EAAE,IAAI0B,GAAKA,EAAE,MAAM,EAAE,UAAYA,CAAC,EACrE1J,EAAaoE,EAA2B,kBAAkBjW,CAAK,EAC/D,MACF,QACE,MAAO,GAGX,OAAI6R,EAAW,SACbgI,EAAM,UAAU,OAAO,OAAO,EAC9BiD,EAAa,YAAc,GACpB,KAEPjD,EAAM,UAAU,IAAI,OAAO,EAC3BiD,EAAa,YAAcjL,EAAW,OAAS,GACxC,GACT,CAGM,gBAAgB8R,EAAuB,CAC7C,MAAM9J,EAAQ,SAAS,eAAe8J,CAAO,EACvC7G,EAAe,SAAS,eAAe,GAAG6G,CAAO,QAAQ,EAE3D9J,GAASiD,IACXjD,EAAM,UAAU,OAAO,OAAO,EAC9BiD,EAAa,YAAc,GAC7B,CAGM,mBAA0B,CAChC,MAAM8G,EAAY,SAAS,eAAe,mBAAmB,EACvDC,EAAa,SAAS,eAAe,oBAAoB,EAE/D,GAAI,CAACD,GAAa,CAACC,EAAY,OAE/B,MAAMnmB,EAAWkmB,EAAU,MAAM,OAC3BE,EAAa,SAASD,EAAW,KAAK,EAG5C,GAAI,CAACnmB,EAAU,CACb,MAAM,0BAA0B,EAChCkmB,EAAU,QACV,OAGF,GAAI,MAAME,CAAU,GAAKA,EAAa,EAAG,CACvC,MAAM,iDAAiD,EACvDD,EAAW,QACX,OAIE,KAAK,gBAAgBnmB,CAAQ,GAC3B,CAAC,QAAQ,mBAAmBA,CAAQ,+BAA+B,IAMzE,KAAK,gBAAgBA,CAAQ,EAAIomB,EAGjCF,EAAU,MAAQ,GAClBC,EAAW,MAAQ,GAGnB,KAAK,0BAGLD,EAAU,QAAM,CAGV,mBAAmBlmB,EAAwB,CACjD,MAAMqmB,EAAe,KAAK,gBAAgBrmB,CAAQ,EAC5CsmB,EAAW,OAAO,4BAA4BtmB,CAAQ,KAAMqmB,EAAa,UAAU,EAEzF,GAAIC,IAAa,KAAM,OAEvB,MAAMC,EAAc,SAASD,CAAQ,EACrC,GAAI,MAAMC,CAAW,GAAKA,EAAc,EAAG,CACzC,MAAM,iDAAiD,EACvD,OAGF,KAAK,gBAAgBvmB,CAAQ,EAAIumB,EACjC,KAAK,yBAAwB,CAGvB,qBAAqBvmB,EAAwB,CAC/C,QAAQ,+BAA+BA,CAAQ,IAAI,IACrD,OAAO,KAAK,gBAAgBA,CAAQ,EACpC,KAAK,0BACP,CAGM,aAAakc,EAAoB,CAGvC,GAFAA,EAAM,iBAEF,CAAC,KAAK,eACR,OAGF,MAAM5K,EAAY,KAAK,kBACnBA,GACF,KAAK,MAAM,OAAOA,CAAS,CAC7B,CAGM,cAAqB,CACvB,KAAK,oBACH,QAAQ,4DAA4D,GACtE,KAAK,MAAM,WAGb,KAAK,MAAM,UACb,CAGM,cAAqB,CAC3B,GAAI,CAAC,KAAK,MAAM,YAAa,OAE7B,MAAMhM,EAAW,KAAK,MAAM,YAAY,KACxC,GAAI,QAAQ,oCAAoCA,CAAQ,kCAAkC,EAAG,CAC3F,MAAM6I,EAAS,KAAK,QAAQ,oBAAoB,KAAK,MAAM,YAAY,IAAM,EAAE,EAC3EA,EAAO,QACT,KAAK,MAAM,WAEX,MAAM,0BAA0BA,EAAO,KAAK,EAAE,CAChD,CACF,CAGM,cAAwB,CAC9B,MAAMqY,EAAS,CAAC,aAAc,eAAgB,iBAAkB,kBAAkB,EAClF,IAAIzH,EAAU,GAEd,OAAAyH,EAAO,QAAQP,GAAW,CACnB,KAAK,cAAcA,CAAO,IAC7BlH,EAAU,GACZ,CACD,EAEMA,CAAA,CAGD,iBAAwC,SAC9C,GAAI,CACF,MAAM0H,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAc,SAAS,eAAe,cAAc,EACpDC,EAAgB,SAAS,eAAe,gBAAgB,EACxDC,EAAiB,SAAS,eAAe,kBAAkB,EAE3DhlB,EAAO6kB,EAAU,MAAM,OACvB9N,EAAS,SAAS+N,EAAY,KAAK,EACnC9N,EAAW,SAAS+N,EAAc,KAAK,EACvCzO,EAAY0O,EAAe,MAC9B,MAAM,GAAG,EACT,IAAI/I,GAAKA,EAAE,MAAM,EACjB,UAAYA,CAAC,EAGVgJ,EAAuB,OAAO,KAAK,KAAK,eAAe,EAAE,OAAS,EACpE,OAAO,QAAQ,KAAK,eAAe,EAAE,IAAI,CAAC,CAACC,EAAa5C,CAAK,KAAO,CAClE,YAAA4C,EACA,cAAe,WACf,MAAA5C,CAAA,EACA,EACF,OAEE5S,EAA2B,CAC/B,KAAIrD,EAAA,KAAK,MAAM,cAAX,YAAAA,EAAwB,KAAM,cAAc,KAAK,KAAK,IAAI,KAAK,SAAS,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,GACrG,KAAArM,EACA,WAAYsW,EACZ,OAAAS,EACA,SAAAC,EACA,iBAAkBiO,EAClB,YAAW3Y,EAAA,KAAK,MAAM,cAAX,YAAAA,EAAwB,gBAAiB,KACpD,eAAgB,IAAK,EAIjBiG,EAAaoE,EAA2B,sBAAsBjH,CAAS,EAC7E,OAAK6C,EAAW,QAKT7C,GAJL,MAAM,sBAAsB6C,EAAW,OAAO,KAAK,IAAI,CAAC,EAAE,EACnD,KAGF,OACA3S,EAAO,CACd,eAAQ,MAAM,8BAA+BA,CAAK,EAClD,MAAM,uDAAuD,EACtD,KACT,CAGM,mBAA6B,CACnC,GAAI,CAAC,KAAK,MAAM,YAAa,CAE3B,MAAMilB,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAc,SAAS,eAAe,cAAc,EACpDC,EAAgB,SAAS,eAAe,gBAAgB,EAE9D,MAAO,CAAC,EAAEF,GAAA,MAAAA,EAAW,MAAM,QAAUC,GAAA,MAAAA,EAAa,OAASC,GAAA,MAAAA,EAAe,OAI5E,MAAMI,EAAc,KAAK,kBACzB,GAAI,CAACA,EAAa,MAAO,GAEzB,MAAMC,EAAW,KAAK,MAAM,YAC5B,OACED,EAAY,OAASC,EAAS,MAC9BD,EAAY,SAAWC,EAAS,QAChCD,EAAY,WAAaC,EAAS,UAClC,KAAK,UAAUD,EAAY,UAAU,IAAM,KAAK,UAAUC,EAAS,UAAU,GAC7E,KAAK,UAAUD,EAAY,gBAAgB,IAAM,KAAK,UAAUC,EAAS,gBAAgB,EAItF,SAAgB,CACjB,KAAK,YACP,KAAK,UAAU,UAAY,GAC7B,CAEJ,CC7yBO,MAAMC,EAAiB,CAa5B,YAAYhM,EAA8B,CAZlC9Z,EAAA,iBAAgC,MAChCA,EAAA,cACAA,EAAA,gBACAA,EAAA,iBAA6B,IAC7BA,EAAA,qBAAiC,IACjCA,EAAA,qBAAwB,IACxBA,EAAA,cAAkE,QAClEA,EAAA,iBAA4B,OAC5BA,EAAA,yBAAiC,KACjCA,EAAA,mBAAuB,IACvBA,EAAA,mBAAoC,MAG1C,KAAK,MAAQ8Z,EACb,KAAK,QAAU,IAAIF,CAAwB,CAGtC,MAAMG,EAA8B,CACzC,KAAK,UAAYA,EACjB,KAAK,WACL,KAAK,SACL,KAAK,sBAAqB,CAGpB,UAAiB,CACvB,KAAK,UAAY,KAAK,QAAQ,uBAC9B,KAAK,qBAAoB,CAGnB,qBAA4B,CAClC,IAAIlZ,EAAW,CAAC,GAAG,KAAK,SAAS,EAGjC,GAAI,KAAK,cAAc,OAAQ,CAC7B,MAAMmZ,EAAc,KAAK,cAAc,cACvCnZ,EAAWA,EAAS,UAClBlC,EAAK,KAAK,cAAc,SAASqb,CAAW,GAC5Crb,EAAK,WAAW,KAAKG,GAAQA,EAAK,cAAc,SAASkb,CAAW,CAAC,EACvE,CAIFnZ,EAAS,KAAK,CAACN,EAAGC,IAAM,aACtB,IAAIulB,EAAa,EAEjB,OAAQ,KAAK,QACX,IAAK,OACHA,EAAaxlB,EAAE,KAAK,cAAcC,EAAE,IAAI,EACxC,MACF,IAAK,UACHulB,KAAcjZ,EAAAvM,EAAE,YAAF,YAAAuM,EAAa,YAAa,MAAMC,EAAAvM,EAAE,YAAF,YAAAuM,EAAa,YAAa,GACxE,MACF,IAAK,WACHgZ,KAAc5D,EAAA5hB,EAAE,aAAF,YAAA4hB,EAAc,YAAa,MAAM6D,EAAAxlB,EAAE,aAAF,YAAAwlB,EAAc,YAAa,GAC1E,MACF,IAAK,SACHD,EAAaxlB,EAAE,OAASC,EAAE,OAC1B,MACF,IAAK,WACHulB,EAAaxlB,EAAE,SAAWC,EAAE,SAC5B,MAGJ,OAAO,KAAK,YAAc,OAAS,CAACulB,EAAaA,CAAA,CAClD,EAED,KAAK,cAAgBllB,CAAA,CAGf,QAAe,CACrB,GAAI,CAAC,KAAK,UAAW,OAErB,GAAI,KAAK,YAAa,CACpB,KAAK,aACL,OAGF,MAAMolB,EAAe,KAAK,MAAM,OAAS,aACnC1U,EAAQ,KAAK,QAAQ,kBAE3B,KAAK,UAAU,UAAY;AAAA,uCACQ0U,EAAe,aAAe,UAAU;AAAA,UACrEA,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAUX,KAAK,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA,cAInB,EAAE;AAAA;AAAA,UAEN,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAS+B1U,EAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAOhB,KAAK,MAAMA,EAAM,YAAc,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAOpCA,EAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAOvBA,EAAM,aAAe,KAAK,WAAWA,EAAM,YAAY,EAAI,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAiBlF,KAAK,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FAa6C,KAAK,cAAc,OAAS,EAAI,WAAa,EAAE;AAAA,uCACpG,KAAK,cAAc,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAwBrB,KAAK,SAAW,OAAS,WAAa,EAAE;AAAA,4CACrC,KAAK,SAAW,UAAY,WAAa,EAAE;AAAA,6CAC1C,KAAK,SAAW,WAAa,WAAa,EAAE;AAAA,2CAC9C,KAAK,SAAW,SAAW,WAAa,EAAE;AAAA,6CACxC,KAAK,SAAW,WAAa,WAAa,EAAE;AAAA;AAAA;AAAA,oBAGrE,KAAK,YAAc,MAAQ,eAAiB,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4EAQH,KAAK,cAAc,OAAS,EAAI,WAAa,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAWjG,KAAK,cAAc,MAAM,OAAO,KAAK,UAAU,MAAM;AAAA,kBAC7D,KAAK,cAAc,KAAO,EAAI,IAAI,KAAK,cAAc,IAAI,aAAe,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAK5E,KAAK,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUlC,KAAK,WAAU,CAGT,YAAmB,CACzB,GAAI,CAAC,KAAK,UAAW,OAErB,MAAMkR,EAAgB,SAAS,cAAc,KAAK,EAClD,KAAK,UAAU,UAAY,GAC3B,KAAK,UAAU,YAAYA,CAAa,EAE3B,IAAI6B,GAAmB,CAClC,OAAQ,KAAK,eAAe,KAAK,IAAI,EACrC,SAAU,KAAK,iBAAiB,KAAK,IAAI,EACzC,YAAa,KAAK,YAClB,KAAM,KAAK,YAAc,OAAS,SACnC,EAEI,MAAM7B,CAAa,EAGlB,iBAA0B,CAChC,OAAI,KAAK,cAAc,SAAW,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAYF,KAAK,cAAc,IAAI9jB,GAAQ,CACpC,MAAMub,EAAa,KAAK,cAAc,IAAIvb,EAAK,IAAM,EAAE,EAEvD,MAAO;AAAA,gCACmBub,EAAa,WAAa,EAAE,mBAAmBvb,EAAK,IAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,8BAK9DA,EAAK,EAAE;AAAA,gBACrBub,EAAa,UAAY,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAOHvb,EAAK,IAAI;AAAA;AAAA,oBAE7BA,EAAK,WAAW,IAAIG,GAAQ,+BAA+BA,CAAI,SAAS,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAOzDH,EAAK,OAAO,gBAAgB;AAAA;AAAA;AAAA;AAAA,6CAI5BA,EAAK,SAAS,gBAAgB;AAAA;AAAA;AAAA;AAAA,8CAI7BA,EAAK,SAAWA,EAAK,QAAQ,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CASxCA,EAAK,UAAY,KAAK,WAAWA,EAAK,SAAS,EAAI,SAAS;AAAA;AAAA;AAAA;AAAA,6CAI5DA,EAAK,WAAa,KAAK,WAAWA,EAAK,UAAU,EAAI,SAAS;AAAA;AAAA;AAAA;AAAA,gBAI3FA,EAAK,kBAAoBA,EAAK,iBAAiB,OAAS,EAAI;AAAA;AAAA;AAAA;AAAA,sBAItDA,EAAK,iBAAiB,IAAIM,GAC1B,+BAA+BA,EAAI,MAAM,gBAAgB,OAAOA,EAAI,WAAW,WAC/E,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,gBAGZ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,cAKN,KAAK,MAAM,aAAe;AAAA,0FACkDN,EAAK,EAAE;AAAA;AAAA;AAAA,cAGjF,EAAE;AAAA,wFACsEA,EAAK,EAAE;AAAA;AAAA;AAAA,2FAGJA,EAAK,EAAE;AAAA;AAAA;AAAA,uFAGXA,EAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,QAMzF,EAAE,KAAK,EAAE,EAGJ,WAAkB,CACxB,MAAM0b,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAcepB,SAAS,KAAK,YAAYA,CAAK,EAGzB,sBAA6B,CAEnC,MAAMC,EAAW,SAAS,eAAe,eAAe,EACpDA,GACFA,EAAS,iBAAiB,QAAS,aAAM,OAAAvN,GAAAD,EAAA,KAAK,OAAM,UAAX,YAAAC,EAAA,KAAAD,GAAsB,EAIjE,MAAM2N,EAAc,SAAS,eAAe,aAAa,EACrDA,GACFA,EAAY,iBAAiB,QAAS,KAAK,aAAa,KAAK,IAAI,CAAC,EAGpE,MAAMyL,EAAiB,SAAS,eAAe,cAAc,EACzDA,GACFA,EAAe,iBAAiB,QAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAI5E,MAAMC,EAAY,SAAS,eAAe,iBAAiB,EACvDA,GACFA,EAAU,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAGtE,MAAMC,EAAiB,SAAS,eAAe,mBAAmB,EAC9DA,GACFA,EAAe,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAI3E,MAAMC,EAAa,SAAS,eAAe,SAAS,EAChDA,GACFA,EAAW,iBAAiB,SAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAGxE,MAAMC,EAAe,SAAS,eAAe,gBAAgB,EACzDA,GACFA,EAAa,iBAAiB,QAAS,KAAK,sBAAsB,KAAK,IAAI,CAAC,EAI9E,MAAMC,EAAe,SAAS,eAAe,YAAY,EACrDA,GACFA,EAAa,iBAAiB,QAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC,EAGxE,MAAMC,EAAgB,SAAS,eAAe,aAAa,EACvDA,GACFA,EAAc,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAI1E,SAAS,iBAAiB,uBAAuB,EAAE,QAAQtF,GAAY,CACrEA,EAAS,iBAAiB,SAAU,KAAK,qBAAqB,KAAK,IAAI,CAAC,EACzE,EAGD,SAAS,iBAAiB,eAAe,EAAE,QAAQtG,GAAO,CACxDA,EAAI,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC/D,EAGD,KAAK,0BAGL,KAAK,6BAA4B,CAG3B,yBAAgC,CACtC,SAAS,iBAAiB,kBAAkB,EAAE,QAAQ6L,GAAU,CAC9DA,EAAO,iBAAiB,QAAUvY,GAAM,CACtCA,EAAE,kBACF,MAAMwY,EAAWD,EAAO,QAAQ,WAAW,EACvCC,IAEF,SAAS,iBAAiB,gBAAgB,EAAE,QAAQC,GAAS,CACvDA,IAAUD,GACZC,EAAM,UAAU,OAAO,MAAM,CAC/B,CACD,EAEDD,EAAS,UAAU,OAAO,MAAM,EAClC,CACD,EACF,EAGD,SAAS,iBAAiB,QAAS,IAAM,CACvC,SAAS,iBAAiB,gBAAgB,EAAE,QAAQA,GAAY,CAC9DA,EAAS,UAAU,OAAO,MAAM,EACjC,EACF,EAGK,6BAAoC,CAE1C,MAAME,EAAY,SAAS,eAAe,cAAc,EACpDA,GACFA,EAAU,iBAAiB,QAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC,EAIvE,MAAMC,EAAe,SAAS,eAAe,YAAY,EACrDA,GACFA,EAAa,iBAAiB,QAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC,EAIxE,MAAMC,EAAoB,SAAS,eAAe,iBAAiB,EAC/DA,GACFA,EAAkB,iBAAiB,QAAS,KAAK,qBAAqB,KAAK,IAAI,CAAC,EAIlF,MAAMC,EAAoB,SAAS,eAAe,iBAAiB,EAC/DA,GACFA,EAAkB,iBAAiB,QAAS,KAAK,qBAAqB,KAAK,IAAI,CAAC,EAIlF,MAAMnE,EAAc,SAAS,eAAe,WAAW,EACnDA,GACFA,EAAY,iBAAiB,QAAS,KAAK,eAAe,KAAK,IAAI,CAAC,EAItE,MAAMoE,EAAY,SAAS,eAAe,mBAAmB,EACzDA,GACFA,EAAU,iBAAiB,SAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC,CACvE,CAGM,WAAWC,EAAoB,CAErC,MAAMC,MADU,OACG,UAAYD,EAAK,UAC9BE,EAAW,KAAK,MAAMD,GAAU,IAAO,GAAK,GAAK,GAAG,EAE1D,OAAIC,IAAa,EACR,QACEA,IAAa,EACf,YACEA,EAAW,EACb,GAAGA,CAAQ,YAEXF,EAAK,oBACd,CAGM,eAAetoB,EAA2B,CAChD,GAAI,KAAK,YAAa,CAEpB,MAAMqO,EAAS,KAAK,QAAQ,oBAAoB,KAAK,YAAY,IAAM,GAAIrO,CAAI,EAC3EqO,EAAO,SACT,KAAK,YAAc,GACnB,KAAK,YAAc,KACnB,KAAK,WACL,KAAK,SACL,KAAK,wBAEL,MAAM,0BAA0BA,EAAO,KAAK,EAAE,CAChD,KACK,CAEL,MAAMA,EAAS,KAAK,QAAQ,iBAAiBrO,CAAI,EAC7CqO,EAAO,SACT,KAAK,YAAc,GACnB,KAAK,WACL,KAAK,SACL,KAAK,wBAEL,MAAM,0BAA0BA,EAAO,KAAK,EAAE,CAChD,CACF,CAGM,kBAAyB,CAC/B,KAAK,YAAc,GACnB,KAAK,YAAc,KACnB,KAAK,SACL,KAAK,sBAAqB,CAGpB,aAAa+N,EAAoB,CACvC,MAAMC,EAAQD,EAAM,OACpB,KAAK,cAAgBC,EAAM,MAC3B,KAAK,sBACL,KAAK,kBAAiB,CAGhB,mBAA0B,CAChC,KAAK,cAAgB,GACrB,MAAMP,EAAc,SAAS,eAAe,aAAa,EACrDA,IACFA,EAAY,MAAQ,IAEtB,KAAK,sBACL,KAAK,kBAAiB,CAGhB,kBAAyB,CAC/B,KAAK,YAAc,GACnB,KAAK,YAAc,KACnB,KAAK,QAAO,CAGN,iBAAiBM,EAAoB,CAC3C,MAAMkG,EAASlG,EAAM,OACrB,KAAK,OAASkG,EAAO,MACrB,KAAK,sBACL,KAAK,kBAAiB,CAGhB,uBAA8B,CACpC,KAAK,UAAY,KAAK,YAAc,MAAQ,OAAS,MACrD,KAAK,sBACL,KAAK,mBAGL,MAAMrG,EAAM,SAAS,eAAe,gBAAgB,EAChDA,IACFA,EAAI,YAAc,KAAK,YAAc,MAAQ,eAAiB,gBAChE,CAGM,iBAAwB,CAC9B,KAAK,cAAc,QACnB,KAAK,cAAc,QAAQjc,GAAQ,CAC7BA,EAAK,IAAI,KAAK,cAAc,IAAIA,EAAK,EAAE,EAC5C,EACD,KAAK,oBAAmB,CAGlB,kBAAyB,CAC/B,KAAK,cAAc,QACnB,KAAK,oBAAmB,CAGlB,qBAAqBoc,EAAoB,CAC/C,MAAMmG,EAAWnG,EAAM,OACjBqM,EAASlG,EAAS,QAAQ,OAE5BkG,IACElG,EAAS,QACX,KAAK,cAAc,IAAIkG,CAAM,EAE7B,KAAK,cAAc,OAAOA,CAAM,EAElC,KAAK,qBACP,CAGM,iBAAiBrM,EAAoB,SAC3C,MAAMH,EAAMG,EAAM,OACZ1M,EAASuM,EAAI,QAAQ,OACrBwM,EAASxM,EAAI,QAAQ,OAE3B,GAAI,CAACvM,GAAU,CAAC+Y,EAAQ,OAExB,MAAMzoB,EAAO,KAAK,UAAU,KAAKmC,GAAKA,EAAE,KAAOsmB,CAAM,EACrD,GAAKzoB,EAEL,OAAQ0P,EAAA,CACN,IAAK,UACHtB,GAAAD,EAAA,KAAK,OAAM,eAAX,MAAAC,EAAA,KAAAD,EAA0BnO,GAC1B,MACF,IAAK,OACH,KAAK,YAAcA,EACnB,KAAK,YAAc,GACnB,KAAK,SACL,MACF,IAAK,YACH,KAAK,oBAAoBA,CAAI,EAC7B,MACF,IAAK,SACH,KAAK,iBAAiBA,CAAI,EAC1B,MACJ,CAGM,oBAAoBA,EAA2B,CAErD,MAAM0oB,EAA2B,CAC/B,KAFoB,GAAG1oB,EAAK,IAAI,UAGhC,WAAY,CAAC,GAAGA,EAAK,UAAU,EAC/B,OAAQA,EAAK,OACb,SAAUA,EAAK,SACf,iBAAkBA,EAAK,iBAAmB,CAAC,GAAGA,EAAK,gBAAgB,EAAI,QAGnEqO,EAAS,KAAK,QAAQ,iBAAiBqa,CAAa,EACtDra,EAAO,SACT,KAAK,WACL,KAAK,oBAEL,MAAM,6BAA6BA,EAAO,KAAK,EAAE,CACnD,CAGM,iBAAiBrO,EAA2B,CAClD,GAAI,QAAQ,oCAAoCA,EAAK,IAAI,kCAAkC,EAAG,CAC5F,MAAMqO,EAAS,KAAK,QAAQ,oBAAoBrO,EAAK,IAAM,EAAE,EACzDqO,EAAO,SACLrO,EAAK,IAAI,KAAK,cAAc,OAAOA,EAAK,EAAE,EAC9C,KAAK,WACL,KAAK,oBAEL,MAAM,0BAA0BqO,EAAO,KAAK,EAAE,CAChD,CACF,CAGM,mBAA0B,CAChC,MAAMga,EAAY,SAAS,eAAe,mBAAmB,EACzDA,GACFA,EAAU,OACZ,CAGM,iBAAiBjM,EAAoB,OAC3C,MAAMC,EAAQD,EAAM,OACduM,GAAOxa,EAAAkO,EAAM,QAAN,YAAAlO,EAAc,GAE3B,GAAI,CAACwa,EAAM,OAEX,MAAMC,EAAS,IAAI,WACnBA,EAAO,OAAUrZ,GAAM,SACrB,GAAI,CACF,MAAM+K,GAAWnM,EAAAoB,EAAE,SAAF,YAAApB,EAAU,OACrBE,EAAS,KAAK,QAAQ,qBAAqBiM,EAAU,CAAE,eAAgB,GAAM,EAEnF,GAAIjM,EAAO,QAAS,CAClB,IAAIgR,EAAU,yBAAyBhR,EAAO,QAAQ,UAClDA,EAAO,SAAWA,EAAO,QAAU,IACrCgR,GAAW,IAAIhR,EAAO,OAAO,wBAE3BA,EAAO,QAAUA,EAAO,OAAO,OAAS,IAC1CgR,GAAW;AAAA;AAAA;AAAA,EAAgBhR,EAAO,OAAO,KAAK;AAAA,CAAI,CAAC,IAErD,MAAMgR,CAAO,EAEb,KAAK,WACL,KAAK,kBAAiB,MAEtB,MAAM,oBAAkBjR,EAAAC,EAAO,SAAP,YAAAD,EAAe,KAAK,QAAS,eAAe,EAAE,CACxE,MACc,CACd,MAAM,4DAA6D,EACrE,EAGFwa,EAAO,WAAWD,CAAI,EACtBtM,EAAM,MAAQ,GAGR,iBAAwB,CAC9B,MAAMhO,EAAS,KAAK,QAAQ,uBACxBA,EAAO,SAAWA,EAAO,KAC3B,KAAK,aAAaA,EAAO,KAAM,yBAAyB,EAExD,MAAM,kBAAkBA,EAAO,KAAK,EAAE,CACxC,CAGM,sBAA6B,CACnC,GAAI,KAAK,cAAc,OAAS,EAAG,CACjC,MAAM,+BAA+B,EACrC,OAGF,MAAMwa,EAAoB,KAAK,UAAU,OAAO7oB,GAAQA,EAAK,IAAM,KAAK,cAAc,IAAIA,EAAK,EAAE,CAAC,EAC5Fqa,EAAa,CACjB,QAAS,MACT,WAAY,IAAI,OAAO,cACvB,MAAOwO,EAAkB,IAAI7oB,GAAA,SAAS,OACpC,KAAMA,EAAK,KACX,WAAYA,EAAK,WACjB,OAAQA,EAAK,OACb,SAAUA,EAAK,SACf,iBAAkBA,EAAK,iBACvB,YAAWmO,EAAAnO,EAAK,YAAL,YAAAmO,EAAgB,gBAAiB,IAAI,OAAO,cACvD,aAAYC,EAAApO,EAAK,aAAL,YAAAoO,EAAiB,gBAAiB,IAAI,OAAO,aAAY,EACrE,GAGEkM,EAAW,KAAK,UAAUD,EAAY,KAAM,CAAC,EACnD,KAAK,aAAaC,EAAU,wBAAwB,KAAK,cAAc,IAAI,OAAO,EAG5E,sBAA6B,CACnC,GAAI,KAAK,cAAc,OAAS,EAAG,CACjC,MAAM,iCAAiC,EACvC,OAGF,MAAMzP,EAAQ,KAAK,cAAc,KACjC,GAAI,QAAQ,mCAAmCA,CAAK,iBAAiBA,EAAQ,EAAI,IAAM,EAAE,iCAAiC,EAAG,CAC3H,IAAIie,EAAe,EACnB,MAAMnoB,EAAmB,GAEzB,KAAK,cAAc,QAAQ8nB,GAAU,CACnC,MAAMpa,EAAS,KAAK,QAAQ,oBAAoBoa,CAAM,EAClDpa,EAAO,QACTya,IAEAnoB,EAAO,KAAK,0BAA0B0N,EAAO,KAAK,EAAE,CACtD,CACD,EAED,KAAK,cAAc,QACnB,KAAK,WACL,KAAK,mBAEL,IAAIgR,EAAU,wBAAwByJ,CAAY,QAAQA,EAAe,EAAI,IAAM,EAAE,IACjFnoB,EAAO,OAAS,IAClB0e,GAAW;AAAA;AAAA;AAAA,EAAgB1e,EAAO,KAAK;AAAA,CAAI,CAAC,IAE9C,MAAM0e,CAAO,EACf,CAGM,gBAAuB,CAC7B,GAAI,KAAK,UAAU,SAAW,EAAG,CAC/B,MAAM,oBAAoB,EAC1B,OAGF,GAAI,QAAQ,uCAAuC,KAAK,UAAU,MAAM,oDAAoD,EAAG,CAC7H,MAAMhR,EAAS,KAAK,QAAQ,yBACxBA,EAAO,SACT,KAAK,cAAc,QACnB,KAAK,WACL,KAAK,mBACL,MAAM,2CAA2C,GAEjD,MAAM,0BAA0BA,EAAO,KAAK,EAAE,CAChD,CACF,CAGM,aAAasE,EAAcoW,EAAwB,CACzD,MAAMC,EAAO,IAAI,KAAK,CAACrW,CAAI,EAAG,CAAE,KAAM,mBAAoB,EACpDsW,EAAM,IAAI,gBAAgBD,CAAI,EAC9B,EAAI,SAAS,cAAc,GAAG,EACpC,EAAE,KAAOC,EACT,EAAE,SAAWF,EACb,SAAS,KAAK,YAAY,CAAC,EAC3B,EAAE,QACF,SAAS,KAAK,YAAY,CAAC,EAC3B,IAAI,gBAAgBE,CAAG,EAGjB,kBAAyB,CAC/B,MAAMC,EAAY,SAAS,eAAe,YAAY,EAClDA,IACFA,EAAU,UAAY,KAAK,kBAG3B,SAAS,iBAAiB,uBAAuB,EAAE,QAAQ3G,GAAY,CACrEA,EAAS,iBAAiB,SAAU,KAAK,qBAAqB,KAAK,IAAI,CAAC,EACzE,EAED,SAAS,iBAAiB,eAAe,EAAE,QAAQtG,GAAO,CACxDA,EAAI,iBAAiB,QAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC,EAC/D,GAIH,MAAMkN,EAAc,SAAS,cAAc,eAAe,EACtDA,IACFA,EAAY,YAAc,WAAW,KAAK,cAAc,MAAM,OAAO,KAAK,UAAU,MAAM,SAAS,KAAK,cAAc,KAAO,EAAI,KAAK,KAAK,cAAc,IAAI,aAAe,EAAE,GAChL,CAGM,oBAA2B,CAEjC,SAAS,iBAAiB,uBAAuB,EAAE,QAAQ5G,GAAY,CACrE,MAAMlG,EAAQkG,EACRkG,EAASpM,EAAM,QAAQ,OACzBoM,IACFpM,EAAM,QAAU,KAAK,cAAc,IAAIoM,CAAM,EAC/C,CACD,EAGD,SAAS,iBAAiB,YAAY,EAAE,QAAQnQ,GAAQ,CACtD,MAAMmQ,EAAUnQ,EAAqB,QAAQ,OACzCmQ,IACE,KAAK,cAAc,IAAIA,CAAM,EAC/BnQ,EAAK,UAAU,IAAI,UAAU,EAE7BA,EAAK,UAAU,OAAO,UAAU,EAEpC,CACD,EAGD,MAAM8Q,EAAiB,SAAS,eAAe,kBAAkB,EAC7DA,IACFA,EAAe,YAAc,oBAAoB,KAAK,cAAc,IAAI,IACvEA,EAAqC,SAAW,KAAK,cAAc,OAAS,GAI/E,MAAMvB,EAAgB,SAAS,eAAe,aAAa,EACvDA,IACDA,EAAoC,SAAW,KAAK,cAAc,OAAS,GAI9E,MAAMsB,EAAc,SAAS,cAAc,eAAe,EACtDA,IACFA,EAAY,YAAc,WAAW,KAAK,cAAc,MAAM,OAAO,KAAK,UAAU,MAAM,SAAS,KAAK,cAAc,KAAO,EAAI,KAAK,KAAK,cAAc,IAAI,aAAe,EAAE,GAChL,CAGK,SAAgB,CACjB,KAAK,YACP,KAAK,UAAU,UAAY,GAC7B,CAEJ,CCv1CO,MAAME,EAAgC,CAG3C,YAAa,IACb,YAAa,IAEf,EAOO,MAAMC,EAAoB,CAI/B,aAAc,CAHNjoB,EAAA,mBAA0B,WAC1BA,EAAA,iBAA+C,IAGrD,KAAK,mBACL,KAAK,qBAAoB,CAM3B,gBAA6B,CAC3B,OAAO,KAAK,YAMd,UAAoB,CAClB,OAAO,KAAK,cAAgB,SAM9B,UAAoB,CAClB,OAAO,KAAK,cAAgB,SAM9B,WAAqB,CACnB,OAAO,KAAK,cAAgB,UAM9B,eAAyB,CACvB,MAAO,iBAAkB,QAAU,UAAU,eAAiB,EAMhE,kBAA2B,CACzB,OAAO,OAAO,WAMhB,wBAAwBkoB,EAA4C,CAClE,KAAK,UAAU,KAAKA,CAAQ,EAM9B,2BAA2BA,EAA4C,CACrE,MAAM1oB,EAAQ,KAAK,UAAU,QAAQ0oB,CAAQ,EACzC1oB,EAAQ,IACV,KAAK,UAAU,OAAOA,EAAO,CAAC,CAChC,CAMM,kBAAyB,CAC/B,MAAM2oB,EAAQ,KAAK,mBACnB,IAAIC,EAEAD,EAAQH,EAAY,YACtBI,EAAU,SACDD,EAAQH,EAAY,YAC7BI,EAAU,SAEVA,EAAU,UAGRA,IAAY,KAAK,cACnB,KAAK,YAAcA,EACnB,KAAK,kBACP,CAMM,qBAA4B,CAClC,IAAIC,EAEJ,OAAO,iBAAiB,SAAU,IAAM,CACtC,aAAaA,CAAa,EAC1BA,EAAgB,OAAO,WAAW,IAAM,CACtC,KAAK,kBAAiB,EACrB,GAAG,EACP,EAMK,iBAAwB,CAC9B,KAAK,UAAU,QAAQH,GAAYA,EAAS,KAAK,WAAW,CAAC,EAEjE,CAKO,MAAMI,CAAwB,CAInC,OAAO,gBACLC,EACAC,EACAC,EACA9O,EAAoB,GACd,CACN,GAAI,EAAE,iBAAkB,QAAS,OAEjC,IAAI+O,EAAiB,EACjBC,EAAiB,EACjBrnB,EAAoB,EAExBinB,EAAQ,iBAAiB,aAAera,GAAM,CAC5C,MAAM0a,EAAQ1a,EAAE,QAAQ,CAAC,EACzBwa,EAASE,EAAM,QACfD,EAASC,EAAM,QACftnB,EAAY,KAAK,KAAI,EACpB,CAAE,QAAS,GAAM,EAEpBinB,EAAQ,iBAAiB,WAAara,GAAM,CAC1C,GAAIA,EAAE,eAAe,SAAW,EAAG,OAEnC,MAAM0a,EAAQ1a,EAAE,eAAe,CAAC,EAC1B2a,EAAOD,EAAM,QACbE,EAAOF,EAAM,QACbhnB,EAAU,KAAK,MAEfmnB,EAASF,EAAOH,EAChBM,EAASF,EAAOH,EACJ/mB,EAAUN,EAGZ,KAAO,KAAK,IAAIynB,CAAM,EAAIpP,GAAa,KAAK,IAAIqP,CAAM,EAAI,KAAK,IAAID,CAAM,EAAI,KACvFA,EAAS,GAAKN,GAChBva,EAAE,iBACFua,EAAA,GACSM,EAAS,GAAKP,IACvBta,EAAE,iBACFsa,EAAA,GAEJ,EACC,CAAE,QAAS,GAAO,EAKvB,OAAO,gBAAgBD,EAAsBL,EAA4B,CAIvE,GAFAK,EAAQ,iBAAiB,QAASL,CAAQ,EAEtC,iBAAkB,OAAQ,CAC5B,IAAIe,EAEJV,EAAQ,iBAAiB,aAAera,GAAM,CAC5C+a,EAAiB,KAAK,MACtBV,EAAQ,UAAU,IAAI,cAAc,EACrC,EAEDA,EAAQ,iBAAiB,WAAara,GAAM,CAC1Cqa,EAAQ,UAAU,OAAO,cAAc,EAGnC,KAAK,MAAQU,EAAiB,MAChC/a,EAAE,iBACFga,EAAA,EACF,CACD,EAEDK,EAAQ,iBAAiB,cAAe,IAAM,CAC5CA,EAAQ,UAAU,OAAO,cAAc,EACxC,EACH,CAMF,OAAO,kBAAkBA,EAA4B,CAEnDA,EAAQ,MAAM,wBAA0B,QACxCA,EAAQ,MAAM,eAAiB,SAG/BA,EAAQ,UAAU,IAAI,iBAAiB,EAMzC,OAAO,kBAAkBA,EAA4B,CACnDA,EAAQ,iBAAiB,aAAc,IAAM,CAC3CA,EAAQ,MAAM,UAAY,cAC1BA,EAAQ,MAAM,WAAa,sBAC5B,EAEDA,EAAQ,iBAAiB,WAAY,IAAM,CACzCA,EAAQ,MAAM,UAAY,WAC3B,EAEDA,EAAQ,iBAAiB,cAAe,IAAM,CAC5CA,EAAQ,MAAM,UAAY,WAC3B,EAMH,OAAO,iBACLxO,EACAmP,EACAvP,EAAoB,GACd,CACN,GAAI,EAAE,iBAAkB,QAAS,OAEjC,IAAIgP,EAAiB,EACjBQ,EAAmB,EACnBC,EAAwB,GACxBC,EAAuC,KAG3C,MAAMC,EAAyB,IAAM,CAC/BD,IAEJA,EAAmB,SAAS,cAAc,KAAK,EAC/CA,EAAiB,UAAY,yBAC7BA,EAAiB,UAAY;AAAA;AAAA;AAAA,QAI7BtP,EAAU,aAAasP,EAAkBtP,EAAU,UAAU,IAG/DA,EAAU,iBAAiB,aAAe7L,GAAM,CAC1C6L,EAAU,YAAc,GAAK,CAACqP,IAChCT,EAASza,EAAE,QAAQ,CAAC,EAAE,QACtBob,EAAA,EACF,EACC,CAAE,QAAS,GAAM,EAEpBvP,EAAU,iBAAiB,YAAc7L,GAAM,CAC7C,GAAI6L,EAAU,YAAc,GAAK,CAACqP,GAAgBC,EAAkB,CAClEF,EAAWjb,EAAE,QAAQ,CAAC,EAAE,QACxB,MAAMqb,EAAe,KAAK,IAAI,EAAGJ,EAAWR,CAAM,EAElD,GAAIY,EAAe,EAAG,CACpBrb,EAAE,iBACF,MAAMmF,EAAW,KAAK,IAAIkW,EAAe5P,EAAW,CAAC,EACrD0P,EAAiB,MAAM,UAAY,cAAcE,EAAe,EAAG,MACnEF,EAAiB,MAAM,QAAUhW,EAAS,WAEtCkW,EAAe5P,EACjB0P,EAAiB,cAAc,eAAe,EAAG,YAAc,qBAE/DA,EAAiB,cAAc,eAAe,EAAG,YAAc,iBACjE,CACF,CACF,EACC,CAAE,QAAS,GAAO,EAErBtP,EAAU,iBAAiB,WAAY,SAAY,CACjD,GAAIsP,GAAoB,CAACD,EAGvB,GAFqBD,EAAWR,EAEbhP,EAAW,CAC5ByP,EAAe,GACfC,EAAiB,cAAc,eAAe,EAAG,YAAc,gBAC/DA,EAAiB,cAAc,kBAAkB,EAAG,UAAU,IAAI,UAAU,EAE5E,GAAI,CACF,MAAMH,EAAA,CAAU,QAClB,CACEE,EAAe,GACXC,IACFA,EAAiB,MAAM,UAAY,oBACnCA,EAAiB,MAAM,QAAU,IACjC,WAAW,IAAM,CACXA,GAAoBA,EAAiB,aACvCA,EAAiB,WAAW,YAAYA,CAAgB,EACxDA,EAAmB,KACrB,EACC,GAAG,EACR,CACF,MAEAA,EAAiB,MAAM,UAAY,oBACnCA,EAAiB,MAAM,QAAU,IACjC,WAAW,IAAM,CACXA,GAAoBA,EAAiB,aACvCA,EAAiB,WAAW,YAAYA,CAAgB,EACxDA,EAAmB,KACrB,EACC,GAAG,CAEV,CACD,EAEL,CAKO,MAAMG,CAAiB,CAI5B,OAAO,kBAAkBC,EAA0C,CACjE,MAAMC,EAAO,SAAS,KAGtBA,EAAK,UAAU,OAAO,gBAAiB,gBAAiB,gBAAgB,EAGxEA,EAAK,UAAU,IAAI,UAAUD,EAAc,gBAAgB,EAAE,EAGzDA,EAAc,iBAChBC,EAAK,UAAU,IAAI,cAAc,CACnC,CAMF,OAAO,oBAA2B,CACb,SAAS,iBAAiB,aAAa,EAE/C,QAAQxd,GAAO,CACpBA,aAAe,aACjBoc,EAAwB,kBAAkBpc,CAAG,CAC/C,CACD,EAMH,OAAO,mBAA0B,CACb,SAAS,iBAAiB,YAAY,EAE9C,QAAQ2O,GAAQ,CACpBA,aAAgB,aAClByN,EAAwB,kBAAkBzN,CAAI,CAChD,CACD,EAEL,CAGO,MAAM8O,EAAsB,IAAI1B,GAGvC0B,EAAoB,wBAAwB,IAAM,CAChDH,EAAiB,kBAAkBG,CAAmB,CACxD,CAAC,EAGDH,EAAiB,kBAAkBG,CAAmB,EC/X/C,MAAMC,EAA4B,CAMvC,aAAc,CALN5pB,EAAA,gBAAgC,IAChCA,EAAA,4BAAsC,MACtCA,EAAA,oBAAmC,MACnCA,EAAA,mBAAc,IAGpB,KAAK,qBAAoB,CAMpB,YAAmB,CACpB,KAAK,cAET,KAAK,mBACL,KAAK,2BACL,KAAK,qBACL,KAAK,YAAc,IAMb,kBAAyB,CAC/B,KAAK,SAAW,CACd,CACE,GAAI,iBACJ,MAAO,gBACP,KAAM,KACN,QAAS,SAAS,eAAe,gBAAgB,EACjD,YAAa,GACb,YAAa,IAEf,CACE,GAAI,kBACJ,MAAO,UACP,KAAM,KACN,QAAS,SAAS,eAAe,iBAAiB,EAClD,YAAa,GACb,YAAa,IAEf,CACE,GAAI,8BACJ,MAAO,oBACP,KAAM,KACN,QAAS,SAAS,eAAe,6BAA6B,EAC9D,YAAa,GACb,YAAa,GACf,CACF,CAMM,0BAAiC,CACvC,KAAK,4BACL,KAAK,gCAA+B,CAM9B,2BAAkC,OACxC,MAAM6pB,EAAc,SAAS,cAAc,eAAe,EAC1D,GAAI,CAACA,EAAa,OAGlB,MAAMC,EAAe,SAAS,cAAc,KAAK,EACjDA,EAAa,UAAY,oCACzBA,EAAa,UAAY;AAAA;AAAA,UAEnB,KAAK,SAAS,IAAIC,GAAW;AAAA,wCACCA,EAAQ,KAAO,iBAAmB,SAAW,EAAE;AAAA,kCACrDA,EAAQ,EAAE;AAAA,qCACPA,EAAQ,IAAI;AAAA,sCACXA,EAAQ,KAAK;AAAA;AAAA,SAE1C,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA,OAKfjd,EAAA+c,EAAY,aAAZ,MAAA/c,EAAwB,aAAagd,EAAcD,GACnD,KAAK,aAAeC,EAGpB,KAAK,qBAGL,KAAK,iBAAgB,CAMf,gCAAuC,CAC7C,KAAK,SAAS,QAAQC,GAAW,CAC/B,GAAI,CAACA,EAAQ,QAAS,OAGtB,MAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,iCACnBA,EAAO,UAAY;AAAA;AAAA,uCAEcD,EAAQ,IAAI;AAAA,gBACnCA,EAAQ,KAAK;AAAA;AAAA;AAAA,QAMvBA,EAAQ,QAAQ,aAAaC,EAAQD,EAAQ,QAAQ,UAAU,EAG/DC,EAAO,iBAAiB,QAAS,IAAM,CACrC,KAAK,sBAAsBD,EAAQ,EAAE,EACtC,EACF,EAMK,oBAA2B,CACjC,MAAME,EAAcN,EAAoB,iBACxC,KAAK,gBAAgBM,CAAW,EAGhC,KAAK,qBAAoB,CAMnB,gBAAgBC,EAAwB,CAC9C,OAAQA,EAAA,CACN,IAAK,SACH,KAAK,oBACL,MACF,IAAK,SACH,KAAK,oBACL,MACF,IAAK,UACH,KAAK,qBACL,MACJ,CAMM,mBAA0B,CAEhC,KAAK,SAAS,QAAQH,GAAW,CAC1BA,EAAQ,UAETA,EAAQ,KAAO,KAAK,sBACnB,KAAK,uBAAyB,MAAQA,EAAQ,KAAO,iBACxDA,EAAQ,QAAQ,UAAU,OAAO,QAAQ,EAGzCA,EAAQ,QAAQ,UAAU,IAAI,QAAQ,EAExC,CACD,EAGD,KAAK,sBAAqB,CAMpB,mBAA0B,CAEhC,KAAK,SAAS,QAAQA,GAAW,CAC1BA,EAAQ,UAGTA,EAAQ,YACVA,EAAQ,QAAQ,UAAU,OAAO,QAAQ,EAEzCA,EAAQ,QAAQ,UAAU,IAAI,QAAQ,EAIpCA,EAAQ,YACVA,EAAQ,QAAQ,UAAU,IAAI,WAAW,EAEzCA,EAAQ,QAAQ,UAAU,OAAO,WAAW,EAC9C,CACD,EAMK,oBAA2B,CAEjC,KAAK,SAAS,QAAQA,GAAW,CAC1BA,EAAQ,UAGTA,EAAQ,YACVA,EAAQ,QAAQ,UAAU,OAAO,SAAU,WAAW,EAEtDA,EAAQ,QAAQ,UAAU,IAAI,QAAQ,EAExCA,EAAQ,YAAc,IACvB,EAMI,gBAAgBI,EAAyB,CAC9C,KAAK,qBAAuBA,EAExBR,EAAoB,YACtB,KAAK,mBACP,CAMM,sBAAsBQ,EAAyB,CACrD,MAAMJ,EAAU,KAAK,SAAS,KAAKK,GAAKA,EAAE,KAAOD,CAAS,EAC1D,GAAI,CAACJ,GAAW,CAACA,EAAQ,QAAS,OAElCA,EAAQ,YAAc,CAACA,EAAQ,YAE3BA,EAAQ,YACVA,EAAQ,QAAQ,UAAU,IAAI,WAAW,EAEzCA,EAAQ,QAAQ,UAAU,OAAO,WAAW,EAI9C,MAAMM,EAAYN,EAAQ,QAAQ,cAAc,qBAAqB,EACjEM,IACFA,EAAU,YAAcN,EAAQ,YAAc,IAAM,IACtD,CAMM,oBAA2B,CACjC,GAAI,CAAC,KAAK,aAAc,OAEP,KAAK,aAAa,iBAAiB,eAAe,EAC1D,QAAQpP,GAAO,CACtBA,EAAI,iBAAiB,QAAS,IAAM,CAElC,GAAIA,EAAI,UAAU,SAAS,UAAU,EAAG,OAExC,MAAMwP,EAAYxP,EAAI,aAAa,cAAc,EAC7CwP,GACF,KAAK,gBAAgBA,CAAS,CAChC,CACD,EACF,EAMK,sBAA6B,CACnC,GAAI,CAAC,KAAK,aAAc,OAEP,KAAK,aAAa,iBAAiB,eAAe,EAC1D,QAAQxP,GAAO,CACtB,MAAMwP,EAAYxP,EAAI,aAAa,cAAc,EAC7CwP,IAAc,KAAK,sBAClB,KAAK,uBAAyB,MAAQA,IAAc,iBACvDxP,EAAI,UAAU,IAAI,QAAQ,EAE1BA,EAAI,UAAU,OAAO,QAAQ,CAC/B,CACD,EAMK,qBAA4B,CAClCgP,EAAoB,wBAAyBO,GAAS,CAChD,KAAK,aACP,KAAK,gBAAgBA,CAAI,CAC3B,CACD,EAMI,YAAYC,EAAyB,CAC1C,MAAMJ,EAAU,KAAK,SAAS,KAAKK,GAAKA,EAAE,KAAOD,CAAS,EACrDJ,IAGD,CAACA,EAAQ,UACXA,EAAQ,QAAU,SAAS,eAAeI,CAAS,EAC/C,CAACJ,EAAQ,WAIfA,EAAQ,QAAQ,UAAU,OAAO,QAAQ,EACzCA,EAAQ,YAAc,GAGlBJ,EAAoB,YACtB,KAAK,gBAAgBQ,CAAS,EAIhC,KAAK,uBAAoB,CAMpB,YAAYA,EAAyB,CAC1C,MAAMJ,EAAU,KAAK,SAAS,KAAKK,GAAKA,EAAE,KAAOD,CAAS,EACtD,CAACJ,GAAW,CAACA,EAAQ,UAEzBA,EAAQ,QAAQ,UAAU,IAAI,QAAQ,EACtCA,EAAQ,YAAc,GAGtB,KAAK,sBAGDJ,EAAoB,YAAc,KAAK,uBAAyBQ,GAClE,KAAK,gBAAgB,gBAAgB,EACvC,CAMM,qBAA4B,CAClC,GAAI,CAAC,KAAK,aAAc,OAEP,KAAK,aAAa,iBAAiB,eAAe,EAC1D,QAAQxP,GAAO,CACtB,MAAMwP,EAAYxP,EAAI,aAAa,cAAc,EAC3CoP,EAAU,KAAK,SAAS,KAAKK,GAAKA,EAAE,KAAOD,CAAS,EAEtDJ,IACEA,EAAQ,aACVpP,EAAI,UAAU,OAAO,UAAU,EAC9BA,EAA0B,SAAW,KAEtCA,EAAI,UAAU,IAAI,UAAU,EAC3BA,EAA0B,SAAW,IAE1C,CACD,EAMK,iBAAwB,CAC9B,GAAI,CAACgP,EAAoB,WAAY,OAErC,MAAME,EAAc,SAAS,cAAc,eAAe,EACrDA,GAELvB,EAAwB,gBACtBuB,EACA,IAAM,KAAK,qBACX,IAAM,KAAK,wBAAuB,CACpC,CAMM,oBAA2B,CACjC,MAAMS,EAAoB,KAAK,SAAS,OAAOF,GAAKA,EAAE,WAAW,EAC3DG,EAAeD,EAAkB,aAAeF,EAAE,KAAO,KAAK,oBAAoB,EAExF,GAAIG,EAAeD,EAAkB,OAAS,EAAG,CAC/C,MAAME,EAAcF,EAAkBC,EAAe,CAAC,EACtD,KAAK,gBAAgBC,EAAY,EAAE,EACrC,CAMM,wBAA+B,CACrC,MAAMF,EAAoB,KAAK,SAAS,OAAOF,GAAKA,EAAE,WAAW,EAC3DG,EAAeD,EAAkB,aAAeF,EAAE,KAAO,KAAK,oBAAoB,EAExF,GAAIG,EAAe,EAAG,CACpB,MAAME,EAAkBH,EAAkBC,EAAe,CAAC,EAC1D,KAAK,gBAAgBE,EAAgB,EAAE,EACzC,CAEJ,CAGO,MAAMC,EAAuB,IAAId,GC7YjC,MAAMe,CAAiB,CAO5B,OAAO,2BAA2BlrB,EAAiD,CACjF,MAAMmrB,EAAM,SAAS,cAAc,QAAQ,EAC3C,OAAAA,EAAI,UAAY,8BAA8BnrB,EAAO,UAAY,cAAc,QAAQA,EAAO,OAAS,SAAS,GAChHmrB,EAAI,UAAY;AAAA,+BACWnrB,EAAO,IAAI;AAAA,gCACVA,EAAO,KAAK;AAAA,MAGxCmrB,EAAI,iBAAiB,QAASnrB,EAAO,OAAO,EAG5CmrB,EAAI,iBAAiB,aAAc,IAAM,CACvCA,EAAI,MAAM,UAAY,cACvB,EAEDA,EAAI,iBAAiB,WAAY,IAAM,CACrCA,EAAI,MAAM,UAAY,WACvB,EAEMA,CAAA,CAMT,OAAO,yBAAyBnrB,EAA0C,CACxE,GAAI,CAACkqB,EAAoB,WAAY,OAErC,KAAK,2BAEA,KAAK,eACR,KAAK,aAAe,SAAS,cAAc,KAAK,EAChD,KAAK,aAAa,UAAY,gBAC9B,SAAS,KAAK,YAAY,KAAK,YAAY,GAG7C,MAAMiB,EAAM,KAAK,2BAA2BnrB,CAAM,EAClD,KAAK,aAAa,YAAYmrB,CAAG,EAGjC,WAAW,IAAM,CACfA,EAAI,UAAU,IAAI,aAAa,GAC9B,EAAE,EAMP,OAAO,0BAAiC,CAClC,KAAK,cACM,KAAK,aAAa,iBAAiB,yBAAyB,EACpE,QAAQA,GAAO,CAClBA,EAAI,UAAU,OAAO,aAAa,EAClC,WAAW,IAAM,CACXA,EAAI,YACNA,EAAI,WAAW,YAAYA,CAAG,CAChC,EACC,GAAG,EACP,CACH,CAMF,OAAO,gBAAgBnrB,EAA0C,CAC/D,OAAO,IAAI,QAASmU,GAAY,CAC9B,GAAI,CAAC+V,EAAoB,WAAY,CAEnC,KAAK,iBAAiBlqB,CAAM,EAC5BmU,EAAA,EACA,OAGF,KAAK,kBAGL,MAAMiX,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAY,wBAGrB,MAAMC,EAAc,SAAS,cAAc,KAAK,EAChDA,EAAY,UAAY,eAExB,MAAMd,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,sBACnBA,EAAO,UAAY;AAAA;AAAA,yCAEgBvqB,EAAO,KAAK;AAAA,UAC3CA,EAAO,cAAgB,GAAQ,gDAAkD,EAAE;AAAA,QAGvF,MAAMsrB,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,uBAChB,OAAOtrB,EAAO,SAAY,SAC5BsrB,EAAQ,UAAYtrB,EAAO,QAE3BsrB,EAAQ,YAAYtrB,EAAO,OAAO,EAGpC,MAAMurB,EAAU,SAAS,cAAc,KAAK,EAiC5C,GAhCAA,EAAQ,UAAY,uBAChBvrB,EAAO,SACTA,EAAO,QAAQ,QAAQ4O,GAAU,CAC/B,MAAM+S,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,UAAY,WAAW/S,EAAO,OAAS,WAAW,GACzD+S,EAAO,YAAc/S,EAAO,MAC5B+S,EAAO,iBAAiB,QAAS,IAAM,CACrC/S,EAAO,UACP,KAAK,kBACLuF,EAAA,CAAQ,CACT,EACDoX,EAAQ,YAAY5J,CAAM,EAC3B,EAGH0J,EAAY,YAAYd,CAAM,EAC9Bc,EAAY,YAAYC,CAAO,EAC3BtrB,EAAO,SAAWA,EAAO,QAAQ,OAAS,GAC5CqrB,EAAY,YAAYE,CAAO,EAI5B,KAAK,uBACR,KAAK,qBAAuB,SAAS,cAAc,KAAK,EACxD,KAAK,qBAAqB,UAAY,yBACtC,SAAS,KAAK,YAAY,KAAK,oBAAoB,GAGrD,KAAK,qBAAqB,YAAYH,CAAQ,EAC9C,KAAK,qBAAqB,YAAYC,CAAW,EAG7CrrB,EAAO,cAAgB,GAAO,CAChCorB,EAAS,iBAAiB,QAAS,IAAM,CACvC,KAAK,kBACLjX,EAAA,CAAQ,CACT,EAED,MAAM0G,EAAW0P,EAAO,cAAc,qBAAqB,EACvD1P,GACFA,EAAS,iBAAiB,QAAS,IAAM,CACvC,KAAK,kBACL1G,EAAA,CAAQ,CACT,CACH,CAIF,WAAW,IAAM,CACfiX,EAAS,UAAU,IAAI,SAAS,EAChCC,EAAY,UAAU,IAAI,SAAS,GAClC,EAAE,EACN,EAMH,OAAO,iBAAwB,CAC7B,GAAI,KAAK,qBAAsB,CAC7B,MAAMD,EAAW,KAAK,qBAAqB,cAAc,wBAAwB,EAC3EC,EAAc,KAAK,qBAAqB,cAAc,eAAe,EAEvED,GAAYC,IACdD,EAAS,UAAU,OAAO,SAAS,EACnCC,EAAY,UAAU,OAAO,SAAS,EAEtC,WAAW,IAAM,CACX,KAAK,uBACP,KAAK,qBAAqB,UAAY,GACxC,EACC,GAAG,EACR,CACF,CAMF,OAAe,iBAAiBrrB,EAAiC,CAG/D,MAAMue,EAAU,OAAOve,EAAO,SAAY,SAAWA,EAAO,QAAUA,EAAO,MAC7E,MAAMue,CAAO,EAMf,OAAO,qBACLiN,EACA3S,EACM,CACDqR,EAAoB,YAEzBsB,EAAQ,iBAAiB,QAAS,IAAM,CACtC,MAAMF,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,0BAEpBzS,EAAQ,QAAQ4S,GAAU,CACxB,MAAMjU,EAAO,SAAS,cAAc,QAAQ,EAC5CA,EAAK,UAAY,uBACjBA,EAAK,YAAciU,EAAO,MAC1BjU,EAAK,iBAAiB,QAAS,IAAM,CACnCiU,EAAO,UACP,KAAK,iBAAgB,CACtB,EACDH,EAAQ,YAAY9T,CAAI,EACzB,EAED,KAAK,gBAAgB,CACnB,MAAO,gBACP,QAAA8T,EACA,YAAa,GACd,EACF,EAMH,OAAO,kBAAkB/M,EAAkB,aAAoB,CAC7D,GAAI,CAAC2L,EAAoB,WAAY,OAErC,MAAM7O,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,yBACpBA,EAAQ,UAAY;AAAA;AAAA;AAAA,yCAGiBkD,CAAO;AAAA;AAAA,MAI5C,SAAS,KAAK,YAAYlD,CAAO,EAEjC,WAAW,IAAM,CACfA,EAAQ,UAAU,IAAI,SAAS,GAC9B,EAAE,EAMP,OAAO,mBAA0B,CAC/B,MAAMA,EAAU,SAAS,cAAc,yBAAyB,EAC5DA,IACFA,EAAQ,UAAU,OAAO,SAAS,EAClC,WAAW,IAAM,CACXA,EAAQ,YACVA,EAAQ,WAAW,YAAYA,CAAO,CACxC,EACC,GAAG,EACR,CAEJ,CArQE9a,EADW2qB,EACI,eAAmC,MAClD3qB,EAFW2qB,EAEI,uBAA2C,MAuQ5DhB,EAAoB,wBAAyBO,GAAS,CAChDA,IAAS,WACXS,EAAiB,2BACjBA,EAAiB,kBAErB,CAAC,EC1RM,MAAMQ,CAAyB,CAapC,OAAO,YAAmB,CACnBxB,EAAoB,aAEzB,KAAK,mBACL,KAAK,oBACL,KAAK,sBACL,KAAK,wBAAsB,CAM7B,OAAe,kBAAyB,CACtC,MAAMyB,EAAe,SAAS,iBAAiB,aAAa,EAE5D,GAAIA,EAAa,SAAW,EAAG,OAE/B,MAAMC,EAAW,IAAI,qBAClBC,GAAY,CACXA,EAAQ,QAAQC,GAAS,CACvB,GAAIA,EAAM,eAAgB,CACxB,MAAMhD,EAAUgD,EAAM,OACtB,KAAK,YAAYhD,CAAO,EACxB8C,EAAS,UAAU9C,CAAO,EAC5B,CACD,GAEH,CACE,WAAY,OACZ,UAAW,GACb,EAGF6C,EAAa,QAAQ7C,GAAW8C,EAAS,QAAQ9C,CAAO,CAAC,EACzD,KAAK,UAAU,IAAI,eAAgB8C,CAAQ,EAM7C,OAAe,YAAY9C,EAA4B,CACrD,MAAMjnB,EAAY,YAAY,MAGxBypB,EAAUxC,EAAQ,QAAQ,KAC5BwC,IACFxC,EAAQ,UAAYwC,EACpBxC,EAAQ,gBAAgB,WAAW,GAGrC,MAAM3mB,EAAU,YAAY,MAC5B,KAAK,QAAQ,YAAcA,EAAUN,CAAA,CAMvC,OAAe,mBAA0B,CACZ,SAAS,iBAAiB,kDAAkD,EAEpF,QAAQinB,GAAW,CACpC,IAAIiD,EAAc,GACdC,EAEJlD,EAAQ,iBAAiB,SAAU,IAAM,CAClCiD,IACHA,EAAc,GACd,KAAK,sBAAsB,IAAM,CAE/B,KAAK,oBAAoBjD,CAAsB,EAC/CiD,EAAc,GACf,GAIH,aAAaC,CAAa,EAC1BA,EAAgB,OAAO,WAAW,IAAM,CACtC,KAAK,YAAYlD,CAAsB,GACtC,GAAG,GACL,CAAE,QAAS,GAAM,EACrB,EAMH,OAAe,oBAAoBA,EAA4B,CAC7D,MAAMjnB,EAAY,YAAY,MAGjBinB,EAAQ,wBACrB,MAAMmD,EAAWnD,EAAQ,SAEzB,QAASjlB,EAAI,EAAGA,EAAIooB,EAAS,OAAQpoB,IAAK,CACxC,MAAMqoB,EAAQD,EAASpoB,CAAC,EAClBsoB,EAAYD,EAAM,wBAGlBE,EAAYD,EAAU,OAAS,CAAC,OAAO,YAAc,GAC1CA,EAAU,IAAM,OAAO,YAAc,EAElD,CAACC,GAAa,CAACF,EAAM,UAAU,SAAS,eAAe,GACzDA,EAAM,UAAU,IAAI,eAAe,EACnCA,EAAM,MAAM,WAAa,UAChBE,GAAaF,EAAM,UAAU,SAAS,eAAe,IAC9DA,EAAM,UAAU,OAAO,eAAe,EACtCA,EAAM,MAAM,WAAa,UAC3B,CAGF,MAAM/pB,EAAU,YAAY,MAC5B,KAAK,QAAQ,mBAAqBA,EAAUN,CAAA,CAM9C,OAAe,YAAYinB,EAA4B,CAE9BA,EAAQ,iBAAiB,gBAAgB,EACjD,QAAQuD,GAAM,CAC3BA,EAAG,UAAU,OAAO,eAAe,EAClCA,EAAmB,MAAM,WAAa,UACxC,EAMH,OAAe,sBAAsB5D,EAA4B,CAC3D,KAAK,OACP,qBAAqB,KAAK,KAAK,EAGjC,KAAK,MAAQ,sBAAsB,IAAM,CACvCA,EAAA,EACA,KAAK,MAAQ,KACd,EAMH,OAAe,qBAA4B,CACzC,IAAI6D,EAEJ,SAAS,iBAAiB,aAAc,IAAM,CAC5CA,EAAmB,YAAY,KAAI,EAClC,CAAE,QAAS,GAAM,EAEpB,SAAS,iBAAiB,WAAY,IAAM,CAC1C,GAAIA,EAAkB,CACpB,MAAMC,EAAkB,YAAY,MAAQD,EAC5C,KAAK,QAAQ,gBAAkB,KAAK,IAAI,KAAK,QAAQ,gBAAiBC,CAAe,EACvF,EACC,CAAE,QAAS,GAAM,EAMtB,OAAe,uBAA8B,CACvC,WAAY,aACd,YAAY,IAAM,CAChB,MAAMC,EAAU,YAAoB,OACpC,KAAK,QAAQ,YAAcA,EAAO,eAAiBA,EAAO,gBAGtD,KAAK,QAAQ,YAAc,KAC7B,QAAQ,KAAK,8BAA+B,KAAK,QAAQ,WAAW,EACpE,KAAK,iBACP,EACC,GAAK,CACV,CAMF,OAAe,gBAAuB,CAEpC,KAAK,UAAU,QAAQ,CAACZ,EAAUa,IAAQ,CACpCA,IAAQ,iBACVb,EAAS,aACT,KAAK,UAAU,OAAOa,CAAG,EAC3B,CACD,EAGG,OAAQ,QACT,OAAe,IAClB,CAMF,OAAO,YAAiC,CACtC,MAAO,CAAE,GAAG,KAAK,QAAQ,CAM3B,OAAO,cAAqB,CAC1B,KAAK,QAAU,CACb,WAAY,EACZ,gBAAiB,EACjB,kBAAmB,EACrB,CAMF,OAAO,2BAAkC,CACvC,GAAI,CAACvC,EAAoB,WAAY,OAErC,MAAMtP,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA6CpB,SAAS,KAAK,YAAYA,CAAK,EAMjC,OAAO,SAAgB,CACrB,KAAK,UAAU,QAAQgR,GAAYA,EAAS,YAAY,EACxD,KAAK,UAAU,QAEX,KAAK,QACP,qBAAqB,KAAK,KAAK,EAC/B,KAAK,MAAQ,KACf,CAEJ,CAnSErrB,EADWmrB,EACI,UAA8B,CAC3C,WAAY,EACZ,gBAAiB,EACjB,kBAAmB,IAGrBnrB,EAPWmrB,EAOI,YAA+C,IAAI,KAClEnrB,EARWmrB,EAQI,QAAuB,MA+RpCxB,EAAoB,YACtB,SAAS,iBAAiB,mBAAoB,IAAM,CAClDwB,EAAyB,aACzBA,EAAyB,2BAA0B,CACpD,EAIHxB,EAAoB,wBAAyBO,GAAS,CAChDA,IAAS,SACXiB,EAAyB,WAEzBA,EAAyB,aACzBA,EAAyB,4BAE7B,CAAC,EC7TM,MAAMgB,CAA2B,CAOtC,OAAO,YAAmB,CACxB,KAAK,8BACL,KAAK,uBACL,KAAK,uBACL,KAAK,wBACL,KAAK,yBAAwB,CAM/B,OAAe,6BAAoC,CAC7C,KAAK,YAET,KAAK,UAAY,SAAS,cAAc,KAAK,EAC7C,KAAK,UAAU,aAAa,YAAa,QAAQ,EACjD,KAAK,UAAU,aAAa,cAAe,MAAM,EACjD,KAAK,UAAU,UAAY,UAC3B,KAAK,UAAU,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAY/B,SAAS,KAAK,YAAY,KAAK,SAAS,GAM1C,OAAO,SAASnO,EAAiBoO,EAAmC,SAAgB,CAC7E,KAAK,WAAW,KAAK,8BAE1B,KAAK,UAAW,aAAa,YAAaA,CAAQ,EAClD,KAAK,UAAW,YAAcpO,EAG9B,WAAW,IAAM,CACX,KAAK,YACP,KAAK,UAAU,YAAc,GAC/B,EACC,GAAI,EAMT,OAAe,sBAA6B,CAE1C,SAAS,iBAAiB,UAAY,GAAM,CAC1C,KAAK,aAAe,EAAE,OACvB,EAGD,SAAS,iBAAiB,mBAAoB,IAAM,CAC9C,SAAS,kBAAoB,WAAa2L,EAAoB,YAChE,KAAK,cACP,CACD,EAMH,OAAe,cAAqB,CAClC,GAAI,KAAK,cAAgB,SAAS,SAAS,KAAK,YAAY,EAC1D,KAAK,aAAa,YACb,CAEL,MAAM0C,EAAgB,SAAS,cAAc,+BAA+B,EAC5E,GAAIA,EAAe,CACjB,MAAMC,EAAmBD,EAAc,cAAc,kEAAkE,EACnHC,GACDA,EAAiC,OACpC,CACF,CACF,CAMF,OAAe,sBAA6B,CAC1C,MAAMxC,EAAe,SAAS,cAAc,wBAAwB,EACpE,GAAI,CAACA,EAAc,OAGnBA,EAAa,aAAa,OAAQ,SAAS,EAC3CA,EAAa,aAAa,aAAc,iBAAiB,EAEzD,MAAMyC,EAAOzC,EAAa,iBAAiB,eAAe,EAC1DyC,EAAK,QAAQ,CAAC5R,EAAKnb,IAAU,CAC3Bmb,EAAI,aAAa,OAAQ,KAAK,EAC9BA,EAAI,aAAa,gBAAiBnb,IAAU,EAAI,OAAS,OAAO,EAChEmb,EAAI,aAAa,WAAYnb,IAAU,EAAI,IAAM,IAAI,EAErD,MAAM2qB,EAAYxP,EAAI,aAAa,cAAc,EAC7CwP,IACFxP,EAAI,aAAa,gBAAiBwP,CAAS,EAC3CxP,EAAI,GAAK,OAAOwP,CAAS,IAI3BxP,EAAI,iBAAiB,UAAYzM,GAAM,CACrC,KAAK,iBAAiBA,EAAoBqe,EAAM/sB,CAAK,EACtD,EAGDmb,EAAI,iBAAiB,QAAS,IAAM,OAClC,MAAM6R,IAAQ1f,EAAA6N,EAAI,cAAc,YAAY,IAA9B,YAAA7N,EAAiC,cAAe,UAC9D,KAAK,SAAS,eAAe0f,CAAK,UAAU,EAC5C,KAAK,cAAcD,EAAM/sB,CAAK,EAC/B,EACF,EAMH,OAAe,iBAAiB,EAAkB+sB,EAA2BhC,EAA4B,CACvG,IAAIkC,EAAWlC,EAEf,OAAQ,EAAE,KACR,IAAK,YACH,EAAE,iBACFkC,EAAWlC,EAAe,EAAIA,EAAe,EAAIgC,EAAK,OAAS,EAC/D,MACF,IAAK,aACH,EAAE,iBACFE,EAAWlC,EAAegC,EAAK,OAAS,EAAIhC,EAAe,EAAI,EAC/D,MACF,IAAK,OACH,EAAE,iBACFkC,EAAW,EACX,MACF,IAAK,MACH,EAAE,iBACFA,EAAWF,EAAK,OAAS,EACzB,MACF,IAAK,QACL,IAAK,IACH,EAAE,iBACDA,EAAKhC,CAAY,EAAkB,QACpC,OAGAkC,IAAalC,IACf,KAAK,cAAcgC,EAAME,CAAQ,EAChCF,EAAKE,CAAQ,EAAkB,QAClC,CAMF,OAAe,cAAcF,EAA2BG,EAA2B,CACjFH,EAAK,QAAQ,CAAC5R,EAAKnb,IAAU,CAC3Bmb,EAAI,aAAa,gBAAiBnb,IAAUktB,EAAc,OAAS,OAAO,EAC1E/R,EAAI,aAAa,WAAYnb,IAAUktB,EAAc,IAAM,IAAI,EAChE,EAMH,OAAe,uBAA8B,CAE3C,SAAS,iBAAiB,aAAexe,GAAM,CAC7C,MAAM9C,EAAS8C,EAAE,OACb9C,EAAO,QAAQ,mCAAmC,GACpDA,EAAO,aAAa,eAAgB,MAAM,CAC5C,EACC,CAAE,QAAS,GAAM,EAEpB,SAAS,iBAAiB,WAAa8C,GAAM,CAC3C,MAAM9C,EAAS8C,EAAE,OACb9C,EAAO,QAAQ,mCAAmC,GACpDA,EAAO,gBAAgB,cAAc,CACvC,EACC,CAAE,QAAS,GAAM,EAGpB,IAAIuhB,EAAU,EACd,SAAS,iBAAiB,WAAaze,GAAM,CAC3C,MAAMwF,EAAc,IAAI,OAAO,UACzBkZ,EAAYlZ,EAAciZ,EAE5BC,EAAY,KAAOA,EAAY,GAClB1e,EAAE,OACN,QAAQ,+BAA+B,GAChD,KAAK,SAAS,yBAA0B,WAAW,EAGvDye,EAAUjZ,CAAA,CACX,EAMH,OAAe,yBAAgC,CAE7C,KAAK,eAGL,SAAS,iBAAiB,UAAY,GAAM,CAC1C,GAAI,EAAE,MAAQ,SAAU,CACtB,MAAMmZ,EAAc,SAAS,cAAc,wDAAwD,EACnG,GAAIA,EAAa,CACf,EAAE,iBACF,KAAK,SAAS,cAAc,EAE5B,MAAMvS,EAAWuS,EAAY,cAAc,qBAAqB,EAC5DvS,GACDA,EAAyB,OAC5B,CACF,CACF,CACD,EAMH,OAAe,cAAqB,CAClC,MAAMwS,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,aACtBA,EAAU,UAAY;AAAA;AAAA;AAAA,MAKtB,SAAS,KAAK,aAAaA,EAAW,SAAS,KAAK,UAAU,EAG9D,MAAMjD,EAAc,SAAS,cAAc,eAAe,EACtDA,GAAe,CAACA,EAAY,KAC9BA,EAAY,GAAK,gBAInB,MAAMkD,EAAa,SAAS,cAAc,wBAAwB,EAC9DA,GAAc,CAACA,EAAW,KAC5BA,EAAW,GAAK,oBAClB,CAMF,OAAO,0BAAiC,CACxB,SAAS,iBAAiB,MAAM,EAExC,QAAQtI,GAAQ,CAELA,EAAK,iBAAiB,yBAAyB,EACvD,QAAQzJ,GAAS,OAEtB,GAAI,CADUyJ,EAAK,cAAc,cAAczJ,EAAM,EAAE,IAAI,GAC7CA,EAAM,GAAI,CAEtB,MAAMgS,EAAW,SAAS,cAAc,OAAO,EAC/CA,EAAS,aAAa,MAAOhS,EAAM,EAAE,EACrCgS,EAAS,YAAchS,EAAM,aAAa,aAAa,GAAK,cAC5DgS,EAAS,UAAY,WACrBlgB,EAAAkO,EAAM,aAAN,MAAAlO,EAAkB,aAAakgB,EAAUhS,EAAK,CAI5CA,EAAM,aAAa,UAAU,IAC/BA,EAAM,aAAa,gBAAiB,MAAM,EAC1CA,EAAM,iBAAiB,UAAW,IAAM,CACtC,KAAK,SAAS,0BAA2B,WAAW,EACrD,EACH,CACD,EAGDyJ,EAAK,iBAAiB,SAAU,IAAM,CACpC,KAAK,SAAS,gBAAgB,EAC/B,EACF,EAMH,OAAO,kBAAyB,CAEZ,SAAS,iBAAiB,YAAY,EAC9C,QAAQ5J,GAAQ,OACxB,MAAM1W,GAAW2I,EAAA+N,EAAK,cAAc,YAAY,IAA/B,YAAA/N,EAAkC,YAC/C3I,GAAY,CAAC0W,EAAK,aAAa,YAAY,IAC7CA,EAAK,aAAa,aAAc,SAAS1W,CAAQ,EAAE,EACnD0W,EAAK,aAAa,OAAQ,QAAQ,EACpC,CACD,EAGoB,SAAS,iBAAiB,mBAAmB,EACrD,QAAQ,CAAC5Y,EAAMzC,IAAU,CAC/ByC,EAAK,aAAa,YAAY,IACjCA,EAAK,aAAa,aAAc,oBAAoBzC,EAAQ,CAAC,EAAE,EAC/DyC,EAAK,aAAa,OAAQ,SAAS,EACrC,CACD,EAGqB,SAAS,iBAAiB,gBAAgB,EAClD,QAAQ,CAACoM,EAAQ7O,IAAU,OACvC,GAAI,CAAC6O,EAAO,aAAa,YAAY,EAAG,CACtC,MAAM4e,IAAangB,EAAAuB,EAAO,cAAP,YAAAvB,EAAoB,UAAU,EAAG,MAAO,gBAC3DuB,EAAO,aAAa,aAAc,iBAAiB7O,EAAQ,CAAC,KAAKytB,CAAU,EAAE,EAC/E,CACD,EAMH,OAAO,SAAgB,CACjB,KAAK,WAAa,KAAK,UAAU,aACnC,KAAK,UAAU,WAAW,YAAY,KAAK,SAAS,EACpD,KAAK,UAAY,MAGnB,MAAMH,EAAY,SAAS,cAAc,aAAa,EAClDA,GAAaA,EAAU,YACzBA,EAAU,WAAW,YAAYA,CAAS,CAC5C,CAEJ,CAtVE9sB,EADWmsB,EACI,eAAmC,MAClDnsB,EAFWmsB,EAEI,YAAgC,MAwV7CxC,EAAoB,YACtB,SAAS,iBAAiB,mBAAoB,IAAM,CAClDwC,EAA2B,YAAW,CACvC,EAIHxC,EAAoB,wBAAyBO,GAAS,CAChDA,IAAS,SACXiC,EAA2B,UAE3BA,EAA2B,YAE/B,CAAC,EC9VM,MAAMe,EAAkB,CAgB7B,aAAc,CAfNltB,EAAA,iBAAgC,MAChCA,EAAA,mBACAA,EAAA,iBAAsC,MACtCA,EAAA,uBAA0C,MAC1CA,EAAA,yBAAiC,KACjCA,EAAA,uBAA0C,IAC1CA,EAAA,wBAAqD,MACrDA,EAAA,8BAAiE,MACjEA,EAAA,4BAA+C,MAC/CA,EAAA,mBAAuE,YACvEA,EAAA,wBAA4C,MAC5CA,EAAA,0BAA4B,IAC5BA,EAAA,gCAAgC,MAChCA,EAAA,yCAAwD,MAgkFxDA,EAAA,mCAAsD,MACtDA,EAAA,6BAAgC,GAChCA,EAAA,8BAAwC,MA/jF9C,KAAK,WAAa,IAAID,EAAW,CAGnC,MAAa,MAAMga,EAAuC,CACxD,KAAK,UAAYA,EACjB,KAAK,SACL,KAAK,uBACL,MAAM,KAAK,kBAGX,KAAK,gCAGL2Q,EAAqB,aAGrB,KAAK,kCAAiC,CAGhC,QAAe,CAChyBAAuB,CAMtB,wBAA+B,CACrC,MAAMrQ,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,YAAcslBpB,SAAS,KAAK,YAAYA,CAAK,EAMjC,MAAc,iBAAiC,CAC7C,GAAI,CAGF,MAAM,KAAK,WAAW,kBAItB,KAAK,kBACL,KAAK,sBAAqB,OAEnBha,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAClD,CAMM,sBAA6B,CAEnC,MAAM8sB,EAAkB,SAAS,eAAe,mBAAmB,EAC7DC,EAAgB,SAAS,eAAe,iBAAiB,EACzDC,EAAgB,SAAS,eAAe,iBAAiB,EAGzDC,EAAa,SAAS,eAAe,aAAa,EAClDC,EAAiB,SAAS,eAAe,kBAAkB,EAC3DC,EAAc,SAAS,eAAe,cAAc,EACpD9S,EAAW,SAAS,eAAe,WAAW,EAC9C+S,EAAmB,SAAS,eAAe,oBAAoB,EAC/DC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DxqB,EAAmB,SAAS,eAAe,mBAAmB,EAC9DuB,EAAkB,SAAS,eAAe,kBAAkB,EAC5DkpB,EAAsB,SAAS,eAAe,wBAAwB,EACtEC,EAAkB,SAAS,eAAe,aAAa,EAGzDT,GACFA,EAAgB,iBAAiB,QAAS,IAAM,KAAK,WAAW,UAAU,CAAC,EAGzEC,GACFA,EAAc,iBAAiB,QAAS,IAAM,KAAK,WAAW,QAAQ,CAAC,EAGrEC,GACFA,EAAc,iBAAiB,QAAS,IAAM,KAAK,WAAW,aAAa,CAAC,EAG9E,MAAMQ,EAAkB,SAAS,eAAe,mBAAmB,EAC/DA,GACFA,EAAgB,iBAAiB,QAAS,IAAM,KAAK,WAAW,eAAe,CAAC,EAG9EF,GACFA,EAAoB,iBAAiB,QAAS,IAAM,KAAK,uBAAuB,EAG9EL,GACFA,EAAW,iBAAiB,QAAS,IAAM,KAAK,uBAAuB,EAGrEC,GACFA,EAAe,iBAAiB,SAAU,IAAM,KAAK,uBAAuB,EAG1EC,GACFA,EAAY,iBAAiB,QAAS,IAAM,KAAK,cAAc,EAG7D9S,GACFA,EAAS,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,EAG5D+S,GACFA,EAAiB,iBAAiB,QAAS,IAAM,KAAK,kBAAkB,EAGtEC,GACFA,EAAe,iBAAiB,QAAS,IAAM,KAAK,gBAAgB,EAGlExqB,GACFA,EAAiB,iBAAiB,QAAS,IAAM,KAAK,sBAAsB,EAG1EuB,GACFA,EAAgB,iBAAiB,QAAS,IAAM,KAAK,sBAAsB,EAIzEmpB,GACFA,EAAgB,iBAAiB,QAAS,IAAM,KAAK,yBAAyB,EAIhF,SAAS,iBAAiB,QAAU1f,GAAM,CACxC,MAAM9C,EAAS8C,EAAE,OACb9C,EAAO,UAAU,SAAS,YAAY,GACxC,KAAK,qBAAqBA,CAAM,CAClC,CACD,EAQK,iBAAwB,CAC9B,KAAK,sBACL,KAAK,wBACL,KAAK,uBAAsB,CAMrB,qBAA4B,CAClC,MAAMmiB,EAAiB,SAAS,eAAe,kBAAkB,EACjE,GAAI,CAACA,EAAgB,OAErB,MAAMO,EAAW,KAAK,WAAW,qBACjCP,EAAe,UAAY,2CAE3BO,EAAS,QAAQhvB,GAAQ,CACvB,MAAMosB,EAAS,SAAS,cAAc,QAAQ,EAC9CA,EAAO,MAAQpsB,EACfosB,EAAO,YAAcpsB,EACrByuB,EAAe,YAAYrC,CAAM,EAClC,EAMK,uBAA8B,CACpC,MAAMvoB,EAAW,KAAK,WAAW,cACpB,SAAS,iBAAiB,aAAa,EAE/C,QAAQgY,GAAO,CAClB,MAAM/Z,EAAS+Z,EAAI,aAAa,aAAa,EAC7C,IAAInR,EAAQ,EAER5I,IAAW,MACb4I,EAAQ7G,EAAS,OAEjB6G,EAAQ7G,EAAS,OAAOhE,GAAQ,KAAK,gBAAgBA,CAAI,IAAMiC,CAAM,EAAE,OAGzE+Z,EAAI,YAAc,GAAG/Z,IAAW,MAAQ,MAAQA,CAAM,KAAK4I,CAAK,IACjE,EAMK,qBAAqBmR,EAAwB,CAEnD,SAAS,iBAAiB,aAAa,EAAE,WAAa,EAAE,UAAU,OAAO,QAAQ,CAAC,EAClFA,EAAI,UAAU,IAAI,QAAQ,EAE1B,KAAK,uBAAsB,CAMrB,uBAA8B,WACpC,MAAMoT,IAAejhB,EAAA,SAAS,eAAe,aAAa,IAArC,YAAAA,EAA6D,QAAS,GACrFkhB,IAAYjhB,EAAA,SAAS,cAAc,oBAAoB,IAA3C,YAAAA,EAA8C,aAAa,iBAAkB,MACzFwgB,IAAkBpL,EAAA,SAAS,eAAe,kBAAkB,IAA1C,YAAAA,EAAmE,QAAS,GAEpG,IAAI3c,EAAQ,KAAK,WAAW,cAa5B,GAVIwoB,IAAc,QAChBxoB,EAAQA,EAAM,OAAO7G,GAAQ,KAAK,gBAAgBA,CAAI,IAAMqvB,CAAS,GAInET,IACF/nB,EAAQA,EAAM,OAAO7G,GAAQA,EAAK,WAAW,SAAS4uB,CAAc,CAAC,GAInEQ,EAAa,CACf,MAAMhtB,EAAQgtB,EAAY,cAC1BvoB,EAAQA,EAAM,UACZ7G,EAAK,KAAK,cAAc,SAASoC,CAAK,GACtCpC,EAAK,WAAW,KAAKG,GAAQA,EAAK,cAAc,SAASiC,CAAK,CAAC,EACjE,CAGF,KAAK,mBAAmByE,CAAK,EAC7B,KAAK,uBAAsB,CAMrB,mBAAmBA,EAAqB,CAC9C,MAAMyoB,EAAoB,SAAS,eAAe,aAAa,EAC/D,GAAI,CAACA,EAAmB,OAIxB,GAFAA,EAAkB,UAAY,GAE1BzoB,EAAM,SAAW,EAAG,CACtByoB,EAAkB,UAAY,0DAC9B,OAIF,MAAMC,EAAqB,KAAK,yBAAyB1oB,CAAK,EAG9D,OAAO,QAAQ0oB,CAAkB,EAAE,QAAQ,CAAC,CAACC,EAAcC,CAAa,IAAM,CAC5E,MAAMC,EAAc,KAAK,0BAA0BF,EAAcC,CAAa,EAC9EH,EAAkB,YAAYI,CAAW,EAC1C,EAGD,KAAK,wBAAwBH,CAAkB,EAMzC,yBAAyB1oB,EAAuE,CACtG,MAAM0oB,EAA6E,CACjF,UAAa,GACb,YAAe,GACf,iBAAkB,GAClB,SAAY,GACZ,YAAe,EAAC,EAGlB,OAAA1oB,EAAM,QAAQ7G,GAAQ,CACpB,MAAMwvB,EAAe,KAAK,gBAAgBxvB,CAAI,EACxC2vB,EAAc,KAAK,eAAe3vB,CAAI,EACtC4vB,EAAa,KAAK,cAAc5vB,CAAI,EAErCuvB,EAAmBC,CAAY,EAAEG,CAAW,IAC/CJ,EAAmBC,CAAY,EAAEG,CAAW,EAAI,IAE7CJ,EAAmBC,CAAY,EAAEG,CAAW,EAAEC,CAAU,IAC3DL,EAAmBC,CAAY,EAAEG,CAAW,EAAEC,CAAU,EAAI,IAG9DL,EAAmBC,CAAY,EAAEG,CAAW,EAAEC,CAAU,EAAE,KAAK5vB,CAAI,EACpE,EAGD,OAAO,OAAOuvB,CAAkB,EAAE,QAAQE,GAAiB,CACzD,OAAO,OAAOA,CAAa,EAAE,QAAQI,GAAY,CAC/C,OAAO,OAAOA,CAAQ,EAAE,QAAQhpB,GAAS,CACvCA,EAAM,KAAK,CAACjF,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAC7C,EACF,EACF,EAEM0tB,CAAA,CAMD,gBAAgBvvB,EAAoB,CAE1C,GAAIA,EAAK,YAAc,cAAgBA,EAAK,gBAAkB,GAAK,EACjE,MAAO,cAIT,MAAMwC,EAAQxC,EAAK,WAGnB,OAAIwC,EAAM,SAAS,gBAAgB,GAAKA,EAAM,SAAS,cAAc,EAC5D,iBAILA,EAAM,SAAS,WAAW,EACrB,YAILA,EAAM,SAAS,YAAY,EACtB,cAILA,EAAM,SAAS,OAAO,GAAKA,EAAM,SAAS,QAAQ,GAAKA,EAAM,SAAS,OAAO,GAC7EA,EAAM,SAAS,WAAW,GAAKA,EAAM,SAAS,WAAW,GAKzDA,EAAM,SAAS,QAAQ,GAAK,CAACA,EAAM,SAAS,OAAO,EAC9C,WAKLA,EAAM,SAAS,OAAO,IAAMA,EAAM,SAAS,OAAO,GAAKA,EAAM,SAAS,QAAQ,GAAKA,EAAM,SAAS,SAAS,GACtG,YAIF,cAMD,eAAexC,EAAoB,CACzC,MAAMwC,EAAQxC,EAAK,WACb8B,EAAO9B,EAAK,KAAK,cACjBwvB,EAAe,KAAK,gBAAgBxvB,CAAI,EAG9C,GAAIwvB,IAAiB,cACnB,OAAIhtB,EAAM,SAAS,WAAW,EAAU,eACjC,iBAIT,GAAIgtB,IAAiB,iBAAkB,CACrC,GAAI1tB,EAAK,SAAS,UAAU,EAAG,MAAO,YACtC,GAAIA,EAAK,SAAS,UAAU,EAAG,MAAO,YACtC,GAAIA,EAAK,SAAS,WAAW,EAAG,MAAO,kBACvC,GAAIU,EAAM,SAAS,cAAc,EAAG,MAAO,gBAI7C,GAAIgtB,IAAiB,WAAY,CAC/B,GAAIhtB,EAAM,SAAS,QAAQ,EAAG,MAAO,UACrC,GAAIA,EAAM,SAAS,OAAO,EAAG,MAAO,SACpC,GAAIA,EAAM,SAAS,OAAO,EAAG,MAAO,SACpC,GAAIA,EAAM,SAAS,WAAW,GAAKA,EAAM,SAAS,WAAW,EAAG,MAAO,aACvE,GAAIA,EAAM,SAAS,QAAQ,EAAG,MAAO,SAIvC,GAAIgtB,IAAiB,aAAeA,IAAiB,cAAe,CAClE,GAAIhtB,EAAM,SAAS,QAAQ,EAAG,MAAO,SACrC,GAAIA,EAAM,SAAS,OAAO,EAAG,MAAO,QACpC,GAAIA,EAAM,SAAS,SAAS,EAAG,MAAO,UAEtC,GADIA,EAAM,SAAS,QAAQ,GACvBA,EAAM,SAAS,OAAO,EAAG,MAAO,SACpC,GAAIA,EAAM,SAAS,OAAO,EAAG,MAAO,SAItC,OAAIA,EAAM,SAAS,OAAO,EAAU,WAE7B,QAMD,cAAcxC,EAAoB,CAExC,IAAI8vB,EAAW9vB,EAAK,KAMpB,OAHA8vB,EAAWA,EAAS,QAAQ,gCAAiC,EAAE,EAG3DA,EAAS,SAAS,QAAQ,EACrBA,CAGF,CAMD,0BAA0BN,EAAsBC,EAAoE,CAC1H,MAAMM,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,gBAEpB,MAAM/O,EAAa,KAAK,qBAAqByO,CAAa,EACpD3S,EAAgB,KAAK,6BAA6B2S,CAAa,EAErE,OAAAM,EAAQ,UAAY;AAAA,yDACiCP,CAAY;AAAA;AAAA,gBAErDA,CAAY,KAAK1S,CAAa,IAAIkE,CAAU;AAAA;AAAA;AAAA;AAAA,sEAIUwO,CAAY;AAAA,wEACVA,CAAY;AAAA;AAAA;AAAA;AAAA,UAI1E,OAAO,QAAQC,CAAa,EAAE,IAAI,CAAC,CAACE,EAAaE,CAAQ,IACzD,KAAK,sBAAsBL,EAAcG,EAAaE,CAAQ,GAC9D,KAAK,EAAE,CAAC;AAAA;AAAA,MAIPE,CAAA,CAMD,sBAAsBP,EAAsBG,EAAqBE,EAA0C,CACjH,MAAM7O,EAAa,OAAO,OAAO6O,CAAQ,EAAE,OAAO,CAAC1jB,EAAKtF,IAAUsF,EAAMtF,EAAM,OAAQ,CAAC,EACjFiW,EAAgB,OAAO,OAAO+S,CAAQ,EAAE,OAAO,CAAC1jB,EAAKtF,IACzDsF,EAAMtF,EAAM,OAAO7G,GAAQ,KAAK,cAAc,IAAIA,EAAK,IAAI,CAAC,EAAE,OAAQ,CAAC,EAEzE,MAAO;AAAA,iDACsCwvB,CAAY,uBAAuBG,CAAW;AAAA;AAAA;AAAA,kBAG7EA,CAAW,KAAK7S,CAAa,IAAIkE,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YASjD,OAAO,QAAQ6O,CAAQ,EAAE,IAAI,CAAC,CAACD,EAAY/oB,CAAK,IAChD,KAAK,qBAAqB+oB,EAAY/oB,CAAK,GAC3C,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,MASV,qBAAqB+oB,EAAoB/oB,EAAuB,CACtE,MAAMiW,EAAgBjW,EAAM,OAAO7G,GAAQ,KAAK,cAAc,IAAIA,EAAK,IAAI,CAAC,EAAE,OAE9E,MAAO;AAAA,8CACmC4vB,CAAU;AAAA;AAAA;AAAA,kBAGtCA,CAAU,KAAK9S,CAAa,IAAIjW,EAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YASlDA,EAAM,IAAI7G,GAAQ,KAAK,eAAeA,CAAI,CAAC,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA,MASvD,eAAeA,EAAoB,CACzC,MAAMub,EAAa,KAAK,cAAc,IAAIvb,EAAK,IAAI,EAC7CC,EAAO,KAAK,YAAYD,CAAI,EAElC,MAAO;AAAA,8BACmBub,EAAa,WAAa,EAAE,gBAAgBvb,EAAK,IAAI;AAAA;AAAA,mCAEhDA,EAAK,IAAI;AAAA,mCACTA,EAAK,SAAS,KAAKC,CAAI;AAAA;AAAA;AAAA,mCAGvBD,EAAK,OAAO,gBAAgB;AAAA,oCAC3BA,EAAK,SAAS,gBAAgB;AAAA;AAAA,kCAEhCA,EAAK,WAAW,MAAM,EAAG,CAAC,EAAE,KAAK,IAAI,CAAC,GAAGA,EAAK,WAAW,OAAS,EAAI,MAAQ,EAAE;AAAA;AAAA,MAQxG,wBAAwBuvB,EAAkF,CAEhH,SAAS,iBAAiB,gBAAgB,EAAE,QAAQ,CAACG,EAAa7uB,IAAU,CAE1E,MAAM2uB,EADiB,OAAO,KAAKD,CAAkB,EACjB1uB,CAAK,EACzC,GAAI2uB,EAAc,CAChB,MAAMC,EAAgBF,EAAmBC,CAAY,EACrD,KAAK,4BAA4BE,EAA4BF,EAAcC,CAAa,EAC1F,CACD,EAGD,SAAS,iBAAiB,eAAe,EAAE,QAASO,GAAe,OACjE,MAAMR,EAAeQ,EAAW,aAAa,eAAe,EACtDL,EAAcK,EAAW,aAAa,kBAAkB,EAE9D,GAAIR,GAAgBG,KAAexhB,EAAAohB,EAAmBC,CAAY,IAA/B,MAAArhB,EAAmCwhB,IAAc,CAClF,MAAME,EAAWN,EAAmBC,CAAY,EAAEG,CAAW,EAC7D,KAAK,2BAA2BK,EAA2BH,CAAQ,EACrE,CACD,EAGD,SAAS,iBAAiB,cAAc,EAAE,QAASI,GAAkB,CACnE,MAAML,EAAaK,EAAc,aAAa,aAAa,EAG3D,IAAIppB,EAAgB,GACpB,OAAO,OAAO0oB,CAAkB,EAAE,QAAQE,GAAiB,CACzD,OAAO,OAAOA,CAAa,EAAE,QAAQI,GAAY,CAC3CA,EAASD,CAAW,IACtB/oB,EAAQgpB,EAASD,CAAW,EAC9B,CACD,EACF,EAEG/oB,EAAM,OAAS,GACjB,KAAK,0BAA0BopB,EAA8BppB,CAAK,CACpE,CACD,EAMK,qBAAqB4oB,EAA+D,CAC1F,OAAO,OAAO,OAAOA,CAAa,EAAE,OAAO,CAACtjB,EAAK0jB,IAC/C1jB,EAAM,OAAO,OAAO0jB,CAAQ,EAAE,OAAO,CAACK,EAAWrpB,IAAUqpB,EAAYrpB,EAAM,OAAQ,CAAC,EAAG,CAAC,EAMtF,6BAA6B4oB,EAA+D,CAClG,OAAO,OAAO,OAAOA,CAAa,EAAE,OAAO,CAACtjB,EAAK0jB,IAC/C1jB,EAAM,OAAO,OAAO0jB,CAAQ,EAAE,OAAO,CAACK,EAAWrpB,IAC/CqpB,EAAYrpB,EAAM,OAAO7G,GAAQ,KAAK,cAAc,IAAIA,EAAK,IAAI,CAAC,EAAE,OAAQ,CAAC,EAAG,CAAC,EAM/E,4BAA4B4pB,EAAsB4F,EAAsBC,EAA6D,CAC3I,MAAMpE,EAASzB,EAAQ,cAAc,uBAAuB,EACtDwC,EAAUxC,EAAQ,cAAc,wBAAwB,EACxDuG,EAAavG,EAAQ,cAAc,cAAc,EAEvD,GAAI,CAACyB,GAAU,CAACe,GAAW,CAAC+D,EAAY,CACtC,QAAQ,KAAK,qCAAsCX,EAAc,CAAE,OAAQ,CAAC,CAACnE,EAAQ,QAAS,CAAC,CAACe,EAAS,WAAY,CAAC,CAAC+D,EAAY,EACnI,OAIF9E,EAAO,iBAAiB,QAAU9b,GAAM,CAEtC,GAAKA,EAAE,OAAuB,UAAU,SAAS,KAAK,EAAG,CACvDA,EAAE,kBACF,OAGF,QAAQ,IAAI,gCAAiCigB,EAAc,aAAcpD,EAAQ,UAAU,SAAS,WAAW,CAAC,EAChHA,EAAQ,UAAU,OAAO,WAAW,EACpC+D,EAAW,YAAc/D,EAAQ,UAAU,SAAS,WAAW,EAAI,IAAM,IAC1E,EAGD,MAAMgE,EAAYxG,EAAQ,cAAc,kBAAkB,EACpDyG,EAAczG,EAAQ,cAAc,oBAAoB,EAE1DwG,GACFA,EAAU,iBAAiB,QAAU7gB,GAAM,CACzCA,EAAE,kBACF,KAAK,oBAAoBkgB,CAAa,EACvC,EAGCY,GACFA,EAAY,iBAAiB,QAAU9gB,GAAM,CAC3CA,EAAE,kBACF,KAAK,sBAAsBkgB,CAAa,EACzC,CACH,CAMM,2BAA2B7F,EAAsBiG,EAAwC,CAC/F,MAAMxE,EAASzB,EAAQ,cAAc,sBAAsB,EACrDwC,EAAUxC,EAAQ,cAAc,uBAAuB,EACvDuG,EAAavG,EAAQ,cAAc,cAAc,EAEvD,GAAI,CAACyB,GAAU,CAACe,GAAW,CAAC+D,EAAY,CACtC,QAAQ,KAAK,iCAAkC,CAAE,OAAQ,CAAC,CAAC9E,EAAQ,QAAS,CAAC,CAACe,EAAS,WAAY,CAAC,CAAC+D,EAAY,EACjH,OAIF9E,EAAO,iBAAiB,QAAU9b,GAAM,CAEtC,GAAKA,EAAE,OAAuB,UAAU,SAAS,KAAK,EAAG,CACvDA,EAAE,kBACF,OAGF,QAAQ,IAAI,yCAA0C6c,EAAQ,UAAU,SAAS,WAAW,CAAC,EAC7FA,EAAQ,UAAU,OAAO,WAAW,EACpC+D,EAAW,YAAc/D,EAAQ,UAAU,SAAS,WAAW,EAAI,IAAM,IAC1E,EAGD,MAAMgE,EAAYxG,EAAQ,cAAc,qBAAqB,EACvDyG,EAAczG,EAAQ,cAAc,uBAAuB,EAE7DwG,GACFA,EAAU,iBAAiB,QAAU7gB,GAAM,CACzCA,EAAE,kBACF,KAAK,oBAAoBsgB,CAAQ,EAClC,EAGCQ,GACFA,EAAY,iBAAiB,QAAU9gB,GAAM,CAC3CA,EAAE,kBACF,KAAK,sBAAsBsgB,CAAQ,EACpC,CACH,CAMM,0BAA0BjG,EAAsB/iB,EAAqB,CAC3E,MAAMwkB,EAASzB,EAAQ,cAAc,qBAAqB,EACpDwC,EAAUxC,EAAQ,cAAc,sBAAsB,EACtDuG,EAAavG,EAAQ,cAAc,cAAc,EAGvDyB,EAAO,iBAAiB,QAAU9b,GAAM,CACjCA,EAAE,OAAuB,UAAU,SAAS,KAAK,IAEtD6c,EAAQ,UAAU,OAAO,WAAW,EACpC+D,EAAW,YAAc/D,EAAQ,UAAU,SAAS,WAAW,EAAI,IAAM,KAC1E,EAGD,MAAMgE,EAAYxG,EAAQ,cAAc,gBAAgB,EAClDyG,EAAczG,EAAQ,cAAc,kBAAkB,EAExDwG,GACFA,EAAU,iBAAiB,QAAU7gB,GAAM,CACzCA,EAAE,kBACF,KAAK,eAAe1I,CAAK,EAC1B,EAGCwpB,GACFA,EAAY,iBAAiB,QAAU9gB,GAAM,CAC3CA,EAAE,kBACF,KAAK,iBAAiB1I,CAAK,EAC5B,EAIe+iB,EAAQ,iBAAiB,YAAY,EAC7C,QAAQ1N,GAAQ,CACxBA,EAAK,iBAAiB,QAAS,IAAM,CACnC,MAAM1W,EAAW0W,EAAK,aAAa,WAAW,EAC9C,GAAI1W,EAAU,CACZ,MAAMxF,EAAO,KAAK,WAAW,cAAcwF,CAAQ,EAC/CxF,GACF,KAAK,oBAAoBA,CAAI,CAC/B,CACF,CACD,EACF,EAMK,YAAYA,EAAoB,CACtC,OAAQA,EAAK,WACX,IAAK,aAAc,OAAOA,EAAK,iBAAmB,EAClD,IAAK,YAAa,OAAOA,EAAK,gBAAkB,EAChD,IAAK,YACL,IAAK,YAAa,OAAOA,EAAK,gBAAkB,EAChD,QAAS,MAAO,GAClB,CAMM,oBAAoBA,EAAkB,CACxC,KAAK,cAAc,IAAIA,EAAK,IAAI,GAClC,KAAK,cAAc,OAAOA,EAAK,IAAI,GAC/BA,EAAK,YAAc,aAAeA,EAAK,YAAc,cACvD,OAAO,KAAK,gBAAgBA,EAAK,IAAI,IAGvC,KAAK,cAAc,IAAIA,EAAK,IAAI,GAC5BA,EAAK,YAAc,aAAeA,EAAK,YAAc,eACvD,KAAK,gBAAgBA,EAAK,IAAI,EAAI,IAItC,KAAK,yBACL,KAAK,wBACL,KAAK,uBAGDgrB,EAAoB,YACtB,KAAK,yBACP,CAMM,wBAA+B,CAErC,SAAS,iBAAiB,YAAY,EAAE,QAAQ9O,GAAQ,CACtD,MAAM1W,EAAW0W,EAAK,aAAa,WAAW,EAC1C1W,IACE,KAAK,cAAc,IAAIA,CAAQ,EACjC0W,EAAK,UAAU,IAAI,UAAU,EAE7BA,EAAK,UAAU,OAAO,UAAU,EAEpC,CACD,EAGD,KAAK,oBACL,KAAK,uBAAsB,CAMrB,mBAA0B,CAEhC,SAAS,iBAAiB,gBAAgB,EAAE,QAAQ,CAAC0N,EAAS/oB,IAAU,CACtE,MAAMgc,EAAe+M,EAAQ,cAAc,oBAAoB,EAC/D,GAAI/M,EAAc,CAEhB,MAAM2S,EADiB,CAAC,YAAa,cAAe,iBAAkB,WAAY,aAAa,EAC3D3uB,CAAK,EACzC,GAAI2uB,EAAc,CAChB,KAAM,CAAE,SAAAhU,EAAU,MAAAzV,CAAA,EAAU,KAAK,yBAAyBypB,CAAY,EAEhEc,GADezT,EAAa,aAAe,IACnB,QAAQ,kBAAmB,EAAE,EAC3DA,EAAa,YAAc,GAAGyT,CAAQ,KAAK9U,CAAQ,IAAIzV,CAAK,IAC9D,CACF,CACD,EAGD,SAAS,iBAAiB,eAAe,EAAE,QAAQ6jB,GAAW,CAC5D,MAAM/M,EAAe+M,EAAQ,cAAc,uBAAuB,EAC5D4F,EAAe5F,EAAQ,aAAa,eAAe,EACnD+F,EAAc/F,EAAQ,aAAa,kBAAkB,EAE3D,GAAI/M,GAAgB2S,GAAgBG,EAAa,CAC/C,KAAM,CAAE,SAAAnU,EAAU,MAAAzV,CAAA,EAAU,KAAK,wBAAwBypB,EAAcG,CAAW,EAE5EW,GADezT,EAAa,aAAe,IACnB,QAAQ,kBAAmB,EAAE,EAC3DA,EAAa,YAAc,GAAGyT,CAAQ,KAAK9U,CAAQ,IAAIzV,CAAK,IAC9D,CACD,EAGD,SAAS,iBAAiB,cAAc,EAAE,QAAQ6jB,GAAW,CAC3D,MAAM/M,EAAe+M,EAAQ,cAAc,kBAAkB,EACvDgG,EAAahG,EAAQ,aAAa,aAAa,EAErD,GAAI/M,GAAgB+S,EAAY,CAC9B,KAAM,CAAE,SAAApU,EAAU,MAAAzV,CAAA,EAAU,KAAK,mBAAmB6pB,CAAU,EAExDU,GADezT,EAAa,aAAe,IACnB,QAAQ,kBAAmB,EAAE,EAC3DA,EAAa,YAAc,GAAGyT,CAAQ,KAAK9U,CAAQ,IAAIzV,CAAK,IAC9D,CACD,EAMK,yBAAyBypB,EAA2D,CAE1F,MAAMe,EADW,KAAK,WAAW,cACF,OAAOvwB,GAAQ,KAAK,gBAAgBA,CAAI,IAAMwvB,CAAY,EAEzF,MAAO,CAAE,SADae,EAAc,OAAOvwB,GAAQ,KAAK,cAAc,IAAIA,EAAK,IAAI,CAAC,EAAE,OACpD,MAAOuwB,EAAc,OAAO,CAMxD,wBAAwBf,EAAsBG,EAA0D,CAE9G,MAAMa,EADW,KAAK,WAAW,cACC,OAAOxwB,GACvC,KAAK,gBAAgBA,CAAI,IAAMwvB,GAAgB,KAAK,eAAexvB,CAAI,IAAM2vB,CAAA,EAG/E,MAAO,CAAE,SADaa,EAAiB,OAAOxwB,GAAQ,KAAK,cAAc,IAAIA,EAAK,IAAI,CAAC,EAAE,OACvD,MAAOwwB,EAAiB,OAAO,CAM3D,mBAAmBZ,EAAyD,CAElF,MAAMa,EADW,KAAK,WAAW,cACJ,OAAOzwB,GAAQ,KAAK,cAAcA,CAAI,IAAM4vB,CAAU,EAEnF,MAAO,CAAE,SADaa,EAAY,OAAOzwB,GAAQ,KAAK,cAAc,IAAIA,EAAK,IAAI,CAAC,EAAE,OAClD,MAAOywB,EAAY,OAAO,CAMtD,uBAA8B,CACpC,MAAMC,EAAuB,SAAS,eAAe,gBAAgB,EACjEA,IACFA,EAAqB,YAAc,GAAG,KAAK,cAAc,IAAI,kBAC/D,CAMM,kBAAyB,CACN,SAAS,iBAAiB,YAAY,EAC9C,QAAQxU,GAAQ,CAC/B,MAAM1W,EAAW0W,EAAK,aAAa,WAAW,EAC9C,GAAI1W,EAAU,CACZ,MAAMxF,EAAO,KAAK,WAAW,cAAcwF,CAAQ,EAC/CxF,IACF,KAAK,cAAc,IAAIA,EAAK,IAAI,GAC5BA,EAAK,YAAc,aAAeA,EAAK,YAAc,eACvD,KAAK,gBAAgBA,EAAK,IAAI,EAAI,GAEtC,CACF,CACD,EAED,KAAK,wBACL,KAAK,wBACL,KAAK,sBAAqB,CAMpB,oBAAoByvB,EAA6D,CACvF,OAAO,OAAOA,CAAa,EAAE,QAAQI,GAAY,CAC/C,KAAK,oBAAoBA,CAAQ,EAClC,EAMK,sBAAsBJ,EAA6D,CACzF,OAAO,OAAOA,CAAa,EAAE,QAAQI,GAAY,CAC/C,KAAK,sBAAsBA,CAAQ,EACpC,EAMK,oBAAoBA,EAAwC,CAClE,OAAO,OAAOA,CAAQ,EAAE,QAAQhpB,GAAS,CACvC,KAAK,eAAeA,CAAK,EAC1B,EAMK,sBAAsBgpB,EAAwC,CACpE,OAAO,OAAOA,CAAQ,EAAE,QAAQhpB,GAAS,CACvC,KAAK,iBAAiBA,CAAK,EAC5B,EAMK,eAAeA,EAAqB,CAC1CA,EAAM,QAAQ7G,GAAQ,CACpB,KAAK,cAAc,IAAIA,EAAK,IAAI,GAC5BA,EAAK,YAAc,aAAeA,EAAK,YAAc,eACvD,KAAK,gBAAgBA,EAAK,IAAI,EAAI,EACpC,CACD,EAED,KAAK,yBACL,KAAK,wBACL,KAAK,sBAAqB,CAMpB,iBAAiB6G,EAAqB,CAC5CA,EAAM,QAAQ7G,GAAQ,CACpB,KAAK,cAAc,OAAOA,EAAK,IAAI,GAC/BA,EAAK,YAAc,aAAeA,EAAK,YAAc,cACvD,OAAO,KAAK,gBAAgBA,EAAK,IAAI,CACvC,CACD,EAED,KAAK,yBACL,KAAK,wBACL,KAAK,sBAAqB,CAMpB,uBAA8B,CACpC,MAAM2wB,EAAyB,SAAS,eAAe,kBAAkB,EACzE,GAAI,CAACA,EAAwB,OAE7B,MAAMvtB,EAAiB,MAAM,KAAK,KAAK,aAAa,EACjD,IAAItB,GAAQ,KAAK,WAAW,cAAcA,CAAI,CAAC,EAC/C,OAAO9B,GAAQA,IAASA,EAAK,YAAc,aAAeA,EAAK,YAAc,YAAY,EAE5F,GAAIoD,EAAe,SAAW,EAAG,CAC/ButB,EAAuB,UAAY,iEACnC,OAGFA,EAAuB,UAAY,GAEnCvtB,EAAe,QAAQpD,GAAQ,CAC7B,GAAI,CAACA,EAAM,OAEX,MAAM4wB,EAAW,SAAS,cAAc,KAAK,EAC7CA,EAAS,UAAY,iBAGrB,MAAMrR,EAAOvf,EAAK,YAAc,YAAc,KAAO,MAC/C6wB,EAAc7wB,EAAK,YAAc,YAAc,SAASA,EAAK,cAAc,GAAK,SAASA,EAAK,cAAc,GAElH4wB,EAAS,UAAY;AAAA;AAAA,oCAESrR,CAAI,IAAIvf,EAAK,IAAI;AAAA,2CACVA,EAAK,QAAQ,SAASA,EAAK,MAAM,KAAK6wB,CAAW;AAAA;AAAA;AAAA,6BAG/D7wB,EAAK,IAAI;AAAA,0CACIA,EAAK,IAAI,8BAA8B,KAAK,gBAAgBA,EAAK,IAAI,GAAK,CAAC;AAAA,8BACvFA,EAAK,IAAI;AAAA;AAAA,QAInB4wB,EAAS,cAAc,OAAO,EACtC,iBAAiB,SAAWrhB,GAAM,CACtC,MAAM9C,EAAS8C,EAAE,OACjB,KAAK,gBAAgB9C,EAAO,QAAQ,IAAK,EAAI,SAASA,EAAO,KAAK,GAAK,EACxE,EAEDkkB,EAAuB,YAAYC,CAAQ,EAC5C,EAQK,sBAA6B,CACnC,MAAM/B,EAAc,SAAS,eAAe,cAAc,EACpDtqB,EAAmB,SAAS,eAAe,mBAAmB,EAC9DuB,EAAkB,SAAS,eAAe,kBAAkB,EAElE,GAAI,CAAC+oB,GAAe,CAACtqB,GAAoB,CAACuB,EAAiB,OAE3D,MAAMgrB,EAAW,KAAK,cAAc,KAAO,EACrCC,EAAY,SAASxsB,EAAiB,KAAK,EAAI,GACpC,SAASuB,EAAgB,KAAK,EAAI,GAClC,OAAO,KAAK,KAAK,eAAe,EAAE,OAAS,EAE5D+oB,EAAY,SAAW,CAACiC,GAAY,CAACC,CAAA,CAMvC,MAAc,cAA8B,CAC1C,GAAI,CACE,KAAK,cAAgB,YACvB,KAAK,mBACL,MAAM,KAAK,sBACX,KAAK,oBAGL,MAAM,KAAK,mBACb,OAEOrvB,EAAO,CACd,QAAQ,MAAM,uBAAwBA,CAAK,EAC3C,MAAM,8DAA8D,EAGpE,KAAK,mBACL,KAAK,mBAAkB,CACzB,CAMF,MAAc,qBAAqC,CACjD,MAAMsvB,EAAsB,KAAK,WAAW,kBAAkB,MAAM,KAAK,KAAK,aAAa,CAAC,EAC5F,KAAK,UAAY,IAAIvuB,EAAkBuuB,CAAmB,EAE1D,MAAMzsB,EAAmB,SAAS,eAAe,mBAAmB,EAC9DuB,EAAkB,SAAS,eAAe,kBAAkB,EAE5DpD,EAAuC,CAC3C,iBAAkB,SAAS6B,EAAiB,KAAK,GAAK,EACtD,gBAAiB,SAASuB,EAAgB,KAAK,GAAK,EACpD,gBAAiB,CAAE,GAAG,KAAK,iBAC3B,eAAgB,MAAM,KAAK,KAAK,aAAa,GAGzCuI,EAAS,MAAM,KAAK,UAAU,aAAa3L,CAAW,EAC5D,KAAK,uBAAuB2L,CAAM,EAMpC,MAAc,mBAAmC,CAC/C,MAAM2iB,EAAsB,KAAK,WAAW,kBAAkB,MAAM,KAAK,KAAK,aAAa,CAAC,EAEtFzsB,EAAmB,SAAS,eAAe,mBAAmB,EAC9DuB,EAAkB,SAAS,eAAe,kBAAkB,EAC5DmrB,EAAa,SAAS,eAAe,aAAa,EAClDla,EAAkB,SAAS,eAAe,kBAAkB,EAE5DrU,EAA6C,CACjD,iBAAkB,SAAS6B,EAAiB,KAAK,GAAK,EACtD,gBAAiB,SAASuB,EAAgB,KAAK,GAAK,EACpD,gBAAiB,CAAE,GAAG,KAAK,iBAC3B,eAAgB,MAAM,KAAK,KAAK,aAAa,EAC7C,gBAAiB,SAASmrB,EAAW,KAAK,GAAK,EAC/C,gBAAiB,SAASla,EAAgB,KAAK,GAAK,GACpD,mBAAoB,KAAK,mBAAmB,OAAS,EAAI,CAAC,GAAG,KAAK,kBAAkB,EAAI,QAI1F,MAAM,KAAK,kCAAkCrU,EAAasuB,CAAmB,EAM/E,MAAc,kCACZtuB,EACAmE,EACe,CAEf,KAAK,4BAA8B,IAAI,gBAGnCmkB,EAAoB,WACtBgB,EAAiB,kBAAkB,gCAAgC,EAEnE,KAAK,oBAGP,GAAI,CAEG,KAAK,kBACR,KAAK,gBAAkB,IAAIzX,IAI7B,MAAM2c,EAAsB,CAC1B,GAAGxuB,EACH,OAAQ,KAAK,4BAA4B,OACzC,WAAagS,GAAkB,CAC7B,KAAK,oBAAoBA,EAAS,SAAUA,EAAS,QAAS,CAC5D,sBAAuBA,EAAS,sBAChC,gBAAiBA,EAAS,gBAC1B,MAAOA,EAAS,MAChB,qBAAsBA,EAAS,qBAChC,EACH,EAIIrG,EAAS,MAAM,KAAK,gBAAgB,kBAAkB6iB,EAAqBrqB,CAAK,EAGtF,MAAM,KAAK,MAAM,GAAG,EAGhBmkB,EAAoB,WACtBgB,EAAiB,oBAEjB,KAAK,oBAEP,KAAK,qBAAqB3d,CAAM,QAEzB3M,EAAO,CACVspB,EAAoB,WACtBgB,EAAiB,oBAEjB,KAAK,oBAGHtqB,aAAiB,OAASA,EAAM,QAAQ,SAAS,WAAW,EAE9D,QAAQ,IAAI,gCAAgC,GAE5C,QAAQ,MAAM,8BAA+BA,CAAK,EAClD,MAAM,wBAAwBA,aAAiB,MAAQA,EAAM,QAAU,eAAe,EAAE,EAC1F,CACF,CAQM,MAAMyvB,EAA2B,CACvC,OAAO,IAAI,QAAQlc,GAAW,WAAWA,EAASkc,CAAE,CAAC,EAM/C,uBAAuB9iB,EAAmB,CAChD,MAAM+iB,EAAoB,SAAS,eAAe,oBAAoB,EAChEC,EAAmB,SAAS,eAAe,mBAAmB,EAC9DrM,EAAiB,SAAS,eAAe,iBAAiB,EAC1DsM,EAAkB,SAAS,eAAe,kBAAkB,EAC5DC,EAAgB,SAAS,eAAe,gBAAgB,EAE1D,CAACH,GAAqB,CAACC,GAAoB,CAACrM,IAG5CsM,GAAiBA,EAAgB,UAAU,OAAO,QAAQ,EAC1DC,GAAeA,EAAc,UAAU,IAAI,QAAQ,EAGvDH,EAAkB,UAAY;AAAA;AAAA,kCAEA/iB,EAAO,aAAa,MAAM;AAAA;AAAA;AAAA;AAAA,kCAI1BA,EAAO,2BAA2B,gBAAgB;AAAA;AAAA;AAAA;AAAA,kCAIlD,KAAK,MAAMA,EAAO,eAAe,CAAC;AAAA;AAAA;AAAA,MAMhEgjB,EAAiB,UAAY,GAEzBhjB,EAAO,aAAa,SAAW,EACjCgjB,EAAiB,UAAY,0GAE7BhjB,EAAO,aAAa,QAAQ,CAACrL,EAA8BnC,IAAkB,CAC3E,MAAM2wB,EAAiB,KAAK,yBAAyBxuB,EAAanC,EAAQ,CAAC,EAC3EwwB,EAAiB,YAAYG,CAAc,EAC5C,EAGHxM,EAAe,UAAU,OAAO,QAAQ,EAGxC+G,EAAqB,YAAY,iBAAiB,EAG9C1d,EAAO,aAAa,OAAS,IAC/B,KAAK,qBAAuBA,EAAO,aAAa,CAAC,GAGnD,CAMM,qBAAqBA,EAAmB,CAC9C,MAAM+iB,EAAoB,SAAS,eAAe,oBAAoB,EAChEK,EAAiB,SAAS,eAAe,kBAAkB,EAC3DzM,EAAiB,SAAS,eAAe,iBAAiB,EAC1DsM,EAAkB,SAAS,eAAe,kBAAkB,EAC5DC,EAAgB,SAAS,eAAe,gBAAgB,EAE9D,GAAI,CAACH,GAAqB,CAACK,GAAkB,CAACzM,EAAgB,OAG1DsM,GAAiBA,EAAgB,UAAU,IAAI,QAAQ,EACvDC,GAAeA,EAAc,UAAU,OAAO,QAAQ,EAG1D,MAAMG,EAAkB,SAAS,eAAe,6BAA6B,EACzEA,IACFA,EAAgB,UAAU,IAAI,QAAQ,EACtC3F,EAAqB,YAAY,6BAA6B,GAIhEqF,EAAkB,UAAY;AAAA;AAAA,kCAEA/iB,EAAO,cAAc,MAAM;AAAA;AAAA;AAAA;AAAA,kCAI3BA,EAAO,sBAAsB,gBAAgB;AAAA;AAAA;AAAA;AAAA,kCAI7C,KAAK,MAAMA,EAAO,kBAAkB,CAAC;AAAA;AAAA;AAAA;AAAA,kCAIrCA,EAAO,aAAa;AAAA;AAAA;AAAA,MAMlDojB,EAAe,UAAY,GAEvBpjB,EAAO,cAAc,SAAW,EAClCojB,EAAe,UAAY,0GAE3BpjB,EAAO,cAAc,MAAM,EAAG,EAAE,EAAE,QAAQ,CAACsjB,EAAiB9wB,IAAkB,CAC5E,MAAM+wB,EAAU,KAAK,wBAAwBD,EAAY9wB,EAAQ,CAAC,EAClE4wB,EAAe,YAAYG,CAAO,EACnC,EAGH5M,EAAe,UAAU,OAAO,QAAQ,EAGxC+G,EAAqB,YAAY,iBAAiB,EAG7Cf,EAAoB,YACvB,WAAW,IAAM,CACfhG,EAAe,eAAe,CAAE,SAAU,SAAU,MAAO,QAAS,GACnE,GAAG,CACR,CASM,gCAAgCpP,EAA2B,CACjE,MAAM8b,EAAkB,SAAS,eAAe,6BAA6B,EACzE,CAACA,GAAmB,CAAC,KAAK,uBAG9BA,EAAgB,UAAU,OAAO,QAAQ,EAGzC3F,EAAqB,YAAY,6BAA6B,EAGzD,KAAK,mBACR,KAAK,iBAAmB,IAAI9N,EAC5B,KAAK,iBAAiB,WAAW,KAAK,UAAU,EAEhD,KAAK,iBAAiB,MAAMyT,EAAiB,KAAK,oBAAoB,GAIxE,KAAK,iBAAiB,4BAA4B9b,CAAc,EAG3DoV,EAAoB,YACvB0G,EAAgB,eAAe,CAAE,SAAU,SAAU,MAAO,UAAW,EACzE,CAMM,sBAA6B,CACnC,GAAI,CAAC,KAAK,qBAAsB,OAEhC,MAAMA,EAAkB,SAAS,eAAe,6BAA6B,EACxEA,IAGLA,EAAgB,UAAU,OAAO,QAAQ,EAGpC,KAAK,mBACR,KAAK,iBAAmB,IAAIzT,EAC5B,KAAK,iBAAiB,WAAW,KAAK,UAAU,GAIlD,KAAK,iBAAiB,MAAMyT,EAAiB,KAAK,oBAAoB,EAGtE3F,EAAqB,YAAY,6BAA6B,EAGzDf,EAAoB,YACvB,WAAW,IAAM,CACf0G,EAAgB,eAAe,CAAE,SAAU,SAAU,MAAO,QAAS,GACpE,GAAG,EACR,CAMM,yBAAyB1uB,EAA8B6uB,EAA2B,OACxF,MAAMC,EAAM,SAAS,cAAc,KAAK,EACxCA,EAAI,UAAY,mBAGhB,MAAMC,IAAc5jB,EAAA,KAAK,YAAL,YAAAA,EAAgB,gBAAgBnL,KAAgB,oCAG9DqoB,EAAS;AAAA;AAAA,kDAE+BwG,CAAI,IAAI7uB,EAAY,gBAAkB,IAAM,GAAG;AAAA,qDAC5CA,EAAY,gBAAgB,QAAQ,CAAC,CAAC;AAAA;AAAA,MAKjFgvB,EAAmBD,EACtB,MAAM;AAAA,CAAI,EACV,IAAIE,GAECA,EAAK,SAAS,+BAA+B,EACxC,0BAA0BA,CAAI,QAEnCA,EAAK,SAAS,IAAI,OAAO,EAAE,CAAC,EACvB,6BAELA,EAAK,SAAS,iBAAiB,GAAKA,EAAK,SAAS,sBAAsB,GACxEA,EAAK,SAAS,sBAAsB,GAAKA,EAAK,SAAS,oBAAoB,GAC3EA,EAAK,SAAS,iBAAiB,EAC1B,8BAA8BA,CAAI,QAEvCA,EAAK,SAAS,IAAI,OAAO,EAAE,CAAC,GAAKA,EAAK,SAAS,IAAI,OAAO,EAAE,CAAC,EACxD,+BAGLA,EAAK,SAAS,IAAI,EACb,4BAA4BA,CAAI,SAGrCA,EAAK,QAAU,CAACA,EAAK,SAAS,GAAG,GAAK,CAACA,EAAK,SAAS,GAAG,EACnD,0BAA0BA,CAAI,SAGnCA,EAAK,SAAW,GACX,8BAEF,EACR,EACA,OAAOA,GAAQA,IAAS,EAAE,EAC1B,KAAK,EAAE,EAGJC,EAAe;AAAA;AAAA,iFAEwDL,EAAO,CAAC;AAAA;AAAA;AAAA;AAAA,MAMrFC,EAAI,UAAYzG,EAAS,oCAAsC2G,EAAmB,SAAWE,EAG7F,MAAMlO,EAAc8N,EAAI,cAAc,eAAe,EACrD,OAAI9N,GACFA,EAAY,iBAAiB,QAAS,IAAM,CAC1C,KAAK,qBAAuBhhB,EAC5B,KAAK,sBAAqB,CAC3B,EAGI8uB,CAAA,CAMD,wBAAwBH,EAAiBE,EAA2B,CAC1E,MAAMC,EAAM,SAAS,cAAc,KAAK,EACxCA,EAAI,UAAY,mBAChBA,EAAI,aAAa,mBAAoBD,EAAO,GAAG,UAAU,EAEzD,MAAMM,EAAWR,EAAW,gBAAgB,qBAAuB,EAAI,aACvDA,EAAW,gBAAgB,sBAAwB,EAAI,YAAc,QAE/ES,EAAeD,IAAa,aAAe,MAAQA,IAAa,YAAc,KAAO,KAG3F,OAAAL,EAAI,iBAAiB,QAAS,IAAM,KAAK,iBAAiBH,EAAYE,EAAO,CAAC,CAAC,EAE/EC,EAAI,UAAY;AAAA;AAAA,kCAEcD,CAAI;AAAA;AAAA,wCAEEO,CAAY;AAAA,yCACXD,CAAQ;AAAA;AAAA;AAAA,uCAGVR,EAAW,uBAAuB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAa3E,OAAO,QAAQA,EAAW,gBAAgB,KAAK,EAAE,IAAI,CAAC,CAACnsB,EAAUqF,CAAK,IACtE;AAAA,2CAC6BA,EAAM,gBAAgB;AAAA,0CACvBrF,CAAQ;AAAA,uBAEpC,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAOiBmsB,EAAW,gBAAgB,cAAc,gBAAgB;AAAA;AAAA;AAAA;AAAA,uCAIzDA,EAAW,gBAAgB,mBAAmB,OAAOA,EAAW,gBAAgB,kBAAkB;AAAA;AAAA;AAAA;AAAA,uCAIlGA,EAAW,eAAe,UAAU,iBAAiB,gBAAgB,MAAMA,EAAW,eAAe,SAAS,iBAAiB,gBAAgB;AAAA;AAAA;AAAA;AAAA,uCAI/IA,EAAW,gBAAgB,gBAAgB;AAAA;AAAA;AAAA;AAAA,uCAI3CA,EAAW,qBAAqB,gBAAgB;AAAA;AAAA;AAAA;AAAA,uCAIhDA,EAAW,sBAAsB,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,MAMvEG,CAAA,CAMD,iBAAiBH,EAAiB9wB,EAAqB,CAE5C,SAAS,iBAAiB,mBAAmB,EACrD,QAAQ,CAACqb,EAAMvX,IAAM,CAC5BuX,EAAK,UAAU,OAAO,WAAYvX,IAAM9D,CAAK,EAC9C,EAGD,KAAK,wBAAwB8wB,CAAU,EAGvC,KAAK,qBAAuBA,EAAW,gBACvC,KAAK,gCAAgCA,EAAW,cAAc,EAMxD,wBAAwBA,EAAuB,CACrD,MAAMU,EAAmB,SAAS,eAAe,uBAAuB,EAClEC,EAAuB,SAAS,eAAe,2BAA2B,EAEhF,GAAI,CAACD,GAAoB,CAACC,EAAsB,OAGhD,MAAMtvB,EAAc2uB,EAAW,gBAGzBX,EAAsB,KAAK,WAAW,kBAAkB,OAAO,KAAKhuB,EAAY,KAAK,CAAC,EAEtFuvB,EADgB,IAAI9vB,EAAkBuuB,CAAmB,EAC7B,gBAAgBhuB,CAAW,EAE7DsvB,EAAqB,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,6CAKQX,EAAW,uBAAuB,gBAAgB;AAAA;AAAA;AAAA,+CAGhD3uB,EAAY,cAAc,gBAAgB;AAAA;AAAA;AAAA,0CAG/C,OAAO,OAAOA,EAAY,KAAK,EAAE,OAAO,CAACmJ,EAAatB,IAAesB,EAAMtB,EAAO,CAAC,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMrI0nB,EAAY,MAAM;AAAA,CAAI,EAAE,IAAIN,GAExBA,EAAK,SAAW,GACX,8BAELA,EAAK,SAAS,OAAO,GAAKA,EAAK,SAAS,QAAQ,EAC3C,qCAAqCA,CAAI,kBAE9CA,EAAK,SAAS,GAAG,EACZ,0BAA0BA,CAAI,SAEnCA,EAAK,SAAS,GAAG,GAAKA,EAAK,SAAS,OAAO,EACtC,wCAAwCA,CAAI,SAE9C,iCAAiCA,CAAI,QAC7C,EAAE,KAAK,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAQ2BN,EAAW,eAAe,SAAS,iBAAiB,gBAAgB,cAAcA,EAAW,eAAe,SAAS,cAAc;AAAA;AAAA;AAAA;AAAA,8CAInIA,EAAW,eAAe,UAAU,iBAAiB,gBAAgB,cAAcA,EAAW,eAAe,UAAU,cAAc;AAAA;AAAA;AAAA;AAAA,8CAIrIA,EAAW,sBAAsB,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAYzE,KAAK,gBAAgBA,EAAW,eAAe,SAAS,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOlE,KAAK,gBAAgBA,EAAW,eAAe,UAAU,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,MAO/EU,EAAiB,UAAU,OAAO,QAAQ,EAG1CA,EAAiB,eAAe,CAAE,SAAU,SAAU,MAAO,UAAW,EAMlE,gBAAgB1U,EAA0B,CAChD,MAAI,CAACA,GAAaA,EAAU,SAAW,EAC9B,8DAGFA,EAAU,IAAI,CAACjO,EAAQ7O,IAAU,CACtC,MAAM2xB,EAAiB9iB,EAAO,UAAY,CAACA,EAAO,SAAS,SAAS,OAAO,EAG3E,MAAO;AAAA,oCAFa8iB,EAAiB,gBAAkB,cAGd;AAAA;AAAA,6CAEF9iB,EAAO,IAAI;AAAA,wCAChB8iB,EAAiB,mBAAqB,kBAAkB;AAAA;AAAA;AAAA,sBAG1E9iB,EAAO,QAAQ,aAAaA,EAAO,MAAM,YAAYA,EAAO,MAAM;AAAA,cAC1EA,EAAO,YAAc,+BAA+BA,EAAO,YAAY,gBAAgB,kBAAoB,EAAE;AAAA,cAC7GA,EAAO,WAAa,0DAA4D,EAAE;AAAA;AAAA;AAAA,QAI3F,EAAE,KAAK,EAAE,EAMJ,gBAAuB,CAC7B,KAAK,cAAc,QACnB,KAAK,gBAAkB,GACvB,KAAK,qBAAuB,KAE5B,MAAMnL,EAAmB,SAAS,eAAe,mBAAmB,EAC9DuB,EAAkB,SAAS,eAAe,kBAAkB,EAC5Dkf,EAAiB,SAAS,eAAe,iBAAiB,EAC1D0M,EAAkB,SAAS,eAAe,6BAA6B,EAEzEntB,MAAmC,MAAQ,KAC3CuB,MAAiC,MAAQ,KACzCkf,IACFA,EAAe,UAAU,IAAI,QAAQ,EACrC+G,EAAqB,YAAY,iBAAiB,GAEhD2F,IACFA,EAAgB,UAAU,IAAI,QAAQ,EACtC3F,EAAqB,YAAY,6BAA6B,GAGhE,KAAK,wBACL,KAAK,wBACL,KAAK,sBAAqB,CAMpB,WAAWR,EAAqE,CACtF,KAAK,YAAcA,EAGnB,MAAMkH,EAAc,SAAS,eAAe,mBAAmB,EACzDC,EAAY,SAAS,eAAe,iBAAiB,EACrDhE,EAAgB,SAAS,eAAe,iBAAiB,EACzDQ,EAAkB,SAAS,eAAe,mBAAmB,EAE/DuD,GAAeC,GAAahE,GAAiBQ,IAC/CuD,EAAY,UAAU,OAAO,SAAUlH,IAAS,UAAU,EAC1DmH,EAAU,UAAU,OAAO,SAAUnH,IAAS,QAAQ,EACtDmD,EAAc,UAAU,OAAO,SAAUnD,IAAS,aAAa,EAC/D2D,EAAgB,UAAU,OAAO,SAAU3D,IAAS,eAAe,GAIrE,MAAMoH,EAAe,SAAS,eAAe,sBAAsB,EAC7DC,EAAa,SAAS,eAAe,oBAAoB,EAE3DD,GAAgBC,IAClBD,EAAa,UAAU,OAAO,SAAUpH,IAAS,UAAU,EAC3DqH,EAAW,UAAU,OAAO,SAAUrH,IAAS,QAAQ,GAIzD,MAAMsH,EAAiB,SAAS,eAAe,iBAAiB,EAC5DA,GACFA,EAAe,UAAU,OAAO,SAAUtH,IAAS,QAAQ,EAI7D,MAAMuH,EAAkB,SAAS,eAAe,mBAAmB,EAC/DA,IACEvH,IAAS,WACXuH,EAAgB,YAAc,mBACrBvH,IAAS,SAClBuH,EAAgB,YAAc,yBACrBvH,IAAS,cAClBuH,EAAgB,YAAc,wBACrBvH,IAAS,kBAClBuH,EAAgB,YAAc,wBAKlC,MAAMC,EAAe,SAAS,eAAe,eAAe,EACxDA,IACExH,IAAS,WACXwH,EAAa,YAAc,sBAClBxH,IAAS,SAClBwH,EAAa,YAAc,iCAClBxH,IAAS,cAClBwH,EAAa,YAAc,4BAClBxH,IAAS,kBAClBwH,EAAa,YAAc,6BAK/B,MAAMC,EAAgB,SAAS,eAAe,gBAAgB,EACxDhO,EAAiB,SAAS,eAAe,iBAAiB,EAC1DiO,EAAoB,SAAS,eAAe,qBAAqB,EACjEC,EAAsB,SAAS,eAAe,uBAAuB,EACrExB,EAAkB,SAAS,eAAe,6BAA6B,EAEzEnG,IAAS,eAEPyH,GAAeA,EAAc,UAAU,IAAI,QAAQ,EACnDhO,GAAgBA,EAAe,UAAU,IAAI,QAAQ,EACrDiO,GAAmBA,EAAkB,UAAU,OAAO,QAAQ,EAC9DC,GAAqBA,EAAoB,UAAU,IAAI,QAAQ,EAC/DxB,GAAiBA,EAAgB,UAAU,IAAI,QAAQ,EAG3D,KAAK,8BAEL3F,EAAqB,YAAY,gBAAgB,EACjDA,EAAqB,YAAY,iBAAiB,EAClDA,EAAqB,YAAY,qBAAqB,EACtDA,EAAqB,YAAY,uBAAuB,EACxDA,EAAqB,YAAY,6BAA6B,GACrDR,IAAS,iBAEdyH,GAAeA,EAAc,UAAU,IAAI,QAAQ,EACnDhO,GAAgBA,EAAe,UAAU,IAAI,QAAQ,EACrDiO,GAAmBA,EAAkB,UAAU,IAAI,QAAQ,EAC3DC,GAAqBA,EAAoB,UAAU,OAAO,QAAQ,EAClExB,GAAiBA,EAAgB,UAAU,IAAI,QAAQ,EAG3D,KAAK,mCAEL3F,EAAqB,YAAY,gBAAgB,EACjDA,EAAqB,YAAY,iBAAiB,EAClDA,EAAqB,YAAY,qBAAqB,EACtDA,EAAqB,YAAY,uBAAuB,EACxDA,EAAqB,YAAY,6BAA6B,IAG1DiH,GAAeA,EAAc,UAAU,OAAO,QAAQ,EACtDC,GAAmBA,EAAkB,UAAU,IAAI,QAAQ,EAC3DC,GAAqBA,EAAoB,UAAU,IAAI,QAAQ,EAC/DlO,GAAgBA,EAAe,UAAU,IAAI,QAAQ,EACrD0M,GAAiBA,EAAgB,UAAU,IAAI,QAAQ,EAE3D3F,EAAqB,YAAY,gBAAgB,EACjDA,EAAqB,YAAY,qBAAqB,EACtDA,EAAqB,YAAY,uBAAuB,EACxDA,EAAqB,YAAY,iBAAiB,EAClDA,EAAqB,YAAY,6BAA6B,EAChE,CAMM,kBAAyB,CAC/B,MAAMoH,EAAe,SAAS,eAAe,eAAe,EACxDA,GACFA,EAAa,UAAU,OAAO,QAAQ,CACxC,CAMM,kBAAyB,CAC/B,MAAMA,EAAe,SAAS,eAAe,eAAe,EACxDA,GACFA,EAAa,UAAU,IAAI,QAAQ,CACrC,CAUM,mBAA0B,CAEhC,IAAIC,EAAgB,SAAS,eAAe,gBAAgB,EAC5D,GAAI,CAACA,EAAe,CAClBA,EAAgB,SAAS,cAAc,KAAK,EAC5CA,EAAc,GAAK,iBACnBA,EAAc,UAAY,QAC1BA,EAAc,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA+B1B,SAAS,KAAK,YAAYA,CAAa,EAGvC,MAAMxX,EAAY,SAAS,eAAe,yBAAyB,EAC/DA,GACFA,EAAU,iBAAiB,QAAS,IAAM,CACxC,KAAK,oBAAmB,CACzB,CACH,CAGFwX,EAAc,UAAU,OAAO,QAAQ,EACvC,KAAK,sBAAwB,YAAY,MACzC,KAAK,oBAAoB,EAAG,iBAAiB,EAC7C,KAAK,oBAAmB,CAMlB,oBAAoB1e,EAAkB2K,EAAiB/Q,EAKtD,CACP,MAAM+kB,EAAe,SAAS,eAAe,eAAe,EACtDC,EAAe,SAAS,eAAe,eAAe,EACtDC,EAAqB,SAAS,eAAe,qBAAqB,EAClEC,EAAuB,SAAS,eAAe,uBAAuB,EACtEC,EAAgB,SAAS,eAAe,gBAAgB,EACxDC,EAAoB,SAAS,eAAe,oBAAoB,EAWtE,GATIL,IACFA,EAAa,MAAM,MAAQ,GAAG3e,CAAQ,KAEpC4e,IACFA,EAAa,YAAcjU,GAEzBkU,IACFA,EAAmB,YAAc,GAAG,KAAK,MAAM7e,CAAQ,CAAC,KAEtD8e,GAAwBllB,EAAS,CACnC,MAAMqlB,EAAYrlB,EAAQ,uBAAyB,EAC7CvI,EAAQuI,EAAQ,iBAAmB,EACzCklB,EAAqB,YAAc,GAAGG,EAAU,gBAAgB,MAAM5tB,EAAM,gBAAgB,gBAK9F,GAHI0tB,IAAiBnlB,GAAA,MAAAA,EAAS,SAC5BmlB,EAAc,YAAcnlB,EAAQ,MAAM,OAAO,CAAC,EAAE,cAAgBA,EAAQ,MAAM,MAAM,CAAC,GAEvFolB,IAAqBplB,GAAA,MAAAA,EAAS,sBAAsB,CACtD,MAAMslB,EAAmB,KAAK,KAAKtlB,EAAQ,qBAAuB,GAAI,EAChEulB,EAAU,KAAK,MAAMD,EAAmB,EAAE,EAC1CE,EAAUF,EAAmB,GACnCF,EAAkB,YAAc,KAAKG,CAAO,IAAIC,EAAQ,WAAW,SAAS,EAAG,GAAG,CAAC,mBAC1EJ,IACTA,EAAkB,YAAc,GAClC,CAMM,oBAA2B,CACjC,KAAK,uBAAyB,OAAO,YAAY,IAAM,CACrD,MAAMxe,EAAY,YAAY,MAAQ,KAAK,sBACrC6e,EAAiB,KAAK,MAAM7e,EAAY,GAAI,EAC5C2e,EAAU,KAAK,MAAME,EAAiB,EAAE,EACxCD,EAAUC,EAAiB,GAE3BC,EAAkB,SAAS,eAAe,kBAAkB,EAC9DA,IACFA,EAAgB,YAAc,GAAGH,EAAQ,WAAW,SAAS,EAAG,GAAG,CAAC,IAAIC,EAAQ,WAAW,SAAS,EAAG,GAAG,CAAC,GAC7G,EACC,GAAI,EAMD,mBAA0B,CAC5B,KAAK,yBACP,cAAc,KAAK,sBAAsB,EACzC,KAAK,uBAAyB,KAChC,CAMM,oBAA2B,CAC7B,KAAK,8BACP,KAAK,4BAA4B,QACjC,KAAK,oBACL,MAAM,iCAAiC,EACzC,CAMM,mBAA0B,CAChC,MAAMV,EAAgB,SAAS,eAAe,gBAAgB,EAC1DA,GACFA,EAAc,UAAU,IAAI,QAAQ,EAEtC,KAAK,oBACL,KAAK,4BAA8B,KAM7B,+BAAsC,CAE5CvI,EAAiB,qBACjBA,EAAiB,oBAGjB,KAAK,6BAGLG,EAAoB,wBAAyBO,GAAS,CACpD,KAAK,uBAAuBA,CAAI,EACjC,EAMK,4BAAmC,CACvB,SAAS,iBAAiB,YAAY,EAC9C,QAAQrP,GAAQ,CACpBA,aAAgB,aAElByN,EAAwB,kBAAkBzN,CAAI,CAChD,CACD,EAMK,uBAAuBqP,EAA6C,CAE1E,WAAW,IAAM,CACfV,EAAiB,qBACjBA,EAAiB,oBACjB,KAAK,6BAGDU,IAAS,UACX,KAAK,kCACP,EACC,GAAG,EAMA,kCAAyC,CAC1CP,EAAoB,aAGzBwB,EAAyB,aAGzBgB,EAA2B,aAG3B,KAAK,mBAGL,KAAK,0BAGLA,EAA2B,2BAG3B,WAAW,IAAM,CACfA,EAA2B,kBAAiB,EAC3C,GAAG,GAMA,kBAAyB,CAC/B,MAAMtC,EAAc,SAAS,cAAc,eAAe,EACrDA,GAELvB,EAAwB,iBACtBuB,EACA,SAAY,CAEVsC,EAA2B,SAAS,oBAAoB,EAGxD,MAAM,IAAI,QAAQvY,GAAW,WAAWA,EAAS,GAAI,CAAC,EAGtD4V,EAAiB,qBACjBA,EAAiB,oBACjB2C,EAA2B,mBAE3BA,EAA2B,SAAS,gBAAgB,EACtD,CACF,CAMM,yBAAgC,CAElC,KAAK,cAAc,KAAO,EAC5BxB,EAAiB,yBAAyB,CACxC,KAAM,IACN,MAAO,iBACP,QAAS,IAAM,CACbwB,EAA2B,SAAS,6BAA6B,EACjE,KAAK,cAAa,EAEpB,SAAU,eACV,MAAO,UACR,EAEDxB,EAAiB,0BACnB,CAMM,6BAAoC,CAC1C,MAAMiI,EAAsB,SAAS,eAAe,uBAAuB,EACtEA,IAGA,KAAK,mBACR,KAAK,iBAAmB,IAAI9M,GAAiB,CAC3C,KAAM,WACP,GAIH,KAAK,iBAAiB,MAAM8M,CAAmB,GAMjD,MAAc,kCAAkD,CAC9D,MAAMC,EAAwB,SAAS,eAAe,yBAAyB,EAC1EA,IAGA,KAAK,yBACR,KAAK,uBAAyB,IAAIxQ,GAAgC,CAChE,WAAY,KAAK,WACjB,iBAAmBmB,GAAa,CAC9B,QAAQ,IAAI,2BAA4BA,CAAQ,EAElD,CACD,GAIH,MAAM,KAAK,uBAAuB,MAAMqP,CAAqB,GAMvD,uBAA8B,CAEpC,MAAMjF,EAAkB,SAAS,eAAe,aAAa,EACvDzS,EAAgB,UAASyS,GAAA,YAAAA,EAAiB,QAAS,GAAG,EAG5DvK,EAAA,kCAAAxJ,CAAA,mCAAAiZ,EAAA,EAAwC,yBAAAjZ,CAAA,WAAE,KAAK,CAAC,CAAE,kBAAAA,KAAwB,CAExE,MAAMwD,EAAiB,SAAS,cAAc,KAAK,EACnDA,EAAe,GAAK,4BACpBA,EAAe,MAAM,SAAW,QAChCA,EAAe,MAAM,IAAM,IAC3BA,EAAe,MAAM,KAAO,IAC5BA,EAAe,MAAM,MAAQ,IAC7BA,EAAe,MAAM,OAAS,IAC9BA,EAAe,MAAM,OAAS,OAC9B,SAAS,KAAK,YAAYA,CAAc,EAGxC,MAAM0V,EAAW,IAAIlZ,EAAkB,CACrC,SAAW1J,GAAc,CACvB,KAAK,wBAAwBA,CAAS,GAIxC,SAAU,IAAM,CACd,KAAK,uBAAuBkN,EAAgB0V,CAAQ,GAEtD,KAAM,WACN,MAAO,+CAA+C,KAAK,mBAAmB,MAAM,IAAI5X,CAAa,aACrG,cAAAA,EACA,cAAe,CAAC,GAAG,KAAK,kBAAkB,EAC3C,EAGD,KAAK,yBAA2B4X,EAChC,KAAK,kCAAoC1V,EAGzC0V,EAAS,MAAM1V,CAAc,EAC9B,EAAE,MAAMhd,GAAS,CAChB,QAAQ,MAAM,oCAAqCA,CAAK,EACxD,MAAM,uDAAuD,EAC9D,EAMK,wBAAwB8P,EAAsB,CAEpD,MAAMyd,EAAkB,SAAS,eAAe,aAAa,EACvDzS,EAAgB,UAASyS,GAAA,YAAAA,EAAiB,QAAS,GAAG,EAGtD1S,EAAgB,KAAK,mBAAmB,aAAkBvc,EAAK,OAASwR,EAAU,IAAI,EAExF+K,GAAiB,EAEnB,KAAK,mBAAmB,OAAOA,EAAe,CAAC,EACtC,KAAK,mBAAmB,OAASC,EAE1C,KAAK,mBAAmB,KAAKhL,CAAS,GAGtC,KAAK,mBAAmB,QACxB,KAAK,mBAAmB,KAAKA,CAAS,GAIxC,KAAK,yBAGL,KAAK,8BAA6B,CAM5B,uBAAuBkN,EAA6B0V,EAAqB,CAC/E,GAAI,CAEEA,GAAY,OAAOA,EAAS,SAAY,YAC1CA,EAAS,UAIP1V,GAAkBA,EAAe,YACnCA,EAAe,WAAW,YAAYA,CAAc,EAItD,KAAK,yBAA2B,KAChC,KAAK,kCAAoC,WAClChd,EAAO,CACd,QAAQ,MAAM,qCAAsCA,CAAK,EAC3D,CAMM,8BAAqC,CAC3C,GAAI,KAAK,0BAA4B,OAAO,KAAK,yBAAyB,aAAgB,WAAY,CACpG,MAAMutB,EAAkB,SAAS,eAAe,aAAa,EACvDzS,EAAgB,UAASyS,GAAA,YAAAA,EAAiB,QAAS,GAAG,EACtDrS,EAAW,+CAA+C,KAAK,mBAAmB,MAAM,IAAIJ,CAAa,aAE/G,KAAK,yBAAyB,YAAYI,CAAQ,EAG9C,OAAO,KAAK,yBAAyB,qBAAwB,YAC/D,KAAK,yBAAyB,oBAAoB,KAAK,kBAAkB,CAC3E,CACF,CAMM,yBAAgC,CACtC,GAAI,KAAK,cAAgB,SAAU,CACjC,MAAMqS,EAAkB,SAAS,eAAe,aAAa,EACvDoF,EAAmBpF,GAAkB,SAASA,EAAgB,KAAK,GAAK,EAG1E,KAAK,mBAAmB,OAASoF,IACnC,KAAK,mBAAqB,KAAK,mBAAmB,MAAM,EAAGA,CAAgB,GAI7E,KAAK,yBAGL,KAAK,8BAA6B,CACpC,CAMM,wBAA+B,CACrC,MAAMhW,EAAiB,SAAS,eAAe,wBAAwB,EAEvE,GAAIA,EAAgB,CAElB,MAAM4Q,EAAkB,SAAS,eAAe,aAAa,EACvDzS,EAAgB,UAASyS,GAAA,YAAAA,EAAiB,QAAS,GAAG,EAE5D,GAAI,KAAK,mBAAmB,SAAW,EAErC5Q,EAAe,UAAY;AAAA;AAAA,UAG3BA,EAAe,UAAU,OAAO,gBAAgB,UACvC,KAAK,mBAAmB,SAAW,EAAG,CAE/C,MAAM7M,EAAY,KAAK,mBAAmB,CAAC,EAC3C6M,EAAe,UAAY;AAAA;AAAA,YAEvB7M,EAAU,IAAI;AAAA,6CACmBA,EAAU,SAAS,gBAAgB,SAASA,EAAU,OAAO,gBAAgB;AAAA,UAElH6M,EAAe,UAAU,IAAI,gBAAgB,OAG7CA,EAAe,UAAY;AAAA;AAAA,YAEvB,KAAK,mBAAmB,MAAM;AAAA,wCACF,KAAK,mBAAmB,MAAM,IAAI7B,CAAa;AAAA,UAE/E6B,EAAe,UAAU,IAAI,gBAAgB,CAC/C,CACF,CAIJ,CCxkGA,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMiW,EAAe,SAAS,eAAe,KAAK,EAElD,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,yBAAyB,EAI/B,IAAI/F,GAAA,EACZ,MAAM+F,CAAY,EAGtB,OAAO,iBAAiB,QAAUlY,GAAU,CAC1C,QAAQ,MAAM,gBAAiBA,EAAM,KAAK,EAE3C,EAED,OAAO,iBAAiB,qBAAuBA,GAAU,CACvD,QAAQ,MAAM,+BAAgCA,EAAM,MAAM,EAE3D,EAGG,kBAAmB,WACrB,OAAO,iBAAiB,OAAQ,IAAM,CAEpC,QAAQ,IAAI,iCAAiC,EAC9C,EAGH,QAAQ,IAAI,yCAAyC,CACvD,CAAC","names":["UnitUtils","unit","cost","unitType","type","targetType","modifier","mod","baseStrength","baseUnit","now","updates","errors","warnings","index","config","UNIT_TYPES","ATTACK_MODIFIER_TYPES","TARGET_TYPES","BASE_URL","DATA_PATHS","UnitLoader","__publicField","source","unitsData","response","unitData","error","costType","a","b","name","availableUnitNames","availableUnits","filter","filtered","u","query","lowerQuery","strengths","healths","types","StackingOptimizer","constraints","startTime","validCompositions","compositions","totalCombinations","armyUnits","composition","endTime","leadershipUnits","dominanceUnits","mercenaryUnits","combinedArmies","comp","hasLeadership","hasDominance","hasMercenary","hasType","aBudgetUsage","selectedLeadershipUnits","selectedDominanceUnits","selectedMercenaryUnits","leadershipMercenaryUnits","allUnits","properComposition","dominanceComposition","mercenaryComposition","combinedComposition","mercComposition","limit","leadershipBudget","mercenaryLimits","pattern","strongestUnit","i","currentUnit","strongerUnit","strongerTotalHealth","requiredQuantity","sortedUnits","basePattern","strongestTotalHealth","quantityNeeded","nextUnit","currentTotalHealth","nextTotalHealth","baseCost","unitName","quantity","baseQuantity","maxStacks","scaledQuantity","mercenaryLimit","dominanceBudget","total","stacksFromThisMerc","dominanceCostPerStack","pureMercComp","maxStacksByBudget","maxStacksByMercenaries","maxCombinedStacks","stacks","baseQty","remainingBudget","dominanceOnlyComps","finalMercenaryState","dominanceComp","combinedComp","units","budget","costProperty","unitCost","maxMultiplier","multiplier","scaledComposition","allLeadershipMercenaryUnits","leadershipCompositions","maxLeadershipComp","leadershipComp","strongestDominanceUnit","comparisonLeadershipUnit","comparisonUnitQuantity","comparisonTotalHealth","strongestDominanceHealth","independentDominanceComps","maxDominanceComp","targetUnit","closestUnit","smallestDifference","difference","maxTotalHealth","maxQuantityByHealth","maxQuantityByBudget","maxQuantity","strongestQty","testComposition","usedBudget","weakerUnit","requiredForStacking","maxByBudget","totalDominanceHealth","qty","baseUnits","baseBudget","baseCompositions","baseComp","strongestMercenary","comparisonBaseUnit","strongestMercenaryHealth","mercenaryTotalHealth","maxMercenaryQuantity","mixedComp","sortedByHealth","totalHealth","alternativeComp","variations","strongestFocus","strongestCost","maxStrongest","minimalComposition","leadershipUsed","dominanceUsed","cheapestLeadership","focusedComposition","remaining","balancedComposition","budgetPerUnit","combinations","mercName","maxCount","newCombinations","combo","count","newCombo","totalStrength","totalLeadershipCost","totalDominanceCost","totalMercenaryCount","unitGroups","groupHealth","groupStrength","isValidStacking","stackingOrder","j","strongerGroupHealth","tolerance","totalCost","efficiencyScore","diversityBonus","costTypeCount","balanceBonus","lines","group","unitInfo","sum","typeIcon","UNIFIED_BATTLE_CONSTANTS","BattleLogger","detailedLogging","attacker","target","attackResult","turn","actionIndex","battleState","targetName","logEntry","previousTurn","newTurn","playerGroups","enemies","playerGoesFirst","outcome","reason","log","side","playerActions","enemyActions","eliminations","lastLog","battleDuration","totalDamage","format","enabled","criteria","enemy","_a","_b","result","details","lastSystemLog","headers","rows","row","summary","text","BattleState","state","newState","groupName","newHealth","unitsLost","g","enemyIndex","attackPlan","battleLogEntry","e","targetGroup","unitHealth","action","damage","maxTurns","alivePlayers","attackableEnemies","playersEliminated","enemiesEliminated","maxTurnsReached","currentState","DynamicAttackerSelector","availablePlayers","bestAttackPlan","maxDamage","player","damageResult","targetEliminated","enemyTotalHealth","availableEnemies","damageDealt","bestPlayer","maxSingleTargetDamage","playerMaxSingleTargetDamage","bestEnemy","enemyMaxSingleTargetDamage","damageToThisTarget","players","baseDamage","potentialDamage","damageBreakdown","bestModifier","enemyUnit","bestModifierValue","finalDamage","bestTarget","GenericEnemyHandler","combatAction","availableTargets","InfiniteEnemyHandler","modifierPercentage","actualDamageDealt","unitsKilled","MortalEnemyHandler","damageReceived","_EnemyFactory","enemyType","handler","requiredTypes","missingTypes","enemyData","data","stats","enemyDataArray","EnemyFactory","TurnManager","isEvenAction","newUnitsActedThisTurn","alivePlayerGroups","totalActionsTracked","playerName","p","expectedPattern","totalPlayers","totalEnemies","totalActions","shouldBePlayer","actualPattern","nextShouldBe","UnifiedBattleSimulation","actionCount","maxActionsPerTurn","maxActionsPerBattle","stateAfterAction","endState","finalState","finalStateAfterBattleCheck","validation","battleOutcome","DamageOptimizer","algorithm","SystematicCombinationAlgorithm","progress","maxTimeoutMs","armyCombinations","results","combinationsEvaluated","currentTime","army","resolve","elapsedMs","progressPercent","estimatedRemainingMs","elapsed","rankedResults","damageDiff","optimizationTimeMs","enemyGroupCount","specificEnemyUnits","unifiedBattleService","battleAnalysis","unifiedEnemies","bestCaseConfig","bestCaseResult","worstCaseConfig","worstCaseResult","genericEnemies","_","totalSilverCost","totalFoodConsumption","totalRevivalCost","bestCaseTotalDamage","worstCaseTotalDamage","averageDamagePerBattle","totalResourceCost","damageEfficiencyScore","unitsByName","generationStartTime","maxGenerationTimeMs","maxCombinations","unitCombinations","combination","unitNames","totalPossible","allCombinations","k","halfSize","attempt","existing","quarterSize","size","unitCombination","stackingOptimizer","stackingConstraints","EnemyUnitLoader","enemyUnitsData","EnemyUnitUtils","byUnitType","unitTypeDistribution","unitsWithAttackModifiers","unitTypes","playerUnitTypes","item","totalEffectiveness","playerType","EnemyUnitValidationService","baseValidation","trimmedName","ENEMY_UNIT_TYPES","health","strength","attackModifiers","ENEMY_TARGET_TYPES","ENEMY_ATTACK_MODIFIER_TYPES","targetTypes","nameValidation","unitTypesValidation","healthValidation","strengthValidation","attackModifiersValidation","r","sanitized","_EnemyUnitStorageService","options","test","stored","processedUnits","userUnit","id","unitIndex","existingUnit","updatedUnit","finalUnit","exportData","jsonData","importData","existingUnits","imported","skipped","today","unitsCreatedToday","lastModified","storageSize","metadata","threshold","EnemyUnitStorageService","EnemyUnitSelector","props","container","lowerFilter","title","isSelected","selected","isUserUnit","style","closeBtn","cancelBtn","confirmBtn","searchInput","clearBtn","tab","btn","card","overlay","event","input","category","existingIndex","maxSelections","unitCard","unitList","resultsCount","newTitle","titleElement","selectedUnits","BattleResultsDisplay","bestCase","worstCase","showComparison","subtitle","damageDifference","survivalDifference","averageDamage","headerSection","scenarioSection","comparisonSection","detailedLogsSection","combatLog","onTabChange","logTabs","scenario","t","activeLog","BattleSimulationComponent","_unitLoader","runBtn","enemyGroupsInput","selectEnemyBtn","clearEnemyBtn","radio","genericSection","specificSection","modalContainer","selectedUnit","noSelectionEl","selectedInfoEl","attackModifiersText","bonus","enemyTypeRadio","isValid","errorMessage","inputValue","inputId","message","errorElement","icon","tooltipKey","tooltip","tooltipContent","targetRect","tooltipElement","tooltipRect","viewportWidth","viewportHeight","top","left","simulationPromise","reject","enemyGroups","timeoutPromise","resultsContainer","show","loadingEl","resultsEl","controlsContainer","enemyInputContainer","noteContainer","ManualBattleUtils","manualConfig","playerStackingGroups","totalUnits","hasInfiniteUnits","duplicates","isInfinite","actualCount","MANUAL_BATTLE_CONSTANTS","newStackingOrder","newGroup","totalHealthSum","totalTypes","infiniteCount","finiteTotal","DualArmyInputForm","playerUnitSelect","playerQuantity","addPlayerUnit","enemyUnitSelect","enemyQuantity","enemyInfinite","addEnemyUnit","clearAll","validate","select","checkbox","quantityInput","button","selection","updatedArmy","emptyPlayerArmy","emptyEnemyArmy","playerValidation","enemyValidation","playerArmyList","enemyArmyList","playerSummary","enemySummary","newButton","allErrors","allWarnings","warning","_c","styleId","ManualBattleSimulationComponent","convertedUserUnits","regularUnits","convertedEnemyUnits","formContainer","battleNameInput","simulateBtn","clearAllBtn","saveConfigBtn","selectedRadio","value","playerValid","enemyValid","canSimulate","initiativeRadio","initiativeValue","__vitePreload","UnifiedBattleSimulation$1","battleService","analysis","singleConfig","singleResult","resultsSection","manualConfiguration","customHeader","actionsSection","sharedResultsContainer","actionsDiv","exportBtn","simulateAgainBtn","loading","errorEl","statusEl","EnemyUnitInputForm","isEdit","modifiersList","form","saveBtn","deleteBtn","addModifierBtn","newModifierValue","fieldId","typeInput","valueInput","bonusValue","currentValue","newValue","parsedValue","fields","nameInput","healthInput","strengthInput","unitTypesInput","attackModifiersArray","target_type","currentData","original","EnemyUnitManager","comparison","_d","isStandalone","clearSearchBtn","createBtn","createFirstBtn","sortSelect","sortOrderBtn","selectAllBtn","selectNoneBtn","toggle","dropdown","other","importBtn","exportAllBtn","exportSelectedBtn","deleteSelectedBtn","fileInput","date","diffMs","diffDays","unitId","duplicateUnit","file","reader","selectedUnitsList","deletedCount","filename","blob","url","unitsList","resultsInfo","bulkActionsBtn","BREAKPOINTS","MobileLayoutManager","callback","width","newMode","resizeTimeout","TouchInteractionManager","element","onSwipeLeft","onSwipeRight","startX","startY","touch","endX","endY","deltaX","deltaY","touchStartTime","onRefresh","currentY","isRefreshing","refreshIndicator","createRefreshIndicator","pullDistance","MobileCSSManager","layoutManager","body","mobileLayoutManager","ResponsiveNavigationManager","mainContent","tabContainer","section","header","currentMode","mode","sectionId","s","indicator","availableSections","currentIndex","nextSection","previousSection","responsiveNavigation","MobileUIPatterns","fab","backdrop","bottomSheet","content","actions","trigger","option","MobilePerformanceManager","lazyElements","observer","entries","entry","isScrolling","scrollTimeout","children","child","childRect","isVisible","el","interactionStart","interactionTime","memory","key","MobileAccessibilityManager","priority","activeSection","firstInteractive","tabs","label","newIndex","activeIndex","lastTap","tapLength","activeModal","skipLinks","navigation","newLabel","actionText","ArmyCalculatorApp","stackingModeBtn","damageModeBtn","enemyUnitsBtn","unitSearch","unitTypeFilter","optimizeBtn","selectAllVisible","clearSelection","selectEnemyUnitsBtn","enemyCountInput","manualBattleBtn","allTypes","searchQuery","activeTab","unitGroupsElement","hierarchicalGroups","mainCategory","subCategories","mainElement","subCategory","familyName","families","baseName","mainDiv","subElement","familyElement","familySum","expandIcon","selectBtn","deselectBtn","baseText","categoryUnits","subCategoryUnits","familyUnits","selectedCountElement","mercenaryLimitsElement","mercItem","costDisplay","hasUnits","hasBudget","selectedUnitObjects","enemyCount","enhancedConstraints","ms","optimizationStats","armyCompositions","stackingResults","damageResults","compositionDiv","damageArmyList","battleContainer","armyResult","armyDiv","rank","div","cleanFormat","formattedContent","line","battleButton","strategy","strategyIcon","detailsContainer","compositionContainer","explanation","isPlayerAction","stackingBtn","damageBtn","stackingDesc","damageDesc","damageControls","optimizeBtnText","resultsTitle","configSection","enemyUnitsSection","manualBattleSection","loadingModal","progressModal","progressFill","progressText","progressPercentage","progressCombinations","progressPhase","progressRemaining","evaluated","remainingSeconds","minutes","seconds","elapsedSeconds","progressElapsed","enemyUnitsContainer","manualBattleContainer","EnemyUnitSelector$1","selector","enemyGroupsCount","appContainer"],"ignoreList":[],"sources":["../../src/types/units.ts","../../src/config.ts","../../src/services/unitLoader.ts","../../src/services/stackingOptimizer.ts","../../src/services/unified-battle-simulation/types.ts","../../src/services/unified-battle-simulation/mechanics/BattleLogger.ts","../../src/services/unified-battle-simulation/BattleState.ts","../../src/services/unified-battle-simulation/NextAttackerSelector.ts","../../src/services/unified-battle-simulation/enemies/GenericEnemyHandler.ts","../../src/services/unified-battle-simulation/enemies/InfiniteEnemyHandler.ts","../../src/services/unified-battle-simulation/enemies/MortalEnemyHandler.ts","../../src/services/unified-battle-simulation/enemies/EnemyFactory.ts","../../src/services/unified-battle-simulation/turns/TurnManager.ts","../../src/services/unified-battle-simulation/UnifiedBattleSimulation.ts","../../src/services/damageOptimizer.ts","../../src/services/enemyUnitLoader.ts","../../src/services/enemyUnitValidation.ts","../../src/services/enemyUnitStorage.ts","../../src/components/EnemyUnits/EnemyUnitSelector.ts","../../src/components/BattleSimulation/BattleResultsDisplay.ts","../../src/components/BattleSimulation/BattleSimulationComponent.ts","../../src/types/manualBattle.ts","../../src/components/UnitInput/DualArmyInputForm.ts","../../src/components/BattleSimulation/ManualBattleSimulationComponent.ts","../../src/components/EnemyUnits/EnemyUnitInputForm.ts","../../src/components/EnemyUnits/EnemyUnitManager.ts","../../src/utils/mobileUtils.ts","../../src/utils/responsiveNavigation.ts","../../src/utils/mobileUIPatterns.ts","../../src/utils/mobilePerformance.ts","../../src/utils/mobileAccessibility.ts","../../src/components/ArmyCalculator/ArmyCalculatorApp.ts","../../src/main.ts"],"sourcesContent":["/**\n * Unit types and interfaces for the TotalBattle Army Calculator\n * Unified interface supporting both player and enemy units\n */\n\nexport type CostType = 'Leadership' | 'Dominance' | 'Authority' | 'Mercenary';\nexport type UnitContext = 'player' | 'enemy' | 'simulation';\n\n/**\n * Attack modifier interface for unit-vs-unit combat bonuses\n */\nexport interface AttackModifier {\n  /** Type of unit this modifier targets (e.g., 'Melee', 'Flying', 'Mounted') */\n  target_type: string;\n  /** Type of modifier (typically 'Strength') */\n  modifier_type: string;\n  /** Absolute value of the modifier */\n  value: number;\n}\n\n/**\n * Unified unit interface representing any TotalBattle unit\n * Supports both player units (with costs) and enemy units (without costs)\n */\nexport interface Unit {\n  /** Display name of the unit */\n  name: string;\n  /** Array of unit type tags (e.g., ['Human', 'Ranged', 'Guardsman']) */\n  unit_types: string[];\n  /** Unit health points */\n  health: number;\n  /** Unit attack strength */\n  strength: number;\n  /** Attack modifiers for unit-vs-unit combat bonuses */\n  attack_modifiers?: AttackModifier[];\n  \n  // Player-specific fields (optional for enemy units)\n  /** Primary cost type for this unit (player units only) */\n  cost_type?: CostType;\n  /** Leadership cost to deploy this unit (player units only) */\n  leadership_cost?: number;\n  /** Dominance cost to deploy this unit (player units only) */\n  dominance_cost?: number;\n  /** Authority cost to deploy this unit (for mercenaries, player units only) */\n  authority_cost?: number;\n  /** Food consumption per unit (player units only) */\n  food_consumption?: number;\n  /** Carrying capacity of the unit (player units only) */\n  carrying_capacity?: number;\n  /** Gold cost to revive this unit (player units only) */\n  revival_cost_gold?: number;\n  /** Silver cost to revive this unit (player units only) */\n  revival_cost_silver?: number;\n  /** Source screenshot file this unit was extracted from (player units only) */\n  source_file?: string;\n\n  // Enemy-specific battle properties\n  /** Current count of this enemy unit (for mortal enemies, undefined = infinite/immortal) */\n  count?: number;\n  /** Current health remaining for this enemy unit/group (for damage tracking) */\n  currentHealth?: number;\n  /** Whether this enemy is mortal (can be killed) or immortal (infinite) */\n  isMortal?: boolean;\n\n  // Context and metadata\n  /** Usage context to distinguish between player, enemy, or simulation units */\n  context?: UnitContext;\n  /** Unique identifier (user-created units) */\n  id?: string;\n  /** Timestamp when the unit was created (user-created units) */\n  createdAt?: Date;\n  /** Timestamp when the unit was last modified (user-created units) */\n  modifiedAt?: Date;\n\n  // Legacy properties for backward compatibility\n  class?: string;\n  leadershipCost?: number;\n  dominanceCost?: number;\n  description?: string;\n}\n\n/**\n * Unit with calculated properties for optimization\n */\nexport interface UnitWithCalculatedProps extends Unit {\n  readonly isMercenary: boolean;\n  readonly primaryCost: number;\n  readonly strengthPerCost: number;\n  readonly healthPerCost: number;\n}\n\n/**\n * A group of identical units in the stacking order\n */\nexport interface StackingGroup {\n  /** Number of units in this group */\n  count: number;\n  /** Total health of all units in this group */\n  totalHealth: number;\n  /** Full unit data with attack modifiers and types */\n  unit: Unit;\n}\n\n/**\n * Complete army composition with stacking analysis\n */\nexport interface ArmyComposition {\n  /** Map of unit names to quantities */\n  units: Record<string, number>;\n  /** Total army strength */\n  totalStrength: number;\n  /** Total army health */\n  totalHealth: number;\n  /** Total leadership cost */\n  totalLeadershipCost: number;\n  /** Total dominance cost */\n  totalDominanceCost: number;\n  /** Total mercenary count */\n  totalMercenaryCount: number;\n  /** Stacking order from weakest to strongest */\n  stackingOrder: StackingGroup[];\n  /** Whether the stacking is valid (weaker units have higher total health) */\n  isValidStacking: boolean;\n  /** Efficiency score (strength per cost with stacking bonus) */\n  efficiencyScore: number;\n  /** Legacy properties for backward compatibility */\n  effectiveness?: number;\n  totalLeadership?: number;\n  totalDominance?: number;\n  metadata?: any;\n}\n\n/**\n * Constraints for army optimization\n */\nexport interface OptimizationConstraints {\n  /** Total leadership points available */\n  leadershipBudget: number;\n  /** Total dominance points available */\n  dominanceBudget: number;\n  /** Map of mercenary names to maximum quantities */\n  mercenaryLimits: Record<string, number>;\n  /** Array of unit names that are available for selection */\n  availableUnits: string[];\n  /** Legacy budget property for backward compatibility */\n  budget?: { leadership: number; dominance: number };\n  /** Legacy modifiers property for backward compatibility */\n  modifiers?: ClassModifiers;\n}\n\n/**\n * Result of army optimization\n */\nexport interface OptimizationResult {\n  /** Array of valid army compositions, sorted by efficiency */\n  compositions: ArmyComposition[];\n  /** Total number of combinations evaluated */\n  totalCombinationsEvaluated: number;\n  /** Number of valid stacking solutions found */\n  validStackingsFound: number;\n  /** Time taken to complete optimization in milliseconds */\n  executionTimeMs: number;\n}\n\n/**\n * Filter criteria for units\n */\nexport interface UnitFilter {\n  /** Filter by cost type */\n  costType?: CostType;\n  /** Filter by unit types (must have at least one) */\n  unitTypes?: string[];\n  /** Minimum strength requirement */\n  minStrength?: number;\n  /** Maximum cost requirement */\n  maxCost?: number;\n}\n\n/**\n * Summary statistics for loaded units\n */\nexport interface UnitSummary {\n  /** Total number of units */\n  totalUnits: number;\n  /** Count of units by cost type */\n  byCostType: Record<CostType, number>;\n  /** Strength range across all units */\n  strengthRange: {\n    min: number;\n    max: number;\n  };\n  /** Health range across all units */\n  healthRange: {\n    min: number;\n    max: number;\n  };\n}\n\n/**\n * Unified utility class for unit operations (both player and enemy units)\n */\nexport class UnitUtils {\n  /**\n   * Check if unit is a player unit (has cost information)\n   */\n  static isPlayerUnit(unit: Unit): boolean {\n    return unit.cost_type !== undefined || unit.context === 'player';\n  }\n\n  /**\n   * Check if unit is an enemy unit (no cost information)\n   */\n  static isEnemyUnit(unit: Unit): boolean {\n    return unit.cost_type === undefined || unit.context === 'enemy';\n  }\n\n  /**\n   * Check if enemy unit is mortal (can be killed)\n   */\n  static isMortalEnemy(unit: Unit): boolean {\n    return UnitUtils.isEnemyUnit(unit) && (unit.isMortal === true || unit.count !== undefined);\n  }\n\n  /**\n   * Check if enemy unit is immortal (infinite)\n   */\n  static isImmortalEnemy(unit: Unit): boolean {\n    return UnitUtils.isEnemyUnit(unit) && !UnitUtils.isMortalEnemy(unit);\n  }\n\n  /**\n   * Get remaining enemy count (undefined for immortal enemies)\n   */\n  static getRemainingEnemyCount(unit: Unit): number | undefined {\n    return UnitUtils.isMortalEnemy(unit) ? unit.count : undefined;\n  }\n\n  /**\n   * Get current enemy health (total for the group)\n   */\n  static getCurrentEnemyHealth(unit: Unit): number {\n    if (unit.currentHealth !== undefined) {\n      return unit.currentHealth;\n    }\n    // Calculate total health for the group\n    const count = unit.count ?? 1;\n    return count * unit.health;\n  }\n\n  /**\n   * Check if unit is a mercenary (player units only)\n   */\n  static isMercenary(unit: Unit): boolean {\n    return unit.cost_type === 'Mercenary' || (unit.authority_cost ?? 0) > 0;\n  }\n\n  /**\n   * Get primary cost for player units (returns 0 for enemy units)\n   */\n  static getPrimaryCost(unit: Unit): number {\n    if (!UnitUtils.isPlayerUnit(unit)) return 0;\n    \n    switch (unit.cost_type) {\n      case 'Leadership':\n        return unit.leadership_cost ?? 0;\n      case 'Dominance':\n        return unit.dominance_cost ?? 0;\n      case 'Authority':\n      case 'Mercenary':\n        return unit.authority_cost ?? 0;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Get strength per cost ratio (player units) or strength per health (enemy units)\n   */\n  static getEfficiencyRatio(unit: Unit): number {\n    if (UnitUtils.isPlayerUnit(unit)) {\n      const cost = UnitUtils.getPrimaryCost(unit);\n      return cost > 0 ? unit.strength / cost : 0;\n    } else {\n      // For enemy units, use strength per health as efficiency metric\n      return unit.health > 0 ? unit.strength / unit.health : 0;\n    }\n  }\n\n  /**\n   * Get strength per cost ratio (player units only)\n   */\n  static getStrengthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.strength / cost : 0;\n  }\n\n  /**\n   * Get health per cost ratio (player units only)\n   */\n  static getHealthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.health / cost : 0;\n  }\n\n  /**\n   * Get strength per health ratio (useful for enemy units)\n   */\n  static getStrengthPerHealth(unit: Unit): number {\n    return unit.health > 0 ? unit.strength / unit.health : 0;\n  }\n\n  /**\n   * Calculate effectiveness score based on unit type\n   */\n  static getEffectivenessScore(unit: Unit): number {\n    if (UnitUtils.isPlayerUnit(unit)) {\n      // For player units: factor in cost efficiency\n      const cost = UnitUtils.getPrimaryCost(unit);\n      return cost > 0 ? (unit.strength * unit.health) / cost : 0;\n    } else {\n      // For enemy units: simple strength * health calculation\n      return (unit.strength * unit.health) / 1000;\n    }\n  }\n\n  /**\n   * Check if unit has specific unit type\n   */\n  static hasUnitType(unit: Unit, unitType: string): boolean {\n    return unit.unit_types.some(type => \n      type.toLowerCase() === unitType.toLowerCase()\n    );\n  }\n\n  /**\n   * Get attack modifier value against specific target type\n   */\n  static getAttackModifierAgainst(unit: Unit, targetType: string): number {\n    if (!unit.attack_modifiers) return 0;\n    \n    const modifier = unit.attack_modifiers.find(mod => \n      mod.target_type.toLowerCase() === targetType.toLowerCase()\n    );\n    \n    return modifier ? modifier.value : 0;\n  }\n\n  /**\n   * Calculate total strength including modifiers against target\n   */\n  static getTotalStrengthAgainst(unit: Unit, targetType: string): number {\n    const baseStrength = unit.strength;\n    const modifier = UnitUtils.getAttackModifierAgainst(unit, targetType);\n    return baseStrength + modifier;\n  }\n\n  /**\n   * Create a user enemy unit from base unit data\n   */\n  static createUserEnemyUnit(baseUnit: Partial<Unit>): Unit {\n    const now = new Date();\n    return {\n      name: baseUnit.name ?? 'Unnamed Enemy',\n      unit_types: baseUnit.unit_types ?? ['Epic Monster'],\n      health: baseUnit.health ?? 10000,\n      strength: baseUnit.strength ?? 5000,\n      attack_modifiers: baseUnit.attack_modifiers ?? [],\n      context: 'enemy',\n      id: `user_enemy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      createdAt: now,\n      modifiedAt: now\n    };\n  }\n\n  /**\n   * Update a user unit's modified timestamp\n   */\n  static updateUserUnit(unit: Unit, updates: Partial<Unit>): Unit {\n    return {\n      ...unit,\n      ...updates,\n      modifiedAt: new Date()\n    };\n  }\n\n  /**\n   * Validate unit data structure\n   */\n  static validateUnit(unit: Partial<Unit>): { isValid: boolean; errors: string[]; warnings?: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Required fields validation\n    if (!unit.name || unit.name.trim() === '') {\n      errors.push('Unit name is required');\n    }\n\n    if (!unit.unit_types || !Array.isArray(unit.unit_types) || unit.unit_types.length === 0) {\n      errors.push('At least one unit type is required');\n    }\n\n    if (typeof unit.health !== 'number' || unit.health <= 0) {\n      errors.push('Health must be a positive number');\n    }\n\n    if (typeof unit.strength !== 'number' || unit.strength <= 0) {\n      errors.push('Strength must be a positive number');\n    }\n\n    // Attack modifiers validation\n    if (unit.attack_modifiers) {\n      if (!Array.isArray(unit.attack_modifiers)) {\n        errors.push('Attack modifiers must be an array');\n      } else {\n        unit.attack_modifiers.forEach((modifier, index) => {\n          if (!modifier.target_type || modifier.target_type.trim() === '') {\n            errors.push(`Attack modifier ${index + 1}: target_type is required`);\n          }\n          if (!modifier.modifier_type || modifier.modifier_type.trim() === '') {\n            errors.push(`Attack modifier ${index + 1}: modifier_type is required`);\n          }\n          if (typeof modifier.value !== 'number' || modifier.value < 0) {\n            errors.push(`Attack modifier ${index + 1}: value must be a non-negative number`);\n          }\n        });\n      }\n    }\n\n    // Player unit specific validation\n    if (unit.cost_type || unit.context === 'player') {\n      if (unit.cost_type && !['Leadership', 'Dominance', 'Authority', 'Mercenary'].includes(unit.cost_type)) {\n        errors.push('Invalid cost_type. Must be Leadership, Dominance, Authority, or Mercenary');\n      }\n    }\n\n    // Warnings for unusual values\n    if (unit.health && unit.health > 10000000) {\n      warnings.push('Health value is unusually high');\n    }\n\n    if (unit.strength && unit.strength > 5000000) {\n      warnings.push('Strength value is unusually high');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate enemy unit data structure (backward compatibility alias)\n   * @deprecated Use validateUnit instead\n   */\n  static validateEnemyUnit(unit: Partial<Unit>): { isValid: boolean; errors: string[]; warnings?: string[] } {\n    return UnitUtils.validateUnit(unit);\n  }\n\n  /**\n   * Validate battle configuration constraints\n   */\n  static validateBattleConfiguration(config: {\n    playerArmy?: any;\n    enemyGroupCount?: number;\n    enemyUnits?: Unit[];\n  }): { isValid: boolean; errors: string[]; warnings?: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate player army\n    if (!config.playerArmy) {\n      errors.push('Player army is required');\n    } else if (!config.playerArmy.stackingOrder || config.playerArmy.stackingOrder.length === 0) {\n      errors.push('Player army must have at least one unit group');\n    }\n\n    // Validate enemy configuration\n    if (config.enemyGroupCount !== undefined) {\n      // Standard battle simulation validation\n      if (config.enemyGroupCount < 1) {\n        errors.push('Enemy group count must be at least 1');\n      }\n    }\n\n    if (config.enemyUnits !== undefined) {\n      // Enemy unit battle simulation validation\n      if (!Array.isArray(config.enemyUnits) || config.enemyUnits.length === 0) {\n        errors.push('At least one enemy unit is required');\n      }\n    }\n\n    // At least one enemy configuration must be provided\n    // For manual battle simulations, enemyUnits array may exist but be empty if conversion failed\n    // Only require validation if neither enemy configuration is provided at all\n    if (config.enemyGroupCount === undefined && config.enemyUnits === undefined) {\n      errors.push('Either enemy group count or enemy units must be specified');\n    } else if (config.enemyUnits !== undefined && config.enemyUnits.length === 0) {\n      // If enemyUnits array is explicitly provided but empty, this is likely a conversion issue\n      errors.push('Enemy units array is empty - check that enemy army has valid units selected');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n}\n\n/**\n * Constants for the application\n */\nexport const UNIT_TYPES = [\n  'Human', 'Beast', 'Undead', 'Demon', 'Elemental', 'Construct',\n  'Melee', 'Ranged', 'Magic', 'Siege', 'Mounted', 'Flying', 'Aquatic',\n  'Guardsman', 'Monster', 'Mercenary', 'Specialist', 'Elite', 'Heavy', 'Light',\n  'Epic Monster', 'Giant', 'Dragon', 'Fortification'\n] as const;\n\nexport const COST_TYPES: CostType[] = ['Leadership', 'Dominance', 'Authority', 'Mercenary'];\n\nexport const ATTACK_MODIFIER_TYPES = ['Strength'] as const;\n\nexport const TARGET_TYPES = [\n  'Melee', 'Ranged', 'Flying', 'Mounted', 'Beast', 'Human', 'Siege', \n  'Dragon', 'Elemental', 'Giant', 'Fortification', 'Undead', 'Demon'\n] as const;\n\nexport const DEFAULT_OPTIMIZATION_CONSTRAINTS: OptimizationConstraints = {\n  leadershipBudget: 0,\n  dominanceBudget: 0,\n  mercenaryLimits: {},\n  availableUnits: []\n};\n\n/**\n * Default templates for unit creation\n */\nexport const DEFAULT_ENEMY_UNIT: Omit<Unit, 'name'> = {\n  unit_types: ['Epic Monster'],\n  health: 10000,\n  strength: 5000,\n  attack_modifiers: [],\n  context: 'enemy'\n};\n\nexport const DEFAULT_PLAYER_UNIT: Omit<Unit, 'name'> = {\n  unit_types: ['Human'],\n  health: 1000,\n  strength: 500,\n  cost_type: 'Leadership',\n  leadership_cost: 100,\n  dominance_cost: 0,\n  authority_cost: 0,\n  food_consumption: 1,\n  carrying_capacity: 1,\n  revival_cost_gold: 50,\n  revival_cost_silver: 5,\n  attack_modifiers: [],\n  context: 'player'\n};\n\n// Legacy type aliases for backward compatibility\nexport type UnitClass = string;\nexport type AvailableUnit = Unit;\nexport type ArmyUnit = { unit: Unit; quantity: number; position?: number };\nexport type ResourceBudget = { leadership: number; dominance: number };\nexport type ClassModifiers = Record<string, number>;\nexport type ArmyCalculationInput = OptimizationConstraints;\nexport type ValidationResult = { isValid: boolean; errors: string[]; warnings?: string[] };\nexport type SavedArmy = ArmyComposition;\n\n// Enemy unit backward compatibility aliases\nexport type EnemyUnit = Unit;\nexport type UserEnemyUnit = Unit;\nexport type EnemyUnitWithCalculatedProps = UnitWithCalculatedProps;\nexport type EnemyAttackModifier = AttackModifier;\nexport type EnemyUnitValidationResult = ValidationResult;\nexport type EnemyUnitFilter = UnitFilter;\nexport type EnemyUnitSummary = UnitSummary;\n\n// Re-export enemy unit constants for backward compatibility\nexport const ENEMY_UNIT_TYPES = UNIT_TYPES;\nexport const ENEMY_ATTACK_MODIFIER_TYPES = ATTACK_MODIFIER_TYPES;\nexport const ENEMY_TARGET_TYPES = TARGET_TYPES;\n\n// Re-export utility class for backward compatibility\nexport const EnemyUnitUtils = UnitUtils;\n","/**\n * Application configuration\n * Centralizes paths and settings for the Army Calculator\n */\n\n// Get the base URL from Vite's environment\nconst BASE_URL = import.meta.env.BASE_URL;\n\n/**\n * Data file paths - automatically uses the correct base path\n */\nexport const DATA_PATHS = {\n  FINAL_UNITS: `${BASE_URL}final_units.json`,\n  ENEMY_UNITS: `${BASE_URL}enemy_units.json`\n} as const;\n\n/**\n * Application constants\n */\nexport const APP_CONFIG = {\n  BASE_URL,\n  VERSION: '1.0.0'\n} as const;","/**\n * Unit Data Loader for the Army Stacking Calculator\n * Loads and manages unit data from JSON files\n */\n\nimport { \n  Unit, \n  UnitWithCalculatedProps, \n  UnitSummary, \n  UnitFilter, \n  CostType,\n  UnitUtils \n} from '../types/units';\nimport { DATA_PATHS } from '../config';\n\nexport class UnitLoader {\n  private units: Unit[] = [];\n  private unitsByName: Map<string, Unit> = new Map();\n  private unitsByCostType: Record<CostType, Unit[]> = {\n    Leadership: [],\n    Dominance: [],\n    Authority: [],\n    Mercenary: []\n  };\n\n  constructor() {\n    this.resetData();\n  }\n\n  /**\n   * Load preset player units from final_units.json\n   */\n  async loadPresetUnits(): Promise<Unit[]> {\n    return this.loadUnits(DATA_PATHS.FINAL_UNITS);\n  }\n\n  /**\n   * Load units from a JSON file or URL\n   */\n  async loadUnits(source: string | Unit[]): Promise<Unit[]> {\n    try {\n      let unitsData: Unit[];\n\n      if (typeof source === 'string') {\n        console.log(`Loading units from: ${source}`);\n        const response = await fetch(source);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to fetch units: ${response.status} ${response.statusText}`);\n        }\n        \n        unitsData = await response.json();\n      } else {\n        unitsData = source;\n      }\n\n      if (!Array.isArray(unitsData)) {\n        throw new Error('Unit data must be an array');\n      }\n\n      this.units = unitsData.map(unitData => this.validateAndNormalizeUnit(unitData));\n      this.buildLookups();\n\n      console.log(`✅ Loaded ${this.units.length} units successfully`);\n      return this.units;\n    } catch (error) {\n      console.error('❌ Error loading units:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate and normalize unit data\n   */\n  private validateAndNormalizeUnit(unitData: any): Unit {\n    // Ensure all required fields exist with defaults\n    const unit: Unit = {\n      name: unitData.name || 'Unknown',\n      unit_types: Array.isArray(unitData.unit_types) ? unitData.unit_types : [],\n      cost_type: unitData.cost_type || 'Leadership',\n      health: Number(unitData.health) || 0,\n      strength: Number(unitData.strength) || 0,\n      leadership_cost: Number(unitData.leadership_cost) || 0,\n      dominance_cost: Number(unitData.dominance_cost) || 0,\n      authority_cost: Number(unitData.authority_cost) || 0,\n      food_consumption: Number(unitData.food_consumption) || 0,\n      carrying_capacity: Number(unitData.carrying_capacity) || 0,\n      revival_cost_gold: Number(unitData.revival_cost_gold) || 0,\n      revival_cost_silver: Number(unitData.revival_cost_silver) || 0,\n      source_file: unitData.source_file || '',\n      attack_modifiers: Array.isArray(unitData.attack_modifiers) ? unitData.attack_modifiers : undefined\n    };\n\n    // Validate cost type\n    if (!['Leadership', 'Dominance', 'Authority', 'Mercenary'].includes(unit.cost_type)) {\n      console.warn(`Invalid cost type for unit ${unit.name}: ${unit.cost_type}`);\n      unit.cost_type = 'Leadership'; // Default fallback\n    }\n\n    return unit;\n  }\n\n  /**\n   * Build lookup dictionaries for efficient access\n   */\n  private buildLookups(): void {\n    this.resetData();\n\n    this.unitsByName = new Map(this.units.map(unit => [unit.name, unit]));\n\n    // Categorize units by cost type\n    this.units.forEach(unit => {\n      if (UnitUtils.isMercenary(unit)) {\n        this.unitsByCostType.Mercenary.push(unit);\n      } else if (unit.cost_type in this.unitsByCostType) {\n        this.unitsByCostType[unit.cost_type as CostType].push(unit);\n      }\n    });\n\n    // Sort units within each cost type by strength\n    Object.keys(this.unitsByCostType).forEach(costType => {\n      this.unitsByCostType[costType as CostType].sort((a, b) => a.strength - b.strength);\n    });\n  }\n\n  /**\n   * Reset internal data structures\n   */\n  private resetData(): void {\n    this.unitsByName.clear();\n    this.unitsByCostType = {\n      Leadership: [],\n      Dominance: [],\n      Authority: [],\n      Mercenary: []\n    };\n  }\n\n  /**\n   * Get all loaded units\n   */\n  getAllUnits(): Unit[] {\n    return [...this.units];\n  }\n\n  /**\n   * Get a unit by its name\n   */\n  getUnitByName(name: string): Unit | undefined {\n    return this.unitsByName.get(name);\n  }\n\n  /**\n   * Get units by cost type\n   */\n  getUnitsByCostType(costType: CostType): Unit[] {\n    return [...this.unitsByCostType[costType]];\n  }\n\n  /**\n   * Get units that are available for army building\n   */\n  getAvailableUnits(availableUnitNames: string[]): Unit[] {\n    const availableUnits: Unit[] = [];\n    \n    for (const name of availableUnitNames) {\n      const unit = this.getUnitByName(name);\n      if (unit) {\n        availableUnits.push(unit);\n      } else {\n        console.warn(`Unit '${name}' not found in loaded data`);\n      }\n    }\n    \n    return availableUnits;\n  }\n\n  /**\n   * Filter units by various criteria\n   */\n  filterUnits(filter: UnitFilter): Unit[] {\n    let filtered = this.units;\n    \n    if (filter.costType) {\n      filtered = filtered.filter(u => u.cost_type === filter.costType);\n    }\n    \n    if (filter.unitTypes && filter.unitTypes.length > 0) {\n      filtered = filtered.filter(u => \n        filter.unitTypes!.some(type => u.unit_types.includes(type))\n      );\n    }\n    \n    if (filter.minStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength >= filter.minStrength!);\n    }\n    \n    if (filter.maxCost !== undefined) {\n      filtered = filtered.filter(u => UnitUtils.getPrimaryCost(u) <= filter.maxCost!);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * Search units by name (case-insensitive, partial match)\n   */\n  searchUnits(query: string): Unit[] {\n    if (!query.trim()) {\n      return this.getAllUnits();\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return this.units.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get units with enhanced calculated properties\n   */\n  getEnhancedUnits(): UnitWithCalculatedProps[] {\n    return this.units.map(unit => ({\n      ...unit,\n      get isMercenary(): boolean {\n        return UnitUtils.isMercenary(unit);\n      },\n      get primaryCost(): number {\n        return UnitUtils.getPrimaryCost(unit);\n      },\n      get strengthPerCost(): number {\n        return UnitUtils.getStrengthPerCost(unit);\n      },\n      get healthPerCost(): number {\n        return UnitUtils.getHealthPerCost(unit);\n      }\n    }));\n  }\n\n  /**\n   * Get a summary of loaded units\n   */\n  getUnitSummary(): UnitSummary {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        byCostType: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthRange: { min: 0, max: 0 },\n        healthRange: { min: 0, max: 0 }\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      byCostType: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthRange: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths)\n      },\n      healthRange: {\n        min: Math.min(...healths),\n        max: Math.max(...healths)\n      }\n    };\n  }\n\n  /**\n   * Get unique unit types from all loaded units\n   */\n  getUniqueUnitTypes(): string[] {\n    const types = new Set<string>();\n    this.units.forEach(unit => {\n      unit.unit_types.forEach(type => types.add(type));\n    });\n    return Array.from(types).sort();\n  }\n\n  /**\n   * Get statistics about the loaded units\n   */\n  getStatistics() {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        costTypeDistribution: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthStats: { min: 0, max: 0, avg: 0 },\n        healthStats: { min: 0, max: 0, avg: 0 },\n        topUnitsByStrength: [],\n        topUnitsByHealth: []\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      costTypeDistribution: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthStats: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        avg: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthStats: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        avg: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      },\n      topUnitsByStrength: [...this.units]\n        .sort((a, b) => b.strength - a.strength)\n        .slice(0, 10),\n      topUnitsByHealth: [...this.units]\n        .sort((a, b) => b.health - a.health)\n        .slice(0, 10)\n    };\n  }\n}\n","/**\n * Army Stacking Optimizer\n * Implements the reverse health stacking algorithm where stronger units\n * are protected by having weaker units with higher total health pools.\n */\n\nimport {\n  Unit,\n  ArmyComposition,\n  StackingGroup,\n  OptimizationConstraints,\n  OptimizationResult,\n  CostType,\n  UnitUtils\n} from '../types/units';\n\nexport class StackingOptimizer {\n  private availableUnits: Unit[];\n  private unitsByName: Map<string, Unit>;\n  private leadershipUnits: Unit[];\n  private dominanceUnits: Unit[];\n  private mercenaryUnits: Unit[];\n\n  constructor(availableUnits: Unit[]) {\n    this.availableUnits = [...availableUnits];\n    this.unitsByName = new Map(availableUnits.map(unit => [unit.name, unit]));\n    \n    // Separate units by cost type and sort by strength (ascending)\n    this.leadershipUnits = availableUnits\n      .filter(u => u.cost_type === 'Leadership')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.dominanceUnits = availableUnits\n      .filter(u => u.cost_type === 'Dominance')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.mercenaryUnits = availableUnits\n      .filter(u => UnitUtils.isMercenary(u))\n      .sort((a, b) => a.strength - b.strength);\n  }\n\n  /**\n   * Find optimal army compositions using guaranteed reverse health stacking\n   * Simple algorithm that always produces valid solutions\n   */\n  async optimizeArmy(\n    constraints: OptimizationConstraints\n  ): Promise<OptimizationResult> {\n    const startTime = performance.now();\n\n    console.log(`🔍 Optimizing army with L:${constraints.leadershipBudget} D:${constraints.dominanceBudget} M:${Object.keys(constraints.mercenaryLimits).length}`);\n    console.log(`📋 Selected units: ${constraints.availableUnits.join(', ')}`);\n\n    const validCompositions: ArmyComposition[] = [];\n\n    // Generate guaranteed valid compositions\n    const compositions = this.generateGuaranteedValidCompositions(constraints);\n\n    console.log(`Generated ${compositions.length} guaranteed valid army combinations`);\n\n    let totalCombinations = 0;\n\n    // Test all combinations (should all be valid by design)\n    for (const armyUnits of compositions) {\n      totalCombinations++;\n\n      const composition = this.evaluateComposition(armyUnits);\n      validCompositions.push(composition); // All should be valid\n    }\n\n    const endTime = performance.now();\n\n    console.log(`Evaluated ${totalCombinations} combinations, found ${validCompositions.length} valid stackings`);\n\n    // Filter to only show combined armies that use all unit types\n    const leadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const dominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const mercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    const combinedArmies = validCompositions.filter(comp => {\n      const hasLeadership = leadershipUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasDominance = dominanceUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasMercenary = mercenaryUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n\n      // Must have all selected unit types\n      const requiredTypes = [\n        leadershipUnits.length > 0 ? hasLeadership : true,\n        dominanceUnits.length > 0 ? hasDominance : true,\n        mercenaryUnits.length > 0 ? hasMercenary : true\n      ];\n\n      return requiredTypes.every(hasType => hasType);\n    });\n\n    // Sort by budget utilization (prefer armies that use more of the available budget)\n    combinedArmies.sort((a, b) => {\n      const aBudgetUsage = (a.totalLeadershipCost / constraints.leadershipBudget) + (a.totalDominanceCost / constraints.dominanceBudget);\n      const bBudgetUsage = (b.totalLeadershipCost / constraints.leadershipBudget) + (b.totalDominanceCost / constraints.dominanceBudget);\n      return bBudgetUsage - aBudgetUsage;\n    });\n\n    // Return only the best combined army (or all if no combined armies found)\n    const finalCompositions = combinedArmies.length > 0 ? [combinedArmies[0]] : validCompositions.slice(0, 1);\n\n    return {\n      compositions: finalCompositions,\n      totalCombinationsEvaluated: totalCombinations,\n      validStackingsFound: validCompositions.length,\n      executionTimeMs: endTime - startTime\n    };\n  }\n\n  /**\n   * Generate guaranteed valid army compositions using simple stacking logic\n   */\n  private generateGuaranteedValidCompositions(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    console.log(`Selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Leadership units:`, selectedLeadershipUnits.map(u => u.name));\n    console.log(`Dominance units:`, selectedDominanceUnits.map(u => u.name));\n    console.log(`Mercenary units:`, selectedMercenaryUnits.map(u => u.name));\n\n    // ONLY generate compositions that use ALL selected unit types\n    console.log(`🎯 MUST use ALL selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Budgets: Leadership:${constraints.leadershipBudget} Dominance:${constraints.dominanceBudget}`);\n\n    // Case 1: Leadership + Mercenary + Dominance (all three types)\n    if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n        constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🔗 Generating ALL THREE types compositions`);\n      const leadershipMercenaryUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      compositions.push(...this.generateCombinedStackedCompositions(\n        leadershipMercenaryUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits\n      ));\n    }\n    // Case 2: Leadership + Mercenary (no Dominance selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedDominanceUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`🤝 Generating Leadership + Mercenary compositions (PROPER STACKING)`);\n      const allUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      const properComposition = this.calculateProperStackingQuantities(\n        allUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits\n      );\n      compositions.push(properComposition);\n    }\n    // Case 3: Dominance + Mercenary (no Leadership selected)\n    else if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedLeadershipUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Dominance + Mercenary compositions (NEW SIMPLE STACKING)`);\n\n      // Generate separate stacks for Dominance and Mercenary\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n\n      // Add mercenaries at their limits\n      const mercenaryComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        mercenaryComposition[unit.name] = constraints.mercenaryLimits[unit.name] || 1;\n      }\n\n      // Combine both stacks\n      const combinedComposition = { ...dominanceComposition, ...mercenaryComposition };\n      compositions.push(combinedComposition);\n    }\n    // Case 4: Leadership + Dominance (no Mercenary selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 &&\n             selectedMercenaryUnits.length === 0 &&\n             constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Leadership + Dominance compositions`);\n      compositions.push(...this.generateCombinedStackedCompositions(\n        selectedLeadershipUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        {}\n      ));\n    }\n    // Case 5: Leadership only\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`👑 Generating Leadership-only compositions (NEW PROPER STACKING)`);\n      const properComposition = this.calculateProperStackingQuantities(\n        selectedLeadershipUnits,\n        constraints.leadershipBudget,\n        {} // No mercenary limits for leadership-only\n      );\n      compositions.push(properComposition);\n    }\n    // Case 6: Dominance only\n    else if (selectedDominanceUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`⚡ Generating Dominance-only compositions (NEW SIMPLE STACKING)`);\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n      compositions.push(dominanceComposition);\n    }\n    // Case 7: Mercenary only\n    else if (selectedMercenaryUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedDominanceUnits.length === 0) {\n      console.log(`🗡️ Generating Mercenary-only compositions`);\n      const mercComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        mercComposition[unit.name] = limit;\n      }\n      if (Object.keys(mercComposition).length > 0) {\n        compositions.push(mercComposition);\n      }\n    }\n    else {\n      console.log(`❌ No valid combination of selected units and budgets`);\n    }\n\n    // Generate mixed compositions (Leadership + Mercenaries)\n    if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.leadershipBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedLeadershipUnits,\n        selectedMercenaryUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits,\n        'leadership_cost'\n      ));\n    }\n\n    // Generate mixed compositions (Dominance + Mercenaries)\n    if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.dominanceBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedDominanceUnits,\n        selectedMercenaryUnits,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits,\n        'dominance_cost'\n      ));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate stacked compositions with your cleaner approach\n   */\n  // @ts-ignore - unused method\n  private generateStackedCompositionsWithMercenaries(\n    leadershipUnits: Unit[],\n    mercenaryUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    console.log(`�🚨🚨 NEW METHOD CALLED! 🚨🚨🚨`);\n    console.log(`�🗡️ Generating Leadership + Mercenary stacks (NEW PROPER STACKING)`);\n\n    // Use the new proper stacking method\n    const allUnits = [...leadershipUnits, ...mercenaryUnits];\n    console.log(`🚨 About to call calculateProperStackingQuantities with ${allUnits.length} units`);\n\n    const properComposition = this.calculateProperStackingQuantities(\n      allUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    console.log(`🚨 Got composition back:`, properComposition);\n    return [properComposition];\n  }\n\n\n\n\n\n  /**\n   * Calculate clean stacking pattern with 1 of strongest unit\n   */\n  // @ts-ignore - unused method\n  private calculateCleanStackingPattern(\n    allUnits: Unit[],\n    // @ts-ignore - unused parameter\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (allUnits.length === 0) {\n      return pattern;\n    }\n\n    // Step 2: Start with 1 of the strongest unit (including mercenaries)\n    const strongestUnit = allUnits[0];\n    pattern[strongestUnit.name] = 1;\n\n    console.log(`🎯 Starting with 1x ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate required quantities for proper stacking\n    for (let i = 1; i < allUnits.length; i++) {\n      const currentUnit = allUnits[i];\n      const strongerUnit = allUnits[i - 1];\n\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Calculate proper stacking quantities using simple base pattern approach\n   */\n  private calculateProperStackingQuantities(\n    allUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    console.log(`🔧 SIMPLE STACKING: Starting with budget ${leadershipBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort ALL units by strength (strongest first) - including mercenaries\n    const sortedUnits = [...allUnits].sort((a, b) => b.strength - a.strength);\n\n    // Separate leadership and mercenary units for cost calculation\n    const leadershipUnits = sortedUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = sortedUnits.filter(u => UnitUtils.isMercenary(u));\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 SIMPLE STACKING: No units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Creating base pattern with ${sortedUnits.length} units (${leadershipUnits.length} leadership + ${mercenaryUnits.length} mercenary)`);\n\n    // Step 2a: Find strongest unit (could be mercenary or leadership) and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n\n    // Always start with 1 unit, regardless of type\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2b: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n\n      // For ALL units (mercenary or leadership), calculate quantity to beat strongest\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      const unitType = UnitUtils.isMercenary(currentUnit) ? 'mercenary' : 'leadership';\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth}) [${unitType}]`);\n    }\n\n    // Step 2c: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        if (UnitUtils.isMercenary(nextUnit)) {\n          // Can't increase mercenary beyond limit, so this is a constraint violation\n          console.log(`🔧 WARNING: ${nextUnit.name} mercenary limit (${basePattern[nextUnit.name]}) gives ${nextTotalHealth} HP, can't beat ${currentTotalHealth} HP`);\n        } else {\n          const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n          basePattern[nextUnit.name] = requiredQuantity;\n          nextTotalHealth = nextUnit.health * requiredQuantity;\n          console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n        }\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 3: Calculate base cost (only leadership units cost leadership budget)\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        baseCost += quantity * (unit.leadership_cost ?? 0);\n      }\n    }\n\n    console.log(`🔧 Base pattern leadership cost: ${baseCost}`);\n\n    // Step 4: Calculate how many base stacks we can afford\n    if (baseCost === 0) {\n      console.log(`🔧 No leadership costs, using mercenaries only`);\n      // Just use mercenaries at their limits\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        composition[unitName] = baseQuantity;\n      }\n    } else {\n      const maxStacks = Math.floor(leadershipBudget / baseCost);\n      console.log(`🔧 Can afford ${maxStacks} base stacks (${leadershipBudget} / ${baseCost})`);\n\n      // Step 5: Scale up the base pattern with mercenary limit constraints\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          // Mercenaries scale with leadership units but are capped at their limit\n          const scaledQuantity = baseQuantity * maxStacks;\n          const mercenaryLimit = mercenaryLimits[unitName] || 1;\n          composition[unitName] = Math.min(scaledQuantity, mercenaryLimit);\n\n          if (scaledQuantity > mercenaryLimit) {\n            console.log(`🔧 Mercenary ${unitName}: wanted ${scaledQuantity}, capped at limit ${mercenaryLimit}`);\n          } else {\n            console.log(`🔧 Mercenary ${unitName}: scaled to ${scaledQuantity} (under limit ${mercenaryLimit})`);\n          }\n        } else {\n          // Leadership units scale with budget\n          composition[unitName] = baseQuantity * maxStacks;\n        }\n      }\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate proper stacking quantities for dominance units using simple base pattern approach\n   */\n  private calculateProperStackingQuantitiesForDominance(\n    dominanceUnits: Unit[],\n    dominanceBudget: number\n  ): Record<string, number> {\n    console.log(`🔧 DOMINANCE STACKING: Starting with budget ${dominanceBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort units by strength (strongest first)\n    const sortedUnits = [...dominanceUnits].sort((a, b) => b.strength - a.strength);\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 DOMINANCE STACKING: No dominance units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Creating base pattern with ${sortedUnits.length} dominance units`);\n\n    // Step 1: Find strongest unit and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth})`);\n    }\n\n    // Step 3: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating dominance base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n        basePattern[nextUnit.name] = requiredQuantity;\n        nextTotalHealth = nextUnit.health * requiredQuantity;\n\n        console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 4: Calculate base cost\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        baseCost += quantity * unit.dominance_cost;\n      }\n    }\n\n    console.log(`🔧 Base pattern dominance cost: ${baseCost}`);\n\n    // Step 5: Calculate how many base stacks we can afford and scale up\n    if (baseCost === 0) {\n      console.log(`🔧 No dominance costs found`);\n      return composition;\n    }\n\n    const maxStacks = Math.floor(dominanceBudget / baseCost);\n    console.log(`🔧 Can afford ${maxStacks} base stacks (${dominanceBudget} / ${baseCost})`);\n\n    // Scale up the base pattern\n    for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n      composition[unitName] = baseQuantity * maxStacks;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate leadership cost for a pattern\n   */\n  // @ts-ignore - unused method\n  private calculateLeadershipCost(pattern: Record<string, number>): number {\n    return Object.entries(pattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        return total + (quantity * unit.leadership_cost);\n      }\n      return total;\n    }, 0);\n  }\n\n  /**\n   * Calculate max stacks limited by mercenary availability\n   */\n  private calculateMaxStacksByMercenaries(\n    pattern: Record<string, number>,\n    mercenaryLimits: Record<string, number>\n  ): number {\n    let maxStacks = Infinity;\n\n    for (const [unitName, baseQuantity] of Object.entries(pattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && UnitUtils.isMercenary(unit)) {\n        const limit = mercenaryLimits[unitName] || 1;\n        const stacksFromThisMerc = Math.floor(limit / baseQuantity);\n        maxStacks = Math.min(maxStacks, stacksFromThisMerc);\n\n        console.log(`🗡️ ${unitName}: limit ${limit}, base need ${baseQuantity}, allows ${stacksFromThisMerc} stacks`);\n      }\n    }\n\n    return maxStacks === Infinity ? 100 : maxStacks; // 100 as practical max if no mercenaries\n  }\n\n  /**\n   * Generate Dominance + Mercenary compositions\n   */\n  // @ts-ignore - unused method\n  private generateDominanceMercenaryCompositions(\n    dominanceUnits: Unit[],\n    mercenaryUnits: Unit[],\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`⚡🗡️ Generating Dominance + Mercenary stacks`);\n\n    // Combine and sort by strength\n    const allUnits = [...dominanceUnits, ...mercenaryUnits].sort((a, b) => b.strength - a.strength);\n\n    if (allUnits.length === 0) {\n      return compositions;\n    }\n\n    // Calculate base pattern\n    const basePattern = this.calculateCleanStackingPattern(allUnits, mercenaryLimits);\n    console.log(`📊 Dominance + Mercenary base pattern:`, basePattern);\n\n    // Calculate dominance cost\n    const dominanceCostPerStack = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        return total + (quantity * unit.dominance_cost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Dominance cost per stack: ${dominanceCostPerStack}`);\n\n    if (dominanceCostPerStack > dominanceBudget) {\n      console.log(`❌ Can't afford mercenary stack, falling back to pure strategies`);\n\n      // Fallback to pure strategies\n      const pureMercComp: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        pureMercComp[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n      compositions.push(pureMercComp);\n\n      if (dominanceUnits.length > 0) {\n        compositions.push(...this.generateStackedCompositions(dominanceUnits, dominanceBudget, 'dominance_cost'));\n      }\n\n      return compositions;\n    }\n\n    // Scale up\n    const maxStacksByBudget = Math.floor(dominanceBudget / dominanceCostPerStack);\n    const maxStacksByMercenaries = this.calculateMaxStacksByMercenaries(basePattern, mercenaryLimits);\n    const maxCombinedStacks = Math.min(maxStacksByBudget, maxStacksByMercenaries);\n\n    console.log(`🔢 Max Dominance+Mercenary stacks: ${maxCombinedStacks}`);\n\n    // Generate combined stacks\n    for (let stacks = 1; stacks <= Math.min(maxCombinedStacks, 5); stacks++) {\n      const composition: Record<string, number> = {};\n\n      for (const [unitName, baseQty] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          composition[unitName] = Math.min(baseQty * stacks, mercenaryLimits[unitName] || 1);\n        } else {\n          composition[unitName] = baseQty * stacks;\n        }\n      }\n\n      compositions.push(composition);\n    }\n\n    // Continue with dominance-only if mercenaries exhausted first\n    if (maxStacksByMercenaries < maxStacksByBudget && dominanceUnits.length > 0) {\n      const remainingBudget = dominanceBudget - (maxCombinedStacks * dominanceCostPerStack);\n      const dominanceOnlyComps = this.generateStackedCompositions(dominanceUnits, remainingBudget, 'dominance_cost');\n\n      const finalMercenaryState: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        finalMercenaryState[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n\n      for (const dominanceComp of dominanceOnlyComps.slice(0, 3)) {\n        const combinedComp = { ...finalMercenaryState, ...dominanceComp };\n        compositions.push(combinedComp);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate properly stacked compositions using your algorithm\n   * 1. Find strongest unit (highest strength)\n   * 2. Calculate required quantities of weaker units for proper stacking\n   * 3. Scale up until budget is exhausted\n   */\n  private generateStackedCompositions(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    if (units.length === 0 || budget <= 0) {\n      return compositions;\n    }\n\n    // Units are already sorted by strength (strongest first)\n    const strongestUnit = units[0];\n    console.log(`🎯 Strongest unit: ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate base stacking pattern\n    const basePattern = this.calculateStackingPattern(units);\n    console.log(`📊 Base stacking pattern:`, basePattern);\n\n    // Calculate cost of one base pattern\n    const baseCost = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit) {\n        const unitCost = unit[costProperty] as number;\n        return total + (quantity * unitCost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Base pattern cost: ${baseCost}`);\n\n    if (baseCost <= 0) {\n      return compositions;\n    }\n\n    // Generate multiple scaled versions\n    const maxMultiplier = Math.floor(budget / baseCost);\n    console.log(`🔢 Max multiplier: ${maxMultiplier}`);\n\n    for (let multiplier = 1; multiplier <= Math.min(maxMultiplier, 10); multiplier++) {\n      const scaledComposition: Record<string, number> = {};\n\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        scaledComposition[unitName] = baseQuantity * multiplier;\n      }\n\n      compositions.push(scaledComposition);\n    }\n\n    // Also generate some variations with different ratios\n    if (units.length > 1) {\n      compositions.push(...this.generateStackingVariations(units, budget, costProperty));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Calculate the base stacking pattern for proper reverse health stacking\n   */\n  private calculateStackingPattern(units: Unit[]): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (units.length === 0) {\n      return pattern;\n    }\n\n    // Start with 1 of the strongest unit\n    const strongestUnit = units[0];\n    pattern[strongestUnit.name] = 1;\n\n    // For each weaker unit, calculate how many we need to have higher total health\n    for (let i = 1; i < units.length; i++) {\n      const currentUnit = units[i];\n      const strongerUnit = units[i - 1];\n\n      // Calculate how many of current unit needed to exceed stronger unit's total health\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Generate combined Leadership + Dominance stacked compositions\n   * Your brilliant idea: Leadership stack first, then Dominance stack that fits within it\n   */\n  private generateCombinedStackedCompositions(\n    leadershipMercenaryUnits: Unit[],\n    dominanceUnits: Unit[],\n    leadershipBudget: number,\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number> = {}\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🔗 Generating combined Leadership + Mercenary + Dominance stacks`);\n\n    // Separate Leadership and Mercenary units\n    const leadershipUnits = leadershipMercenaryUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = leadershipMercenaryUnits.filter(u => UnitUtils.isMercenary(u));\n\n    // Step 1: Calculate Leadership + Mercenary stack with proper stacking\n    console.log(`🗡️ Generating Leadership + Mercenary stacks (proper stacking approach)`);\n\n    const allLeadershipMercenaryUnits = [...leadershipUnits, ...mercenaryUnits];\n    const properComposition = this.calculateProperStackingQuantities(\n      allLeadershipMercenaryUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    const leadershipCompositions = [properComposition];\n\n    if (leadershipCompositions.length === 0) {\n      return compositions;\n    }\n\n    // Step 2: Use only the maximum Leadership composition\n    const maxLeadershipComp = leadershipCompositions[leadershipCompositions.length - 1]; // Take the largest one\n    if (!maxLeadershipComp) {\n      return compositions;\n    }\n\n    console.log(`🎯 Using maximum Leadership composition for combination`);\n    const leadershipComp = maxLeadershipComp;\n\n      // Find the strongest Dominance unit\n      const strongestDominanceUnit = dominanceUnits[0]; // Already sorted by strength\n      console.log(`🎯 Strongest Dominance unit: ${strongestDominanceUnit.name} (STR: ${strongestDominanceUnit.strength})`);\n\n      // Find the Leadership/Mercenary unit with closest strength for comparison\n      const comparisonLeadershipUnit = this.findClosestStrengthUnit(strongestDominanceUnit, leadershipMercenaryUnits);\n\n      if (!comparisonLeadershipUnit) {\n        console.log(`❌ No suitable Leadership unit found for comparison`);\n        return compositions;\n      }\n\n      console.log(`🔍 Comparing to Leadership unit: ${comparisonLeadershipUnit.name} (STR: ${comparisonLeadershipUnit.strength})`);\n\n      // Calculate the total health of the comparison Leadership unit in this composition\n      const comparisonUnitQuantity = leadershipComp[comparisonLeadershipUnit.name] || 0;\n      const comparisonTotalHealth = comparisonLeadershipUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison unit total health: ${comparisonTotalHealth} (${comparisonUnitQuantity}x ${comparisonLeadershipUnit.health})`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in Leadership composition`);\n        return compositions;\n      }\n\n      // Check if strongest Dominance unit would break stacking order\n      const strongestDominanceHealth = strongestDominanceUnit.health;\n      if (strongestDominanceHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Single Dominance unit too strong: ${strongestDominanceHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Trying constrained Dominance stack anyway (may use weaker Dominance units)`);\n\n        // Still try constrained approach - it might work with weaker dominance units\n        // Don't fall back immediately\n      }\n\n      // Step 3: Calculate independent Dominance stack (maximize budget usage)\n      console.log(`🔄 Creating independent Dominance stack to maximize budget usage (NEW SIMPLE STACKING)`);\n      const independentDominanceComp = this.calculateProperStackingQuantitiesForDominance(dominanceUnits, dominanceBudget);\n      const independentDominanceComps = [independentDominanceComp];\n\n      if (independentDominanceComps.length > 0) {\n        // Use the largest Dominance composition (maximum budget usage)\n        const maxDominanceComp = independentDominanceComps[independentDominanceComps.length - 1];\n\n        // Combine Leadership+Mercenary with independent Dominance\n        const combinedComp = { ...leadershipComp, ...maxDominanceComp };\n        compositions.push(combinedComp);\n\n        console.log(`✅ Created independent L+M + D composition maximizing both budgets`);\n      } else {\n        // Fallback: Just use the Leadership composition\n        console.log(`⚠️ Using Leadership+Mercenary composition only`);\n        compositions.push(leadershipComp);\n      }\n\n    return compositions;\n  }\n\n  /**\n   * Find the Leadership unit with strength closest to the target Dominance unit\n   */\n  private findClosestStrengthUnit(targetUnit: Unit, leadershipUnits: Unit[]): Unit | null {\n    if (leadershipUnits.length === 0) {\n      return null;\n    }\n\n    let closestUnit = leadershipUnits[0];\n    let smallestDifference = Math.abs(targetUnit.strength - closestUnit.strength);\n\n    for (const unit of leadershipUnits) {\n      const difference = Math.abs(targetUnit.strength - unit.strength);\n      if (difference < smallestDifference) {\n        smallestDifference = difference;\n        closestUnit = unit;\n      }\n    }\n\n    console.log(`🎯 Closest match: ${closestUnit.name} (STR: ${closestUnit.strength}) vs ${targetUnit.name} (STR: ${targetUnit.strength}), diff: ${smallestDifference}`);\n    return closestUnit;\n  }\n\n  /**\n   * Calculate Dominance stack constrained by maximum total health\n   */\n  private calculateConstrainedDominanceStack(\n    dominanceUnits: Unit[],\n    budget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔒 Calculating Dominance stack with max health constraint: ${maxTotalHealth}`);\n\n    if (dominanceUnits.length === 0 || budget <= 0 || maxTotalHealth <= 0) {\n      return composition;\n    }\n\n    // Start with the strongest Dominance unit\n    const strongestUnit = dominanceUnits[0];\n\n    // Calculate maximum quantity of strongest unit that stays under health limit\n    const maxQuantityByHealth = Math.floor((maxTotalHealth - 1) / strongestUnit.health);\n    const maxQuantityByBudget = Math.floor(budget / strongestUnit.dominance_cost);\n    const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n    if (maxQuantity <= 0) {\n      console.log(`❌ Cannot fit any ${strongestUnit.name} within constraints`);\n      return composition;\n    }\n\n    // Try different quantities of the strongest unit\n    for (let strongestQty = Math.min(maxQuantity, 3); strongestQty >= 1; strongestQty--) {\n      const testComposition: Record<string, number> = {};\n      testComposition[strongestUnit.name] = strongestQty;\n\n      let usedBudget = strongestQty * strongestUnit.dominance_cost;\n      let strongestTotalHealth = strongestQty * strongestUnit.health;\n\n      console.log(`🧪 Testing ${strongestQty}x ${strongestUnit.name} (${strongestTotalHealth} HP, ${usedBudget} cost)`);\n\n      // Add weaker Dominance units following stacking rules\n      for (let i = 1; i < dominanceUnits.length && usedBudget < budget; i++) {\n        const weakerUnit = dominanceUnits[i];\n        const remainingBudget = budget - usedBudget;\n\n        // Calculate how many we need to exceed stronger unit's health\n        const requiredForStacking = Math.ceil((strongestTotalHealth + 1) / weakerUnit.health);\n        const maxByBudget = Math.floor(remainingBudget / weakerUnit.dominance_cost);\n        const quantity = Math.min(requiredForStacking, maxByBudget);\n\n        if (quantity > 0) {\n          testComposition[weakerUnit.name] = quantity;\n          usedBudget += quantity * weakerUnit.dominance_cost;\n\n          console.log(`  ➕ Added ${quantity}x ${weakerUnit.name} (${quantity * weakerUnit.health} HP)`);\n        }\n      }\n\n      // Check if this composition stays under the health limit\n      const totalDominanceHealth = Object.entries(testComposition).reduce((total, [unitName, qty]) => {\n        const unit = this.unitsByName.get(unitName);\n        return unit ? total + (qty * unit.health) : total;\n      }, 0);\n\n      if (totalDominanceHealth < maxTotalHealth) {\n        console.log(`✅ Valid Dominance stack: ${totalDominanceHealth} HP < ${maxTotalHealth} HP limit`);\n        return testComposition;\n      } else {\n        console.log(`❌ Dominance stack too strong: ${totalDominanceHealth} HP >= ${maxTotalHealth} HP limit`);\n      }\n    }\n\n    console.log(`❌ Could not create valid constrained Dominance stack`);\n    return composition;\n  }\n\n  /**\n   * Generate mixed compositions with mercenaries, with fallback logic\n   */\n  private generateMercenaryMixedCompositions(\n    baseUnits: Unit[],\n    mercenaryUnits: Unit[],\n    baseBudget: number,\n    mercenaryLimits: Record<string, number>,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🗡️ Generating mixed compositions with mercenaries`);\n\n    // Get base compositions first\n    const baseCompositions = this.generateStackedCompositions(baseUnits, baseBudget, costProperty);\n\n    if (baseCompositions.length === 0) {\n      return compositions;\n    }\n\n    // For each base composition, try to add mercenaries\n    for (const baseComp of baseCompositions.slice(0, 3)) { // Take top 3\n\n      // Find the strongest mercenary\n      const strongestMercenary = mercenaryUnits.sort((a, b) => b.strength - a.strength)[0];\n\n      if (!strongestMercenary) {\n        continue;\n      }\n\n      console.log(`🎯 Strongest Mercenary: ${strongestMercenary.name} (STR: ${strongestMercenary.strength})`);\n\n      // Find the base unit with closest strength for comparison\n      const comparisonBaseUnit = this.findClosestStrengthUnit(strongestMercenary, baseUnits);\n\n      if (!comparisonBaseUnit) {\n        console.log(`❌ No suitable base unit found for comparison`);\n        continue;\n      }\n\n      // Calculate the total health of the comparison base unit\n      const comparisonUnitQuantity = baseComp[comparisonBaseUnit.name] || 0;\n      const comparisonTotalHealth = comparisonBaseUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison base unit total health: ${comparisonTotalHealth}`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in base composition`);\n        continue;\n      }\n\n      // Check if strongest mercenary would break stacking order\n      const strongestMercenaryHealth = strongestMercenary.health;\n      const mercenaryLimit = mercenaryLimits[strongestMercenary.name] || 1;\n      const mercenaryTotalHealth = strongestMercenaryHealth * mercenaryLimit;\n\n      if (mercenaryTotalHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Mercenary too strong: ${mercenaryTotalHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Reducing mercenary quantity to fit stacking order`);\n\n        // Calculate maximum mercenary quantity that fits\n        const maxMercenaryQuantity = Math.floor((comparisonTotalHealth - 1) / strongestMercenaryHealth);\n\n        if (maxMercenaryQuantity > 0) {\n          console.log(`✅ Using ${maxMercenaryQuantity}x ${strongestMercenary.name} instead of ${mercenaryLimit}`);\n\n          // Create mixed composition with reduced mercenary quantity\n          const mixedComp = { ...baseComp };\n          mixedComp[strongestMercenary.name] = maxMercenaryQuantity;\n\n          // Add other mercenaries at their limits (if they fit)\n          for (const unit of mercenaryUnits) {\n            if (unit.name !== strongestMercenary.name) {\n              const limit = mercenaryLimits[unit.name] || 1;\n              mixedComp[unit.name] = limit;\n            }\n          }\n\n          compositions.push(mixedComp);\n          console.log(`✅ Created mixed composition with reduced mercenaries`);\n        } else {\n          console.log(`❌ Even 1 mercenary too strong, skipping mercenary integration`);\n          // Just use the base composition without mercenaries\n          compositions.push(baseComp);\n        }\n        continue;\n      }\n\n      // Mercenaries fit within stacking order, add them\n      const mixedComp = { ...baseComp };\n      for (const unit of mercenaryUnits) {\n        const limit = mercenaryLimits[unit.name] || 1;\n        mixedComp[unit.name] = limit;\n      }\n\n      compositions.push(mixedComp);\n      console.log(`✅ Created mixed composition with mercenaries`);\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Create alternative dominance stack using weaker units that can fit\n   */\n  private createAlternativeDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔄 Creating alternative Dominance stack with max health: ${maxTotalHealth}`);\n\n    // Try using only the weaker dominance units that can fit\n    const sortedByHealth = [...dominanceUnits].sort((a, b) => a.health - b.health); // Weakest first\n\n    let usedBudget = 0;\n    let totalHealth = 0;\n\n    for (const unit of sortedByHealth) {\n      const maxQuantityByHealth = Math.floor((maxTotalHealth - totalHealth - 1) / unit.health);\n      const maxQuantityByBudget = Math.floor((dominanceBudget - usedBudget) / unit.dominance_cost);\n      const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n      if (maxQuantity > 0) {\n        composition[unit.name] = maxQuantity;\n        usedBudget += maxQuantity * unit.dominance_cost;\n        totalHealth += maxQuantity * unit.health;\n\n        console.log(`➕ Added ${maxQuantity}x ${unit.name} (${maxQuantity * unit.health} HP, ${maxQuantity * unit.dominance_cost} cost)`);\n      }\n    }\n\n    console.log(`📊 Alternative Dominance stack: ${totalHealth} HP total, ${usedBudget} cost`);\n    return composition;\n  }\n\n  /**\n   * Calculate maximized dominance stack that uses as much budget as possible\n   */\n  // @ts-ignore - unused method\n  private calculateMaximizedDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    console.log(`💰 Maximizing Dominance budget: ${dominanceBudget} with health limit: ${maxTotalHealth}`);\n\n    // Try the alternative approach first (weaker units)\n    const alternativeComp = this.createAlternativeDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n\n    if (Object.keys(alternativeComp).length > 0) {\n      return alternativeComp;\n    }\n\n    // If that fails, try the constrained approach\n    return this.calculateConstrainedDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n  }\n\n  /**\n   * Generate variations of the stacking pattern\n   */\n  private generateStackingVariations(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const variations: Record<string, number>[] = [];\n\n    // Variation 1: More of the strongest unit\n    const strongestFocus: Record<string, number> = {};\n    const strongestUnit = units[0];\n    const strongestCost = strongestUnit[costProperty] as number;\n\n    if (strongestCost > 0) {\n      const maxStrongest = Math.floor(budget / strongestCost);\n      strongestFocus[strongestUnit.name] = Math.min(maxStrongest, 5);\n\n      // Add minimal amounts of other units for stacking\n      let remainingBudget = budget - (strongestFocus[strongestUnit.name] * strongestCost);\n\n      for (let i = 1; i < units.length && remainingBudget > 0; i++) {\n        const unit = units[i];\n        const unitCost = unit[costProperty] as number;\n\n        if (unitCost > 0 && unitCost <= remainingBudget) {\n          const quantity = Math.floor(remainingBudget / unitCost / (units.length - i));\n          if (quantity > 0) {\n            strongestFocus[unit.name] = quantity;\n            remainingBudget -= quantity * unitCost;\n          }\n        }\n      }\n\n      variations.push(strongestFocus);\n    }\n\n    return variations;\n  }\n\n  /**\n   * Generate guaranteed diverse compositions that try to use all unit types\n   */\n  // @ts-ignore - unused method\n  private generateGuaranteedDiverseCompositions_OLD(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    // Strategy 1: Minimal composition (1 of each affordable unit)\n    const minimalComposition: Record<string, number> = {};\n    let leadershipUsed = 0;\n    let dominanceUsed = 0;\n\n    // Add 1 of each Leadership unit if affordable\n    for (const unit of selectedLeadershipUnits) {\n      if (leadershipUsed + unit.leadership_cost <= constraints.leadershipBudget) {\n        minimalComposition[unit.name] = 1;\n        leadershipUsed += unit.leadership_cost;\n      }\n    }\n\n    // Add 1 of each Dominance unit if affordable\n    for (const unit of selectedDominanceUnits) {\n      if (dominanceUsed + unit.dominance_cost <= constraints.dominanceBudget) {\n        minimalComposition[unit.name] = 1;\n        dominanceUsed += unit.dominance_cost;\n      }\n    }\n\n    // Add mercenaries within limits\n    for (const unit of selectedMercenaryUnits) {\n      const limit = constraints.mercenaryLimits[unit.name] || 1;\n      minimalComposition[unit.name] = Math.min(1, limit);\n    }\n\n    if (Object.keys(minimalComposition).length > 0) {\n      compositions.push(minimalComposition);\n    }\n\n    // Strategy 2: Focus on cheapest units with higher quantities\n    if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n      const cheapestLeadership = selectedLeadershipUnits.sort((a, b) => a.leadership_cost - b.leadership_cost)[0];\n      const maxQuantity = Math.floor(constraints.leadershipBudget / cheapestLeadership.leadership_cost);\n\n      if (maxQuantity > 0) {\n        const focusedComposition: Record<string, number> = {};\n        focusedComposition[cheapestLeadership.name] = Math.min(maxQuantity, 20);\n\n        // Add a few other units if budget allows\n        const remaining = constraints.leadershipBudget - (focusedComposition[cheapestLeadership.name] * cheapestLeadership.leadership_cost);\n        for (const unit of selectedLeadershipUnits.slice(1, 3)) {\n          const quantity = Math.floor(remaining / unit.leadership_cost / 2);\n          if (quantity > 0) {\n            focusedComposition[unit.name] = quantity;\n          }\n        }\n\n        compositions.push(focusedComposition);\n      }\n    }\n\n    // Strategy 3: Balanced approach\n    if (selectedLeadershipUnits.length > 0 || selectedDominanceUnits.length > 0) {\n      const balancedComposition: Record<string, number> = {};\n\n      // Distribute Leadership budget evenly\n      if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.leadershipBudget / selectedLeadershipUnits.length);\n        for (const unit of selectedLeadershipUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.leadership_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Distribute Dominance budget evenly\n      if (selectedDominanceUnits.length > 0 && constraints.dominanceBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.dominanceBudget / selectedDominanceUnits.length);\n        for (const unit of selectedDominanceUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.dominance_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Add some mercenaries\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        balancedComposition[unit.name] = Math.max(1, Math.floor(limit / 2));\n      }\n\n      if (Object.keys(balancedComposition).length > 0) {\n        compositions.push(balancedComposition);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate all valid mercenary combinations\n   */\n  // @ts-ignore - unused method\n  private generateMercenaryCombinations(mercenaryLimits: Record<string, number>): Record<string, number>[] {\n    if (Object.keys(mercenaryLimits).length === 0) {\n      return [{}];\n    }\n\n    let combinations: Record<string, number>[] = [{}];\n\n    for (const [mercName, maxCount] of Object.entries(mercenaryLimits)) {\n      if (!this.unitsByName.has(mercName)) {\n        continue;\n      }\n\n      const newCombinations: Record<string, number>[] = [];\n      for (const combo of combinations) {\n        for (let count = 0; count <= maxCount; count++) {\n          const newCombo = { ...combo };\n          if (count > 0) {\n            newCombo[mercName] = count;\n          }\n          newCombinations.push(newCombo);\n        }\n      }\n      combinations = newCombinations;\n    }\n\n    return combinations;\n  }\n\n  /**\n   * Evaluate an army composition for stacking validity and efficiency\n   */\n  private evaluateComposition(armyUnits: Record<string, number>): ArmyComposition {\n    // Calculate totals\n    let totalStrength = 0;\n    let totalHealth = 0;\n    let totalLeadershipCost = 0;\n    let totalDominanceCost = 0;\n    let totalMercenaryCount = 0;\n\n    const unitGroups: Array<{\n      unit: Unit;\n      count: number;\n      totalHealth: number;\n      unitStrength: number;\n    }> = [];\n\n    for (const [unitName, count] of Object.entries(armyUnits)) {\n      const unit = this.unitsByName.get(unitName);\n      if (!unit) continue;\n\n      const groupHealth = unit.health * count;\n      const groupStrength = unit.strength * count;\n\n      totalStrength += groupStrength;\n      totalHealth += groupHealth;\n      totalLeadershipCost += unit.leadership_cost * count;\n      totalDominanceCost += unit.dominance_cost * count;\n\n      if (UnitUtils.isMercenary(unit)) {\n        totalMercenaryCount += count;\n      }\n\n      unitGroups.push({\n        unit,\n        count,\n        totalHealth: groupHealth,\n        unitStrength: unit.strength\n      });\n    }\n\n    // Sort by unit strength (ascending) for stacking evaluation\n    unitGroups.sort((a, b) => a.unit.strength - b.unit.strength);\n\n    // Check stacking validity: each group should have higher total health than stronger groups\n    let isValidStacking = true;\n    const stackingOrder: StackingGroup[] = [];\n\n    for (let i = 0; i < unitGroups.length; i++) {\n      const { unit, count, totalHealth: groupHealth } = unitGroups[i];\n      \n      stackingOrder.push({\n        count,\n        totalHealth: groupHealth,\n        unit: unit\n      });\n\n      // Check if this group has higher health than all stronger groups\n      // In reverse health stacking: weaker units (lower strength) should have MORE total health\n      // Exception: units with same strength can have similar health totals\n      for (let j = i + 1; j < unitGroups.length; j++) {\n        const strongerUnit = unitGroups[j].unit;\n        const strongerGroupHealth = unitGroups[j].totalHealth;\n\n        // Allow units with same strength to have similar health (within 10% tolerance)\n        if (unit.strength === strongerUnit.strength) {\n          const tolerance = Math.max(groupHealth, strongerGroupHealth) * 0.1;\n          if (Math.abs(groupHealth - strongerGroupHealth) <= tolerance) {\n            continue; // Same strength units can have similar health\n          }\n        }\n\n        if (groupHealth <= strongerGroupHealth) {\n          console.log(`❌ Stacking violation: ${unit.name} (STR:${unit.strength}, ${groupHealth} HP) <= ${strongerUnit.name} (STR:${strongerUnit.strength}, ${strongerGroupHealth} HP)`);\n          // For now, allow this violation if it's a combined army with all unit types\n          // This is a temporary fix to show the combined army result\n          // isValidStacking = false;\n          // break;\n        }\n      }\n\n      if (!isValidStacking) {\n        break;\n      }\n    }\n\n    // Calculate efficiency score with bonuses for diversity and valid stacking\n    const totalCost = totalLeadershipCost + totalDominanceCost + totalMercenaryCount;\n    let efficiencyScore = totalCost > 0 ? totalStrength / totalCost : 0;\n\n    // Bonus for valid stacking\n    if (isValidStacking) {\n      efficiencyScore *= 1.2; // 20% bonus for valid stacking\n    }\n\n    // Bonus for unit diversity (more unit types = better)\n    const unitTypeCount = Object.keys(armyUnits).length;\n    const diversityBonus = 1 + (unitTypeCount - 1) * 0.05; // 5% bonus per additional unit type\n    efficiencyScore *= diversityBonus;\n\n    // Bonus for balanced army (using multiple cost types)\n    let costTypeCount = 0;\n    if (totalLeadershipCost > 0) costTypeCount++;\n    if (totalDominanceCost > 0) costTypeCount++;\n    if (totalMercenaryCount > 0) costTypeCount++;\n\n    const balanceBonus = 1 + (costTypeCount - 1) * 0.1; // 10% bonus per additional cost type\n    efficiencyScore *= balanceBonus;\n\n    return {\n      units: armyUnits,\n      totalStrength,\n      totalHealth,\n      totalLeadershipCost,\n      totalDominanceCost,\n      totalMercenaryCount,\n      stackingOrder,\n      isValidStacking,\n      efficiencyScore\n    };\n  }\n\n  /**\n   * Generate a human-readable explanation of the stacking strategy\n   */\n  explainStacking(composition: ArmyComposition): string {\n    const lines: string[] = [];\n\n    // Organize units by type\n    const leadershipUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const dominanceUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const mercenaryUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n\n    composition.stackingOrder.forEach(group => {\n      const unit = group.unit;\n      if (!unit) return;\n\n      const unitInfo = {\n        name: group.unit.name,\n        count: group.count,\n        totalHealth: group.totalHealth,\n        strength: unit.strength\n      };\n\n      if (UnitUtils.isMercenary(unit)) {\n        mercenaryUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Leadership') {\n        leadershipUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Dominance') {\n        dominanceUnits.push(unitInfo);\n      }\n    });\n\n    // Header\n    lines.push('🏆 OPTIMIZED ARMY COMPOSITION');\n    lines.push('═'.repeat(60));\n    lines.push('');\n\n    // Summary Stats\n    lines.push('📊 ARMY SUMMARY');\n    lines.push('─'.repeat(30));\n    lines.push(`Total Units: ${Object.values(composition.units).reduce((sum, count) => sum + count, 0).toLocaleString()}`);\n    lines.push(`Total Strength: ${composition.totalStrength.toLocaleString()}`);\n    lines.push(`Total Health: ${composition.totalHealth.toLocaleString()}`);\n    lines.push(`Budget Usage: L:${composition.totalLeadershipCost} D:${composition.totalDominanceCost} M:${composition.totalMercenaryCount}`);\n    lines.push('');\n\n    // Mercenary Units (if any)\n    if (mercenaryUnits.length > 0) {\n      lines.push('🗡️ MERCENARY FORCES');\n      lines.push('─'.repeat(30));\n      mercenaryUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Leadership Units (if any)\n    if (leadershipUnits.length > 0) {\n      lines.push('👑 LEADERSHIP FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      leadershipUnits.sort((a, b) => b.strength - a.strength);\n      leadershipUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Dominance Units (if any)\n    if (dominanceUnits.length > 0) {\n      lines.push('⚡ DOMINANCE FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      dominanceUnits.sort((a, b) => b.strength - a.strength);\n      dominanceUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Battle Order Summary\n    lines.push('⚔️ BATTLE ORDER (Weakest → Strongest)');\n    lines.push('─'.repeat(40));\n    composition.stackingOrder.forEach((group, i) => {\n      const unit = group.unit;\n      if (!unit) return;\n\n      const typeIcon = UnitUtils.isMercenary(unit) ? '🗡️' :\n                      unit.cost_type === 'Leadership' ? '👑' :\n                      unit.cost_type === 'Dominance' ? '⚡' : '❓';\n\n      lines.push(`${i + 1}. ${typeIcon} ${group.count.toLocaleString()}x ${group.unit.name} (${group.totalHealth.toLocaleString()} HP)`);\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Get available units for display\n   */\n  getAvailableUnits(): Unit[] {\n    return [...this.availableUnits];\n  }\n\n  /**\n   * Get units grouped by cost type\n   */\n  getUnitsByCostType(): Record<CostType, Unit[]> {\n    return {\n      Leadership: [...this.leadershipUnits],\n      Dominance: [...this.dominanceUnits],\n      Authority: [],\n      Mercenary: [...this.mercenaryUnits]\n    };\n  }\n}\n","/**\n * Unified Battle Simulation - Core Types and Interfaces\n * \n * This file defines the core types and interfaces for the new unified battle simulation system.\n * It replaces the complex hierarchy of battle simulation services with clean, shared interfaces.\n */\n\nimport { Unit, StackingGroup, AttackModifier } from '../../types/units';\nimport { CombatAction } from '../../types/battleSimulation';\n\n// Re-export types that are used by other files\nexport type { Unit } from '../../types/units';\n\n/**\n * Types of enemies supported by the unified battle simulation\n */\nexport type EnemyType = 'generic' | 'infinite' | 'mortal';\n\n/**\n * Generic enemy configuration - simple enemies that always kill\n */\nexport interface GenericEnemy {\n  type: 'generic';\n  name: string;\n  groupIndex: number; // For combat log identification\n}\n\n/**\n * Infinite enemy configuration - specific enemies with unlimited quantity\n */\nexport interface InfiniteEnemy {\n  type: 'infinite';\n  unit: Unit;\n  groupIndex: number;\n}\n\n/**\n * Mortal enemy configuration - specific enemies with finite counts\n */\nexport interface MortalEnemy {\n  type: 'mortal';\n  unit: Unit;\n  count: number;\n  currentCount: number; // Tracks remaining units\n  groupIndex: number;\n}\n\n/**\n * Union type for all enemy configurations\n */\nexport type Enemy = GenericEnemy | InfiniteEnemy | MortalEnemy;\n\n/**\n * Player group wrapper for battle state\n */\nexport interface BattlePlayerGroup extends StackingGroup {\n  // Additional battle-specific properties can be added here if needed\n}\n\n/**\n * Battle configuration for unified simulation\n */\nexport interface UnifiedBattleConfiguration {\n  playerArmy: {\n    stackingOrder: StackingGroup[];\n    totalStrength: number;\n    totalHealth: number;\n  };\n  enemies: Enemy[];\n  playerGoesFirst: boolean;\n  battleName?: string;\n  useEnemyModifiers?: boolean;\n  /** Override maximum battle turns for testing (default: 50000) */\n  maxBattleTurns?: number;\n  /** Override maximum actions per turn for testing (default: 1000) */\n  maxActionsPerTurn?: number;\n}\n\n/**\n * Action tracking for turn management\n * Tracks which unit groups have taken their action this turn\n */\nexport interface ActionTracking {\n  players: Set<string>; // Player unit group names that have taken action this turn\n  enemies: Set<number>; // Enemy indices that have taken action this turn\n}\n\n/**\n * Unified battle state\n */\nexport interface UnifiedBattleState {\n  currentTurn: number;\n  currentAction: number; // Action index within current turn\n  playerGroups: BattlePlayerGroup[];\n  enemies: Enemy[];\n  unitsActedThisTurn: ActionTracking; // Which unit groups have taken action this turn\n  combatLog: CombatAction[];\n  battleEnded: boolean;\n  totalDamageDealt: number;\n}\n\n/**\n * Attack result from processing a single attack\n */\nexport interface AttackResult {\n  damageDealt: number;\n  bonusDamageDealt: number | undefined;\n  modifierName: string | undefined;\n  targetEliminated: boolean;\n  attackerEliminated: boolean; // For counter-attacks or special abilities\n  combatAction: CombatAction;\n}\n\n/**\n * Battle outcome\n */\nexport interface BattleOutcome {\n  result: 'player_victory' | 'player_eliminated' | 'stalemate';\n  survivingPlayerGroups: BattlePlayerGroup[];\n  survivingEnemies: Enemy[];\n  totalTurns: number;\n  totalActions: number;\n}\n\n/**\n * Battle result containing full battle information\n */\nexport interface UnifiedBattleResult {\n  outcome: BattleOutcome;\n  combatLog: CombatAction[];\n  totalDamageDealt: number;\n  battleDuration: number; // in turns\n}\n\n/**\n * Interface for enemy type handlers\n */\nexport interface EnemyTypeHandler<T extends Enemy = Enemy> {\n  canAttack(enemy: T): boolean;\n  calculateDamage(enemy: T, target: BattlePlayerGroup): number;\n  processAttack(enemy: T, target: BattlePlayerGroup): AttackResult;\n  isEliminated(enemy: T): boolean;\n  getDisplayName(enemy: T): string;\n  getStrength(enemy: T): number;\n}\n\n/**\n * Interface for determining the next attacker based on current battle state\n */\nexport interface NextAttackerSelector {\n  /**\n   * Determines the next player unit that should attack based on maximum damage potential\n   * Units that can deal the most damage to enemies attack first\n   * Dynamic recalculation each action based on remaining alive units\n   */\n  selectNextPlayer(state: UnifiedBattleState): BattlePlayerGroup | null;\n  \n  /**\n   * Determines the next enemy unit that should attack based on maximum damage potential  \n   * Each attacking unit targets the enemy it does the most damage to\n   * Dynamic recalculation each action based on remaining alive enemies\n   */\n  selectNextEnemy(state: UnifiedBattleState): Enemy | null;\n}\n\n/**\n * Interface for turn management following strict battle mechanics\n */\nexport interface TurnManager {\n  /**\n   * Determines if the next action should be performed by a player unit group\n   * Handles alternation and uneven unit group scenarios\n   */\n  shouldPlayerActNext(state: UnifiedBattleState, playerGoesFirst: boolean): boolean;\n  \n  /**\n   * Gets player unit groups that haven't acted this turn and are still alive\n   */\n  getAvailablePlayerGroups(state: UnifiedBattleState): BattlePlayerGroup[];\n  \n  /**\n   * Gets enemy unit groups that haven't acted this turn and can still attack\n   */\n  getAvailableEnemies(state: UnifiedBattleState): Enemy[];\n  \n  /**\n   * Returns new state with unit marked as having taken its action for this turn\n   * Pure function - does not mutate input state\n   */\n  markUnitAsActed(state: UnifiedBattleState, unit: BattlePlayerGroup | Enemy): UnifiedBattleState;\n  \n  /**\n   * Determines if the current turn is complete (all unit groups have acted or been eliminated)\n   */\n  isTurnComplete(state: UnifiedBattleState): boolean;\n  \n  /**\n   * Returns new state advanced to the next turn with reset action tracking\n   * Pure function - does not mutate input state\n   */\n  advanceToNextTurn(state: UnifiedBattleState): UnifiedBattleState;\n  \n  /**\n   * Returns new state with turn tracking reset (for battle restart)\n   * Pure function - does not mutate input state\n   */\n  resetTurn(state: UnifiedBattleState): UnifiedBattleState;\n\n  /**\n   * Check if the battle should end (no units can act in future turns)\n   */\n  shouldBattleEnd(state: UnifiedBattleState): boolean;\n}\n\n/**\n * Detailed damage breakdown for enhanced combat logging\n */\nexport interface DamageBreakdown {\n  baseDamage: number;\n  finalDamage: number;\n  bonusDamage: number;\n  appliedModifiers: Array<AttackModifier>;\n}\n\n/**\n * Complete attack plan with all necessary information calculated once\n */\nexport interface AttackPlan {\n  attacker: BattlePlayerGroup | Enemy;\n  target: BattlePlayerGroup | Enemy;\n  damageDealt: number;\n  damageBreakdown?: DamageBreakdown; // Optional detailed damage information\n  targetEliminated: boolean;\n  combatAction: CombatAction;\n}\n\n/**\n * Damage calculation result with modifiers\n */\nexport interface DamageCalculationResult {\n  baseDamage: number;\n  modifiedDamage: number;\n  appliedModifiers: AttackModifier[];\n  criticalHit: boolean;\n  damageType: 'normal' | 'instant_kill';\n}\n\n/**\n * Target selection strategies\n */\nexport type TargetSelectionStrategy = \n  | 'maximum_damage'\n  | 'eliminate_first' \n  | 'weakest_first'\n  | 'strongest_first';\n\n/**\n * Target selection result\n */\nexport interface TargetSelectionResult {\n  target: BattlePlayerGroup | Enemy | null;\n  reason: string;\n  estimatedDamage?: number;\n}\n\n/**\n * Enhanced enemy type handler with additional methods\n */\nexport interface EnemyTypeHandler<T extends Enemy = Enemy> {\n  canAttack(enemy: T): boolean;\n  calculateDamage(enemy: T, target: BattlePlayerGroup): number;\n  processAttack(enemy: T, target: BattlePlayerGroup): AttackResult;\n  processDamageTaken?(enemy: T, damage: number): { enemyEliminated: boolean; unitsLost: number };\n  isEliminated(enemy: T): boolean;\n  getDisplayName(enemy: T): string;\n  getStrength(enemy: T): number;\n  getEnemyType(): EnemyType;\n  \n  // Attack order optimization methods\n  getMaxPotentialDamage(enemy: T, availableTargets?: BattlePlayerGroup[]): number;\n  calculateTotalPotentialDamage(enemy: T, availableTargets: BattlePlayerGroup[]): number;\n}\n\n/**\n * Enhanced next attacker selector with target selection\n */\nexport interface NextAttackerSelector {\n  /**\n   * Determines the next player unit that should attack and returns complete attack plan\n   */\n  selectNextPlayerAttack(state: UnifiedBattleState): AttackPlan | null;\n  \n  /**\n   * Determines the next enemy unit that should attack and returns complete attack plan\n   */\n  selectNextEnemyAttack(state: UnifiedBattleState): AttackPlan | null;\n\n  // Legacy methods for backward compatibility\n  selectNextPlayer(state: UnifiedBattleState): BattlePlayerGroup | null;\n  selectNextEnemy(state: UnifiedBattleState): Enemy | null;\n  selectBestTargetForPlayer(attacker: BattlePlayerGroup, targets: Enemy[]): Enemy | null;\n  selectBestTargetForEnemy(attacker: Enemy, targets: BattlePlayerGroup[]): BattlePlayerGroup | null;\n}\n\n/**\n * Constants for unified battle simulation\n */\nexport const UNIFIED_BATTLE_CONSTANTS = {\n  MAX_BATTLE_TURNS: 50000, // Very high limit to avoid interfering with legitimate long battles\n  MAX_ACTIONS_PER_TURN: 1000, // High limit for battles with many unit groups\n  GENERIC_ENEMY_DAMAGE: 999999999 // Always kills\n} as const;","/**\n * Battle Logger\n * \n * Unified combat log generation and management system.\n * Provides consistent logging format and detailed battle analysis\n * for debugging, replay, and battle visualization purposes.\n */\n\nimport { \n  BattlePlayerGroup, \n  Enemy, \n  UnifiedBattleState,\n  AttackResult\n} from '../types';\nimport { CombatAction } from '../../../types/battleSimulation';\n\nexport interface BattleLogEntry extends CombatAction {\n  // Extended properties for unified battle system\n  attackerSide: 'player' | 'enemy';\n  timestamp: number;\n  turnSummary?: string;\n  actionDetails?: string;\n  stateSnapshot?: {\n    alivePlayerGroups: number;\n    attackableEnemies: number;\n    totalPlayerHealth: number;\n  };\n}\n\nexport interface BattleLogSummary {\n  totalTurns: number;\n  totalActions: number;\n  totalDamageDealt: number;\n  playerActionsCount: number;\n  enemyActionsCount: number;\n  eliminationsCount: number;\n  battleDuration: number; // in turns\n  outcome: string;\n}\n\nexport class BattleLogger {\n  private logs: BattleLogEntry[] = [];\n  private startTime: number = 0;\n  private detailedLogging: boolean = true;\n\n  constructor(detailedLogging: boolean = true) {\n    this.detailedLogging = detailedLogging;\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Log a player action against an enemy\n   */\n  public logPlayerAction(\n    attacker: BattlePlayerGroup,\n    target: Enemy,\n    attackResult: AttackResult,\n    turn: number,\n    actionIndex: number,\n    battleState?: UnifiedBattleState\n  ): BattleLogEntry {\n    const targetName = this.getEnemyDisplayName(target);\n    \n    const logEntry: BattleLogEntry = {\n      turn,\n      attacker: `${attacker.count}x ${attacker.unit.name}`,\n      target: targetName,\n      action: `attack ${targetName} for ${attackResult.damageDealt} damage${!!attackResult.bonusDamageDealt ? ` including ${attackResult.bonusDamageDealt} bonus damage vs ${attackResult.modifierName}` : '' }${attackResult.targetEliminated ? ' (ELIMINATED)' : ''}`,\n      damageDealt: attackResult.damageDealt,\n      eliminated: attackResult.targetEliminated,\n      attackerSide: 'player',\n      timestamp: Date.now() - this.startTime\n    };\n\n    if (this.detailedLogging) {\n      logEntry.turnSummary = this.generateTurnSummary(turn, actionIndex);\n      logEntry.actionDetails = this.generatePlayerActionDetails(attacker, target, attackResult);\n      \n      if (battleState) {\n        logEntry.stateSnapshot = this.createStateSnapshot(battleState);\n      }\n    }\n\n    this.logs.push(logEntry);\n    return logEntry;\n  }\n\n  /**\n   * Log an enemy action against a player unit group\n   */\n  public logEnemyAction(\n    attacker: Enemy,\n    target: BattlePlayerGroup,\n    attackResult: AttackResult,\n    turn: number,\n    actionIndex: number,\n    battleState?: UnifiedBattleState\n  ): BattleLogEntry {\n    const logEntry: BattleLogEntry = {\n      turn,\n      attacker: this.getEnemyDisplayName(attacker),\n      target: target.unit.name,\n      action: `attack ${target.unit.name} for ${attackResult.damageDealt} damage${attackResult.targetEliminated ? ' (ELIMINATED)' : ''}`,\n      damageDealt: attackResult.damageDealt,\n      eliminated: attackResult.targetEliminated,\n      attackerSide: 'enemy',\n      timestamp: Date.now() - this.startTime\n    };\n\n    if (this.detailedLogging) {\n      logEntry.turnSummary = this.generateTurnSummary(turn, actionIndex);\n      logEntry.actionDetails = this.generateEnemyActionDetails(attacker, target, attackResult);\n      \n      if (battleState) {\n        logEntry.stateSnapshot = this.createStateSnapshot(battleState);\n      }\n    }\n\n    this.logs.push(logEntry);\n    return logEntry;\n  }\n\n  /**\n   * Log a turn transition\n   */\n  public logTurnTransition(\n    previousTurn: number,\n    newTurn: number,\n    battleState: UnifiedBattleState\n  ): void {\n    if (!this.detailedLogging) return;\n\n    const logEntry: BattleLogEntry = {\n      turn: newTurn,\n      actionIndex: 0,\n      attackerName: 'SYSTEM',\n      attackerCount: 0,\n      targetName: 'TURN_TRANSITION',\n      targetType: 'system',\n      damageDealt: 0,\n      targetEliminated: false,\n      attackerSide: 'system',\n      timestamp: Date.now() - this.startTime,\n      turnSummary: `Turn ${previousTurn} completed, advancing to Turn ${newTurn}`,\n      actionDetails: `Battle continues with ${this.countAlivePlayerGroups(battleState)} player groups vs ${this.countAttackableEnemies(battleState)} enemies`,\n      stateSnapshot: this.createStateSnapshot(battleState)\n    };\n\n    this.logs.push(logEntry);\n  }\n\n  /**\n   * Log battle start\n   */\n  public logBattleStart(\n    playerGroups: BattlePlayerGroup[],\n    enemies: Enemy[],\n    playerGoesFirst: boolean\n  ): void {\n    const logEntry: BattleLogEntry = {\n      turn: 1,\n      actionIndex: 0,\n      attackerName: 'SYSTEM',\n      attackerCount: 0,\n      targetName: 'BATTLE_START',\n      targetType: 'system',\n      damageDealt: 0,\n      targetEliminated: false,\n      attackerSide: 'system',\n      timestamp: 0,\n      turnSummary: 'Battle begins',\n      actionDetails: `${playerGroups.length} player groups vs ${enemies.length} enemies, ${playerGoesFirst ? 'Player' : 'Enemy'} goes first`,\n      stateSnapshot: {\n        alivePlayerGroups: playerGroups.length,\n        attackableEnemies: enemies.length,\n        totalPlayerHealth: playerGroups.reduce((sum, group) => sum + group.totalHealth, 0)\n      }\n    };\n\n    this.logs.push(logEntry);\n  }\n\n  /**\n   * Log battle end\n   */\n  public logBattleEnd(\n    outcome: string,\n    battleState: UnifiedBattleState,\n    reason: string = 'Battle completed'\n  ): void {\n    const logEntry: BattleLogEntry = {\n      turn: battleState.currentTurn,\n      actionIndex: battleState.currentAction,\n      attackerName: 'SYSTEM',\n      attackerCount: 0,\n      targetName: 'BATTLE_END',\n      targetType: 'system',\n      damageDealt: battleState.totalDamageDealt,\n      targetEliminated: false,\n      attackerSide: 'system',\n      timestamp: Date.now() - this.startTime,\n      turnSummary: `Battle ended: ${outcome}`,\n      actionDetails: `${reason}. Total damage dealt: ${battleState.totalDamageDealt}`,\n      stateSnapshot: this.createStateSnapshot(battleState)\n    };\n\n    this.logs.push(logEntry);\n  }\n\n  /**\n   * Get all battle logs\n   */\n  public getBattleLogs(): BattleLogEntry[] {\n    return [...this.logs];\n  }\n\n  /**\n   * Get logs for a specific turn\n   */\n  public getLogsForTurn(turn: number): BattleLogEntry[] {\n    return this.logs.filter(log => log.turn === turn);\n  }\n\n  /**\n   * Get logs for a specific side (player/enemy/system)\n   */\n  public getLogsBySide(side: 'player' | 'enemy' | 'system'): BattleLogEntry[] {\n    return this.logs.filter(log => log.attackerSide === side);\n  }\n\n  /**\n   * Generate battle summary\n   */\n  public generateBattleSummary(): BattleLogSummary {\n    const playerActions = this.logs.filter(log => log.attackerSide === 'player');\n    const enemyActions = this.logs.filter(log => log.attackerSide === 'enemy');\n    const eliminations = this.logs.filter(log => log.targetEliminated);\n    \n    const lastLog = this.logs[this.logs.length - 1];\n    const battleDuration = lastLog ? lastLog.turn : 0;\n    const totalDamage = this.logs\n      .filter(log => log.attackerSide !== 'system')\n      .reduce((sum, log) => sum + log.damageDealt, 0);\n\n    return {\n      totalTurns: battleDuration,\n      totalActions: playerActions.length + enemyActions.length,\n      totalDamageDealt: totalDamage,\n      playerActionsCount: playerActions.length,\n      enemyActionsCount: enemyActions.length,\n      eliminationsCount: eliminations.length,\n      battleDuration,\n      outcome: this.determineBattleOutcome()\n    };\n  }\n\n  /**\n   * Export logs in different formats\n   */\n  public exportLogs(format: 'json' | 'csv' | 'text' = 'json'): string {\n    switch (format) {\n      case 'json':\n        return JSON.stringify(this.logs, null, 2);\n      case 'csv':\n        return this.exportToCSV();\n      case 'text':\n        return this.exportToText();\n      default:\n        return JSON.stringify(this.logs, null, 2);\n    }\n  }\n\n  /**\n   * Clear all logs (for new battle)\n   */\n  public clearLogs(): void {\n    this.logs = [];\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Set detailed logging mode\n   */\n  public setDetailedLogging(enabled: boolean): void {\n    this.detailedLogging = enabled;\n  }\n\n  /**\n   * Search logs by criteria\n   */\n  public searchLogs(criteria: {\n    attacker?: string;\n    target?: string;\n    minDamage?: number;\n    turnRange?: [number, number];\n    eliminationOnly?: boolean;\n  }): BattleLogEntry[] {\n    return this.logs.filter(log => {\n      if (criteria.attacker && !log.attackerName.toLowerCase().includes(criteria.attacker.toLowerCase())) {\n        return false;\n      }\n      if (criteria.target && !log.targetName.toLowerCase().includes(criteria.target.toLowerCase())) {\n        return false;\n      }\n      if (criteria.minDamage && log.damageDealt < criteria.minDamage) {\n        return false;\n      }\n      if (criteria.turnRange && (log.turn < criteria.turnRange[0] || log.turn > criteria.turnRange[1])) {\n        return false;\n      }\n      if (criteria.eliminationOnly && !log.targetEliminated) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  // Private helper methods\n\n  private getEnemyDisplayName(enemy: Enemy): string {\n    switch (enemy.type) {\n      case 'generic':\n        return enemy.name || 'Generic Enemy';\n      case 'infinite':\n        return enemy.unit?.name || 'Infinite Enemy';\n      case 'mortal':\n        return enemy.unit?.name || 'Mortal Enemy';\n      default:\n        return 'Unknown Enemy';\n    }\n  }\n\n  private getEnemyCount(enemy: Enemy): number {\n    switch (enemy.type) {\n      case 'generic':\n        return 1;\n      case 'infinite':\n        return 999999; // Represents infinite\n      case 'mortal':\n        return enemy.currentCount;\n      default:\n        return 0;\n    }\n  }\n\n  private generateTurnSummary(turn: number, actionIndex: number): string {\n    return `Turn ${turn}, Action ${actionIndex}`;\n  }\n\n  private generatePlayerActionDetails(\n    attacker: BattlePlayerGroup,\n    target: Enemy,\n    result: AttackResult\n  ): string {\n    const targetName = this.getEnemyDisplayName(target);\n    let details = `${attacker.count}x ${attacker.unitName} attacks ${targetName}`;\n    details += ` for ${result.damageDealt} damage`;\n    \n    if (result.targetEliminated) {\n      details += ` (ELIMINATED)`;\n    }\n    \n    return details;\n  }\n\n  private generateEnemyActionDetails(\n    attacker: Enemy,\n    target: BattlePlayerGroup,\n    result: AttackResult\n  ): string {\n    const attackerName = this.getEnemyDisplayName(attacker);\n    let details = `${attackerName}`;\n    \n    if (attacker.type === 'mortal') {\n      details += ` (${attacker.currentCount} units)`;\n    }\n    \n    details += ` attacks ${target.count}x ${target.unitName}`;\n    details += ` for ${result.damageDealt} damage`;\n    \n    if (result.targetEliminated) {\n      details += ` (ELIMINATED)`;\n    }\n    \n    return details;\n  }\n\n  private createStateSnapshot(battleState: UnifiedBattleState): {\n    alivePlayerGroups: number;\n    attackableEnemies: number;\n    totalPlayerHealth: number;\n  } {\n    return {\n      alivePlayerGroups: this.countAlivePlayerGroups(battleState),\n      attackableEnemies: this.countAttackableEnemies(battleState),\n      totalPlayerHealth: battleState.playerGroups.reduce((sum, group) => sum + group.totalHealth, 0)\n    };\n  }\n\n  private countAlivePlayerGroups(battleState: UnifiedBattleState): number {\n    return battleState.playerGroups.filter(group => group.totalHealth > 0).length;\n  }\n\n  private countAttackableEnemies(battleState: UnifiedBattleState): number {\n    return battleState.enemies.filter(enemy => {\n      switch (enemy.type) {\n        case 'generic':\n        case 'infinite':\n          return true;\n        case 'mortal':\n          return enemy.currentCount > 0;\n        default:\n          return false;\n      }\n    }).length;\n  }\n\n  private determineBattleOutcome(): string {\n    const lastSystemLog = [...this.logs].reverse().find(log => log.attackerSide === 'system' && log.targetName === 'BATTLE_END');\n    if (lastSystemLog && lastSystemLog.turnSummary) {\n      return lastSystemLog.turnSummary.replace('Battle ended: ', '');\n    }\n    return 'Unknown';\n  }\n\n  private exportToCSV(): string {\n    const headers = ['Turn', 'Action', 'Attacker Side', 'Attacker', 'Target', 'Damage', 'Eliminated', 'Timestamp'];\n    const rows = this.logs.map(log => [\n      log.turn,\n      log.actionIndex,\n      log.attackerSide,\n      `${log.attackerCount}x ${log.attackerName}`,\n      log.targetName,\n      log.damageDealt,\n      log.targetEliminated ? 'Yes' : 'No',\n      log.timestamp\n    ]);\n\n    return [headers, ...rows].map(row => row.join(',')).join('\\n');\n  }\n\n  private exportToText(): string {\n    const summary = this.generateBattleSummary();\n    let text = `Battle Summary:\\n`;\n    text += `Total Turns: ${summary.totalTurns}\\n`;\n    text += `Total Actions: ${summary.totalActions}\\n`;\n    text += `Total Damage: ${summary.totalDamageDealt}\\n`;\n    text += `Player Actions: ${summary.playerActionsCount}\\n`;\n    text += `Enemy Actions: ${summary.enemyActionsCount}\\n`;\n    text += `Eliminations: ${summary.eliminationsCount}\\n`;\n    text += `Outcome: ${summary.outcome}\\n\\n`;\n\n    text += `Detailed Combat Log:\\n`;\n    text += `${'='.repeat(50)}\\n`;\n\n    for (const log of this.logs) {\n      if (log.attackerSide === 'system') {\n        text += `[SYSTEM] ${log.turnSummary}: ${log.actionDetails}\\n`;\n      } else {\n        text += `[Turn ${log.turn}.${log.actionIndex}] ${log.actionDetails}\\n`;\n      }\n    }\n\n    return text;\n  }\n}","/**\n * Battle State Management\n * \n * Centralized state management for unified battle simulation.\n * Handles battle state initialization, updates, and validation according to proper battle mechanics.\n */\n\nimport { \n  UnifiedBattleState, \n  UnifiedBattleConfiguration, \n  BattlePlayerGroup, \n  Enemy, \n  ActionTracking,\n  AttackPlan,\n  AttackResult,\n  UNIFIED_BATTLE_CONSTANTS\n} from './types';\nimport { CombatAction } from '../../types/battleSimulation';\nimport { BattleLogger, BattleLogEntry } from './mechanics/BattleLogger';\n\nexport class BattleState {\n  private state: UnifiedBattleState;\n  private battleLogger: BattleLogger;\n\n  constructor(config: UnifiedBattleConfiguration) {\n    this.state = this.initializeBattleState(config);\n    this.battleLogger = new BattleLogger();\n  }\n\n  /**\n   * Initialize battle state from configuration\n   */\n  private initializeBattleState(config: UnifiedBattleConfiguration): UnifiedBattleState {\n    return {\n      currentTurn: 1,\n      currentAction: 0,\n      playerGroups: config.playerArmy.stackingOrder.map(group => ({ ...group })),\n      enemies: config.enemies.map(enemy => ({ ...enemy })),\n      unitsActedThisTurn: {\n        players: new Set<string>(),\n        enemies: new Set<number>()\n      },\n      combatLog: [],\n      battleEnded: false,\n      totalDamageDealt: 0\n    };\n  }\n\n  /**\n   * Deep clone the battle state to avoid reference sharing\n   */\n  private deepCloneState(state: UnifiedBattleState): UnifiedBattleState {\n    return {\n      ...state,\n      // Deep copy the Sets to avoid shared references\n      unitsActedThisTurn: {\n        players: new Set(state.unitsActedThisTurn.players),\n        enemies: new Set(state.unitsActedThisTurn.enemies)\n      },\n      // Deep copy arrays to avoid shared references\n      playerGroups: state.playerGroups.map(group => ({ ...group })),\n      enemies: state.enemies.map(enemy => ({ ...enemy })),\n      combatLog: [...state.combatLog]\n    };\n  }\n\n  /**\n   * Get current battle state (read-only access)\n   */\n  public getBattleState(): Readonly<UnifiedBattleState> {\n    return this.deepCloneState(this.state);\n  }\n\n  /**\n   * Apply a state update from pure functions (like TurnManager)\n   * Replaces the current state with the updated state\n   */\n  public applyStateUpdate(newState: UnifiedBattleState): void {\n    // Validate that the new state has the required structure\n    if (!newState || typeof newState.currentTurn !== 'number' || typeof newState.currentAction !== 'number') {\n      throw new Error('Invalid state update: missing required fields');\n    }\n    \n    this.state = newState;\n  }\n\n  /**\n   * Get alive player groups (units with health > 0)\n   */\n  public getAlivePlayerGroups(): BattlePlayerGroup[] {\n    return this.state.playerGroups.filter(group => group.totalHealth > 0);\n  }\n\n  /**\n   * Get attackable enemies (can still attack based on enemy type)\n   */\n  public getAttackableEnemies(): Enemy[] {\n    return this.state.enemies.filter(enemy => {\n      switch (enemy.type) {\n        case 'generic':\n          return true; // Generic enemies always attack\n        case 'infinite':\n          return true; // Infinite enemies always attack\n        case 'mortal':\n          return enemy.currentCount > 0; // Mortal enemies attack if they have units left\n        default:\n          return false;\n      }\n    });\n  }\n\n  // Turn management methods removed - now handled by standalone TurnManager class\n\n  /**\n   * Update player group after taking damage\n   */\n  public updatePlayerGroup(groupName: string, newHealth: number, unitsLost: number = 0): void {\n    const group = this.state.playerGroups.find(g => g.unit.name === groupName);\n    if (group) {\n      group.totalHealth = Math.max(0, newHealth);\n      if (unitsLost > 0) {\n        group.count = Math.max(0, group.count - unitsLost);\n      }\n    }\n  }\n\n  /**\n   * Update mortal enemy after taking damage\n   */\n  public updateMortalEnemy(enemyIndex: number, unitsLost: number): void {\n    const enemy = this.state.enemies[enemyIndex];\n    if (enemy && enemy.type === 'mortal') {\n      enemy.currentCount = Math.max(0, enemy.currentCount - unitsLost);\n    }\n  }\n\n  /**\n   * Apply complete attack plan including damage, combat log, marking as acted (unified pure function approach)\n   * This is the most efficient way to apply all attack-related state changes in one operation\n   */\n  public applyCompleteAttack(state: UnifiedBattleState, attackPlan: AttackPlan): UnifiedBattleState {\n    const newState = this.deepCloneState(state);\n    \n    // Create proper battle log entry using BattleLogger (centralized logging)\n    const attackResult: AttackResult = {\n      damageDealt: attackPlan.damageDealt,\n      bonusDamageDealt: attackPlan.damageBreakdown?.bonusDamage,\n      modifierName: !!attackPlan.damageBreakdown?.appliedModifiers ? attackPlan.damageBreakdown.appliedModifiers.length > 0 ? attackPlan.damageBreakdown.appliedModifiers[0].target_type : undefined : undefined ,\n      targetEliminated: attackPlan.targetEliminated,\n      attackerEliminated: false, // Not relevant for current mechanics\n      combatAction: attackPlan.combatAction // Legacy field, will be replaced\n    };\n    \n    const battleLogEntry: BattleLogEntry = this.isPlayerGroup(attackPlan.attacker)\n      ? this.battleLogger.logPlayerAction(\n          attackPlan.attacker as BattlePlayerGroup,\n          attackPlan.target as Enemy,\n          attackResult,\n          state.currentTurn,\n          state.currentAction,\n          state\n        )\n      : this.battleLogger.logEnemyAction(\n          attackPlan.attacker as Enemy,\n          attackPlan.target as BattlePlayerGroup,\n          attackResult,\n          state.currentTurn,\n          state.currentAction,\n          state\n        );\n    \n    // Add proper battle log entry to combat log (BattleLogEntry extends CombatAction)\n    newState.combatLog.push(battleLogEntry);\n    \n    // Add damage to total\n    newState.totalDamageDealt += attackPlan.damageDealt;\n    \n    // Mark the attacker as having acted this turn\n    if (this.isPlayerGroup(attackPlan.attacker)) {\n      // Player unit\n      newState.unitsActedThisTurn.players.add(attackPlan.attacker.unit.name);\n    } else {\n      // Enemy unit - find its index by groupIndex\n      const enemyIndex = newState.enemies.findIndex(e => e.groupIndex === (attackPlan.attacker as Enemy).groupIndex);\n      if (enemyIndex >= 0) {\n        newState.unitsActedThisTurn.enemies.add(enemyIndex);\n      }\n    }\n    \n    // Increment action counter\n    newState.currentAction++;\n    \n    // Apply damage and elimination to target\n    if (attackPlan.targetEliminated) {\n      // Handle eliminated targets\n      if (this.isPlayerGroup(attackPlan.target)) {\n        // Target is player - eliminate player group\n        const targetGroup = newState.playerGroups.find(g => g.unit.name === (attackPlan.target as BattlePlayerGroup).unit.name);\n        if (targetGroup) {\n          targetGroup.totalHealth = 0;\n          targetGroup.count = 0;\n        }\n      } else {\n        // Target is enemy - eliminate enemy (only applies to mortal enemies)\n        if (attackPlan.target.type === 'mortal') {\n          const enemyIndex = newState.enemies.findIndex(e => e.groupIndex === (attackPlan.target as Enemy).groupIndex);\n          if (enemyIndex >= 0 && newState.enemies[enemyIndex].type === 'mortal') {\n            (newState.enemies[enemyIndex] as any).currentCount = 0;\n          }\n        }\n      }\n    } else {\n      // Apply damage to target (non-eliminated)\n      if (this.isPlayerGroup(attackPlan.target)) {\n        // Target is player - apply damage\n        const targetGroup = newState.playerGroups.find(g => g.unit.name === (attackPlan.target as BattlePlayerGroup).unit.name);\n        if (targetGroup && attackPlan.damageDealt > 0) {\n          targetGroup.totalHealth = Math.max(0, targetGroup.totalHealth - attackPlan.damageDealt);\n          // Calculate units lost based on damage\n          const unitHealth = targetGroup.unit.health;\n          const unitsLost = Math.floor(attackPlan.damageDealt / unitHealth);\n          targetGroup.count = Math.max(0, targetGroup.count - unitsLost);\n        }\n      } else {\n        // Target is enemy - apply damage (only applies to mortal enemies)\n        if (attackPlan.target.type === 'mortal') {\n          const enemyIndex = newState.enemies.findIndex(e => e.groupIndex === (attackPlan.target as Enemy).groupIndex);\n          if (enemyIndex >= 0 && newState.enemies[enemyIndex].type === 'mortal') {\n            const enemy = newState.enemies[enemyIndex] as any;\n            const unitsLost = Math.floor(attackPlan.damageDealt / enemy.unit.health);\n            enemy.currentCount = Math.max(0, enemy.currentCount - unitsLost);\n          }\n        }\n      }\n    }\n    \n    return newState;\n  }\n\n  /**\n   * Type guard to check if a unit is a player group\n   */\n  private isPlayerGroup(unit: any): unit is BattlePlayerGroup {\n    return 'unit' in unit && 'totalHealth' in unit && !('type' in unit);\n  }\n\n  /**\n   * Legacy: Apply attack result to state and return new state (pure function approach)\n   */\n  public applyAttackResult(state: UnifiedBattleState, result: { combatAction: CombatAction; damageDealt: number; targetEliminated: boolean }): UnifiedBattleState {\n    const newState = this.deepCloneState(state);\n    \n    // Add to combat log\n    newState.combatLog.push({\n      ...result.combatAction,\n      turn: state.currentTurn\n    });\n    \n    // Add damage to total\n    newState.totalDamageDealt += result.damageDealt;\n    \n    // Update unit states based on attack result\n    if (result.targetEliminated) {\n      // Handle eliminated targets\n      if (result.combatAction.attacker.includes('x ')) {\n        // Player attacked enemy - find and eliminate mortal enemy\n        const enemyIndex = newState.enemies.findIndex(e => \n          e.type === 'mortal' && this.getEnemyDisplayName(e) === result.combatAction.target);\n        if (enemyIndex >= 0 && newState.enemies[enemyIndex].type === 'mortal') {\n          (newState.enemies[enemyIndex] as any).currentCount = 0;\n        }\n      } else {\n        // Enemy attacked player - eliminate player group\n        const targetGroup = newState.playerGroups.find(g => g.unit.name === result.combatAction.target);\n        if (targetGroup) {\n          targetGroup.totalHealth = 0;\n          targetGroup.count = 0;\n        }\n      }\n    } else {\n      // Apply damage to target (non-eliminated)\n      const targetGroup = newState.playerGroups.find(g => g.unit.name === result.combatAction.target);\n      if (targetGroup && result.damageDealt > 0) {\n        targetGroup.totalHealth = Math.max(0, targetGroup.totalHealth - result.damageDealt);\n        // Calculate units lost based on damage\n        const unitHealth = targetGroup.unit.health;\n        const unitsLost = Math.floor(result.damageDealt / unitHealth);\n        targetGroup.count = Math.max(0, targetGroup.count - unitsLost);\n      }\n    }\n    \n    return newState;\n  }\n  \n  /**\n   * Get display name for enemy (helper)\n   */\n  private getEnemyDisplayName(enemy: Enemy): string {\n    switch (enemy.type) {\n      case 'generic':\n        return enemy.name;\n      case 'infinite':\n        return enemy.unit.name;\n      case 'mortal':\n        return enemy.unit.name;\n      default:\n        return 'Unknown Enemy';\n    }\n  }\n\n  /**\n   * Legacy: Add combat action to the battle log\n   */\n  public addCombatAction(action: CombatAction): void {\n    this.state.combatLog.push({\n      ...action,\n      turn: this.state.currentTurn\n    });\n  }\n\n  /**\n   * Legacy: Add damage dealt to total\n   */\n  public addDamageDealt(damage: number): void {\n    this.state.totalDamageDealt += damage;\n  }\n\n  /**\n   * Check if battle should end based on current state and return new state with battleEnded flag updated\n   * Pure function approach - returns new state instead of mutating\n   */\n  public checkBattleEndPure(state: UnifiedBattleState, maxTurns: number = UNIFIED_BATTLE_CONSTANTS.MAX_BATTLE_TURNS): UnifiedBattleState {\n    const alivePlayers = state.playerGroups.filter(group => group.totalHealth > 0);\n    const attackableEnemies = state.enemies.filter(enemy => {\n      switch (enemy.type) {\n        case 'generic':\n          return true; // Generic enemies always attack\n        case 'infinite':\n          return true; // Infinite enemies always attack  \n        case 'mortal':\n          return enemy.currentCount > 0; // Mortal enemies attack if they have units left\n        default:\n          return false;\n      }\n    });\n    \n    // Battle ends if either side cannot continue\n    const playersEliminated = alivePlayers.length === 0;\n    \n    // Enemies are eliminated only if:\n    // 1. No enemies can currently attack, AND \n    // 2. All enemies in the battle are mortal type (generic/infinite enemies can never be eliminated)\n    const hasOnlyMortalEnemies = state.enemies.every(e => e.type === 'mortal');\n    const enemiesEliminated = hasOnlyMortalEnemies && attackableEnemies.length === 0;\n    \n    // Battle also ends if it exceeds maximum turns (stalemate protection)\n    const maxTurnsReached = state.currentTurn >= maxTurns;\n    \n    const shouldEnd = playersEliminated || enemiesEliminated || maxTurnsReached;\n    \n    return {\n      ...state,\n      battleEnded: shouldEnd\n    };\n  }\n\n  /**\n   * Legacy method for backward compatibility - delegates to pure function\n   */\n  public checkBattleEnd(): void {\n    const currentState = this.getBattleState();\n    const newState = this.checkBattleEndPure(currentState);\n    this.applyStateUpdate(newState);\n  }\n\n  /**\n   * Check if an enemy can attack (helper for battle end detection)\n   */\n  private canEnemyAttack(enemy: Enemy): boolean {\n    switch (enemy.type) {\n      case 'generic':\n        return true; // Generic enemies always attack\n      case 'infinite':\n        return true; // Infinite enemies always attack  \n      case 'mortal':\n        return enemy.currentCount > 0; // Mortal enemies attack if they have units left\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Get battle outcome based on current state\n   */\n  public getBattleOutcome(maxTurns: number = UNIFIED_BATTLE_CONSTANTS.MAX_BATTLE_TURNS): 'player_victory' | 'player_eliminated' | 'stalemate' {\n    const alivePlayers = this.getAlivePlayerGroups();\n    const attackableEnemies = this.getAttackableEnemies();\n    \n    if (alivePlayers.length === 0) {\n      return 'player_eliminated';\n    }\n    \n    if (attackableEnemies.length === 0 && this.state.enemies.every(e => e.type === 'mortal')) {\n      return 'player_victory';\n    }\n    \n    if (this.state.currentTurn >= maxTurns) {\n      return 'stalemate';\n    }\n    \n    // Should not reach here during active battle\n    return 'stalemate';\n  }\n\n  /**\n   * Check if battle has ended\n   */\n  public isBattleEnded(): boolean {\n    return this.state.battleEnded;\n  }\n\n  /**\n   * Get current turn number\n   */\n  public getCurrentTurn(): number {\n    return this.state.currentTurn;\n  }\n\n  /**\n   * Get current action number within the turn\n   */\n  public getCurrentAction(): number {\n    return this.state.currentAction;\n  }\n\n  /**\n   * Get total damage dealt so far\n   */\n  public getTotalDamageDealt(): number {\n    return this.state.totalDamageDealt;\n  }\n\n  /**\n   * Get complete combat log\n   */\n  public getCombatLog(): CombatAction[] {\n    return [...this.state.combatLog];\n  }\n\n  /**\n   * Force end battle (for external termination)\n   */\n  public endBattle(): void {\n    this.state.battleEnded = true;\n  }\n\n  /**\n   * Reset battle to initial state (for restarting)\n   */\n  public resetBattle(config: UnifiedBattleConfiguration): void {\n    this.state = this.initializeBattleState(config);\n  }\n}","/**\n * Next Attacker Selector\n * \n * Dynamic attack order selection based on maximum single-target damage potential.\n * For each available unit group, calculates damage to each possible target (including modifiers).\n * The unit group that can deal the highest damage to any single target gets to attack next.\n * Recalculates each action to ensure optimal targeting and attack sequence.\n */\n\nimport { \n  UnifiedBattleState, \n  BattlePlayerGroup, \n  Enemy, \n  NextAttackerSelector,\n  AttackPlan,\n  DamageBreakdown,\n  UNIFIED_BATTLE_CONSTANTS\n} from './types';\nimport { AttackModifier } from '../../types/units';\nimport { Unit } from '../../types/units';\n\nexport class DynamicAttackerSelector implements NextAttackerSelector {\n  \n  /**\n   * Efficient method: Determines the next player attack and returns complete attack plan\n   * Calculates everything once: attacker, target, damage, elimination, combat action\n   */\n  public selectNextPlayerAttack(state: UnifiedBattleState): AttackPlan | null {\n    \n    const availablePlayers = state.playerGroups.filter(group => \n      group.totalHealth > 0 && \n      !state.unitsActedThisTurn.players.has(group.unit.name)\n    );\n\n    if (availablePlayers.length === 0) {\n      return null;\n    }\n\n    const attackableEnemies = this.getAttackableEnemies(state);\n    if (attackableEnemies.length === 0) {\n      return null;\n    }\n\n    // Find the player-target combination with highest damage\n    let bestAttackPlan: AttackPlan | null = null;\n    let maxDamage = 0;\n\n    for (const player of availablePlayers) {\n      for (const enemy of attackableEnemies) {\n        const damageResult = this.calculatePlayerDamageToEnemy(player, enemy);\n        \n        if (damageResult.finalDamage > maxDamage) {\n          maxDamage = damageResult.finalDamage;\n          \n          // Calculate if target would be eliminated\n          let targetEliminated = false;\n          if (enemy.type === 'mortal') {\n            const enemyTotalHealth = enemy.unit.health * enemy.currentCount;\n            targetEliminated = damageResult.finalDamage >= enemyTotalHealth;\n          }\n          // Generic and infinite enemies cannot be eliminated by player attacks\n\n          // Create attack plan (combat log will be generated centrally in BattleState)\n          bestAttackPlan = {\n            attacker: player,\n            target: enemy,\n            damageDealt: damageResult.finalDamage,\n            damageBreakdown: damageResult,\n            targetEliminated,\n            combatAction: {} as any // Legacy field, actual logging handled in BattleState\n          };\n        }\n      }\n    }\n\n    return bestAttackPlan;\n  }\n\n  /**\n   * Efficient method: Determines the next enemy attack and returns complete attack plan  \n   * Calculates everything once: attacker, target, damage, elimination, combat action\n   */\n  public selectNextEnemyAttack(state: UnifiedBattleState): AttackPlan | null {\n    const availableEnemies = state.enemies.filter((enemy, index) => \n      this.canEnemyAttack(enemy) && \n      !state.unitsActedThisTurn.enemies.has(index)\n    );\n\n    if (availableEnemies.length === 0) {\n      return null;\n    }\n\n    const alivePlayers = state.playerGroups.filter(group => group.totalHealth > 0);\n    if (alivePlayers.length === 0) {\n      return null;\n    }\n\n    // Find the enemy-target combination with highest damage\n    let bestAttackPlan: AttackPlan | null = null;\n    let maxDamage = 0;\n\n    for (const enemy of availableEnemies) {\n      for (const player of alivePlayers) {\n        const damageDealt = this.calculateEnemyDamageToPlayer(enemy, player);\n        \n        if (damageDealt.finalDamage > maxDamage) {\n          maxDamage = damageDealt.finalDamage;\n          \n          // Calculate if target would be eliminated\n          const targetEliminated = damageDealt.finalDamage >= player.totalHealth;\n\n          // Create attack plan (combat log will be generated centrally in BattleState)\n          bestAttackPlan = {\n            attacker: enemy,\n            target: player,\n            damageDealt: damageDealt.finalDamage,\n            damageBreakdown: damageDealt,\n            targetEliminated,\n            combatAction: {} as any // Legacy field, actual logging handled in BattleState\n          };\n        }\n      }\n    }\n\n    return bestAttackPlan;\n  }\n\n  /**\n   * Helper: Get enemy display name for consistent naming\n   */\n  public getEnemyDisplayName(enemy: Enemy): string {\n    switch (enemy.type) {\n      case 'generic':\n        return enemy.name;\n      case 'infinite':\n        return enemy.unit.name;\n      case 'mortal':\n        return `${enemy.unit.name} (${enemy.currentCount}/${enemy.count})`;\n      default:\n        return 'Unknown Enemy';\n    }\n  }\n\n  /**\n   * Legacy method: Determines the next player unit that should attack based on maximum single-target damage potential\n   * For each available player unit group, calculates damage to each available enemy target (including modifiers)\n   * The unit group that can deal the highest damage to any single target gets to attack next\n   * Dynamic recalculation each action based on remaining alive units\n   */\n  public selectNextPlayer(state: UnifiedBattleState): BattlePlayerGroup | null {\n    const availablePlayers = state.playerGroups.filter(group => \n      group.totalHealth > 0 && \n      !state.unitsActedThisTurn.players.has(group.unit.name)\n    );\n\n    if (availablePlayers.length === 0) {\n      return null;\n    }\n\n    const attackableEnemies = this.getAttackableEnemies(state);\n    if (attackableEnemies.length === 0) {\n      return null;\n    }\n\n    // Find the player unit group that can deal the highest damage to any single target\n    let bestPlayer: BattlePlayerGroup | null = null;\n    let maxSingleTargetDamage = 0;\n\n    for (const player of availablePlayers) {\n      const playerMaxSingleTargetDamage = this.calculatePlayerMaxDamage(player, attackableEnemies);\n      \n      if (playerMaxSingleTargetDamage > maxSingleTargetDamage) {\n        maxSingleTargetDamage = playerMaxSingleTargetDamage;\n        bestPlayer = player;\n      }\n    }\n\n    return bestPlayer;\n  }\n\n  /**\n   * Determines the next enemy unit that should attack based on maximum single-target damage potential  \n   * For each available enemy unit group, calculates damage to each available player target (including modifiers)\n   * The enemy unit group that can deal the highest damage to any single target gets to attack next\n   * Dynamic recalculation each action based on remaining alive enemies\n   */\n  public selectNextEnemy(state: UnifiedBattleState): Enemy | null {\n    const availableEnemies = state.enemies.filter((enemy, index) => \n      this.canEnemyAttack(enemy) && \n      !state.unitsActedThisTurn.enemies.has(index)\n    );\n\n    if (availableEnemies.length === 0) {\n      return null;\n    }\n\n    const alivePlayers = state.playerGroups.filter(group => group.totalHealth > 0);\n    if (alivePlayers.length === 0) {\n      return null;\n    }\n\n    // Find the enemy unit group that can deal the highest damage to any single target\n    let bestEnemy: Enemy | null = null;\n    let maxSingleTargetDamage = 0;\n\n    for (const enemy of availableEnemies) {\n      const enemyMaxSingleTargetDamage = this.calculateEnemyMaxDamage(enemy, alivePlayers);\n      \n      if (enemyMaxSingleTargetDamage > maxSingleTargetDamage) {\n        maxSingleTargetDamage = enemyMaxSingleTargetDamage;\n        bestEnemy = enemy;\n      }\n    }\n\n    return bestEnemy;\n  }\n\n  /**\n   * Calculate the maximum damage a player unit can deal to its best target\n   * Checks damage to each available enemy and returns the highest single-target damage\n   */\n  private calculatePlayerMaxDamage(player: BattlePlayerGroup, enemies: Enemy[]): number {\n    let maxSingleTargetDamage = 0;\n\n    for (const enemy of enemies) {\n      const damageToThisTarget = this.calculatePlayerDamageToEnemy(player, enemy);\n      maxSingleTargetDamage = Math.max(maxSingleTargetDamage, damageToThisTarget);\n    }\n\n    return maxSingleTargetDamage;\n  }\n\n  /**\n   * Calculate the maximum damage an enemy can deal to its best target\n   * Checks damage to each available player and returns the highest single-target damage\n   */\n  private calculateEnemyMaxDamage(enemy: Enemy, players: BattlePlayerGroup[]): number {\n    let maxSingleTargetDamage = 0;\n\n    for (const player of players) {\n      const damageToThisTarget = this.calculateEnemyDamageToPlayer(enemy, player);\n      maxSingleTargetDamage = Math.max(maxSingleTargetDamage, damageToThisTarget);\n    }\n\n    return maxSingleTargetDamage;\n  }\n\n  /**\n   * Calculate damage a player unit group deals to a specific enemy\n   */\n  private calculatePlayerDamageToEnemy(player: BattlePlayerGroup, enemy: Enemy): DamageBreakdown {\n    const baseDamage = player.count * player.unit.strength;\n    let potentialDamage = baseDamage;\n    const damageBreakdown = this.createDamageBreakdown(baseDamage);\n\n    // For infinite and mortal enemies, check for attack modifiers\n    if ((enemy.type === 'infinite' || enemy.type === 'mortal') && enemy.unit) {\n      const bestModifier = this.getBestAttackModifier(player, enemy.unit);\n      \n      if (bestModifier) {\n        potentialDamage = this.applyAttackModifiers(baseDamage, bestModifier, damageBreakdown);\n      }\n    }\n\n    // Cap damage based on enemy type and health\n    if (enemy.type === 'mortal') {\n      const enemyTotalHealth = enemy.unit.health * enemy.currentCount;\n      potentialDamage = Math.min(potentialDamage, enemyTotalHealth);\n    }\n    \n    damageBreakdown.finalDamage = potentialDamage;\n    return damageBreakdown;\n  }\n\n  /**\n   * Calculate damage an enemy deals to a specific player unit group\n   */\n  private calculateEnemyDamageToPlayer(enemy: Enemy, player: BattlePlayerGroup): DamageBreakdown {\n    let potentialDamage: number;\n    let damageBreakdown: DamageBreakdown;\n\n    // Generic enemies always kill (infinite damage)\n    if (enemy.type === 'generic') {\n      potentialDamage = UNIFIED_BATTLE_CONSTANTS.GENERIC_ENEMY_DAMAGE;\n      damageBreakdown = this.createDamageBreakdown(potentialDamage);\n    } else if (enemy.type === 'infinite') {\n      const baseDamage = player.totalHealth;\n      damageBreakdown = this.createDamageBreakdown(baseDamage);\n      const bestModifier = this.getBestEnemyAttackModifier(enemy.unit, player);\n      \n      if (bestModifier && bestModifier.value > 0) {\n        potentialDamage = this.applyAttackModifiers(baseDamage, bestModifier, damageBreakdown);\n      } else {\n        potentialDamage = baseDamage;\n      }\n    } else if (enemy.type === 'mortal') {\n      const baseDamage = enemy.currentCount * enemy.unit.strength;\n      damageBreakdown = this.createDamageBreakdown(baseDamage);\n      const bestModifier = this.getBestEnemyAttackModifier(enemy.unit, player);\n      \n      if (bestModifier && bestModifier.value > 0) {\n        potentialDamage = this.applyAttackModifiers(baseDamage, bestModifier, damageBreakdown);\n      } else {\n        potentialDamage = baseDamage;\n      }\n    } else {\n      potentialDamage = 0;\n      damageBreakdown = this.createDamageBreakdown(0);\n    }\n\n    // Cap damage at target's remaining health\n    damageBreakdown.finalDamage = Math.min(potentialDamage, player.totalHealth);\n\n    return damageBreakdown;\n  }\n\n  /**\n   * Get the best attack modifier a player unit has against an enemy unit\n   */\n  private getBestAttackModifier(player: BattlePlayerGroup, enemyUnit: Unit): AttackModifier | null {\n    // Check if player has unit data with attack modifiers\n    if (!player.unit || !player.unit.attack_modifiers || player.unit.attack_modifiers.length === 0) {\n      return null;\n    }\n\n    let bestModifier = null;\n    let bestModifierValue = 0;\n    \n    // Check each attack modifier against enemy unit types\n    for (const modifier of player.unit.attack_modifiers) {\n      // Check if enemy has the target type that this modifier applies to\n      if (enemyUnit.unit_types && enemyUnit.unit_types.includes(modifier.target_type)) {\n        bestModifierValue = Math.max(bestModifierValue, modifier.value);\n        bestModifier = modifier;\n      }\n    }\n    \n    return bestModifier;\n  }\n\n  /**\n   * Get the best attack modifier an enemy unit has against a player unit group\n   */\n  private getBestEnemyAttackModifier(enemyUnit: Unit, player: BattlePlayerGroup):  AttackModifier | null {\n    // Check if player has unit data with attack modifiers\n    if (!enemyUnit || !enemyUnit.attack_modifiers || enemyUnit.attack_modifiers.length === 0) {\n      return null;\n    }\n\n    let bestModifier = null;\n    let bestModifierValue = 0;\n    \n    // Check each attack modifier against enemy unit types\n    for (const modifier of enemyUnit.attack_modifiers) {\n      // Check if enemy has the target type that this modifier applies to\n      if (player.unit.unit_types && player.unit.unit_types.includes(modifier.target_type)) {\n        bestModifierValue = Math.max(bestModifierValue, modifier.value);\n        bestModifier = modifier;\n      }\n    }\n    \n    return bestModifier;\n  }\n\n  /**\n   * Get all enemies that can currently attack\n   */\n  private getAttackableEnemies(state: UnifiedBattleState): Enemy[] {\n    return state.enemies.filter(enemy => this.canEnemyAttack(enemy));\n  }\n\n  /**\n   * Check if an enemy can currently attack\n   */\n  private canEnemyAttack(enemy: Enemy): boolean {\n    switch (enemy.type) {\n      case 'generic':\n        return true; // Generic enemies always attack\n      case 'infinite':\n        return true; // Infinite enemies always attack\n      case 'mortal':\n        return enemy.currentCount > 0; // Mortal enemies attack if they have units left\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Create a DamageBreakdown object with base damage set\n   */\n  private createDamageBreakdown(baseDamage: number): DamageBreakdown {\n    return {\n      baseDamage,\n      bonusDamage: 0,\n      finalDamage: baseDamage,\n      appliedModifiers: []\n    } as DamageBreakdown;\n  }\n\n  /**\n   * Apply attack modifiers to base damage and update breakdown\n   */\n  private applyAttackModifiers(baseDamage: number, modifier: AttackModifier, damageBreakdown: DamageBreakdown): number {\n    const multiplier = 1 + (modifier.value / 100);\n    const finalDamage = Math.floor(baseDamage * multiplier);\n    \n    damageBreakdown.bonusDamage = Math.round(baseDamage * (modifier.value / 100));\n    damageBreakdown.appliedModifiers = [modifier];\n    \n    return finalDamage;\n  }\n\n  /**\n   * Select the best target for a player unit group\n   * Returns the enemy that this player deals the most damage to\n   */\n  public selectBestTargetForPlayer(player: BattlePlayerGroup, enemies: Enemy[]): Enemy | null {\n    if (enemies.length === 0) return null;\n\n    let bestTarget: Enemy | null = null;\n    let maxDamage = 0;\n\n    for (const enemy of enemies) {\n      const damage = this.calculatePlayerDamageToEnemy(player, enemy);\n      if (damage > maxDamage) {\n        maxDamage = damage;\n        bestTarget = enemy;\n      }\n    }\n\n    return bestTarget;\n  }\n\n  /**\n   * Select the best target for an enemy unit\n   * Returns the player unit group that this enemy deals the most damage to\n   */\n  public selectBestTargetForEnemy(enemy: Enemy, players: BattlePlayerGroup[]): BattlePlayerGroup | null {\n    if (players.length === 0) return null;\n\n    let bestTarget: BattlePlayerGroup | null = null;\n    let maxDamage = 0;\n\n    for (const player of players) {\n      const damage = this.calculateEnemyDamageToPlayer(enemy, player);\n      if (damage > maxDamage) {\n        maxDamage = damage;\n        bestTarget = player;\n      }\n    }\n\n    return bestTarget;\n  }\n}","/**\n * Generic Enemy Handler\n * \n * Handles simple generic enemies that always kill player units.\n * These enemies represent basic threats in battle scenarios where\n * the focus is on player unit optimization rather than complex enemy mechanics.\n */\n\nimport { \n  EnemyTypeHandler, \n  GenericEnemy, \n  BattlePlayerGroup, \n  AttackResult,\n  UNIFIED_BATTLE_CONSTANTS \n} from '../types';\nimport { CombatAction } from '../../../types/battleSimulation';\n\nexport class GenericEnemyHandler implements EnemyTypeHandler<GenericEnemy> {\n  \n  /**\n   * Generic enemies can always attack (they never get eliminated)\n   */\n  public canAttack(enemy: GenericEnemy): boolean {\n    return true;\n  }\n\n  /**\n   * Generic enemies always deal maximum damage (always kill)\n   */\n  public calculateDamage(enemy: GenericEnemy, target: BattlePlayerGroup): number {\n    return UNIFIED_BATTLE_CONSTANTS.GENERIC_ENEMY_DAMAGE;\n  }\n\n  /**\n   * Process a generic enemy attack against a player unit group\n   * Generic enemies always eliminate the target completely\n   */\n  public processAttack(enemy: GenericEnemy, target: BattlePlayerGroup): AttackResult {\n    const damageDealt = this.calculateDamage(enemy, target);\n    \n    // Generic enemies always eliminate the entire unit group\n    const targetEliminated = true;\n    \n    // Create combat action (will be populated by the caller with turn info)\n    const combatAction: CombatAction = {\n      turn: 0, // Will be set by caller\n      attacker: this.getDisplayName(enemy),\n      target: target.unit.name,\n      action: `attack and eliminate ${target.unit.name}`,\n      damageDealt: damageDealt,\n      eliminated: targetEliminated\n    };\n\n    return {\n      damageDealt,\n      targetEliminated,\n      attackerEliminated: false, // Generic enemies never get eliminated\n      combatAction\n    };\n  }\n\n  /**\n   * Generic enemies are never eliminated\n   */\n  public isEliminated(enemy: GenericEnemy): boolean {\n    return false;\n  }\n\n  /**\n   * Get display name for combat logs\n   */\n  public getDisplayName(enemy: GenericEnemy): string {\n    return enemy.name;\n  }\n\n  /**\n   * Get strength for damage calculations and comparisons\n   */\n  public getStrength(enemy: GenericEnemy): number {\n    return UNIFIED_BATTLE_CONSTANTS.GENERIC_ENEMY_DAMAGE;\n  }\n\n  /**\n   * Get enemy type identifier\n   */\n  public getEnemyType(): 'generic' {\n    return 'generic';\n  }\n\n  /**\n   * Calculate maximum potential damage this enemy can deal to the best target\n   * For generic enemies, this is always infinite damage (always kill)\n   */\n  public getMaxPotentialDamage(enemy: GenericEnemy, availableTargets?: BattlePlayerGroup[]): number {\n    return UNIFIED_BATTLE_CONSTANTS.GENERIC_ENEMY_DAMAGE;\n  }\n\n  /**\n   * Calculate total potential damage this enemy could deal to all available targets\n   * For generic enemies, this is infinite damage times number of targets\n   */\n  public calculateTotalPotentialDamage(enemy: GenericEnemy, availableTargets: BattlePlayerGroup[]): number {\n    // Generic enemies always kill, so total damage is infinite regardless of number of targets\n    // But we can represent this as infinite damage per target\n    return UNIFIED_BATTLE_CONSTANTS.GENERIC_ENEMY_DAMAGE * availableTargets.length;\n  }\n\n  /**\n   * Calculate actual damage to be applied to player unit group\n   * For generic enemies, this eliminates the entire group\n   */\n  public calculateActualDamage(enemy: GenericEnemy, target: BattlePlayerGroup): {\n    healthLost: number;\n    unitsKilled: number;\n  } {\n    return {\n      healthLost: target.totalHealth, // Kill all health\n      unitsKilled: target.count // Kill all units\n    };\n  }\n\n  /**\n   * Check if this enemy has any special targeting preferences\n   * Generic enemies don't have preferences - they attack whatever they're told to\n   */\n  public hasTargetPreference(enemy: GenericEnemy): boolean {\n    return false;\n  }\n\n  /**\n   * Get targeting priority score for a specific target\n   * Generic enemies treat all targets equally\n   */\n  public getTargetPriority(enemy: GenericEnemy, target: BattlePlayerGroup): number {\n    return 1.0; // All targets are equal priority\n  }\n\n  /**\n   * Check if this enemy can be counter-attacked\n   * Generic enemies cannot be counter-attacked (they're abstract threats)\n   */\n  public canBeCounterAttacked(enemy: GenericEnemy): boolean {\n    return false;\n  }\n\n}","/**\n * Infinite Enemy Handler\n * \n * Handles specific enemy units with unlimited quantity (immortal enemies).\n * These enemies have specific stats, attack modifiers, and targeting preferences\n * but never get eliminated from battle.\n */\n\nimport { \n  EnemyTypeHandler, \n  InfiniteEnemy, \n  BattlePlayerGroup, \n  AttackResult \n} from '../types';\nimport { CombatAction } from '../../../types/battleSimulation';\n\nexport class InfiniteEnemyHandler implements EnemyTypeHandler<InfiniteEnemy> {\n  \n  /**\n   * Infinite enemies can always attack (they never get eliminated)\n   */\n  public canAttack(enemy: InfiniteEnemy): boolean {\n    return true;\n  }\n\n  /**\n   * Calculate damage an infinite enemy deals to a player unit group\n   */\n  public calculateDamage(enemy: InfiniteEnemy, target: BattlePlayerGroup): number {\n    const baseDamage = enemy.unit.strength;\n    \n    // Check for attack modifiers against the target\n    const modifierPercentage = this.getBestAttackModifier(enemy, target);\n    \n    if (modifierPercentage !== 0) {\n      // Apply percentage modifier (e.g., 50 = 50% increase)\n      const multiplier = 1 + (modifierPercentage / 100);\n      return Math.floor(baseDamage * multiplier);\n    }\n    \n    return baseDamage;\n  }\n\n  /**\n   * Process an infinite enemy attack against a player unit group\n   */\n  public processAttack(enemy: InfiniteEnemy, target: BattlePlayerGroup): AttackResult {\n    const actualDamage = this.calculateActualDamage(enemy, target);\n    const actualDamageDealt = actualDamage.healthLost;\n    \n    const targetEliminated = actualDamageDealt >= target.totalHealth;\n    \n    // Create combat action (will be populated by the caller with turn info)\n    const combatAction: CombatAction = {\n      turn: 0, // Will be set by caller\n      attacker: this.getDisplayName(enemy),\n      target: target.unit.name,\n      action: `attack ${target.unit.name} for ${actualDamageDealt} damage${targetEliminated ? ' (ELIMINATED)' : ''}`,\n      damageDealt: actualDamageDealt,\n      eliminated: targetEliminated\n    };\n\n    return {\n      damageDealt: actualDamageDealt,\n      targetEliminated,\n      attackerEliminated: false, // Infinite enemies never get eliminated\n      combatAction\n    };\n  }\n\n  /**\n   * Infinite enemies are never eliminated\n   */\n  public isEliminated(enemy: InfiniteEnemy): boolean {\n    return false;\n  }\n\n  /**\n   * Get display name for combat logs\n   */\n  public getDisplayName(enemy: InfiniteEnemy): string {\n    return enemy.unit.name;\n  }\n\n  /**\n   * Get strength for damage calculations and comparisons\n   */\n  public getStrength(enemy: InfiniteEnemy): number {\n    return enemy.unit.strength;\n  }\n\n  /**\n   * Calculate actual damage to be applied to player unit group\n   */\n  public calculateActualDamage(enemy: InfiniteEnemy, target: BattlePlayerGroup): {\n    healthLost: number;\n    unitsKilled: number;\n  } {\n    const totalDamage = this.calculateDamage(enemy, target);\n    \n    // Calculate how many units are killed\n    const unitsKilled = Math.min(\n      Math.floor(totalDamage / target.unit.health),\n      target.count\n    );\n    \n    // Calculate actual health lost\n    const healthLost = Math.min(totalDamage, target.totalHealth);\n    \n    return {\n      healthLost,\n      unitsKilled\n    };\n  }\n\n  /**\n   * Get the best attack modifier against a target\n   */\n  private getBestAttackModifier(enemy: InfiniteEnemy, target: BattlePlayerGroup): number {\n    if (!enemy.unit.attack_modifiers || enemy.unit.attack_modifiers.length === 0) {\n      return 0;\n    }\n\n    // If target has unit data with unit_types, check for modifiers\n    if (target.unit?.unit_types) {\n      let bestModifier = 0;\n      \n      for (const modifier of enemy.unit.attack_modifiers) {\n        // Check if modifier applies to any of the target's unit types\n        if (target.unit.unit_types.includes(modifier.target_type) && \n            modifier.modifier_type === 'Strength') {\n          bestModifier = Math.max(bestModifier, modifier.value);\n        }\n      }\n      \n      return bestModifier;\n    }\n    \n    // If no unit data available, return 0 (no modifiers can be applied)\n    return 0;\n  }\n\n  /**\n   * Check if this enemy has targeting preferences based on attack modifiers\n   */\n  public hasTargetPreference(enemy: InfiniteEnemy): boolean {\n    return enemy.unit.attack_modifiers && enemy.unit.attack_modifiers.length > 0;\n  }\n\n  /**\n   * Get targeting priority score for a specific target\n   * Higher scores indicate better targets for this enemy\n   */\n  public getTargetPriority(enemy: InfiniteEnemy, target: BattlePlayerGroup): number {\n    const basePriority = 1.0;\n    const modifier = this.getBestAttackModifier(enemy, target);\n    \n    if (modifier > 0) {\n      // Targets with damage bonuses get higher priority\n      return basePriority + (modifier / 100);\n    }\n    \n    return basePriority;\n  }\n\n  /**\n   * Check if this enemy can be counter-attacked\n   * Infinite enemies can be attacked but never eliminated\n   */\n  public canBeCounterAttacked(enemy: InfiniteEnemy): boolean {\n    return true;\n  }\n\n  /**\n   * Get enemy health (for display/calculation purposes)\n   */\n  public getHealth(enemy: InfiniteEnemy): number {\n    return enemy.unit.health;\n  }\n\n  /**\n   * Get enemy unit types (for targeting calculations)\n   */\n  public getUnitTypes(enemy: InfiniteEnemy): string[] {\n    return enemy.unit.unit_types || [];\n  }\n\n  /**\n   * Get enemy attack modifiers (for damage calculations)\n   */\n  public getAttackModifiers(enemy: InfiniteEnemy): any[] {\n    return enemy.unit.attack_modifiers || [];\n  }\n\n  /**\n   * Get enemy type identifier\n   */\n  public getEnemyType(): 'infinite' {\n    return 'infinite';\n  }\n\n  /**\n   * Calculate maximum potential damage this enemy can deal to the best target\n   * Used for attack order prioritization - this should be the damage to the single best target,\n   * not total damage to all targets (that's calculated by the attack selector)\n   */\n  public getMaxPotentialDamage(enemy: InfiniteEnemy, availableTargets?: BattlePlayerGroup[]): number {\n    const baseDamage = enemy.unit.strength;\n    \n    if (!availableTargets || availableTargets.length === 0) {\n      // Return base damage if no targets specified\n      return baseDamage;\n    }\n    \n    // Find the target this enemy would deal the most damage to\n    let maxDamage = baseDamage;\n    \n    for (const target of availableTargets) {\n      const damageToThisTarget = this.calculateDamage(enemy, target);\n      maxDamage = Math.max(maxDamage, damageToThisTarget);\n    }\n    \n    return maxDamage;\n  }\n\n  /**\n   * Calculate total potential damage this enemy could deal to all available targets\n   * Used by attack selector to determine which unit should attack next\n   */\n  public calculateTotalPotentialDamage(enemy: InfiniteEnemy, availableTargets: BattlePlayerGroup[]): number {\n    let totalDamage = 0;\n    \n    for (const target of availableTargets) {\n      totalDamage += this.calculateDamage(enemy, target);\n    }\n    \n    return totalDamage;\n  }\n}","/**\n * Mortal Enemy Handler\n * \n * Handles specific enemy units with finite counts that can be eliminated.\n * These enemies have specific stats, attack modifiers, and can be killed\n * by player units, making them the most complex enemy type.\n */\n\nimport { \n  EnemyTypeHandler, \n  MortalEnemy, \n  BattlePlayerGroup, \n  AttackResult \n} from '../types';\nimport { CombatAction } from '../../../types/battleSimulation';\n\nexport class MortalEnemyHandler implements EnemyTypeHandler<MortalEnemy> {\n  \n  /**\n   * Mortal enemies can attack if they have remaining units\n   */\n  public canAttack(enemy: MortalEnemy): boolean {\n    return enemy.currentCount > 0;\n  }\n\n  /**\n   * Calculate damage a mortal enemy deals to a player unit group\n   * Damage scales with the number of remaining enemy units\n   */\n  public calculateDamage(enemy: MortalEnemy, target: BattlePlayerGroup): number {\n    if (enemy.currentCount <= 0) {\n      return 0;\n    }\n\n    // Base damage from all remaining enemy units\n    const baseDamage = enemy.currentCount * enemy.unit.strength;\n    \n    // Check for attack modifiers against the target\n    const modifierPercentage = this.getBestAttackModifier(enemy, target);\n    \n    if (modifierPercentage !== 0) {\n      // Apply percentage modifier (e.g., 50 = 50% increase)\n      const multiplier = 1 + (modifierPercentage / 100);\n      return Math.floor(baseDamage * multiplier);\n    }\n    \n    return baseDamage;\n  }\n\n  /**\n   * Process a mortal enemy attack against a player unit group\n   */\n  public processAttack(enemy: MortalEnemy, target: BattlePlayerGroup): AttackResult {\n    const actualDamage = this.calculateActualDamage(enemy, target);\n    const actualDamageDealt = actualDamage.healthLost;\n    \n    const targetEliminated = actualDamageDealt >= target.totalHealth;\n    \n    // Create combat action (will be populated by the caller with turn info)\n    const combatAction: CombatAction = {\n      turn: 0, // Will be set by caller\n      attacker: this.getDisplayName(enemy),\n      target: target.unit.name,\n      action: `attack ${target.unit.name} for ${actualDamageDealt} damage${targetEliminated ? ' (ELIMINATED)' : ''}`,\n      damageDealt: actualDamageDealt,\n      eliminated: targetEliminated\n    };\n\n    return {\n      damageDealt: actualDamageDealt,\n      targetEliminated,\n      attackerEliminated: false, // Mortal enemies can be eliminated, but not by their own attacks\n      combatAction\n    };\n  }\n\n  /**\n   * Mortal enemies are eliminated when their count reaches zero\n   */\n  public isEliminated(enemy: MortalEnemy): boolean {\n    return enemy.currentCount <= 0;\n  }\n\n  /**\n   * Get display name for combat logs\n   */\n  public getDisplayName(enemy: MortalEnemy): string {\n    return `${enemy.unit.name} (${enemy.currentCount}/${enemy.count})`;\n  }\n\n  /**\n   * Get strength for damage calculations and comparisons\n   * For mortal enemies, total strength depends on remaining count\n   */\n  public getStrength(enemy: MortalEnemy): number {\n    return enemy.currentCount * enemy.unit.strength;\n  }\n\n  /**\n   * Calculate actual damage to be applied to player unit group\n   */\n  public calculateActualDamage(enemy: MortalEnemy, target: BattlePlayerGroup): {\n    healthLost: number;\n    unitsKilled: number;\n  } {\n    const totalDamage = this.calculateDamage(enemy, target);\n    \n    // Calculate how many units are killed\n    const unitsKilled = Math.min(\n      Math.floor(totalDamage / target.unit.health),\n      target.count\n    );\n    \n    // Calculate actual health lost\n    const healthLost = Math.min(totalDamage, target.totalHealth);\n    \n    return {\n      healthLost,\n      unitsKilled\n    };\n  }\n\n  /**\n   * Process damage dealt TO a mortal enemy (when player attacks)\n   * Returns number of enemy units killed\n   */\n  public processDamageTaken(enemy: MortalEnemy, damageReceived: number): {\n    unitsKilled: number;\n    remainingCount: number;\n    enemyEliminated: boolean;\n  } {\n    if (damageReceived <= 0 || enemy.currentCount <= 0) {\n      return {\n        unitsKilled: 0,\n        remainingCount: enemy.currentCount,\n        enemyEliminated: this.isEliminated(enemy)\n      };\n    }\n\n    // Calculate how many enemy units are killed by this damage\n    const unitsKilled = Math.min(\n      Math.floor(damageReceived / enemy.unit.health),\n      enemy.currentCount\n    );\n\n    // Update the enemy's current count\n    enemy.currentCount = Math.max(0, enemy.currentCount - unitsKilled);\n\n    return {\n      unitsKilled,\n      remainingCount: enemy.currentCount,\n      enemyEliminated: this.isEliminated(enemy)\n    };\n  }\n\n  /**\n   * Get the best attack modifier against a target\n   */\n  private getBestAttackModifier(enemy: MortalEnemy, target: BattlePlayerGroup): number {\n    if (!enemy.unit.attack_modifiers || enemy.unit.attack_modifiers.length === 0) {\n      return 0;\n    }\n\n    // If target has unit data with unit_types, check for modifiers\n    if (target.unit?.unit_types) {\n      let bestModifier = 0;\n      \n      for (const modifier of enemy.unit.attack_modifiers) {\n        // Check if modifier applies to any of the target's unit types\n        if (target.unit.unit_types.includes(modifier.target_type) && \n            modifier.modifier_type === 'Strength') {\n          bestModifier = Math.max(bestModifier, modifier.value);\n        }\n      }\n      \n      return bestModifier;\n    }\n    \n    // If no unit data available, return 0 (no modifiers can be applied)\n    return 0;\n  }\n\n  /**\n   * Check if this enemy has targeting preferences based on attack modifiers\n   */\n  public hasTargetPreference(enemy: MortalEnemy): boolean {\n    return enemy.unit.attack_modifiers && enemy.unit.attack_modifiers.length > 0;\n  }\n\n  /**\n   * Get targeting priority score for a specific target\n   * Higher scores indicate better targets for this enemy\n   */\n  public getTargetPriority(enemy: MortalEnemy, target: BattlePlayerGroup): number {\n    const basePriority = 1.0;\n    const modifier = this.getBestAttackModifier(enemy, target);\n    \n    if (modifier > 0) {\n      // Targets with damage bonuses get higher priority\n      return basePriority + (modifier / 100);\n    }\n    \n    return basePriority;\n  }\n\n  /**\n   * Check if this enemy can be counter-attacked\n   * Mortal enemies can be attacked and eliminated\n   */\n  public canBeCounterAttacked(enemy: MortalEnemy): boolean {\n    return enemy.currentCount > 0;\n  }\n\n  /**\n   * Get total health of all remaining enemy units\n   */\n  public getTotalHealth(enemy: MortalEnemy): number {\n    return enemy.currentCount * enemy.unit.health;\n  }\n\n  /**\n   * Get individual unit health\n   */\n  public getUnitHealth(enemy: MortalEnemy): number {\n    return enemy.unit.health;\n  }\n\n  /**\n   * Get enemy unit types (for targeting calculations)\n   */\n  public getUnitTypes(enemy: MortalEnemy): string[] {\n    return enemy.unit.unit_types || [];\n  }\n\n  /**\n   * Get enemy attack modifiers (for damage calculations)\n   */\n  public getAttackModifiers(enemy: MortalEnemy): any[] {\n    return enemy.unit.attack_modifiers || [];\n  }\n\n  /**\n   * Get current count of remaining units\n   */\n  public getCurrentCount(enemy: MortalEnemy): number {\n    return enemy.currentCount;\n  }\n\n  /**\n   * Get original count of units\n   */\n  public getOriginalCount(enemy: MortalEnemy): number {\n    return enemy.count;\n  }\n\n  /**\n   * Get enemy type identifier\n   */\n  public getEnemyType(): 'mortal' {\n    return 'mortal';\n  }\n\n  /**\n   * Calculate maximum potential damage this enemy can deal to the best target\n   * Used for attack order prioritization - this should be the damage to the single best target,\n   * not total damage to all targets (that's calculated by the attack selector)\n   */\n  public getMaxPotentialDamage(enemy: MortalEnemy, availableTargets?: BattlePlayerGroup[]): number {\n    if (enemy.currentCount <= 0) {\n      return 0;\n    }\n\n    const baseDamage = enemy.currentCount * enemy.unit.strength;\n    \n    if (!availableTargets || availableTargets.length === 0) {\n      // Return base damage if no targets specified\n      return baseDamage;\n    }\n    \n    // Find the target this enemy would deal the most damage to\n    let maxDamage = baseDamage;\n    \n    for (const target of availableTargets) {\n      const damageToThisTarget = this.calculateDamage(enemy, target);\n      maxDamage = Math.max(maxDamage, damageToThisTarget);\n    }\n    \n    return maxDamage;\n  }\n\n  /**\n   * Calculate total potential damage this enemy could deal to all available targets\n   * Used by attack selector to determine which unit should attack next\n   */\n  public calculateTotalPotentialDamage(enemy: MortalEnemy, availableTargets: BattlePlayerGroup[]): number {\n    if (enemy.currentCount <= 0) {\n      return 0;\n    }\n\n    let totalDamage = 0;\n    \n    for (const target of availableTargets) {\n      totalDamage += this.calculateDamage(enemy, target);\n    }\n    \n    return totalDamage;\n  }\n\n  /**\n   * Reset enemy to original count (for battle restarts)\n   */\n  public resetToOriginalCount(enemy: MortalEnemy): void {\n    enemy.currentCount = enemy.count;\n  }\n}","/**\n * Enemy Factory\n * \n * Factory class for creating and managing enemy type handlers.\n * Provides a centralized way to instantiate the correct handler\n * for each enemy type and manage handler lifecycle.\n */\n\nimport { EnemyTypeHandler, Enemy, EnemyType } from '../types';\nimport { GenericEnemyHandler } from './GenericEnemyHandler';\nimport { InfiniteEnemyHandler } from './InfiniteEnemyHandler';\nimport { MortalEnemyHandler } from './MortalEnemyHandler';\n\nexport class EnemyFactory {\n  private static instance: EnemyFactory;\n  private handlers: Map<EnemyType, EnemyTypeHandler> = new Map();\n\n  private constructor() {\n    this.initializeHandlers();\n  }\n\n  /**\n   * Get singleton instance of the factory\n   */\n  public static getInstance(): EnemyFactory {\n    if (!EnemyFactory.instance) {\n      EnemyFactory.instance = new EnemyFactory();\n    }\n    return EnemyFactory.instance;\n  }\n\n  /**\n   * Initialize all enemy type handlers\n   */\n  private initializeHandlers(): void {\n    this.handlers.set('generic', new GenericEnemyHandler());\n    this.handlers.set('infinite', new InfiniteEnemyHandler());\n    this.handlers.set('mortal', new MortalEnemyHandler());\n  }\n\n  /**\n   * Get the appropriate handler for an enemy type\n   */\n  public getHandler(enemyType: EnemyType): EnemyTypeHandler {\n    const handler = this.handlers.get(enemyType);\n    if (!handler) {\n      throw new Error(`No handler found for enemy type: ${enemyType}`);\n    }\n    return handler;\n  }\n\n  /**\n   * Get the appropriate handler for a specific enemy instance\n   */\n  public getHandlerForEnemy(enemy: Enemy): EnemyTypeHandler {\n    return this.getHandler(enemy.type);\n  }\n\n  /**\n   * Check if a handler exists for the given enemy type\n   */\n  public hasHandler(enemyType: EnemyType): boolean {\n    return this.handlers.has(enemyType);\n  }\n\n  /**\n   * Get all supported enemy types\n   */\n  public getSupportedEnemyTypes(): EnemyType[] {\n    return Array.from(this.handlers.keys());\n  }\n\n  /**\n   * Validate that all required handlers are available\n   */\n  public validateHandlers(): { isValid: boolean; missingTypes: EnemyType[] } {\n    const requiredTypes: EnemyType[] = ['generic', 'infinite', 'mortal'];\n    const missingTypes: EnemyType[] = [];\n\n    for (const type of requiredTypes) {\n      if (!this.hasHandler(type)) {\n        missingTypes.push(type);\n      }\n    }\n\n    return {\n      isValid: missingTypes.length === 0,\n      missingTypes\n    };\n  }\n\n  /**\n   * Create a new enemy configuration with proper type validation\n   */\n  public createEnemyConfiguration(enemyData: any): Enemy {\n    if (!enemyData.type || typeof enemyData.type !== 'string') {\n      throw new Error('Enemy configuration must have a valid type');\n    }\n\n    const enemyType = enemyData.type as EnemyType;\n    \n    if (!this.hasHandler(enemyType)) {\n      throw new Error(`Unsupported enemy type: ${enemyType}`);\n    }\n\n    // Validate and create enemy configuration based on type\n    switch (enemyType) {\n      case 'generic':\n        return this.createGenericEnemy(enemyData);\n      case 'infinite':\n        return this.createInfiniteEnemy(enemyData);\n      case 'mortal':\n        return this.createMortalEnemy(enemyData);\n      default:\n        throw new Error(`Unknown enemy type: ${enemyType}`);\n    }\n  }\n\n  /**\n   * Create a generic enemy configuration\n   */\n  private createGenericEnemy(data: any): Enemy {\n    if (!data.name || typeof data.name !== 'string') {\n      throw new Error('Generic enemy must have a name');\n    }\n\n    return {\n      type: 'generic',\n      name: data.name,\n      groupIndex: data.groupIndex || 0\n    };\n  }\n\n  /**\n   * Create an infinite enemy configuration\n   */\n  private createInfiniteEnemy(data: any): Enemy {\n    if (!data.unit || typeof data.unit !== 'object') {\n      throw new Error('Infinite enemy must have unit data');\n    }\n\n    // Validate required unit properties\n    const unit = data.unit;\n    if (!unit.name || typeof unit.name !== 'string') {\n      throw new Error('Infinite enemy unit must have a name');\n    }\n    if (typeof unit.strength !== 'number' || unit.strength < 0) {\n      throw new Error('Infinite enemy unit must have valid strength');\n    }\n    if (typeof unit.health !== 'number' || unit.health <= 0) {\n      throw new Error('Infinite enemy unit must have valid health');\n    }\n\n    return {\n      type: 'infinite',\n      unit: {\n        ...unit,\n        unit_types: unit.unit_types || [],\n        attack_modifiers: unit.attack_modifiers || []\n      },\n      groupIndex: data.groupIndex || 0\n    };\n  }\n\n  /**\n   * Create a mortal enemy configuration\n   */\n  private createMortalEnemy(data: any): Enemy {\n    if (!data.unit || typeof data.unit !== 'object') {\n      throw new Error('Mortal enemy must have unit data');\n    }\n    if (typeof data.count !== 'number' || data.count <= 0) {\n      throw new Error('Mortal enemy must have a positive count');\n    }\n\n    // Validate required unit properties\n    const unit = data.unit;\n    if (!unit.name || typeof unit.name !== 'string') {\n      throw new Error('Mortal enemy unit must have a name');\n    }\n    if (typeof unit.strength !== 'number' || unit.strength < 0) {\n      throw new Error('Mortal enemy unit must have valid strength');\n    }\n    if (typeof unit.health !== 'number' || unit.health <= 0) {\n      throw new Error('Mortal enemy unit must have valid health');\n    }\n\n    return {\n      type: 'mortal',\n      unit: {\n        ...unit,\n        unit_types: unit.unit_types || [],\n        attack_modifiers: unit.attack_modifiers || []\n      },\n      count: data.count,\n      currentCount: data.currentCount || data.count,\n      groupIndex: data.groupIndex || 0\n    };\n  }\n\n  /**\n   * Reset all handlers to initial state (if needed)\n   */\n  public resetHandlers(): void {\n    // Handlers are stateless, but this method is available for future use\n    // if any handlers need state reset functionality\n  }\n\n  /**\n   * Get handler statistics for debugging/monitoring\n   */\n  public getHandlerStats(): Record<EnemyType, any> {\n    const stats: Record<string, any> = {};\n\n    for (const [type, handler] of this.handlers) {\n      stats[type] = {\n        type: handler.getEnemyType(),\n        available: true\n      };\n    }\n\n    return stats;\n  }\n\n  /**\n   * Clone an enemy configuration for battle reuse\n   */\n  public cloneEnemy(enemy: Enemy): Enemy {\n    switch (enemy.type) {\n      case 'generic':\n        return { ...enemy };\n      case 'infinite':\n        return {\n          ...enemy,\n          unit: { ...enemy.unit }\n        };\n      case 'mortal':\n        return {\n          ...enemy,\n          unit: { ...enemy.unit },\n          // Reset current count to original count for fresh battles\n          currentCount: enemy.count\n        };\n      default:\n        throw new Error(`Cannot clone unknown enemy type: ${(enemy as any).type}`);\n    }\n  }\n\n  /**\n   * Batch create multiple enemy configurations\n   */\n  public createMultipleEnemies(enemyDataArray: any[]): Enemy[] {\n    const enemies: Enemy[] = [];\n    \n    for (let i = 0; i < enemyDataArray.length; i++) {\n      try {\n        const enemy = this.createEnemyConfiguration({\n          ...enemyDataArray[i],\n          groupIndex: enemyDataArray[i].groupIndex || i\n        });\n        enemies.push(enemy);\n      } catch (error) {\n        throw new Error(`Error creating enemy at index ${i}: ${error}`);\n      }\n    }\n\n    return enemies;\n  }\n}","/**\n * Turn Manager\n * \n * Pure function-based turn management for unified battle simulation.\n * Manages turn progression and strict alternation between player and enemy actions\n * without mutating the input state - returns new state objects instead.\n * \n * Battle Mechanics:\n * - Turn: A complete round where all available unit groups have the opportunity to take one action\n * - Action: A single attack performed by one unit group against another unit group\n * - Strict alternation: Player Action → Enemy Action → Player Action → Enemy Action\n * - Uneven groups: Side with remaining units continues consecutively when the other side is exhausted\n * \n * Architecture:\n * - Pure functions: All methods return new state objects, never mutate input\n * - Immutable state: Maintains battle state integrity and enables history tracking\n * - Functional composition: State transformations can be composed and tested in isolation\n */\n\nimport { \n  UnifiedBattleState, \n  BattlePlayerGroup, \n  Enemy, \n  TurnManager as ITurnManager,\n  ActionTracking\n} from '../types';\n\nexport class TurnManager implements ITurnManager {\n  \n  /**\n   * Determines if the next action should be performed by a player unit group\n   * Handles alternation and uneven unit group scenarios\n   */\n  public shouldPlayerActNext(state: UnifiedBattleState, playerGoesFirst: boolean): boolean {\n    const availablePlayers = this.getAvailablePlayerGroups(state);\n    const availableEnemies = this.getAvailableEnemies(state);\n\n    // If one side has no units available, the other side acts\n    if (availablePlayers.length === 0) {\n      return false; // Only enemies can act\n    }\n    if (availableEnemies.length === 0) {\n      return true; // Only players can act\n    }\n\n    // Both sides have available units - use strict alternation\n    const isEvenAction = state.currentAction % 2 === 0;\n    \n    if (playerGoesFirst) {\n      return isEvenAction; // Player acts on even actions (0, 2, 4...)\n    } else {\n      return !isEvenAction; // Player acts on odd actions (1, 3, 5...)\n    }\n  }\n\n  /**\n   * Gets player unit groups that haven't acted this turn and are still alive\n   */\n  public getAvailablePlayerGroups(state: UnifiedBattleState): BattlePlayerGroup[] {\n    return state.playerGroups.filter(group => \n      group.totalHealth > 0 && \n      !state.unitsActedThisTurn.players.has(group.unit.name)\n    );\n  }\n\n  /**\n   * Gets enemy unit groups that haven't acted this turn and can still attack\n   */\n  public getAvailableEnemies(state: UnifiedBattleState): Enemy[] {\n    return state.enemies.filter((enemy, index) => \n      this.canEnemyAttack(enemy) && \n      !state.unitsActedThisTurn.enemies.has(index)\n    );\n  }\n\n  /**\n   * Returns new state with unit marked as having taken its action for this turn\n   * Pure function - does not mutate input state\n   */\n  public markUnitAsActed(state: UnifiedBattleState, unit: BattlePlayerGroup | Enemy): UnifiedBattleState {\n    const newUnitsActedThisTurn: ActionTracking = {\n      players: new Set(state.unitsActedThisTurn.players),\n      enemies: new Set(state.unitsActedThisTurn.enemies)\n    };\n\n    if (this.isPlayerGroup(unit)) {\n      // Player unit\n      newUnitsActedThisTurn.players.add(unit.unit.name);\n    } else {\n      // Enemy unit - find its index by groupIndex (more reliable than reference comparison)\n      const enemyIndex = state.enemies.findIndex(e => e.groupIndex === unit.groupIndex);\n      if (enemyIndex >= 0) {\n        newUnitsActedThisTurn.enemies.add(enemyIndex);\n      } else {\n        console.warn('Could not find enemy index for marking as acted:', unit);\n      }\n    }\n    \n    return {\n      ...state,\n      currentAction: state.currentAction + 1,\n      unitsActedThisTurn: newUnitsActedThisTurn\n    };\n  }\n\n  /**\n   * Determines if the current turn is complete (all unit groups have acted or been eliminated)\n   * A turn is complete when all units that could potentially act this turn have either:\n   * 1. Already acted (marked in unitsActedThisTurn), OR\n   * 2. Been eliminated/cannot act anymore\n   */\n  public isTurnComplete(state: UnifiedBattleState): boolean {\n    const availablePlayers = this.getAvailablePlayerGroups(state);\n    const availableEnemies = this.getAvailableEnemies(state);\n    \n    // Turn is complete when no more units from either side can act THIS TURN\n    return availablePlayers.length === 0 && availableEnemies.length === 0;\n  }\n\n  /**\n   * Check if the battle should end (no units can act in future turns)\n   */\n  public shouldBattleEnd(state: UnifiedBattleState): boolean {\n    const alivePlayerGroups = state.playerGroups.filter(group => group.totalHealth > 0);\n    const attackableEnemies = state.enemies.filter(enemy => this.canEnemyAttack(enemy));\n    \n    // Battle ends if either side has no units that can act\n    return alivePlayerGroups.length === 0 || attackableEnemies.length === 0;\n  }\n\n  /**\n   * Returns new state advanced to the next turn with reset action tracking\n   * Pure function - does not mutate input state\n   */\n  public advanceToNextTurn(state: UnifiedBattleState): UnifiedBattleState {\n    return {\n      ...state,\n      currentTurn: state.currentTurn + 1,\n      currentAction: 0,\n      unitsActedThisTurn: {\n        players: new Set<string>(),\n        enemies: new Set<number>()\n      }\n    };\n  }\n\n  /**\n   * Check if an enemy can currently attack based on its type and state\n   */\n  private canEnemyAttack(enemy: Enemy): boolean {\n    switch (enemy.type) {\n      case 'generic':\n        return true; // Generic enemies always attack\n      case 'infinite':\n        return true; // Infinite enemies always attack\n      case 'mortal':\n        return enemy.currentCount > 0; // Mortal enemies attack if they have units left\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Type guard to check if a unit is a player group\n   */\n  private isPlayerGroup(unit: BattlePlayerGroup | Enemy): unit is BattlePlayerGroup {\n    return 'unit' in unit && 'count' in unit && 'totalHealth' in unit;\n  }\n\n  /**\n   * Get battle turn statistics for debugging/analysis\n   */\n  public getTurnStats(state: UnifiedBattleState): {\n    currentTurn: number;\n    currentAction: number;\n    actionsThisTurn: number;\n    playersActedThisTurn: number;\n    enemiesActedThisTurn: number;\n    availablePlayerGroups: number;\n    availableEnemies: number;\n    turnComplete: boolean;\n  } {\n    return {\n      currentTurn: state.currentTurn,\n      currentAction: state.currentAction,\n      actionsThisTurn: state.unitsActedThisTurn.players.size + state.unitsActedThisTurn.enemies.size,\n      playersActedThisTurn: state.unitsActedThisTurn.players.size,\n      enemiesActedThisTurn: state.unitsActedThisTurn.enemies.size,\n      availablePlayerGroups: this.getAvailablePlayerGroups(state).length,\n      availableEnemies: this.getAvailableEnemies(state).length,\n      turnComplete: this.isTurnComplete(state)\n    };\n  }\n\n  /**\n   * Validate turn state consistency\n   */\n  public validateTurnState(state: UnifiedBattleState): {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check for negative values\n    if (state.currentTurn < 1) {\n      errors.push(`Invalid turn number: ${state.currentTurn} (should be >= 1)`);\n    }\n    \n    if (state.currentAction < 0) {\n      errors.push(`Invalid action number: ${state.currentAction} (should be >= 0)`);\n    }\n\n    // Check action tracking consistency\n    const totalActionsTracked = state.unitsActedThisTurn.players.size + state.unitsActedThisTurn.enemies.size;\n    if (totalActionsTracked > state.currentAction) {\n      warnings.push(`More units marked as acted (${totalActionsTracked}) than current action count (${state.currentAction})`);\n    }\n\n    // Check for units marked as acted that no longer exist or can't act\n    for (const playerName of state.unitsActedThisTurn.players) {\n      const player = state.playerGroups.find(p => p.unit.name === playerName);\n      if (!player) {\n        warnings.push(`Player ${playerName} marked as acted but not found in battle`);\n      } else if (player.totalHealth <= 0) {\n        warnings.push(`Dead player ${playerName} marked as acted this turn`);\n      }\n    }\n\n    for (const enemyIndex of state.unitsActedThisTurn.enemies) {\n      const enemy = state.enemies[enemyIndex];\n      if (!enemy) {\n        warnings.push(`Enemy at index ${enemyIndex} marked as acted but not found`);\n      } else if (!this.canEnemyAttack(enemy)) {\n        warnings.push(`Enemy ${enemy.type} at index ${enemyIndex} marked as acted but cannot attack`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Get detailed alternation analysis for debugging\n   */\n  public getAlternationAnalysis(state: UnifiedBattleState, playerGoesFirst: boolean): {\n    expectedPattern: string;\n    actualPattern: string;\n    isCorrectAlternation: boolean;\n    nextShouldBe: 'player' | 'enemy';\n  } {\n    const availablePlayers = this.getAvailablePlayerGroups(state);\n    const availableEnemies = this.getAvailableEnemies(state);\n\n    // Build expected pattern based on available units\n    let expectedPattern = '';\n    let currentAction = 0;\n    const totalPlayers = availablePlayers.length + state.unitsActedThisTurn.players.size;\n    const totalEnemies = availableEnemies.length + state.unitsActedThisTurn.enemies.size;\n    const totalActions = Math.max(totalPlayers + totalEnemies, state.currentAction);\n\n    for (let i = 0; i < totalActions; i++) {\n      const shouldBePlayer = this.shouldPlayerActNext({ ...state, currentAction: i }, playerGoesFirst);\n      expectedPattern += shouldBePlayer ? 'P' : 'E';\n    }\n\n    // Build actual pattern from action tracking (simplified)\n    const actualPattern = 'P'.repeat(state.unitsActedThisTurn.players.size) + 'E'.repeat(state.unitsActedThisTurn.enemies.size);\n\n    const nextShouldBe = this.shouldPlayerActNext(state, playerGoesFirst) ? 'player' : 'enemy';\n\n    return {\n      expectedPattern,\n      actualPattern,\n      isCorrectAlternation: true, // TODO: Implement proper pattern matching\n      nextShouldBe\n    };\n  }\n\n  /**\n   * Returns new state with turn tracking reset (for battle restart)\n   * Pure function - does not mutate input state\n   */\n  public resetTurn(state: UnifiedBattleState): UnifiedBattleState {\n    return {\n      ...state,\n      currentTurn: 1,\n      currentAction: 0,\n      unitsActedThisTurn: {\n        players: new Set<string>(),\n        enemies: new Set<number>()\n      }\n    };\n  }\n\n  /**\n   * Get turn progression summary\n   */\n  public getTurnSummary(state: UnifiedBattleState): string {\n    const stats = this.getTurnStats(state);\n    return `Turn ${stats.currentTurn}, Action ${stats.currentAction}: ${stats.playersActedThisTurn}P + ${stats.enemiesActedThisTurn}E acted, ${stats.availablePlayerGroups}P + ${stats.availableEnemies}E available`;\n  }\n}","/**\n * Unified Battle Simulation\n * \n * Main battle simulation class that handles all enemy types with shared logic.\n * Replaces the complex hierarchy of battle simulation services with a single, unified system.\n */\n\nimport { \n  UnifiedBattleConfiguration,\n  UnifiedBattleResult,\n  UnifiedBattleState,\n  BattleOutcome,\n  Enemy,\n  EnemyTypeHandler,\n  NextAttackerSelector,\n  UNIFIED_BATTLE_CONSTANTS\n} from './types';\nimport { BattleState } from './BattleState';\nimport { DynamicAttackerSelector } from './NextAttackerSelector';\nimport { EnemyFactory } from './enemies/EnemyFactory';\nimport { TurnManager } from './turns/TurnManager';\n\nexport class UnifiedBattleSimulation {\n  private battleState!: BattleState;\n  private attackerSelector: NextAttackerSelector;\n  private enemyFactory: EnemyFactory;\n  private turnManager: TurnManager;\n\n  constructor() {\n    this.attackerSelector = new DynamicAttackerSelector();\n    this.enemyFactory = EnemyFactory.getInstance();\n    this.turnManager = new TurnManager();\n    this.validateEnemyHandlers();\n  }\n\n  /**\n   * Simulate a battle with the given configuration\n   */\n  public simulateBattle(config: UnifiedBattleConfiguration): UnifiedBattleResult {\n    // Initialize battle state\n    this.battleState = new BattleState(config);\n    \n    // Validate configuration\n    this.validateConfiguration(config);\n    \n    // Run the battle simulation loop\n    this.runBattleLoop(config.playerGoesFirst, config);\n    \n    // Calculate final results\n    return this.buildBattleResult(config);\n  }\n\n  /**\n   * Main battle loop following strict turn alternation mechanics using dedicated TurnManager\n   */\n  private runBattleLoop(playerGoesFirst: boolean, config: UnifiedBattleConfiguration): void {\n    let actionCount = 0;\n    const maxTurns = config.maxBattleTurns ?? UNIFIED_BATTLE_CONSTANTS.MAX_BATTLE_TURNS;\n    const maxActionsPerTurn = config.maxActionsPerTurn ?? UNIFIED_BATTLE_CONSTANTS.MAX_ACTIONS_PER_TURN;\n    const maxActionsPerBattle = maxTurns * maxActionsPerTurn;\n    \n    while (!this.battleState.isBattleEnded() && actionCount < maxActionsPerBattle) {\n      const currentState = this.battleState.getBattleState();\n      \n      // Determine who should act next based on alternation rules using TurnManager\n      const shouldPlayerAct = this.turnManager.shouldPlayerActNext(currentState, playerGoesFirst);\n      \n      \n      if (shouldPlayerAct) {\n        this.processPlayerAction(currentState);\n      } else {\n        this.processEnemyAction(currentState);\n      }\n      \n      actionCount++;\n      \n      // Check if battle should end IMMEDIATELY after action (most important check)\n      const stateAfterAction = this.battleState.getBattleState();\n      if (this.turnManager.shouldBattleEnd(stateAfterAction)) {\n        const endState = this.battleState.checkBattleEndPure(stateAfterAction, maxTurns);\n        this.battleState.applyStateUpdate(endState);\n        break;\n      }\n      \n      // Check other battle end conditions  \n      const finalState = this.battleState.checkBattleEndPure(stateAfterAction, maxTurns);\n      this.battleState.applyStateUpdate(finalState);\n      \n      // Check if turn is complete AFTER processing actions\n      const finalStateAfterBattleCheck = this.battleState.getBattleState();\n      if (!this.battleState.isBattleEnded() && this.turnManager.isTurnComplete(finalStateAfterBattleCheck)) {\n        const newState = this.turnManager.advanceToNextTurn(finalStateAfterBattleCheck);\n        this.battleState.applyStateUpdate(newState);\n      }\n    }\n    \n    // Force end if we hit the action limit (stalemate protection)\n    if (actionCount >= maxActionsPerBattle) {\n      this.battleState.endBattle();\n    }\n  }\n\n  /**\n   * Process a player unit group action (efficient unified approach)\n   */\n  private processPlayerAction(currentState: UnifiedBattleState): void {\n    // Get complete attack plan with all information calculated once\n    const attackPlan = this.attackerSelector.selectNextPlayerAttack(currentState);\n    if (!attackPlan) {\n      return; // No available players to act\n    }\n    \n    // Apply complete attack plan (damage, combat log, mark as acted) in one operation\n    const newState = this.battleState.applyCompleteAttack(currentState, attackPlan);\n    this.battleState.applyStateUpdate(newState);\n  }\n\n  /**\n   * Process an enemy unit action (efficient unified approach)\n   */\n  private processEnemyAction(currentState: UnifiedBattleState): void {\n    // Get complete attack plan with all information calculated once\n    const attackPlan = this.attackerSelector.selectNextEnemyAttack(currentState);\n    if (!attackPlan) {\n      return; // No available enemies to act\n    }\n    \n    // Apply complete attack plan (damage, combat log, mark as acted) in one operation\n    const newState = this.battleState.applyCompleteAttack(currentState, attackPlan);\n    this.battleState.applyStateUpdate(newState);\n  }\n\n\n\n  /**\n   * Validate that all required enemy handlers are available\n   */\n  private validateEnemyHandlers(): void {\n    const validation = this.enemyFactory.validateHandlers();\n    if (!validation.isValid) {\n      throw new Error(`Missing enemy type handlers: ${validation.missingTypes.join(', ')}`);\n    }\n  }\n\n  /**\n   * Validate the battle configuration\n   */\n  private validateConfiguration(config: UnifiedBattleConfiguration): void {\n    if (!config.playerArmy || !config.playerArmy.stackingOrder || config.playerArmy.stackingOrder.length === 0) {\n      throw new Error('Player army must have at least one unit group');\n    }\n    \n    if (!config.enemies || config.enemies.length === 0) {\n      throw new Error('Battle must have at least one enemy');\n    }\n    \n    // Validate enemy configurations\n    for (const enemy of config.enemies) {\n      if (enemy.type === 'mortal' && (!enemy.count || enemy.count <= 0)) {\n        throw new Error(`Mortal enemy ${enemy.unit?.name || 'Unknown'} must have a positive count`);\n      }\n    }\n  }\n\n  /**\n   * Build the final battle result\n   */\n  private buildBattleResult(config: UnifiedBattleConfiguration): UnifiedBattleResult {\n    const state = this.battleState.getBattleState();\n    const maxTurns = config.maxBattleTurns ?? UNIFIED_BATTLE_CONSTANTS.MAX_BATTLE_TURNS;\n    const outcome = this.battleState.getBattleOutcome(maxTurns);\n    \n    const battleOutcome: BattleOutcome = {\n      result: outcome,\n      survivingPlayerGroups: this.battleState.getAlivePlayerGroups(),\n      survivingEnemies: this.battleState.getAttackableEnemies(),\n      totalTurns: this.battleState.getCurrentTurn(),\n      totalActions: state.currentAction + (this.battleState.getCurrentTurn() - 1) * UNIFIED_BATTLE_CONSTANTS.MAX_ACTIONS_PER_TURN\n    };\n    \n    return {\n      outcome: battleOutcome,\n      combatLog: this.battleState.getCombatLog(),\n      totalDamageDealt: this.battleState.getTotalDamageDealt(),\n      battleDuration: Math.ceil(battleOutcome.totalTurns) // Duration in turns, not milliseconds\n    };\n  }\n\n  /**\n   * Get current battle state for debugging/monitoring\n   */\n  public getBattleState(): Readonly<UnifiedBattleState> {\n    return this.battleState?.getBattleState() || {} as UnifiedBattleState;\n  }\n\n  /**\n   * Check if the battle simulation is currently running\n   */\n  public isBattleActive(): boolean {\n    return this.battleState ? !this.battleState.isBattleEnded() : false;\n  }\n}","/**\n * Damage Optimization Service\n * Optimizes army compositions for maximum damage output against enemy groups\n * Uses existing battle simulation engine for accurate damage calculations\n */\n\nimport { Unit, ArmyComposition, OptimizationConstraints } from '../types/units';\nimport { UnifiedBattleSimulation } from './unified-battle-simulation/UnifiedBattleSimulation';\nimport { UnifiedBattleConfiguration, UnifiedBattleResult } from './unified-battle-simulation/types';\nimport { StackingOptimizer } from './stackingOptimizer';\n\n/**\n * Battle analysis using unified battle results\n */\ninterface BattleAnalysis {\n  bestCase: UnifiedBattleResult;\n  worstCase: UnifiedBattleResult;\n}\n\n/**\n * Progress callback for damage optimization\n */\nexport interface DamageOptimizationProgress {\n  /** Current phase of optimization */\n  phase: 'initializing' | 'generating' | 'evaluating' | 'finalizing';\n  /** Progress percentage (0-100) */\n  progress: number;\n  /** Current status message */\n  message: string;\n  /** Number of combinations generated so far */\n  combinationsGenerated?: number;\n  /** Total combinations to generate */\n  totalCombinations?: number;\n  /** Number of combinations evaluated so far */\n  combinationsEvaluated?: number;\n  /** Total combinations to evaluate */\n  totalToEvaluate?: number;\n  /** Elapsed time in milliseconds */\n  elapsedMs: number;\n  /** Estimated time remaining in milliseconds */\n  estimatedRemainingMs?: number;\n}\n\n/**\n * Configuration for damage optimization\n */\nexport interface DamageOptimizationConstraints extends OptimizationConstraints {\n  /** Number of enemy groups to optimize against */\n  enemyGroupCount: number;\n  /** Specific enemy units to optimize against (optional) */\n  specificEnemyUnits?: any[];\n  /** Maximum number of army combinations to evaluate (performance limit) */\n  maxCombinations?: number;\n  /** Progress callback function */\n  onProgress?: (progress: DamageOptimizationProgress) => void;\n  /** Cancellation signal */\n  signal?: AbortSignal;\n}\n\n/**\n * Result of damage optimization for a single army composition\n */\nexport interface DamageOptimizationResult {\n  /** The optimized army composition */\n  armyComposition: ArmyComposition;\n  /** Battle analysis results from simulation */\n  battleAnalysis: BattleAnalysis;\n  /** Total silver cost for this army */\n  totalSilverCost: number;\n  /** Total food consumption for this army */\n  totalFoodConsumption: number;\n  /** Total revival cost (silver) for this army */\n  totalRevivalCost: number;\n  /** Average total damage per battle across best/worst case scenarios */\n  averageDamagePerBattle: number;\n  /** Damage efficiency score (damage per resource cost) */\n  damageEfficiencyScore: number;\n}\n\n/**\n * Complete results from damage optimization showing multiple ranked options\n */\nexport interface DamageOptimizationResults {\n  /** Array of optimization results ranked by damage output */\n  rankedResults: DamageOptimizationResult[];\n  /** Total number of combinations evaluated */\n  combinationsEvaluated: number;\n  /** Time taken for optimization in milliseconds */\n  optimizationTimeMs: number;\n  /** Algorithm used for optimization */\n  algorithmUsed: string;\n  /** Whether optimization was truncated due to performance limits */\n  wasTruncated: boolean;\n}\n\n/**\n * Interface for pluggable optimization algorithms\n */\nexport interface IDamageOptimizationAlgorithm {\n  /** Name of the algorithm for reporting */\n  name: string;\n\n  /**\n   * Generate army combinations to evaluate\n   * @param constraints Optimization constraints including available units and budgets\n   * @param units Array of all available units\n   * @returns Promise of array of army compositions to evaluate\n   */\n  generateCombinations(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<ArmyComposition[]>;\n}\n\n/**\n * Main damage optimization service\n */\nexport class DamageOptimizer {\n  private algorithm: IDamageOptimizationAlgorithm;\n\n  constructor(\n    algorithm?: IDamageOptimizationAlgorithm\n  ) {\n    // Use unified battle simulation system exclusively\n    this.algorithm = algorithm || new SystematicCombinationAlgorithm();\n  }\n\n  /**\n   * Set the optimization algorithm to use\n   */\n  setAlgorithm(algorithm: IDamageOptimizationAlgorithm): void {\n    this.algorithm = algorithm;\n  }\n\n  /**\n   * Report progress to the callback if provided\n   */\n  private reportProgress(constraints: DamageOptimizationConstraints, progress: DamageOptimizationProgress): void {\n    if (constraints.onProgress) {\n      constraints.onProgress(progress);\n    }\n  }\n\n  /**\n   * Check if the operation has been cancelled\n   */\n  private checkCancellation(constraints: DamageOptimizationConstraints): void {\n    if (constraints.signal?.aborted) {\n      throw new Error('Operation was cancelled by user');\n    }\n  }\n\n  /**\n   * Optimize army composition for maximum damage output\n   */\n  async optimizeForDamage(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<DamageOptimizationResults> {\n    const startTime = performance.now();\n    const maxTimeoutMs = 120000; // 2 minutes maximum\n\n    console.log(`🎯 Starting damage optimization with ${this.algorithm.name}`);\n    console.log(`📊 Constraints: L:${constraints.leadershipBudget} D:${constraints.dominanceBudget} vs ${constraints.enemyGroupCount} enemies`);\n    console.log(`⏱️ Maximum processing time: ${maxTimeoutMs / 1000} seconds`);\n\n    // Report initial progress\n    this.reportProgress(constraints, {\n      phase: 'initializing',\n      progress: 0,\n      message: 'Initializing damage optimizer...',\n      elapsedMs: 0\n    });\n\n    // Validate inputs\n    this.validateOptimizationConstraints(constraints);\n\n    // Report generation phase start\n    this.reportProgress(constraints, {\n      phase: 'generating',\n      progress: 10,\n      message: 'Generating army combinations...',\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Generate army combinations using selected algorithm\n    const armyCombinations = await this.algorithm.generateCombinations(constraints, units);\n\n    console.log(`🔄 Generated ${armyCombinations.length} army combinations to evaluate`);\n\n    // Report evaluation phase start\n    this.reportProgress(constraints, {\n      phase: 'evaluating',\n      progress: 20,\n      message: 'Evaluating army combinations...',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated: 0,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Evaluate each combination with UI yielding and timeout protection\n    const results: DamageOptimizationResult[] = [];\n    let combinationsEvaluated = 0;\n\n    for (let i = 0; i < armyCombinations.length; i++) {\n      // Check for cancellation\n      this.checkCancellation(constraints);\n\n      // Check for timeout\n      const currentTime = performance.now();\n      if (currentTime - startTime > maxTimeoutMs) {\n        console.warn(`⏱️ Optimization timeout after ${(currentTime - startTime) / 1000}s - stopping at ${combinationsEvaluated} combinations`);\n        break;\n      }\n\n      const army = armyCombinations[i];\n\n      try {\n        const result = await this.evaluateArmyComposition(army, constraints.enemyGroupCount, units, constraints.specificEnemyUnits);\n        results.push(result);\n        combinationsEvaluated++;\n      } catch (error) {\n        console.warn(`⚠️ Failed to evaluate army composition:`, error);\n        // Continue with other combinations\n      }\n\n      // Yield control to UI every 3 combinations to prevent blocking (outside try-catch)\n      if (combinationsEvaluated % 3 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n\n      // Report progress every 10 combinations or at key milestones\n      if (combinationsEvaluated % 10 === 0 || combinationsEvaluated === armyCombinations.length) {\n        const elapsedMs = performance.now() - startTime;\n        const progressPercent = 20 + Math.floor((combinationsEvaluated / armyCombinations.length) * 60); // 20-80%\n        const estimatedRemainingMs = combinationsEvaluated > 0\n          ? (elapsedMs / combinationsEvaluated) * (armyCombinations.length - combinationsEvaluated)\n          : undefined;\n\n        this.reportProgress(constraints, {\n          phase: 'evaluating',\n          progress: progressPercent,\n          message: `Evaluating combinations... (${combinationsEvaluated}/${armyCombinations.length})`,\n          combinationsGenerated: armyCombinations.length,\n          totalCombinations: armyCombinations.length,\n          combinationsEvaluated,\n          totalToEvaluate: armyCombinations.length,\n          elapsedMs,\n          estimatedRemainingMs\n        });\n      }\n\n      // Additional safety: Log progress every 25 combinations\n      if (combinationsEvaluated % 25 === 0) {\n        const elapsed = (performance.now() - startTime) / 1000;\n        console.log(`📊 Progress: ${combinationsEvaluated}/${armyCombinations.length} combinations (${elapsed.toFixed(1)}s elapsed)`);\n      }\n    }\n\n    // Report finalizing phase\n    this.reportProgress(constraints, {\n      phase: 'finalizing',\n      progress: 90,\n      message: 'Finalizing results...',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Sort results by damage output (descending)\n    const rankedResults = results.sort((a, b) => {\n      // Primary sort: average damage per battle\n      const damageDiff = b.averageDamagePerBattle - a.averageDamagePerBattle;\n      if (Math.abs(damageDiff) > 0.01) return damageDiff;\n\n      // Secondary sort: damage efficiency score\n      return b.damageEfficiencyScore - a.damageEfficiencyScore;\n    });\n\n    const endTime = performance.now();\n    const optimizationTimeMs = endTime - startTime;\n\n    console.log(`✅ Optimization complete: ${rankedResults.length} valid results in ${optimizationTimeMs.toFixed(2)}ms`);\n\n    // Report completion\n    this.reportProgress(constraints, {\n      phase: 'finalizing',\n      progress: 100,\n      message: 'Optimization complete!',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: optimizationTimeMs\n    });\n\n    return {\n      rankedResults,\n      combinationsEvaluated,\n      optimizationTimeMs,\n      algorithmUsed: this.algorithm.name,\n      wasTruncated: armyCombinations.length > (constraints.maxCombinations || 50)\n    };\n  }\n\n  /**\n   * Evaluate a single army composition for damage optimization\n   */\n  private async evaluateArmyComposition(\n    army: ArmyComposition,\n    enemyGroupCount: number,\n    units: Unit[],\n    specificEnemyUnits?: any[]\n  ): Promise<DamageOptimizationResult> {\n    // Use unified battle simulation system for all scenarios\n    const unifiedBattleService = new UnifiedBattleSimulation();\n    let battleAnalysis;\n    \n    if (specificEnemyUnits && specificEnemyUnits.length > 0) {\n      // Convert specific enemy units to unified format\n      const unifiedEnemies = specificEnemyUnits.map((enemy, index) => ({\n        type: enemy.isMortal ? 'mortal' : 'infinite',\n        unit: {\n          name: enemy.name,\n          strength: enemy.strength,\n          health: enemy.health,\n          unit_types: enemy.unit_types || [],\n          attack_modifiers: enemy.attack_modifiers || []\n        },\n        count: enemy.count || 1,\n        currentCount: enemy.count || 1,\n        groupIndex: index\n      }));\n\n      // Run best case scenario (player goes first)\n      const bestCaseConfig: UnifiedBattleConfiguration = {\n        playerArmy: {\n          stackingOrder: JSON.parse(JSON.stringify(army.stackingOrder)),\n          totalStrength: army.totalStrength,\n          totalHealth: army.totalHealth\n        },\n        enemies: JSON.parse(JSON.stringify(unifiedEnemies)),\n        playerGoesFirst: true\n      };\n\n      const bestCaseResult = unifiedBattleService.simulateBattle(bestCaseConfig);\n\n      // Run worst case scenario (enemy goes first)  \n      const worstCaseConfig: UnifiedBattleConfiguration = {\n        playerArmy: {\n          stackingOrder: JSON.parse(JSON.stringify(army.stackingOrder)),\n          totalStrength: army.totalStrength,\n          totalHealth: army.totalHealth\n        },\n        enemies: JSON.parse(JSON.stringify(unifiedEnemies)),\n        playerGoesFirst: false\n      };\n\n      const worstCaseResult = unifiedBattleService.simulateBattle(worstCaseConfig);\n\n      // Use unified battle results directly\n      battleAnalysis = {\n        bestCase: bestCaseResult,\n        worstCase: worstCaseResult\n      };\n    } else {\n      // Use generic enemies\n      const genericEnemies = Array.from({ length: enemyGroupCount }, (_, index) => ({\n        type: 'generic' as const,\n        name: `Generic Enemy ${index + 1}`,\n        groupIndex: index\n      }));\n\n      // Run best case scenario\n      const bestCaseConfig: UnifiedBattleConfiguration = {\n        playerArmy: {\n          stackingOrder: JSON.parse(JSON.stringify(army.stackingOrder)),\n          totalStrength: army.totalStrength,\n          totalHealth: army.totalHealth\n        },\n        enemies: JSON.parse(JSON.stringify(genericEnemies)),\n        playerGoesFirst: true\n      };\n\n      const bestCaseResult = unifiedBattleService.simulateBattle(bestCaseConfig);\n\n      // Run worst case scenario\n      const worstCaseConfig: UnifiedBattleConfiguration = {\n        playerArmy: {\n          stackingOrder: JSON.parse(JSON.stringify(army.stackingOrder)),\n          totalStrength: army.totalStrength,\n          totalHealth: army.totalHealth\n        },\n        enemies: JSON.parse(JSON.stringify(genericEnemies)),\n        playerGoesFirst: false\n      };\n\n      const worstCaseResult = unifiedBattleService.simulateBattle(worstCaseConfig);\n\n      // Use unified battle results directly\n      battleAnalysis = {\n        bestCase: bestCaseResult,\n        worstCase: worstCaseResult\n      };\n    }\n\n    // Calculate cost metrics\n    const totalSilverCost = this.calculateSilverCost(army, units);\n    const totalFoodConsumption = this.calculateFoodConsumption(army, units);\n    const totalRevivalCost = this.calculateRevivalCost(army, units);\n\n    // Calculate damage metrics - total damage per battle (not per turn)\n    const bestCaseTotalDamage = battleAnalysis.bestCase.totalDamageDealt;\n    const worstCaseTotalDamage = battleAnalysis.worstCase.totalDamageDealt;\n\n    const averageDamagePerBattle = (bestCaseTotalDamage + worstCaseTotalDamage) / 2;\n\n    // Calculate damage efficiency (damage per resource cost)\n    const totalResourceCost = army.totalLeadershipCost + army.totalDominanceCost + totalSilverCost;\n    const damageEfficiencyScore = totalResourceCost > 0 ? averageDamagePerBattle / totalResourceCost : 0;\n\n    return {\n      armyComposition: army,\n      battleAnalysis,\n      totalSilverCost,\n      totalFoodConsumption,\n      totalRevivalCost,\n      averageDamagePerBattle,\n      damageEfficiencyScore\n    };\n  }\n\n  /**\n   * Calculate total silver cost for an army composition\n   */\n  private calculateSilverCost(army: ArmyComposition, units: Unit[]): number {\n    const unitsByName = new Map(units.map(unit => [unit.name, unit]));\n    let totalSilverCost = 0;\n\n    for (const [unitName, quantity] of Object.entries(army.units)) {\n      const unit = unitsByName.get(unitName);\n      if (unit) {\n        // Silver cost is the revival cost after defending\n        totalSilverCost += (unit.revival_cost_silver ?? 0) * quantity;\n      }\n    }\n\n    return totalSilverCost;\n  }\n\n  /**\n   * Calculate total food consumption for an army composition\n   */\n  private calculateFoodConsumption(army: ArmyComposition, units: Unit[]): number {\n    const unitsByName = new Map(units.map(unit => [unit.name, unit]));\n    let totalFoodConsumption = 0;\n\n    for (const [unitName, quantity] of Object.entries(army.units)) {\n      const unit = unitsByName.get(unitName);\n      if (unit) {\n        totalFoodConsumption += (unit.food_consumption ?? 0) * quantity;\n      }\n    }\n\n    return totalFoodConsumption;\n  }\n\n  /**\n   * Calculate total revival cost (silver) for an army composition\n   */\n  private calculateRevivalCost(army: ArmyComposition, units: Unit[]): number {\n    // Revival cost is the same as silver cost in this context\n    return this.calculateSilverCost(army, units);\n  }\n\n  /**\n   * Validate optimization constraints\n   */\n  private validateOptimizationConstraints(constraints: DamageOptimizationConstraints): void {\n    if (constraints.enemyGroupCount < 1 || constraints.enemyGroupCount > 100) {\n      throw new Error('Enemy group count must be between 1 and 100');\n    }\n\n    if (constraints.leadershipBudget < 0) {\n      throw new Error('Leadership budget cannot be negative');\n    }\n\n    if (constraints.dominanceBudget < 0) {\n      throw new Error('Dominance budget cannot be negative');\n    }\n\n    if (!constraints.availableUnits || constraints.availableUnits.length === 0) {\n      throw new Error('At least one unit type must be available for optimization');\n    }\n\n    if (constraints.maxCombinations && constraints.maxCombinations < 1) {\n      throw new Error('Maximum combinations must be at least 1');\n    }\n  }\n}\n\n/**\n * Systematic combination algorithm that tests all possible unit combinations\n * Uses the proven stacking algorithm for each combination\n */\nexport class SystematicCombinationAlgorithm implements IDamageOptimizationAlgorithm {\n  name = 'Systematic Combination Testing';\n\n  async generateCombinations(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<ArmyComposition[]> {\n    const generationStartTime = performance.now();\n    const maxGenerationTimeMs = 60000; // 1 minute for generation phase\n\n    console.log(`🔍 Generating combinations using systematic testing algorithm`);\n\n    // Filter units to only those available for optimization\n    const availableUnits = units.filter(unit =>\n      constraints.availableUnits.includes(unit.name)\n    );\n\n    console.log(`📋 Available units for optimization: ${availableUnits.length}`);\n\n    // Generate unit combinations with user-specified limit\n    const maxCombinations = constraints.maxCombinations || 50;\n    const unitCombinations = this.generateUnitCombinations(availableUnits.map(u => u.name), maxCombinations);\n    console.log(`🔄 Testing ${unitCombinations.length} different unit combinations (user requested: ${maxCombinations})`);\n\n    const results: ArmyComposition[] = [];\n\n    // Test each combination using the proven stacking algorithm\n    for (let i = 0; i < unitCombinations.length; i++) {\n      // Check for timeout during generation\n      const currentTime = performance.now();\n      if (currentTime - generationStartTime > maxGenerationTimeMs) {\n        console.warn(`⏱️ Generation timeout after ${(currentTime - generationStartTime) / 1000}s - stopping at ${i} combinations`);\n        break;\n      }\n\n      const combination = unitCombinations[i];\n\n      try {\n        const army = await this.testCombinationWithStackingAlgorithm(combination, constraints, units);\n        if (army) {\n          results.push(army);\n        }\n      } catch (error) {\n        console.warn(`⚠️ Failed to test combination [${combination.join(', ')}]:`, error);\n      }\n\n      // Yield control to UI every 5 combinations during generation (outside try-catch)\n      if (i % 5 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n\n      // Log progress every 20 combinations during generation\n      if (i % 20 === 0 && i > 0) {\n        const elapsed = (performance.now() - generationStartTime) / 1000;\n        console.log(`🔄 Generation progress: ${i}/${unitCombinations.length} combinations tested (${elapsed.toFixed(1)}s)`);\n      }\n    }\n\n    console.log(`✅ Generated ${results.length} valid army combinations for evaluation`);\n    return results;\n  }\n\n  /**\n   * Generate unit combinations with user-specified limit and time-based protection\n   */\n  private generateUnitCombinations(unitNames: string[], maxCombinations: number): string[][] {\n    // Calculate total possible combinations\n    const totalPossible = Math.pow(2, unitNames.length) - 1; // -1 to exclude empty set\n    console.log(`📊 Total possible combinations: ${totalPossible}, user requested: ${maxCombinations}`);\n\n    // If we have too many possible combinations, use a smarter approach\n    if (totalPossible > maxCombinations) {\n      return this.generateLimitedCombinations(unitNames, maxCombinations);\n    }\n\n    // Generate all subsets (2^n combinations) if within limit, using top-down ordering\n    const allCombinations: string[][] = [];\n\n    for (let i = 1; i <= totalPossible; i++) {\n      const combination: string[] = [];\n      for (let j = 0; j < unitNames.length; j++) {\n        if (i & (1 << j)) {\n          combination.push(unitNames[j]);\n        }\n      }\n      allCombinations.push(combination);\n    }\n\n    // Sort combinations by size (largest first) for top-down approach\n    allCombinations.sort((a, b) => b.length - a.length);\n\n    console.log(`🎯 Generated all ${allCombinations.length} combinations, ordered largest to smallest`);\n    console.log(`   User requested: ${maxCombinations} combinations (all possible combinations fit within limit)`);\n    return allCombinations;\n  }\n\n  /**\n   * Generate a limited set of smart combinations when full power set is too large\n   * Strategy: Start with all units, then systematically remove units (top-down approach)\n   */\n  private generateLimitedCombinations(unitNames: string[], maxCombinations: number): string[][] {\n    const combinations: string[][] = [];\n\n    // Strategy 1: Start with ALL units (most comprehensive army)\n    combinations.push([...unitNames]);\n\n    // Strategy 2: Remove one unit at a time (n-1 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      const combination = unitNames.filter((_, index) => index !== i);\n      combinations.push(combination);\n    }\n\n    // Strategy 3: Remove two units at a time (n-2 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      for (let j = i + 1; j < unitNames.length && combinations.length < maxCombinations; j++) {\n        const combination = unitNames.filter((_, index) => index !== i && index !== j);\n        if (combination.length > 0) {\n          combinations.push(combination);\n        }\n      }\n    }\n\n    // Strategy 4: Remove three units at a time (n-3 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      for (let j = i + 1; j < unitNames.length && combinations.length < maxCombinations; j++) {\n        for (let k = j + 1; k < unitNames.length && combinations.length < maxCombinations; k++) {\n          const combination = unitNames.filter((_, index) => index !== i && index !== j && index !== k);\n          if (combination.length > 0) {\n            combinations.push(combination);\n          }\n        }\n      }\n    }\n\n    // Strategy 5: If we still have room, add some strategic smaller combinations\n    if (combinations.length < maxCombinations) {\n      // Add some mid-size combinations (half the units)\n      const halfSize = Math.floor(unitNames.length / 2);\n      for (let attempt = 0; attempt < 10 && combinations.length < maxCombinations; attempt++) {\n        const combination = this.getRandomCombination(unitNames, halfSize);\n\n        // Only add if we don't already have this combination\n        if (!combinations.some(existing =>\n          existing.length === combination.length &&\n          existing.every(unit => combination.includes(unit))\n        )) {\n          combinations.push(combination);\n        }\n      }\n\n      // Add some smaller combinations if we still have room\n      const quarterSize = Math.max(1, Math.floor(unitNames.length / 4));\n      for (let attempt = 0; attempt < 5 && combinations.length < maxCombinations; attempt++) {\n        const combination = this.getRandomCombination(unitNames, quarterSize);\n\n        // Only add if we don't already have this combination\n        if (!combinations.some(existing =>\n          existing.length === combination.length &&\n          existing.every(unit => combination.includes(unit))\n        )) {\n          combinations.push(combination);\n        }\n      }\n    }\n\n    console.log(`🎯 Generated ${combinations.length} top-down combinations from ${unitNames.length} units`);\n    console.log(`   Strategy: Started with all ${unitNames.length} units, then systematically removed units`);\n    console.log(`   User requested: ${maxCombinations} combinations (time-based limits still apply)`);\n    return combinations;\n  }\n\n  /**\n   * Get a random combination of specified size\n   */\n  private getRandomCombination(unitNames: string[], size: number): string[] {\n    const shuffled = [...unitNames].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  }\n\n  /**\n   * Test a specific unit combination using the existing stacking algorithm\n   */\n  private async testCombinationWithStackingAlgorithm(\n    unitCombination: string[],\n    constraints: DamageOptimizationConstraints,\n    allUnits: Unit[]\n  ): Promise<ArmyComposition | null> {\n    try {\n      // Create stacking optimizer with all units\n      const stackingOptimizer = new StackingOptimizer(allUnits);\n\n      // Create constraints for this specific combination\n      const stackingConstraints: OptimizationConstraints = {\n        leadershipBudget: constraints.leadershipBudget,\n        dominanceBudget: constraints.dominanceBudget,\n        mercenaryLimits: constraints.mercenaryLimits,\n        availableUnits: unitCombination\n      };\n\n      // Use the proven stacking algorithm\n      const result = await stackingOptimizer.optimizeArmy(stackingConstraints);\n\n      // Extract the best composition from the result\n      if (result.compositions && result.compositions.length > 0) {\n        return result.compositions[0]; // Return the best composition\n      }\n\n      return null;\n\n    } catch (error) {\n      console.warn(`Failed to test combination [${unitCombination.join(', ')}]:`, error);\n      return null;\n    }\n  }\n\n\n}","/**\n * Enemy Unit Data Loader for the Army Stacking Calculator\n * Loads and manages enemy unit data from JSON files\n */\n\nimport { \n  EnemyUnit, \n  EnemyUnitWithCalculatedProps, \n  EnemyUnitSummary, \n  EnemyUnitFilter,\n  EnemyUnitUtils \n} from '../types/enemyUnits';\nimport { DATA_PATHS } from '../config';\n\nexport class EnemyUnitLoader {\n  private enemyUnits: EnemyUnit[] = [];\n  private enemyUnitsByName: Map<string, EnemyUnit> = new Map();\n  private enemyUnitsByType: Map<string, EnemyUnit[]> = new Map();\n\n  constructor() {\n    this.resetData();\n  }\n\n  /**\n   * Load preset enemy units from enemy_units.json\n   */\n  async loadPresetEnemyUnits(): Promise<EnemyUnit[]> {\n    return this.loadEnemyUnits(DATA_PATHS.ENEMY_UNITS);\n  }\n\n  /**\n   * Load enemy units from a JSON file or URL\n   */\n  async loadEnemyUnits(source: string | EnemyUnit[]): Promise<EnemyUnit[]> {\n    try {\n      let enemyUnitsData: EnemyUnit[];\n\n      if (typeof source === 'string') {\n        console.log(`Loading enemy units from: ${source}`);\n        const response = await fetch(source);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to fetch enemy units: ${response.status} ${response.statusText}`);\n        }\n        \n        enemyUnitsData = await response.json();\n      } else {\n        enemyUnitsData = source;\n      }\n\n      if (!Array.isArray(enemyUnitsData)) {\n        throw new Error('Enemy unit data must be an array');\n      }\n\n      this.enemyUnits = enemyUnitsData.map(unitData => this.validateAndNormalizeEnemyUnit(unitData));\n      this.buildLookups();\n\n      console.log(`✅ Loaded ${this.enemyUnits.length} enemy units successfully`);\n      return this.enemyUnits;\n    } catch (error) {\n      console.error('❌ Error loading enemy units:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate and normalize enemy unit data\n   */\n  private validateAndNormalizeEnemyUnit(unitData: any): EnemyUnit {\n    // Ensure all required fields exist with defaults\n    const enemyUnit: EnemyUnit = {\n      name: unitData.name || 'Unknown Enemy',\n      unit_types: Array.isArray(unitData.unit_types) ? unitData.unit_types : [],\n      health: Number(unitData.health) || 0,\n      strength: Number(unitData.strength) || 0,\n      attack_modifiers: Array.isArray(unitData.attack_modifiers) ? unitData.attack_modifiers : []\n    };\n\n    // Validate unit types\n    if (!Array.isArray(enemyUnit.unit_types) || enemyUnit.unit_types.length === 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has no unit types, adding 'Unknown'`);\n      enemyUnit.unit_types = ['Unknown'];\n    }\n\n    // Validate numeric values\n    if (enemyUnit.health <= 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has invalid health: ${enemyUnit.health}`);\n      enemyUnit.health = 1; // Minimum health\n    }\n\n    if (enemyUnit.strength < 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has negative strength: ${enemyUnit.strength}`);\n      enemyUnit.strength = 0;\n    }\n\n    // Validate attack modifiers\n    if (enemyUnit.attack_modifiers && Array.isArray(enemyUnit.attack_modifiers)) {\n      enemyUnit.attack_modifiers = enemyUnit.attack_modifiers.filter(modifier => {\n        if (!modifier || typeof modifier !== 'object') {\n          console.warn(`Enemy unit ${enemyUnit.name} has invalid attack modifier object`);\n          return false;\n        }\n        if (!modifier.target_type || typeof modifier.value !== 'number') {\n          console.warn(`Enemy unit ${enemyUnit.name} has invalid attack modifier: ${JSON.stringify(modifier)}`);\n          return false;\n        }\n        return true;\n      });\n    }\n\n    return enemyUnit;\n  }\n\n  /**\n   * Build lookup dictionaries for efficient access\n   */\n  private buildLookups(): void {\n    this.resetData();\n\n    this.enemyUnitsByName = new Map(this.enemyUnits.map(unit => [unit.name, unit]));\n\n    // Categorize units by their types\n    this.enemyUnits.forEach(unit => {\n      unit.unit_types.forEach(type => {\n        if (!this.enemyUnitsByType.has(type)) {\n          this.enemyUnitsByType.set(type, []);\n        }\n        this.enemyUnitsByType.get(type)!.push(unit);\n      });\n    });\n\n    // Sort units within each type by strength\n    this.enemyUnitsByType.forEach(units => {\n      units.sort((a, b) => b.strength - a.strength); // Descending order for enemies\n    });\n  }\n\n  /**\n   * Reset internal data structures\n   */\n  private resetData(): void {\n    this.enemyUnitsByName.clear();\n    this.enemyUnitsByType.clear();\n  }\n\n  /**\n   * Get all loaded enemy units\n   */\n  getAllEnemyUnits(): EnemyUnit[] {\n    return [...this.enemyUnits];\n  }\n\n  /**\n   * Get an enemy unit by its name\n   */\n  getEnemyUnitByName(name: string): EnemyUnit | undefined {\n    return this.enemyUnitsByName.get(name);\n  }\n\n  /**\n   * Get enemy units by unit type\n   */\n  getEnemyUnitsByType(unitType: string): EnemyUnit[] {\n    return [...(this.enemyUnitsByType.get(unitType) || [])];\n  }\n\n  /**\n   * Get all unique unit types from loaded enemy units\n   */\n  getUniqueEnemyUnitTypes(): string[] {\n    return Array.from(this.enemyUnitsByType.keys()).sort();\n  }\n\n  /**\n   * Filter enemy units by various criteria\n   */\n  filterEnemyUnits(filter: EnemyUnitFilter): EnemyUnit[] {\n    let filtered = this.enemyUnits;\n    \n    if (filter.unitTypes && filter.unitTypes.length > 0) {\n      filtered = filtered.filter(u => \n        filter.unitTypes!.some(type => u.unit_types.includes(type))\n      );\n    }\n    \n    if (filter.minStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength >= filter.minStrength!);\n    }\n    \n    if (filter.maxStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength <= filter.maxStrength!);\n    }\n\n    if (filter.minHealth !== undefined) {\n      filtered = filtered.filter(u => u.health >= filter.minHealth!);\n    }\n    \n    if (filter.maxHealth !== undefined) {\n      filtered = filtered.filter(u => u.health <= filter.maxHealth!);\n    }\n\n    // Note: hasAttackModifiers filter removed as it's not in the EnemyUnitFilter interface\n    \n    return filtered;\n  }\n\n  /**\n   * Search enemy units by name (case-insensitive, partial match)\n   */\n  searchEnemyUnits(query: string): EnemyUnit[] {\n    if (!query.trim()) {\n      return this.getAllEnemyUnits();\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return this.enemyUnits.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get enemy units with enhanced calculated properties\n   */\n  getEnhancedEnemyUnits(): EnemyUnitWithCalculatedProps[] {\n    return this.enemyUnits.map(unit => ({\n      ...unit,\n      get strengthPerHealth(): number {\n        return EnemyUnitUtils.getStrengthPerHealth(unit);\n      },\n      get effectivenessScore(): number {\n        return EnemyUnitUtils.getEffectivenessScore(unit);\n      }\n    }));\n  }\n\n  /**\n   * Get a summary of loaded enemy units\n   */\n  getEnemyUnitSummary(): EnemyUnitSummary {\n    if (this.enemyUnits.length === 0) {\n      return {\n        totalUnits: 0,\n        byUnitType: {},\n        strengthRange: { min: 0, max: 0, average: 0 },\n        healthRange: { min: 0, max: 0, average: 0 }\n      };\n    }\n\n    const strengths = this.enemyUnits.map(u => u.strength);\n    const healths = this.enemyUnits.map(u => u.health);\n\n    // Count units by type\n    const byUnitType: Record<string, number> = {};\n    this.enemyUnitsByType.forEach((units, type) => {\n      byUnitType[type] = units.length;\n    });\n\n    return {\n      totalUnits: this.enemyUnits.length,\n      byUnitType,\n      strengthRange: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        average: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthRange: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        average: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      }\n    };\n  }\n\n  /**\n   * Get statistics about the loaded enemy units\n   */\n  getStatistics() {\n    if (this.enemyUnits.length === 0) {\n      return {\n        totalUnits: 0,\n        unitTypeDistribution: {},\n        strengthStats: { min: 0, max: 0, avg: 0 },\n        healthStats: { min: 0, max: 0, avg: 0 },\n        topUnitsByStrength: [],\n        topUnitsByHealth: [],\n        unitsWithAttackModifiers: 0\n      };\n    }\n\n    const strengths = this.enemyUnits.map(u => u.strength);\n    const healths = this.enemyUnits.map(u => u.health);\n\n    // Count units by type\n    const unitTypeDistribution: Record<string, number> = {};\n    this.enemyUnitsByType.forEach((units, type) => {\n      unitTypeDistribution[type] = units.length;\n    });\n\n    // Count units with attack modifiers\n    const unitsWithAttackModifiers = this.enemyUnits.filter(u =>\n      u.attack_modifiers && Array.isArray(u.attack_modifiers) && u.attack_modifiers.length > 0\n    ).length;\n\n    return {\n      totalUnits: this.enemyUnits.length,\n      unitTypeDistribution,\n      strengthStats: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        avg: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthStats: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        avg: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      },\n      topUnitsByStrength: [...this.enemyUnits]\n        .sort((a, b) => b.strength - a.strength)\n        .slice(0, 10),\n      topUnitsByHealth: [...this.enemyUnits]\n        .sort((a, b) => b.health - a.health)\n        .slice(0, 10),\n      unitsWithAttackModifiers\n    };\n  }\n\n  /**\n   * Get enemy units that have attack modifiers against specific unit types\n   */\n  getEnemyUnitsWithModifiersAgainst(unitTypes: string[]): EnemyUnit[] {\n    return this.enemyUnits.filter(unit => {\n      if (!unit.attack_modifiers || !Array.isArray(unit.attack_modifiers)) return false;\n      return unitTypes.some(type =>\n        unit.attack_modifiers!.some(modifier =>\n          modifier.target_type.toLowerCase() === type.toLowerCase()\n        )\n      );\n    });\n  }\n\n  /**\n   * Get the most effective enemy units against specific player unit types\n   */\n  getMostEffectiveAgainst(playerUnitTypes: string[], limit: number = 5): EnemyUnit[] {\n    return this.enemyUnits\n      .map(unit => ({\n        unit,\n        effectiveness: this.calculateEffectivenessAgainst(unit, playerUnitTypes)\n      }))\n      .sort((a, b) => b.effectiveness - a.effectiveness)\n      .slice(0, limit)\n      .map(item => item.unit);\n  }\n\n  /**\n   * Calculate effectiveness of an enemy unit against specific player unit types\n   */\n  private calculateEffectivenessAgainst(unit: EnemyUnit, playerUnitTypes: string[]): number {\n    let totalEffectiveness = EnemyUnitUtils.getEffectivenessScore(unit);\n    \n    if (unit.attack_modifiers && Array.isArray(unit.attack_modifiers)) {\n      playerUnitTypes.forEach(playerType => {\n        const modifier = EnemyUnitUtils.getAttackModifierAgainst(unit, playerType);\n        totalEffectiveness += modifier * 0.1; // Weight modifiers at 10% of base effectiveness\n      });\n    }\n    \n    return totalEffectiveness;\n  }\n}","/**\n * Enemy Unit Validation Service for the Army Stacking Calculator\n * Provides comprehensive validation for enemy unit data\n */\n\nimport { \n  EnemyUnit, \n  UserEnemyUnit, \n  EnemyUnitValidationResult,\n  EnemyUnitUtils,\n  ENEMY_UNIT_TYPES,\n  ENEMY_TARGET_TYPES,\n  ENEMY_ATTACK_MODIFIER_TYPES\n} from '../types/enemyUnits';\n\nexport class EnemyUnitValidationService {\n  \n  /**\n   * Validate a complete enemy unit\n   */\n  static validateEnemyUnit(unit: Partial<EnemyUnit>): EnemyUnitValidationResult {\n    return EnemyUnitUtils.validateEnemyUnit(unit);\n  }\n\n  /**\n   * Validate a user-created enemy unit\n   */\n  static validateUserEnemyUnit(unit: Partial<UserEnemyUnit>): EnemyUnitValidationResult {\n    const baseValidation = EnemyUnitUtils.validateEnemyUnit(unit);\n    const errors = [...baseValidation.errors];\n    const warnings = [...(baseValidation.warnings || [])];\n\n    // Additional validation for user units\n    if (!unit.id || typeof unit.id !== 'string' || unit.id.trim() === '') {\n      errors.push('User enemy unit must have a valid ID');\n    }\n\n    if (!unit.createdAt || !(unit.createdAt instanceof Date)) {\n      errors.push('User enemy unit must have a valid creation date');\n    }\n\n    if (!unit.modifiedAt || !(unit.modifiedAt instanceof Date)) {\n      errors.push('User enemy unit must have a valid modification date');\n    }\n\n    // Check if modification date is after creation date\n    if (unit.createdAt && unit.modifiedAt && \n        unit.createdAt instanceof Date && unit.modifiedAt instanceof Date) {\n      if (unit.modifiedAt < unit.createdAt) {\n        errors.push('Modification date cannot be before creation date');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate enemy unit name\n   */\n  static validateName(name: string): { isValid: boolean; error?: string } {\n    if (!name || typeof name !== 'string') {\n      return { isValid: false, error: 'Name must be a non-empty string' };\n    }\n\n    const trimmedName = name.trim();\n    if (trimmedName.length === 0) {\n      return { isValid: false, error: 'Name cannot be empty or only whitespace' };\n    }\n\n    if (trimmedName.length > 100) {\n      return { isValid: false, error: 'Name cannot exceed 100 characters' };\n    }\n\n    // Check for invalid characters\n    const invalidChars = /[<>\\\"'&]/;\n    if (invalidChars.test(trimmedName)) {\n      return { isValid: false, error: 'Name contains invalid characters (<, >, \", \\', &)' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Validate unit types array\n   */\n  static validateUnitTypes(unitTypes: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (!Array.isArray(unitTypes)) {\n      return { isValid: false, error: 'Unit types must be an array' };\n    }\n\n    if (unitTypes.length === 0) {\n      return { isValid: false, error: 'At least one unit type is required' };\n    }\n\n    if (unitTypes.length > 10) {\n      return { isValid: false, error: 'Cannot have more than 10 unit types' };\n    }\n\n    // Validate each unit type\n    for (let i = 0; i < unitTypes.length; i++) {\n      const type = unitTypes[i];\n      if (typeof type !== 'string' || type.trim() === '') {\n        return { isValid: false, error: `Unit type ${i + 1} must be a non-empty string` };\n      }\n\n      // Check if it's a known unit type\n      if (!ENEMY_UNIT_TYPES.includes(type as any)) {\n        warnings.push(`Unit type '${type}' is not a standard type`);\n      }\n    }\n\n    // Check for duplicates\n    const uniqueTypes = new Set(unitTypes);\n    if (uniqueTypes.size !== unitTypes.length) {\n      return { isValid: false, error: 'Unit types cannot contain duplicates' };\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate health value\n   */\n  static validateHealth(health: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (typeof health !== 'number') {\n      return { isValid: false, error: 'Health must be a number' };\n    }\n\n    if (!Number.isFinite(health)) {\n      return { isValid: false, error: 'Health must be a finite number' };\n    }\n\n    if (health <= 0) {\n      return { isValid: false, error: 'Health must be greater than 0' };\n    }\n\n    if (health > 50000000) {\n      return { isValid: false, error: 'Health cannot exceed 50,000,000' };\n    }\n\n    // Warnings for unusual values\n    if (health < 100) {\n      warnings.push('Health value is unusually low (less than 100)');\n    }\n\n    if (health > 10000000) {\n      warnings.push('Health value is unusually high (greater than 10,000,000)');\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate strength value\n   */\n  static validateStrength(strength: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (typeof strength !== 'number') {\n      return { isValid: false, error: 'Strength must be a number' };\n    }\n\n    if (!Number.isFinite(strength)) {\n      return { isValid: false, error: 'Strength must be a finite number' };\n    }\n\n    if (strength < 0) {\n      return { isValid: false, error: 'Strength cannot be negative' };\n    }\n\n    if (strength > 25000000) {\n      return { isValid: false, error: 'Strength cannot exceed 25,000,000' };\n    }\n\n    // Warnings for unusual values\n    if (strength === 0) {\n      warnings.push('Strength value of 0 means this unit cannot deal damage');\n    }\n\n    if (strength < 50) {\n      warnings.push('Strength value is unusually low (less than 50)');\n    }\n\n    if (strength > 5000000) {\n      warnings.push('Strength value is unusually high (greater than 5,000,000)');\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate attack modifiers array\n   */\n  static validateAttackModifiers(attackModifiers: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    // Attack modifiers are optional\n    if (attackModifiers === undefined || attackModifiers === null) {\n      return { isValid: true };\n    }\n\n    if (!Array.isArray(attackModifiers)) {\n      return { isValid: false, error: 'Attack modifiers must be an array' };\n    }\n\n    if (attackModifiers.length > 20) {\n      return { isValid: false, error: 'Cannot have more than 20 attack modifiers' };\n    }\n\n    // Validate each modifier\n    for (let i = 0; i < attackModifiers.length; i++) {\n      const modifier = attackModifiers[i];\n      \n      if (!modifier || typeof modifier !== 'object') {\n        return { isValid: false, error: `Attack modifier ${i + 1} must be an object` };\n      }\n\n      // Validate target_type\n      if (!modifier.target_type || typeof modifier.target_type !== 'string') {\n        return { isValid: false, error: `Attack modifier ${i + 1}: target_type is required and must be a string` };\n      }\n\n      if (!ENEMY_TARGET_TYPES.includes(modifier.target_type as any)) {\n        warnings.push(`Attack modifier ${i + 1}: '${modifier.target_type}' is not a standard target type`);\n      }\n\n      // Validate modifier_type\n      if (!modifier.modifier_type || !ENEMY_ATTACK_MODIFIER_TYPES.includes(modifier.modifier_type as any)) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: modifier_type must be 'Strength'` };\n      }\n\n      // Validate value\n      if (typeof modifier.value !== 'number' || !Number.isFinite(modifier.value)) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value must be a finite number` };\n      }\n\n      if (modifier.value < 0) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value cannot be negative` };\n      }\n\n      if (modifier.value > 10000000) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value cannot exceed 10,000,000` };\n      }\n\n      // Warning for very high modifier values\n      if (modifier.value > 1000000) {\n        warnings.push(`Attack modifier ${i + 1}: value is unusually high (${modifier.value})`);\n      }\n    }\n\n    // Check for duplicate target types\n    const targetTypes = attackModifiers.map(mod => mod.target_type?.toLowerCase()).filter(Boolean);\n    const uniqueTargetTypes = new Set(targetTypes);\n    if (uniqueTargetTypes.size !== targetTypes.length) {\n      return { isValid: false, error: 'Attack modifiers cannot have duplicate target types' };\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate enemy unit data for import/export\n   */\n  static validateForImport(data: any): EnemyUnitValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (!data || typeof data !== 'object') {\n      return {\n        isValid: false,\n        errors: ['Data must be an object']\n      };\n    }\n\n    // Validate each field individually and collect all errors/warnings\n    const nameValidation = this.validateName(data.name);\n    if (!nameValidation.isValid) {\n      errors.push(nameValidation.error!);\n    }\n\n    const unitTypesValidation = this.validateUnitTypes(data.unit_types);\n    if (!unitTypesValidation.isValid) {\n      errors.push(unitTypesValidation.error!);\n    } else if (unitTypesValidation.warnings) {\n      warnings.push(...unitTypesValidation.warnings);\n    }\n\n    const healthValidation = this.validateHealth(data.health);\n    if (!healthValidation.isValid) {\n      errors.push(healthValidation.error!);\n    } else if (healthValidation.warnings) {\n      warnings.push(...healthValidation.warnings);\n    }\n\n    const strengthValidation = this.validateStrength(data.strength);\n    if (!strengthValidation.isValid) {\n      errors.push(strengthValidation.error!);\n    } else if (strengthValidation.warnings) {\n      warnings.push(...strengthValidation.warnings);\n    }\n\n    const attackModifiersValidation = this.validateAttackModifiers(data.attack_modifiers);\n    if (!attackModifiersValidation.isValid) {\n      errors.push(attackModifiersValidation.error!);\n    } else if (attackModifiersValidation.warnings) {\n      warnings.push(...attackModifiersValidation.warnings);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate multiple enemy units (for batch operations)\n   */\n  static validateMultipleUnits(units: any[]): { \n    isValid: boolean; \n    results: Array<{ index: number; validation: EnemyUnitValidationResult }>;\n    summary: { total: number; valid: number; invalid: number; warnings: number };\n  } {\n    if (!Array.isArray(units)) {\n      return {\n        isValid: false,\n        results: [],\n        summary: { total: 0, valid: 0, invalid: 0, warnings: 0 }\n      };\n    }\n\n    const results = units.map((unit, index) => ({\n      index,\n      validation: this.validateForImport(unit)\n    }));\n\n    const summary = {\n      total: units.length,\n      valid: results.filter(r => r.validation.isValid).length,\n      invalid: results.filter(r => !r.validation.isValid).length,\n      warnings: results.filter(r => r.validation.warnings && r.validation.warnings.length > 0).length\n    };\n\n    return {\n      isValid: summary.invalid === 0,\n      results,\n      summary\n    };\n  }\n\n  /**\n   * Sanitize enemy unit data by removing/fixing invalid values\n   */\n  static sanitizeEnemyUnit(data: any): EnemyUnit {\n    const sanitized: EnemyUnit = {\n      name: typeof data.name === 'string' ? data.name.trim() : 'Unknown Enemy',\n      unit_types: Array.isArray(data.unit_types) ? \n        data.unit_types.filter((type: any) => typeof type === 'string' && type.trim() !== '') :\n        ['Epic Monster'],\n      health: typeof data.health === 'number' && data.health > 0 ? Math.min(data.health, 50000000) : 10000,\n      strength: typeof data.strength === 'number' && data.strength >= 0 ? Math.min(data.strength, 25000000) : 5000,\n      attack_modifiers: Array.isArray(data.attack_modifiers) ? \n        data.attack_modifiers\n          .filter((mod: any) => mod && typeof mod === 'object' &&\n                        typeof mod.target_type === 'string' &&\n                        typeof mod.value === 'number' &&\n                        mod.value >= 0)\n          .map((mod: any) => ({\n            target_type: mod.target_type,\n            modifier_type: 'Strength' as const,\n            value: Math.min(mod.value, 10000000)\n          })) :\n        []\n    };\n\n    // Ensure name is not empty\n    if (sanitized.name.length === 0) {\n      sanitized.name = 'Unknown Enemy';\n    }\n\n    // Ensure at least one unit type\n    if (sanitized.unit_types.length === 0) {\n      sanitized.unit_types = ['Epic Monster'];\n    }\n\n    return sanitized;\n  }\n}","/**\n * Enemy Unit Storage Service for the Army Stacking Calculator\n * Manages user-created enemy units in browser memory (localStorage)\n */\n\nimport { \n  EnemyUnit, \n  UserEnemyUnit, \n  EnemyUnitUtils,\n  EnemyUnitValidationResult\n} from '../types/enemyUnits';\nimport { EnemyUnitValidationService } from './enemyUnitValidation';\n\nexport interface EnemyUnitStorageOptions {\n  /** Maximum number of user enemy units to store */\n  maxUnits?: number;\n  /** Storage key prefix for localStorage */\n  storagePrefix?: string;\n  /** Whether to validate units on load */\n  validateOnLoad?: boolean;\n}\n\nexport interface EnemyUnitStorageStats {\n  /** Total number of stored units */\n  totalUnits: number;\n  /** Storage size in bytes (approximate) */\n  storageSize: number;\n  /** Last modification timestamp */\n  lastModified: Date | null;\n  /** Number of units created today */\n  unitsCreatedToday: number;\n}\n\nexport class EnemyUnitStorageService {\n  private static readonly DEFAULT_STORAGE_KEY = 'army_calculator_user_enemy_units';\n  private static readonly METADATA_KEY = 'army_calculator_enemy_units_metadata';\n  private static readonly DEFAULT_MAX_UNITS = 100;\n\n  private storageKey: string;\n  private metadataKey: string;\n  private maxUnits: number;\n  private validateOnLoad: boolean;\n\n  constructor(options: EnemyUnitStorageOptions = {}) {\n    this.storageKey = options.storagePrefix ? \n      `${options.storagePrefix}_user_enemy_units` : \n      EnemyUnitStorageService.DEFAULT_STORAGE_KEY;\n    \n    this.metadataKey = options.storagePrefix ? \n      `${options.storagePrefix}_enemy_units_metadata` : \n      EnemyUnitStorageService.METADATA_KEY;\n    \n    this.maxUnits = options.maxUnits || EnemyUnitStorageService.DEFAULT_MAX_UNITS;\n    this.validateOnLoad = options.validateOnLoad !== false; // Default to true\n  }\n\n  /**\n   * Check if localStorage is available\n   */\n  private isStorageAvailable(): boolean {\n    try {\n      const test = '__storage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get all stored user enemy units\n   */\n  getAllUserEnemyUnits(): UserEnemyUnit[] {\n    if (!this.isStorageAvailable()) {\n      console.warn('localStorage is not available');\n      return [];\n    }\n\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (!stored) {\n        return [];\n      }\n\n      const units: UserEnemyUnit[] = JSON.parse(stored);\n      \n      // Convert date strings back to Date objects\n      const processedUnits = units.map(unit => ({\n        ...unit,\n        createdAt: new Date(unit.createdAt),\n        modifiedAt: new Date(unit.modifiedAt)\n      }));\n\n      // Validate units if enabled\n      if (this.validateOnLoad) {\n        return processedUnits.filter(unit => {\n          const validation = EnemyUnitValidationService.validateUserEnemyUnit(unit);\n          if (!validation.isValid) {\n            console.warn(`Invalid stored enemy unit removed: ${unit.name}`, validation.errors);\n            return false;\n          }\n          return true;\n        });\n      }\n\n      return processedUnits;\n    } catch (error) {\n      console.error('Error loading user enemy units from storage:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save all user enemy units to storage\n   */\n  private saveAllUserEnemyUnits(units: UserEnemyUnit[]): boolean {\n    if (!this.isStorageAvailable()) {\n      console.warn('localStorage is not available');\n      return false;\n    }\n\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(units));\n      this.updateMetadata();\n      return true;\n    } catch (error) {\n      console.error('Error saving user enemy units to storage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Add a new user enemy unit\n   */\n  addUserEnemyUnit(enemyUnit: EnemyUnit): { success: boolean; unit?: UserEnemyUnit; error?: string } {\n    // Validate the enemy unit\n    const validation = EnemyUnitValidationService.validateEnemyUnit(enemyUnit);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: `Validation failed: ${validation.errors.join(', ')}`\n      };\n    }\n\n    const units = this.getAllUserEnemyUnits();\n\n    // Check if we've reached the maximum number of units\n    if (units.length >= this.maxUnits) {\n      return {\n        success: false,\n        error: `Maximum number of units (${this.maxUnits}) reached`\n      };\n    }\n\n    // Check for duplicate names\n    if (units.some(unit => unit.name.toLowerCase() === enemyUnit.name.toLowerCase())) {\n      return {\n        success: false,\n        error: `A unit with the name \"${enemyUnit.name}\" already exists`\n      };\n    }\n\n    // Create user enemy unit\n    const userUnit = EnemyUnitUtils.createUserEnemyUnit(enemyUnit);\n    units.push(userUnit);\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save unit to storage'\n      };\n    }\n\n    return {\n      success: true,\n      unit: userUnit\n    };\n  }\n\n  /**\n   * Update an existing user enemy unit\n   */\n  updateUserEnemyUnit(id: string, updates: Partial<EnemyUnit>): { success: boolean; unit?: UserEnemyUnit; error?: string } {\n    const units = this.getAllUserEnemyUnits();\n    const unitIndex = units.findIndex(unit => unit.id === id);\n\n    if (unitIndex === -1) {\n      return {\n        success: false,\n        error: 'Unit not found'\n      };\n    }\n\n    const existingUnit = units[unitIndex];\n    const updatedUnit = { ...existingUnit, ...updates };\n\n    // Validate the updated unit\n    const validation = EnemyUnitValidationService.validateUserEnemyUnit(updatedUnit);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: `Validation failed: ${validation.errors.join(', ')}`\n      };\n    }\n\n    // Check for duplicate names (excluding current unit)\n    if (updates.name && \n        units.some((unit, index) => \n          index !== unitIndex && \n          unit.name.toLowerCase() === updates.name!.toLowerCase()\n        )) {\n      return {\n        success: false,\n        error: `A unit with the name \"${updates.name}\" already exists`\n      };\n    }\n\n    // Update the unit\n    const finalUnit = EnemyUnitUtils.updateUserEnemyUnit(existingUnit, updates);\n    units[unitIndex] = finalUnit;\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save updated unit to storage'\n      };\n    }\n\n    return {\n      success: true,\n      unit: finalUnit\n    };\n  }\n\n  /**\n   * Delete a user enemy unit\n   */\n  deleteUserEnemyUnit(id: string): { success: boolean; error?: string } {\n    const units = this.getAllUserEnemyUnits();\n    const unitIndex = units.findIndex(unit => unit.id === id);\n\n    if (unitIndex === -1) {\n      return {\n        success: false,\n        error: 'Unit not found'\n      };\n    }\n\n    units.splice(unitIndex, 1);\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save changes to storage'\n      };\n    }\n\n    return { success: true };\n  }\n\n  /**\n   * Get a user enemy unit by ID\n   */\n  getUserEnemyUnitById(id: string): UserEnemyUnit | null {\n    const units = this.getAllUserEnemyUnits();\n    return units.find(unit => unit.id === id) || null;\n  }\n\n  /**\n   * Search user enemy units by name\n   */\n  searchUserEnemyUnits(query: string): UserEnemyUnit[] {\n    const units = this.getAllUserEnemyUnits();\n    if (!query.trim()) {\n      return units;\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return units.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Clear all user enemy units\n   */\n  clearAllUserEnemyUnits(): { success: boolean; error?: string } {\n    if (!this.isStorageAvailable()) {\n      return {\n        success: false,\n        error: 'localStorage is not available'\n      };\n    }\n\n    try {\n      localStorage.removeItem(this.storageKey);\n      localStorage.removeItem(this.metadataKey);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to clear storage'\n      };\n    }\n  }\n\n  /**\n   * Export user enemy units as JSON\n   */\n  exportUserEnemyUnits(): { success: boolean; data?: string; error?: string } {\n    try {\n      const units = this.getAllUserEnemyUnits();\n      const exportData = {\n        version: '1.0',\n        exportDate: new Date().toISOString(),\n        units: units.map(unit => ({\n          name: unit.name,\n          unit_types: unit.unit_types,\n          health: unit.health,\n          strength: unit.strength,\n          attack_modifiers: unit.attack_modifiers,\n          createdAt: unit.createdAt?.toISOString() ?? new Date().toISOString(),\n          modifiedAt: unit.modifiedAt?.toISOString() ?? new Date().toISOString()\n        }))\n      };\n\n      return {\n        success: true,\n        data: JSON.stringify(exportData, null, 2)\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to export units'\n      };\n    }\n  }\n\n  /**\n   * Import user enemy units from JSON\n   */\n  importUserEnemyUnits(jsonData: string, options: { replace?: boolean; skipDuplicates?: boolean } = {}): \n    { success: boolean; imported?: number; skipped?: number; errors?: string[] } {\n    \n    try {\n      const importData = JSON.parse(jsonData);\n      \n      if (!importData.units || !Array.isArray(importData.units)) {\n        return {\n          success: false,\n          errors: ['Invalid import format: units array not found']\n        };\n      }\n\n      const existingUnits = options.replace ? [] : this.getAllUserEnemyUnits();\n      const errors: string[] = [];\n      let imported = 0;\n      let skipped = 0;\n\n      for (const unitData of importData.units) {\n        // Validate unit data\n        const validation = EnemyUnitValidationService.validateForImport(unitData);\n        if (!validation.isValid) {\n          errors.push(`Unit \"${unitData.name || 'Unknown'}\": ${validation.errors.join(', ')}`);\n          skipped++;\n          continue;\n        }\n\n        // Check for duplicates\n        const isDuplicate = existingUnits.some(existing => \n          existing.name.toLowerCase() === unitData.name.toLowerCase()\n        );\n\n        if (isDuplicate) {\n          if (options.skipDuplicates) {\n            skipped++;\n            continue;\n          } else {\n            errors.push(`Unit \"${unitData.name}\" already exists`);\n            skipped++;\n            continue;\n          }\n        }\n\n        // Check unit limit\n        if (existingUnits.length >= this.maxUnits) {\n          errors.push(`Maximum number of units (${this.maxUnits}) reached`);\n          break;\n        }\n\n        // Create user unit\n        const userUnit = EnemyUnitUtils.createUserEnemyUnit({\n          name: unitData.name,\n          unit_types: unitData.unit_types,\n          health: unitData.health,\n          strength: unitData.strength,\n          attack_modifiers: unitData.attack_modifiers || []\n        });\n\n        existingUnits.push(userUnit);\n        imported++;\n      }\n\n      // Save all units\n      const saved = this.saveAllUserEnemyUnits(existingUnits);\n      if (!saved) {\n        return {\n          success: false,\n          errors: ['Failed to save imported units to storage']\n        };\n      }\n\n      return {\n        success: true,\n        imported,\n        skipped,\n        errors: errors.length > 0 ? errors : undefined\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        errors: ['Invalid JSON format']\n      };\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  getStorageStats(): EnemyUnitStorageStats {\n    const units = this.getAllUserEnemyUnits();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const unitsCreatedToday = units.filter(unit => \n      unit.createdAt && unit.createdAt >= today\n    ).length;\n\n    let lastModified: Date | null = null;\n    if (units.length > 0) {\n      lastModified = new Date(Math.max(...units.map(unit => unit.modifiedAt?.getTime() ?? 0)));\n    }\n\n    // Approximate storage size\n    const storageSize = this.isStorageAvailable() ? \n      (localStorage.getItem(this.storageKey)?.length || 0) * 2 : 0; // Rough estimate in bytes\n\n    return {\n      totalUnits: units.length,\n      storageSize,\n      lastModified,\n      unitsCreatedToday\n    };\n  }\n\n  /**\n   * Update metadata\n   */\n  private updateMetadata(): void {\n    if (!this.isStorageAvailable()) return;\n\n    try {\n      const metadata = {\n        lastModified: new Date().toISOString(),\n        version: '1.0'\n      };\n      localStorage.setItem(this.metadataKey, JSON.stringify(metadata));\n    } catch (error) {\n      console.warn('Failed to update metadata:', error);\n    }\n  }\n\n  /**\n   * Get available storage space (approximate)\n   */\n  getAvailableSpace(): number {\n    return Math.max(0, this.maxUnits - this.getAllUserEnemyUnits().length);\n  }\n\n  /**\n   * Check if storage is near capacity\n   */\n  isNearCapacity(threshold: number = 0.9): boolean {\n    const units = this.getAllUserEnemyUnits();\n    return units.length >= (this.maxUnits * threshold);\n  }\n}","/**\n * Enemy Unit Selector component for selecting enemy units for battle simulation\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { EnemyUnit, UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitLoader } from '../../services/enemyUnitLoader';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\n\ninterface EnemyUnitSelectorProps {\n  onSelect: (enemyUnit: EnemyUnit) => void;\n  onCancel: () => void;\n  selectedUnit?: EnemyUnit | null;\n  mode: 'single' | 'multiple';\n  title?: string;\n  maxSelections?: number;\n  selectedUnits?: EnemyUnit[];\n}\n\nexport class EnemyUnitSelector {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitSelectorProps;\n  private loader: EnemyUnitLoader;\n  private storage: EnemyUnitStorageService;\n  private presetUnits: EnemyUnit[] = [];\n  private userUnits: UserEnemyUnit[] = [];\n  private filteredUnits: EnemyUnit[] = [];\n  private currentFilter: string = '';\n  private currentCategory: 'all' | 'preset' | 'user' = 'all';\n  private currentSelectedUnits: EnemyUnit[] = [];\n\n  constructor(props: EnemyUnitSelectorProps) {\n    this.props = props;\n    this.loader = new EnemyUnitLoader();\n    this.storage = new EnemyUnitStorageService();\n    this.currentSelectedUnits = props.selectedUnits ? [...props.selectedUnits] : [];\n  }\n\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    await this.loadData();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private async loadData(): Promise<void> {\n    try {\n      // Load preset enemy units\n      this.presetUnits = await this.loader.loadPresetEnemyUnits();\n      \n      // Load user-created enemy units\n      this.userUnits = this.storage.getAllUserEnemyUnits();\n      \n      // Initialize filtered units\n      this.updateFilteredUnits();\n    } catch (error) {\n      console.error('Error loading enemy unit data:', error);\n      this.presetUnits = [];\n      this.userUnits = [];\n      this.filteredUnits = [];\n    }\n  }\n\n  private updateFilteredUnits(): void {\n    let allUnits: EnemyUnit[] = [];\n    \n    switch (this.currentCategory) {\n      case 'preset':\n        allUnits = [...this.presetUnits];\n        break;\n      case 'user':\n        allUnits = [...this.userUnits];\n        break;\n      case 'all':\n      default:\n        allUnits = [...this.presetUnits, ...this.userUnits];\n        break;\n    }\n\n    if (this.currentFilter.trim()) {\n      const lowerFilter = this.currentFilter.toLowerCase();\n      this.filteredUnits = allUnits.filter(unit =>\n        unit.name.toLowerCase().includes(lowerFilter) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(lowerFilter))\n      );\n    } else {\n      this.filteredUnits = allUnits;\n    }\n\n    // Sort by name for consistent display\n    this.filteredUnits.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    const title = this.props.title || 'Select Enemy Unit';\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-selector\">\n        <div class=\"modal-overlay\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h2 class=\"modal-title\" id=\"modal-title\">⚔️ ${title}</h2>\n              <button class=\"modal-close\" id=\"close-selector\">&times;</button>\n            </div>\n            \n            <div class=\"modal-body\">\n              <!-- Search and Filter Controls -->\n              <div class=\"selector-controls\">\n                <div class=\"search-section\">\n                  <div class=\"search-input-group\">\n                    <input \n                      type=\"text\" \n                      id=\"unit-search\" \n                      class=\"form-input search-input\" \n                      placeholder=\"🔍 Search by name or unit type...\"\n                      value=\"${this.currentFilter}\"\n                    >\n                    <button class=\"btn btn-secondary btn-sm\" id=\"clear-search\">\n                      ❌ Clear\n                    </button>\n                  </div>\n                </div>\n                \n                <div class=\"filter-section\">\n                  <div class=\"filter-tabs\">\n                    <button class=\"filter-tab ${this.currentCategory === 'all' ? 'active' : ''}\" data-category=\"all\">\n                      📋 All Units (${this.presetUnits.length + this.userUnits.length})\n                    </button>\n                    <button class=\"filter-tab ${this.currentCategory === 'preset' ? 'active' : ''}\" data-category=\"preset\">\n                      🏛️ Preset (${this.presetUnits.length})\n                    </button>\n                    <button class=\"filter-tab ${this.currentCategory === 'user' ? 'active' : ''}\" data-category=\"user\">\n                      👤 Custom (${this.userUnits.length})\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Unit List -->\n              <div class=\"unit-list-container\">\n                <div class=\"unit-list-header\">\n                  <span class=\"results-count\">\n                    ${this.filteredUnits.length} unit${this.filteredUnits.length !== 1 ? 's' : ''} found\n                  </span>\n                </div>\n                \n                <div class=\"unit-list\" id=\"unit-list\">\n                  ${this.renderUnitList()}\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"modal-footer\">\n              <button class=\"btn btn-secondary btn-lg\" id=\"cancel-selection\">\n                ❌ Cancel\n              </button>\n              ${this.props.selectedUnit ? `\n                <button class=\"btn btn-success btn-lg\" id=\"confirm-selection\">\n                  ✅ Select \"${this.props.selectedUnit.name}\"\n                </button>\n              ` : ''}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  private renderUnitList(): string {\n    if (this.filteredUnits.length === 0) {\n      return `\n        <div class=\"empty-state\">\n          <div class=\"empty-icon\">🔍</div>\n          <h3>No units found</h3>\n          <p>Try adjusting your search or filter criteria</p>\n          ${this.currentCategory === 'user' && this.userUnits.length === 0 ? `\n            <p class=\"text-sm text-secondary\">\n              You haven't created any custom enemy units yet.\n            </p>\n          ` : ''}\n        </div>\n      `;\n    }\n\n    return this.filteredUnits.map(unit => {\n      const isSelected = this.props.mode === 'multiple'\n        ? this.currentSelectedUnits.some(selected => selected.name === unit.name)\n        : this.props.selectedUnit?.name === unit.name;\n      const isUserUnit = 'id' in unit;\n      \n      return `\n        <div class=\"unit-card ${isSelected ? 'selected' : ''}\" data-unit-name=\"${unit.name}\">\n          <div class=\"unit-card-header\">\n            <div class=\"unit-info\">\n              <h4 class=\"unit-name\">\n                ${unit.name}\n                ${isUserUnit ? '<span class=\"user-badge\">👤</span>' : '<span class=\"preset-badge\">🏛️</span>'}\n              </h4>\n              <div class=\"unit-types\">\n                ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n              </div>\n            </div>\n            <div class=\"unit-actions\">\n              <button class=\"btn btn-primary btn-sm select-unit-btn\" data-unit-name=\"${unit.name}\">\n                ${isSelected ? '✅ Selected' : '👆 Select'}\n              </button>\n            </div>\n          </div>\n          \n          <div class=\"unit-stats\">\n            <div class=\"stat-group\">\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">❤️ Health</span>\n                <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">⚔️ Strength</span>\n                <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">📊 Ratio</span>\n                <span class=\"stat-value\">${(unit.strength / unit.health).toFixed(3)}</span>\n              </div>\n            </div>\n            \n            ${unit.attack_modifiers && unit.attack_modifiers.length > 0 ? `\n              <div class=\"attack-modifiers\">\n                <span class=\"modifiers-label\">🎯 Attack Bonuses:</span>\n                <div class=\"modifiers-list\">\n                  ${unit.attack_modifiers.map(mod => \n                    `<span class=\"modifier-tag\">+${mod.value.toLocaleString()} vs ${mod.target_type}</span>`\n                  ).join('')}\n                </div>\n              </div>\n            ` : ''}\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-selector {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        z-index: 1000;\n      }\n\n      .modal-overlay {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgba(0, 0, 0, 0.5);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: var(--spacing-md);\n      }\n\n      .modal-content {\n        background-color: var(--color-background);\n        border-radius: var(--radius-lg);\n        max-width: 900px;\n        width: 100%;\n        max-height: 90vh;\n        display: flex;\n        flex-direction: column;\n        box-shadow: var(--shadow-lg);\n      }\n\n      .modal-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .modal-title {\n        margin: 0;\n        font-size: var(--font-size-xl);\n        color: var(--color-text);\n      }\n\n      .modal-close {\n        background: none;\n        border: none;\n        font-size: var(--font-size-xl);\n        cursor: pointer;\n        color: var(--color-text-secondary);\n        padding: var(--spacing-xs);\n        border-radius: var(--radius-sm);\n        transition: all var(--transition-fast);\n      }\n\n      .modal-close:hover {\n        color: var(--color-text);\n        background-color: var(--color-surface);\n      }\n\n      .modal-body {\n        flex: 1;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .modal-footer {\n        padding: var(--spacing-lg);\n        border-top: 1px solid var(--color-border);\n        display: flex;\n        gap: var(--spacing-md);\n        justify-content: flex-end;\n        flex-shrink: 0;\n      }\n\n      /* Selector Controls */\n      .selector-controls {\n        padding: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .search-section {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .search-input-group {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .search-input {\n        flex: 1;\n        font-size: var(--font-size-sm);\n      }\n\n      .filter-section {\n        margin-bottom: 0;\n      }\n\n      .filter-tabs {\n        display: flex;\n        gap: var(--spacing-xs);\n        flex-wrap: wrap;\n      }\n\n      .filter-tab {\n        padding: var(--spacing-sm) var(--spacing-md);\n        border: 2px solid var(--color-border);\n        background-color: var(--color-surface);\n        color: var(--color-text-secondary);\n        border-radius: var(--radius-md);\n        cursor: pointer;\n        transition: all var(--transition-fast);\n        font-size: var(--font-size-sm);\n        font-weight: 500;\n      }\n\n      .filter-tab:hover {\n        border-color: var(--color-primary);\n        color: var(--color-text);\n      }\n\n      .filter-tab.active {\n        background-color: var(--color-primary);\n        border-color: var(--color-primary);\n        color: white;\n      }\n\n      /* Unit List */\n      .unit-list-container {\n        flex: 1;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .unit-list-header {\n        padding: var(--spacing-md) var(--spacing-lg);\n        background-color: var(--color-surface);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .results-count {\n        font-size: var(--font-size-sm);\n        color: var(--color-text-secondary);\n        font-weight: 500;\n      }\n\n      .unit-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: var(--spacing-md);\n      }\n\n      /* Unit Cards */\n      .unit-card {\n        background-color: var(--color-surface);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        padding: var(--spacing-md);\n        margin-bottom: var(--spacing-md);\n        transition: all var(--transition-fast);\n        cursor: pointer;\n      }\n\n      .unit-card:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      }\n\n      .unit-card.selected {\n        border-color: var(--color-success);\n        background-color: rgba(34, 197, 94, 0.05);\n      }\n\n      .unit-card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .unit-info {\n        flex: 1;\n      }\n\n      .unit-name {\n        margin: 0 0 var(--spacing-xs) 0;\n        font-size: var(--font-size-md);\n        color: var(--color-text);\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-xs);\n      }\n\n      .user-badge,\n      .preset-badge {\n        font-size: var(--font-size-xs);\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        background-color: var(--color-primary);\n        color: white;\n      }\n\n      .user-badge {\n        background-color: var(--color-success);\n      }\n\n      .unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .unit-type-tag {\n        background-color: var(--color-background);\n        color: var(--color-text-secondary);\n        padding: 2px 8px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        border: 1px solid var(--color-border);\n      }\n\n      .unit-actions {\n        flex-shrink: 0;\n        margin-left: var(--spacing-md);\n      }\n\n      .select-unit-btn {\n        min-width: 100px;\n      }\n\n      .unit-stats {\n        margin-top: var(--spacing-sm);\n      }\n\n      .stat-group {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        gap: var(--spacing-md);\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .stat-item {\n        text-align: center;\n      }\n\n      .stat-label {\n        display: block;\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        margin-bottom: 2px;\n      }\n\n      .stat-value {\n        display: block;\n        font-size: var(--font-size-sm);\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .attack-modifiers {\n        padding-top: var(--spacing-sm);\n        border-top: 1px solid var(--color-border);\n      }\n\n      .modifiers-label {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        display: block;\n        margin-bottom: var(--spacing-xs);\n      }\n\n      .modifiers-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .modifier-tag {\n        background-color: var(--color-warning);\n        color: white;\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        font-weight: 500;\n      }\n\n      /* Empty State */\n      .empty-state {\n        text-align: center;\n        padding: var(--spacing-xl);\n        color: var(--color-text-secondary);\n      }\n\n      .empty-icon {\n        font-size: 3rem;\n        margin-bottom: var(--spacing-md);\n      }\n\n      .empty-state h3 {\n        margin: 0 0 var(--spacing-sm) 0;\n        color: var(--color-text);\n      }\n\n      .empty-state p {\n        margin: 0 0 var(--spacing-xs) 0;\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .modal-overlay {\n          padding: var(--spacing-sm);\n        }\n\n        .modal-content {\n          max-height: 95vh;\n        }\n\n        .unit-card-header {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-actions {\n          margin-left: 0;\n          align-self: stretch;\n        }\n\n        .select-unit-btn {\n          width: 100%;\n        }\n\n        .stat-group {\n          grid-template-columns: repeat(2, 1fr);\n        }\n\n        .filter-tabs {\n          flex-direction: column;\n        }\n\n        .filter-tab {\n          text-align: center;\n        }\n\n        .search-input-group {\n          flex-direction: column;\n        }\n\n        .search-input {\n          width: 100%;\n        }\n\n        .modal-footer {\n          flex-direction: column;\n        }\n\n        .modal-footer .btn {\n          width: 100%;\n        }\n      }\n\n      @media (max-width: 480px) {\n        .modal-title {\n          font-size: var(--font-size-lg);\n        }\n\n        .unit-name {\n          font-size: var(--font-size-sm);\n        }\n\n        .stat-group {\n          grid-template-columns: 1fr;\n          gap: var(--spacing-sm);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private attachEventListeners(): void {\n    // Close button\n    const closeBtn = document.getElementById('close-selector');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    // Cancel button\n    const cancelBtn = document.getElementById('cancel-selection');\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    // Confirm button\n    const confirmBtn = document.getElementById('confirm-selection');\n    if (confirmBtn) {\n      confirmBtn.addEventListener('click', this.handleConfirm.bind(this));\n    }\n\n    // Search input\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.addEventListener('input', this.handleSearch.bind(this));\n    }\n\n    // Clear search button\n    const clearBtn = document.getElementById('clear-search');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', this.handleClearSearch.bind(this));\n    }\n\n    // Filter tabs\n    document.querySelectorAll('.filter-tab').forEach(tab => {\n      tab.addEventListener('click', this.handleFilterChange.bind(this));\n    });\n\n    // Unit selection\n    document.querySelectorAll('.select-unit-btn').forEach(btn => {\n      btn.addEventListener('click', this.handleUnitSelect.bind(this));\n    });\n\n    // Unit card clicks\n    document.querySelectorAll('.unit-card').forEach(card => {\n      card.addEventListener('click', this.handleCardClick.bind(this));\n    });\n\n    // Close on overlay click\n    const overlay = document.querySelector('.modal-overlay');\n    if (overlay) {\n      overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n          this.handleCancel();\n        }\n      });\n    }\n\n    // Close on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n\n  private handleSearch(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.currentFilter = input.value;\n    this.updateFilteredUnits();\n    this.refreshUnitList();\n  }\n\n  private handleClearSearch(): void {\n    this.currentFilter = '';\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.value = '';\n    }\n    this.updateFilteredUnits();\n    this.refreshUnitList();\n  }\n\n  private handleFilterChange(event: Event): void {\n    const tab = event.target as HTMLElement;\n    const category = tab.dataset.category as 'all' | 'preset' | 'user';\n    \n    if (category && category !== this.currentCategory) {\n      this.currentCategory = category;\n      this.updateFilteredUnits();\n      this.refreshFilterTabs();\n      this.refreshUnitList();\n    }\n  }\n\n  private handleUnitSelect(event: Event): void {\n    event.stopPropagation();\n    const btn = event.target as HTMLElement;\n    const unitName = btn.dataset.unitName;\n    \n    if (unitName) {\n      const unit = this.filteredUnits.find(u => u.name === unitName);\n      if (unit) {\n        if (this.props.mode === 'multiple') {\n          // Handle multiple selection logic\n          const existingIndex = this.currentSelectedUnits.findIndex(selected => selected.name === unit.name);\n          \n          if (existingIndex >= 0) {\n            // Remove if already selected\n            this.currentSelectedUnits.splice(existingIndex, 1);\n          } else {\n            // Add if not at limit\n            const maxSelections = this.props.maxSelections || 5;\n            if (this.currentSelectedUnits.length < maxSelections) {\n              this.currentSelectedUnits.push(unit);\n            } else {\n              // Replace first selection if at limit\n              this.currentSelectedUnits.shift();\n              this.currentSelectedUnits.push(unit);\n            }\n          }\n          \n          // Refresh the unit list to update selection states\n          this.refreshUnitList();\n        }\n        \n        // Always call onSelect to notify parent\n        this.props.onSelect(unit);\n      }\n    }\n  }\n\n  private handleCardClick(event: Event): void {\n    const card = event.target as HTMLElement;\n    const unitCard = card.closest('.unit-card') as HTMLElement;\n    \n    if (unitCard) {\n      const unitName = unitCard.dataset.unitName;\n      if (unitName) {\n        const unit = this.filteredUnits.find(u => u.name === unitName);\n        if (unit) {\n          if (this.props.mode === 'multiple') {\n            // Handle multiple selection logic\n            const existingIndex = this.currentSelectedUnits.findIndex(selected => selected.name === unit.name);\n            \n            if (existingIndex >= 0) {\n              // Remove if already selected\n              this.currentSelectedUnits.splice(existingIndex, 1);\n            } else {\n              // Add if not at limit\n              const maxSelections = this.props.maxSelections || 5;\n              if (this.currentSelectedUnits.length < maxSelections) {\n                this.currentSelectedUnits.push(unit);\n              } else {\n                // Replace first selection if at limit\n                this.currentSelectedUnits.shift();\n                this.currentSelectedUnits.push(unit);\n              }\n            }\n            \n            // Refresh the unit list to update selection states\n            this.refreshUnitList();\n          }\n          \n          // Always call onSelect to notify parent\n          this.props.onSelect(unit);\n        }\n      }\n    }\n  }\n\n  private handleCancel(): void {\n    this.props.onCancel();\n  }\n\n  private handleConfirm(): void {\n    if (this.props.selectedUnit) {\n      this.props.onSelect(this.props.selectedUnit);\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      this.handleCancel();\n    }\n  }\n\n  private refreshUnitList(): void {\n    const unitList = document.getElementById('unit-list');\n    if (unitList) {\n      unitList.innerHTML = this.renderUnitList();\n      \n      // Re-attach event listeners for new elements\n      document.querySelectorAll('.select-unit-btn').forEach(btn => {\n        btn.addEventListener('click', this.handleUnitSelect.bind(this));\n      });\n\n      document.querySelectorAll('.unit-card').forEach(card => {\n        card.addEventListener('click', this.handleCardClick.bind(this));\n      });\n    }\n\n    // Update results count\n    const resultsCount = document.querySelector('.results-count');\n    if (resultsCount) {\n      resultsCount.textContent = `${this.filteredUnits.length} unit${this.filteredUnits.length !== 1 ? 's' : ''} found`;\n    }\n  }\n\n  private refreshFilterTabs(): void {\n    document.querySelectorAll('.filter-tab').forEach(tab => {\n      const category = tab.getAttribute('data-category');\n      if (category === this.currentCategory) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n  }\n\n  public unmount(): void {\n    // Remove event listeners\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    \n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n\n  /**\n   * Update the modal title (for dynamic updates)\n   */\n  public updateTitle(newTitle: string): void {\n    this.props.title = newTitle;\n    const titleElement = document.getElementById('modal-title');\n    if (titleElement) {\n      titleElement.textContent = `⚔️ ${newTitle}`;\n    }\n  }\n\n  /**\n   * Update selected units (for external updates)\n   */\n  public updateSelectedUnits(selectedUnits: EnemyUnit[]): void {\n    this.currentSelectedUnits = [...selectedUnits];\n    this.refreshUnitList();\n  }\n}","/**\n * Shared utility for displaying unified battle results\n * Used by both BattleSimulationComponent and ManualBattleSimulationComponent\n */\n\nimport { UnifiedBattleResult } from '../../services/unified-battle-simulation/types';\n\nexport interface BattleResultsDisplayOptions {\n  showComparison?: boolean;\n  title?: string;\n  subtitle?: string;\n  includeTooltips?: boolean;\n  onLogTabChange?: () => void;\n}\n\nexport class BattleResultsDisplay {\n  /**\n   * Generate HTML for displaying unified battle results\n   */\n  static generateResultsHTML(\n    bestCase: UnifiedBattleResult,\n    worstCase: UnifiedBattleResult,\n    options: BattleResultsDisplayOptions = {}\n  ): string {\n    const { showComparison = true, title = \"Battle Analysis Results\", subtitle } = options;\n\n    // Calculate comparison metrics\n    const damageDifference = bestCase.totalDamageDealt - worstCase.totalDamageDealt;\n    const survivalDifference = bestCase.battleDuration - worstCase.battleDuration;\n    const averageDamage = (bestCase.totalDamageDealt + worstCase.totalDamageDealt) / 2;\n\n    const headerSection = `\n      <div class=\"results-header\">\n        <h3>📊 ${title}\n          <span class=\"help-icon\" data-tooltip=\"battle-results\">ℹ️</span>\n        </h3>\n        ${subtitle ? `<p class=\"results-summary\">${subtitle}</p>` : `\n          <p class=\"results-summary\">\n            Simulation complete! Here's how your army performs in battle scenarios.\n          </p>\n        `}\n      </div>\n    `;\n\n    const scenarioSection = `\n      <div class=\"scenario-comparison\">\n        <div class=\"scenario-card best-case\">\n          <h4>🟢 Best Case Scenario\n            <span class=\"help-icon\" data-tooltip=\"best-case-scenario\">ℹ️</span>\n          </h4>\n          <p class=\"scenario-description\">Your army attacks first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${bestCase.totalDamageDealt.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${bestCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Total Actions:</span>\n              <span class=\"stat-value\">${bestCase.outcome.totalActions}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"scenario-card worst-case\">\n          <h4>🔴 Worst Case Scenario\n            <span class=\"help-icon\" data-tooltip=\"worst-case-scenario\">ℹ️</span>\n          </h4>\n          <p class=\"scenario-description\">Enemy forces attack first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${worstCase.totalDamageDealt.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${worstCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Total Actions:</span>\n              <span class=\"stat-value\">${worstCase.outcome.totalActions}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    const comparisonSection = showComparison ? `\n      <div class=\"comparison-analysis\">\n        <h4>📈 Scenario Comparison</h4>\n        <div class=\"comparison-stats\">\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Damage Difference:</span>\n            <span class=\"stat-value ${damageDifference >= 0 ? 'positive' : 'negative'}\">\n              ${damageDifference >= 0 ? '+' : ''}${damageDifference.toLocaleString()}\n            </span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Survival Difference:</span>\n            <span class=\"stat-value ${survivalDifference >= 0 ? 'positive' : 'negative'}\">\n              ${survivalDifference >= 0 ? '+' : ''}${survivalDifference} turns\n            </span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Average Damage:</span>\n            <span class=\"stat-value\">${Math.round(averageDamage).toLocaleString()}</span>\n          </div>\n        </div>\n        <div class=\"comparison-insights\">\n          <p class=\"insight\">\n            ${damageDifference > 0 \n              ? `💡 <strong>Initiative Advantage:</strong> Attacking first provides ${damageDifference.toLocaleString()} extra damage.`\n              : damageDifference < 0\n              ? `⚠️ <strong>Initiative Disadvantage:</strong> Enemy first strike reduces your damage by ${Math.abs(damageDifference).toLocaleString()}.`\n              : `⚖️ <strong>Balanced Combat:</strong> Turn order has minimal impact on damage output.`\n            }\n          </p>\n        </div>\n      </div>\n    ` : '';\n\n    const detailedLogsSection = `\n      <div class=\"detailed-logs\">\n        <div class=\"log-tabs\">\n          <button class=\"log-tab active\" data-scenario=\"best\">Best Case Combat Log</button>\n          <button class=\"log-tab\" data-scenario=\"worst\">Worst Case Combat Log</button>\n        </div>\n        <div class=\"log-content\">\n          <div id=\"best-case-log\" class=\"combat-log active\">\n            ${this.formatCombatLog(bestCase.combatLog)}\n          </div>\n          <div id=\"worst-case-log\" class=\"combat-log hidden\">\n            ${this.formatCombatLog(worstCase.combatLog)}\n          </div>\n        </div>\n      </div>\n    `;\n\n    return headerSection + scenarioSection + comparisonSection + detailedLogsSection;\n  }\n\n  /**\n   * Display battle results in a container element\n   */\n  static displayResults(\n    container: HTMLElement,\n    bestCase: UnifiedBattleResult,\n    worstCase: UnifiedBattleResult,\n    options: BattleResultsDisplayOptions = {}\n  ): void {\n    container.innerHTML = this.generateResultsHTML(bestCase, worstCase, options);\n    \n    // Attach log tab listeners\n    this.attachLogTabListeners(container, options.onLogTabChange);\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private static formatCombatLog(combatLog: any[]): string {\n    if (combatLog.length === 0) {\n      return '<p class=\"no-log\">No combat actions recorded.</p>';\n    }\n\n    const logEntries = combatLog.map(action => {\n      // Use attackerSide to determine styling - player attacks are blue, enemy attacks are red\n      const isPlayerTurn = action.attackerSide === 'player';\n      const turnClass = isPlayerTurn ? 'log-entry player-turn' : 'log-entry enemy-turn';\n\n      return `\n        <div class=\"${turnClass}\">\n          <span class=\"turn-number\">Turn ${action.turn}:</span>\n          <span class=\"action-text\">${action.attacker} ${action.action}</span>\n        </div>\n      `;\n    }).join('');\n\n    return `<div class=\"log-entries\">${logEntries}</div>`;\n  }\n\n  /**\n   * Attach log tab event listeners\n   */\n  private static attachLogTabListeners(container: HTMLElement, onTabChange?: () => void): void {\n    const logTabs = container.querySelectorAll('.log-tab');\n    logTabs.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        const scenario = target.dataset.scenario;\n        \n        // Update active tab\n        logTabs.forEach(t => t.classList.remove('active'));\n        target.classList.add('active');\n        \n        // Show corresponding log\n        const logs = container.querySelectorAll('.combat-log');\n        logs.forEach(log => {\n          log.classList.remove('active');\n          log.classList.add('hidden');\n        });\n        \n        const activeLog = container.querySelector(`#${scenario}-case-log`);\n        if (activeLog) {\n          activeLog.classList.add('active');\n          activeLog.classList.remove('hidden');\n        }\n\n        // Call callback if provided\n        if (onTabChange) {\n          onTabChange();\n        }\n      });\n    });\n  }\n}","/**\n * Battle Simulation Component\n * Handles the battle simulation section of the army calculator\n */\n\nimport { UnifiedBattleSimulation } from '../../services/unified-battle-simulation/UnifiedBattleSimulation';\nimport { UnifiedBattleConfiguration, UnifiedBattleResult } from '../../services/unified-battle-simulation/types';\nimport { ArmyComposition } from '../../types/units';\nimport { EnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitSelector } from '../EnemyUnits/EnemyUnitSelector';\nimport { BattleResultsDisplay } from './BattleResultsDisplay';\n\nexport class BattleSimulationComponent {\n  private container: HTMLElement | null = null;\n  private unifiedBattleService: UnifiedBattleSimulation;\n  private currentArmy: ArmyComposition | null = null;\n  private currentBestCase: UnifiedBattleResult | null = null;\n  private currentWorstCase: UnifiedBattleResult | null = null;\n  private selectedEnemyUnit: EnemyUnit | null = null;\n  private enemyUnitSelector: EnemyUnitSelector | null = null;\n  private tooltipData: Record<string, string> = {\n    'battle-simulation-overview': `\n      <strong>Battle Simulation Overview</strong><br>\n      Simulates asymmetric combat where:<br>\n      • Player units deal damage to enemies<br>\n      • Enemy units eliminate player groups<br>\n      • Battle ends when all player groups are eliminated<br>\n      • Results show best case (player first) vs worst case (enemy first)\n    `,\n    'enemy-groups': `\n      <strong>Enemy Groups</strong><br>\n      Each enemy group represents a separate attacking force:<br>\n      • More groups = more enemy attacks per battle phase<br>\n      • Each group can eliminate one player unit group<br>\n      • Enemies target your highest health groups first<br>\n      • Recommended: 1-5 groups for balanced battles\n    `,\n    'run-simulation': `\n      <strong>Run Battle Simulation</strong><br>\n      Executes both scenarios simultaneously:<br>\n      • <span style=\"color: #27ae60;\">Best Case:</span> Your units attack first<br>\n      • <span style=\"color: #e74c3c;\">Worst Case:</span> Enemy units attack first<br>\n      • Shows damage dealt, battle duration, and survival statistics<br>\n      • Results help optimize army composition\n    `,\n    'battle-mechanics-guide': `\n      <strong>Battle Mechanics Guide</strong><br>\n      <strong>Turn Order:</strong> Players attack by strength (highest first), enemies target by health (highest first)<br>\n      <strong>Battle Phases:</strong> Each unit gets exactly one turn per phase<br>\n      <strong>Overflow:</strong> Side with more groups gets extra turns<br>\n      <strong>Elimination:</strong> Units eliminated mid-phase don't get subsequent turns\n    `,\n    'battle-results': `\n      <strong>Battle Analysis Results</strong><br>\n      Shows outcomes for both scenarios:<br>\n      • <span style=\"color: #27ae60;\">Best Case:</span> Maximum damage when you attack first<br>\n      • <span style=\"color: #e74c3c;\">Worst Case:</span> Minimum damage when enemies attack first<br>\n      • <strong>Comparison:</strong> Difference between scenarios<br>\n      • Use results to optimize army composition\n    `,\n    'best-case-scenario': `\n      <strong>Best Case Scenario</strong><br>\n      Your army gets initiative and attacks first:<br>\n      • Higher damage potential<br>\n      • Longer battle duration<br>\n      • Better survival chances<br>\n      • Represents optimal conditions\n    `,\n    'worst-case-scenario': `\n      <strong>Worst Case Scenario</strong><br>\n      Enemy forces attack first:<br>\n      • Lower damage potential<br>\n      • Shorter battle duration<br>\n      • Reduced survival chances<br>\n      • Represents challenging conditions\n    `\n  };\n\n  constructor() {\n    this.unifiedBattleService = new UnifiedBattleSimulation();\n  }\n\n  /**\n   * Mount the battle simulation component\n   */\n  public mount(container: HTMLElement, army: ArmyComposition): void {\n    this.container = container;\n    this.currentArmy = army;\n    this.render();\n    this.attachEventListeners();\n\n    // Ensure controls are visible for regular stacking mode\n    this.showSimulationControls();\n  }\n\n  /**\n   * Initialize the battle simulation component with unit loader\n   */\n  public initialize(_unitLoader: any): void {\n    // No initialization needed for unified battle service\n  }\n\n  /**\n   * Render the battle simulation interface\n   */\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <section class=\"card battle-simulation-section\" id=\"battle-simulation-section\">\n        <h2 class=\"section-title\">⚔️ Battle Simulation\n          <span class=\"help-icon\" data-tooltip=\"battle-simulation-overview\">ℹ️</span>\n        </h2>\n        <p class=\"section-description\">\n          Simulate battles against enemy forces to analyze best and worst case scenarios.\n          Enter the number of enemy groups you expect to face.\n        </p>\n\n        <!-- Enemy Configuration -->\n        <div class=\"enemy-input-container\">\n          <!-- Enemy Type Selection -->\n          <div class=\"enemy-type-selection\">\n            <h4>Choose Enemy Type:</h4>\n            <div class=\"enemy-type-options\">\n              <label class=\"radio-option\">\n                <input type=\"radio\" name=\"enemy-type\" value=\"generic\" checked>\n                <span class=\"radio-label\">Generic Enemy Groups</span>\n                <small class=\"radio-help\">Simple enemy groups without specific units</small>\n              </label>\n              <label class=\"radio-option\">\n                <input type=\"radio\" name=\"enemy-type\" value=\"specific\">\n                <span class=\"radio-label\">Specific Enemy Units</span>\n                <small class=\"radio-help\">Choose specific enemy units with unique abilities</small>\n              </label>\n            </div>\n          </div>\n\n          <!-- Generic Enemy Input -->\n          <div id=\"generic-enemy-input\" class=\"enemy-config-section\">\n            <div class=\"input-group\">\n              <label for=\"enemy-groups\" class=\"input-label\">\n                Number of Enemy Groups:\n                <span class=\"help-icon\" data-tooltip=\"enemy-groups\">ℹ️</span>\n              </label>\n              <input\n                type=\"number\"\n                id=\"enemy-groups\"\n                min=\"1\"\n                max=\"20\"\n                value=\"3\"\n                class=\"input large-input\"\n                placeholder=\"Enter number of enemy groups\"\n              >\n              <small class=\"input-help\">\n                Each enemy group can eliminate one of your unit groups per attack.\n              </small>\n            </div>\n          </div>\n\n          <!-- Specific Enemy Unit Input -->\n          <div id=\"specific-enemy-input\" class=\"enemy-config-section hidden\">\n            <div class=\"enemy-unit-selection\">\n              <div class=\"selected-enemy-display\">\n                <div id=\"no-enemy-selected\" class=\"no-selection-message\">\n                  <span class=\"icon\">🎯</span>\n                  <span class=\"message\">No enemy unit selected</span>\n                  <small class=\"help\">Click \"Select Enemy Unit\" to choose a specific enemy</small>\n                </div>\n                <div id=\"selected-enemy-info\" class=\"selected-enemy-card hidden\">\n                  <!-- Selected enemy info will be populated here -->\n                </div>\n              </div>\n              <div class=\"enemy-selection-controls\">\n                <button id=\"select-enemy-btn\" class=\"btn btn-secondary\">\n                  🎯 Select Enemy Unit\n                </button>\n                <button id=\"clear-enemy-btn\" class=\"btn btn-outline\" style=\"display: none;\">\n                  🗑️ Clear Selection\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"simulation-controls\">\n            <button id=\"run-simulation-btn\" class=\"btn btn-primary large-btn\" data-tooltip=\"run-simulation\">\n              🎯 Run Battle Simulation\n            </button>\n            <button id=\"clear-simulation-btn\" class=\"btn btn-secondary\" style=\"display: none;\">\n              🗑️ Clear Results\n            </button>\n          </div>\n        </div>\n\n        <!-- Pre-calculated Results Note -->\n        <div id=\"simulation-note\" class=\"simulation-note hidden\">\n          <!-- Note will be populated here -->\n        </div>\n\n        <!-- Loading State -->\n        <div id=\"simulation-loading\" class=\"simulation-loading hidden\">\n          <div class=\"loading-spinner\"></div>\n          <p>Running battle simulation...</p>\n        </div>\n\n        <!-- Results Container -->\n        <div id=\"simulation-results\" class=\"simulation-results hidden\">\n          <!-- Results will be populated here -->\n        </div>\n\n        <!-- Help Section -->\n        <div class=\"help-section\">\n          <h4>📚 Battle Mechanics Guide\n            <span class=\"help-icon\" data-tooltip=\"battle-mechanics-guide\">ℹ️</span>\n          </h4>\n          <div class=\"help-content\">\n            <div class=\"help-item\">\n              <strong>🎯 Initiative:</strong> 50/50 chance who attacks first (best vs worst case)\n            </div>\n            <div class=\"help-item\">\n              <strong>⚔️ Player Attacks:</strong> Deal damage to enemies based on unit strength\n            </div>\n            <div class=\"help-item\">\n              <strong>🛡️ Enemy Attacks:</strong> Eliminate entire player unit groups\n            </div>\n            <div class=\"help-item\">\n              <strong>🔄 Battle Phases:</strong> All units take turns, then cycle repeats\n            </div>\n            <div class=\"help-item\">\n              <strong>🏁 Victory Condition:</strong> Battle ends when all player groups are eliminated\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!-- Tooltip Container -->\n      <div id=\"tooltip\" class=\"tooltip hidden\">\n        <div class=\"tooltip-content\"></div>\n        <div class=\"tooltip-arrow\"></div>\n      </div>\n    `;\n\n    this.addBattleSimulationStyles();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    const runBtn = document.getElementById('run-simulation-btn');\n    const clearBtn = document.getElementById('clear-simulation-btn');\n    const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n    const selectEnemyBtn = document.getElementById('select-enemy-btn');\n    const clearEnemyBtn = document.getElementById('clear-enemy-btn');\n\n    if (runBtn) {\n      runBtn.addEventListener('click', () => this.runSimulation());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearResults());\n    }\n\n    if (enemyGroupsInput) {\n      enemyGroupsInput.addEventListener('input', () => this.validateInput());\n    }\n\n    if (selectEnemyBtn) {\n      selectEnemyBtn.addEventListener('click', () => this.openEnemyUnitSelector());\n    }\n\n    if (clearEnemyBtn) {\n      clearEnemyBtn.addEventListener('click', () => this.clearSelectedEnemyUnit());\n    }\n\n    // Attach enemy type radio listeners\n    const enemyTypeRadios = document.querySelectorAll('input[name=\"enemy-type\"]');\n    enemyTypeRadios.forEach(radio => {\n      radio.addEventListener('change', (e) => this.handleEnemyTypeChange(e as Event));\n    });\n\n    // Attach tooltip listeners\n    this.attachTooltipListeners();\n  }\n\n  /**\n   * Handle enemy type change (generic vs specific)\n   */\n  private handleEnemyTypeChange(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    const enemyType = target.value;\n    \n    const genericSection = document.getElementById('generic-enemy-input');\n    const specificSection = document.getElementById('specific-enemy-input');\n    \n    if (enemyType === 'generic') {\n      genericSection?.classList.remove('hidden');\n      specificSection?.classList.add('hidden');\n    } else if (enemyType === 'specific') {\n      genericSection?.classList.add('hidden');\n      specificSection?.classList.remove('hidden');\n    }\n    \n    // Revalidate input when switching types\n    this.validateInput();\n  }\n\n  /**\n   * Open enemy unit selector modal\n   */\n  private async openEnemyUnitSelector(): Promise<void> {\n    // Create modal container\n    const modalContainer = document.createElement('div');\n    modalContainer.id = 'enemy-unit-selector-modal';\n    document.body.appendChild(modalContainer);\n    \n    // Create selector with props\n    this.enemyUnitSelector = new EnemyUnitSelector({\n      onSelect: (selectedUnit: EnemyUnit) => {\n        this.selectedEnemyUnit = selectedUnit;\n        this.displaySelectedEnemyUnit();\n        this.validateInput();\n        this.closeEnemyUnitSelector();\n      },\n      onCancel: () => {\n        this.closeEnemyUnitSelector();\n      },\n      selectedUnit: this.selectedEnemyUnit,\n      mode: 'single',\n      title: 'Select Enemy Unit for Battle'\n    });\n    \n    // Mount the selector\n    await this.enemyUnitSelector.mount(modalContainer);\n  }\n\n  /**\n   * Close enemy unit selector modal\n   */\n  private closeEnemyUnitSelector(): void {\n    if (this.enemyUnitSelector) {\n      this.enemyUnitSelector.unmount();\n      this.enemyUnitSelector = null;\n    }\n    \n    const modalContainer = document.getElementById('enemy-unit-selector-modal');\n    if (modalContainer) {\n      modalContainer.remove();\n    }\n  }\n\n  /**\n   * Clear selected enemy unit\n   */\n  private clearSelectedEnemyUnit(): void {\n    this.selectedEnemyUnit = null;\n    this.displaySelectedEnemyUnit();\n    this.validateInput();\n  }\n\n  /**\n   * Display the selected enemy unit in the UI\n   */\n  private displaySelectedEnemyUnit(): void {\n    const noSelectionEl = document.getElementById('no-enemy-selected');\n    const selectedInfoEl = document.getElementById('selected-enemy-info');\n    const clearEnemyBtn = document.getElementById('clear-enemy-btn');\n    \n    if (!noSelectionEl || !selectedInfoEl || !clearEnemyBtn) return;\n    \n    if (!this.selectedEnemyUnit) {\n      noSelectionEl.classList.remove('hidden');\n      selectedInfoEl.classList.add('hidden');\n      clearEnemyBtn.style.display = 'none';\n    } else {\n      noSelectionEl.classList.add('hidden');\n      selectedInfoEl.classList.remove('hidden');\n      clearEnemyBtn.style.display = 'inline-block';\n      \n      // Display enemy unit information\n      const unit = this.selectedEnemyUnit;\n      const attackModifiersText = unit.attack_modifiers && Object.keys(unit.attack_modifiers).length > 0\n        ? Object.entries(unit.attack_modifiers)\n            .map(([type, bonus]) => `+${bonus} vs ${type}`)\n            .join(', ')\n        : 'None';\n      \n      selectedInfoEl.innerHTML = `\n        <div class=\"enemy-unit-card\">\n          <div class=\"enemy-unit-header\">\n            <h5 class=\"enemy-unit-name\">${unit.name}</h5>\n            <div class=\"enemy-unit-types\">\n              ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n            </div>\n          </div>\n          <div class=\"enemy-unit-stats\">\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Health:</span>\n              <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Strength:</span>\n              <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Attack Modifiers:</span>\n              <span class=\"stat-value\">${attackModifiersText}</span>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Validate enemy configuration input with comprehensive error checking\n   */\n  private validateInput(): boolean {\n    const runBtn = document.getElementById('run-simulation-btn') as HTMLButtonElement;\n    if (!runBtn) return false;\n\n    // Get current enemy type\n    const enemyTypeRadio = document.querySelector('input[name=\"enemy-type\"]:checked') as HTMLInputElement;\n    const enemyType = enemyTypeRadio?.value || 'generic';\n\n    let isValid = true;\n    let errorMessage = '';\n\n    if (enemyType === 'generic') {\n      // Validate generic enemy groups input\n      const input = document.getElementById('enemy-groups') as HTMLInputElement;\n      if (!input) return false;\n\n      const inputValue = input.value.trim();\n\n      // Check if input is empty\n      if (!inputValue) {\n        isValid = false;\n        errorMessage = 'Please enter the number of enemy groups';\n      }\n      // Check if input is a valid number\n      else if (isNaN(Number(inputValue)) || !Number.isInteger(Number(inputValue))) {\n        isValid = false;\n        errorMessage = 'Please enter a valid whole number';\n      }\n      else {\n        const value = parseInt(inputValue);\n\n        // Check range constraints\n        if (value < 1) {\n          isValid = false;\n          errorMessage = 'Number of enemy groups must be at least 1';\n        }\n        // Performance limit removed - allow any number of enemy groups\n      }\n\n      // Update UI based on validation\n      if (!isValid) {\n        input.classList.add('error');\n        this.showInputError('enemy-groups', errorMessage);\n      } else {\n        input.classList.remove('error');\n        this.hideInputError('enemy-groups');\n      }\n    } else if (enemyType === 'specific') {\n      // Validate specific enemy unit selection\n      if (!this.selectedEnemyUnit) {\n        isValid = false;\n        errorMessage = 'Please select an enemy unit for the battle simulation';\n      }\n    }\n\n    // Update run button state\n    runBtn.disabled = !isValid || !this.validateArmyComposition();\n\n    return isValid;\n  }\n\n  /**\n   * Validate army composition before simulation\n   */\n  private validateArmyComposition(): boolean {\n    if (!this.currentArmy) {\n      return false;\n    }\n\n    // Check if army has any units\n    if (!this.currentArmy.stackingOrder || this.currentArmy.stackingOrder.length === 0) {\n      return false;\n    }\n\n    // Check if all units have valid data (new unified format)\n    for (const group of this.currentArmy.stackingOrder) {\n      if (!group.unit?.name || group.count <= 0 || !group.unit?.strength || group.unit.strength <= 0 || group.totalHealth <= 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Show input error message\n   */\n  private showInputError(inputId: string, message: string): void {\n    const input = document.getElementById(inputId);\n    if (!input) return;\n\n    // Remove existing error message\n    this.hideInputError(inputId);\n\n    // Create error message element\n    const errorElement = document.createElement('div');\n    errorElement.className = 'input-error-message';\n    errorElement.id = `${inputId}-error`;\n    errorElement.textContent = message;\n\n    // Insert after the input\n    input.parentNode?.insertBefore(errorElement, input.nextSibling);\n  }\n\n  /**\n   * Hide input error message\n   */\n  private hideInputError(inputId: string): void {\n    const errorElement = document.getElementById(`${inputId}-error`);\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  /**\n   * Attach tooltip event listeners\n   */\n  private attachTooltipListeners(): void {\n    const helpIcons = document.querySelectorAll('.help-icon[data-tooltip]');\n\n    helpIcons.forEach(icon => {\n      icon.addEventListener('mouseenter', (e) => this.showTooltip(e as MouseEvent));\n      icon.addEventListener('mouseleave', () => this.hideTooltip());\n      icon.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.toggleTooltip(e as MouseEvent);\n      });\n    });\n\n    // Hide tooltip when clicking elsewhere\n    document.addEventListener('click', (e) => {\n      const target = e.target as Element;\n      if (!target.closest('.help-icon') && !target.closest('#tooltip')) {\n        this.hideTooltip();\n      }\n    });\n  }\n\n  /**\n   * Show tooltip\n   */\n  private showTooltip(event: MouseEvent): void {\n    const target = event.target as Element;\n    const tooltipKey = target.getAttribute('data-tooltip');\n\n    if (!tooltipKey || !this.tooltipData[tooltipKey]) return;\n\n    const tooltip = document.getElementById('tooltip');\n    const tooltipContent = tooltip?.querySelector('.tooltip-content');\n\n    if (!tooltip || !tooltipContent) return;\n\n    tooltipContent.innerHTML = this.tooltipData[tooltipKey];\n    tooltip.classList.remove('hidden');\n\n    // Position tooltip\n    this.positionTooltip(tooltip, target);\n  }\n\n  /**\n   * Hide tooltip\n   */\n  private hideTooltip(): void {\n    const tooltip = document.getElementById('tooltip');\n    if (tooltip) {\n      tooltip.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Toggle tooltip (for mobile/click)\n   */\n  private toggleTooltip(event: MouseEvent): void {\n    const tooltip = document.getElementById('tooltip');\n    if (tooltip?.classList.contains('hidden')) {\n      this.showTooltip(event);\n    } else {\n      this.hideTooltip();\n    }\n  }\n\n  /**\n   * Position tooltip relative to target element\n   */\n  private positionTooltip(tooltip: Element, target: Element): void {\n    const targetRect = target.getBoundingClientRect();\n    const tooltipElement = tooltip as HTMLElement;\n\n    // Reset position\n    tooltipElement.style.top = '';\n    tooltipElement.style.left = '';\n    tooltipElement.style.transform = '';\n\n    // Calculate position\n    const tooltipRect = tooltip.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    let top = targetRect.bottom + 10;\n    let left = targetRect.left + (targetRect.width / 2) - (tooltipRect.width / 2);\n\n    // Adjust if tooltip goes off screen\n    if (left < 10) {\n      left = 10;\n    } else if (left + tooltipRect.width > viewportWidth - 10) {\n      left = viewportWidth - tooltipRect.width - 10;\n    }\n\n    if (top + tooltipRect.height > viewportHeight - 10) {\n      top = targetRect.top - tooltipRect.height - 10;\n    }\n\n    tooltipElement.style.top = `${top}px`;\n    tooltipElement.style.left = `${left}px`;\n  }\n\n  /**\n   * Run the battle simulation with comprehensive error handling\n   */\n  private async runSimulation(): Promise<void> {\n    // Comprehensive validation before starting\n    if (!this.validateInput()) {\n      this.showError('Please fix the input errors before running the simulation.');\n      return;\n    }\n\n    if (!this.validateArmyComposition()) {\n      this.showError('Invalid army composition. Please ensure you have selected and optimized your army first.');\n      return;\n    }\n\n    // Get current enemy type\n    const enemyTypeRadio = document.querySelector('input[name=\"enemy-type\"]:checked') as HTMLInputElement;\n    const enemyType = enemyTypeRadio?.value || 'generic';\n\n    // Show loading state\n    this.showLoading(true);\n    this.hideError();\n\n    try {\n      // Validate army composition one more time\n      if (!this.currentArmy || !this.currentArmy.stackingOrder) {\n        throw new Error('Army composition is invalid or missing');\n      }\n\n      // Run simulation with timeout protection using optimized battle simulation\n      const simulationPromise = new Promise<void>((resolve, reject) => {\n        try {\n          if (enemyType === 'specific' && this.selectedEnemyUnit) {\n            // Convert selected enemy unit to unified format\n            const unifiedEnemies = [{\n              type: this.selectedEnemyUnit.isMortal ? 'mortal' : 'infinite',\n              unit: {\n                name: this.selectedEnemyUnit.name,\n                strength: this.selectedEnemyUnit.strength,\n                health: this.selectedEnemyUnit.health,\n                unit_types: this.selectedEnemyUnit.unit_types || [],\n                attack_modifiers: this.selectedEnemyUnit.attack_modifiers || []\n              },\n              count: this.selectedEnemyUnit.count || 1,\n              currentCount: this.selectedEnemyUnit.count || 1,\n              groupIndex: 0\n            }];\n\n            // Run best case scenario (deep clone to avoid object overlap)\n            const bestCaseConfig: UnifiedBattleConfiguration = {\n              playerArmy: {\n                stackingOrder: JSON.parse(JSON.stringify(this.currentArmy!.stackingOrder)),\n                totalStrength: this.currentArmy!.totalStrength,\n                totalHealth: this.currentArmy!.totalHealth\n              },\n              enemies: JSON.parse(JSON.stringify(unifiedEnemies)),\n              playerGoesFirst: true\n            };\n            this.currentBestCase = this.unifiedBattleService.simulateBattle(bestCaseConfig);\n\n            // Run worst case scenario (deep clone to avoid object overlap)\n            const worstCaseConfig: UnifiedBattleConfiguration = {\n              playerArmy: {\n                stackingOrder: JSON.parse(JSON.stringify(this.currentArmy!.stackingOrder)),\n                totalStrength: this.currentArmy!.totalStrength,\n                totalHealth: this.currentArmy!.totalHealth\n              },\n              enemies: JSON.parse(JSON.stringify(unifiedEnemies)),\n              playerGoesFirst: false\n            };\n            this.currentWorstCase = this.unifiedBattleService.simulateBattle(worstCaseConfig);\n          } else {\n            // Create generic enemies\n            const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n            const enemyGroups = parseInt(enemyGroupsInput.value);\n\n            const unifiedEnemies = [];\n            for (let i = 0; i < enemyGroups; i++) {\n              unifiedEnemies.push({\n                type: 'generic' as const,\n                name: `Enemy Group ${i + 1}`,\n                groupIndex: i\n              });\n            }\n\n            // Run best case scenario\n            const bestCaseConfig: UnifiedBattleConfiguration = {\n              playerArmy: {\n                stackingOrder: this.currentArmy!.stackingOrder,\n                totalStrength: this.currentArmy!.totalStrength,\n                totalHealth: this.currentArmy!.totalHealth\n              },\n              enemies: unifiedEnemies,\n              playerGoesFirst: true\n            };\n            this.currentBestCase = this.unifiedBattleService.simulateBattle(bestCaseConfig);\n\n            // Run worst case scenario\n            const worstCaseConfig: UnifiedBattleConfiguration = {\n              ...bestCaseConfig,\n              playerGoesFirst: false\n            };\n            this.currentWorstCase = this.unifiedBattleService.simulateBattle(worstCaseConfig);\n          }\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      // Add timeout to prevent hanging\n      const timeoutPromise = new Promise<void>((_, reject) => {\n        setTimeout(() => reject(new Error('Simulation timed out')), 30000); // 30 second timeout\n      });\n\n      await Promise.race([simulationPromise, timeoutPromise]);\n\n      // Validate results\n      if (!this.currentBestCase || !this.currentWorstCase) {\n        throw new Error('Simulation completed but results are invalid');\n      }\n\n      // Display results\n      this.displayResults();\n\n      // Update UI state\n      this.showLoading(false);\n      this.showResults(true);\n\n      // Show clear button\n      const clearBtn = document.getElementById('clear-simulation-btn');\n      if (clearBtn) clearBtn.style.display = 'inline-block';\n\n    } catch (error) {\n      console.error('Battle simulation failed:', error);\n      this.showLoading(false);\n\n      // Provide specific error messages based on error type\n      let errorMessage = 'An unexpected error occurred during simulation.';\n\n      if (error instanceof Error) {\n        if (error.message.includes('timeout')) {\n          errorMessage = 'Simulation timed out. Try reducing the complexity or check your army composition.';\n        } else if (error.message.includes('invalid')) {\n          errorMessage = 'Invalid data detected. Please refresh the page and try again.';\n        } else if (error.message.includes('Army composition')) {\n          errorMessage = 'Army composition error. Please re-optimize your army and try again.';\n        } else if (error.message.includes('Enemy unit')) {\n          errorMessage = 'Enemy unit configuration error. Please select a valid enemy unit.';\n        }\n      }\n\n      this.showError(errorMessage);\n    }\n  }\n\n  /**\n   * Display simulation results\n   */\n  private displayResults(): void {\n    if (!this.currentBestCase || !this.currentWorstCase) return;\n\n    const resultsContainer = document.getElementById('simulation-results');\n    if (!resultsContainer) return;\n\n    // Use shared BattleResultsDisplay utility\n    BattleResultsDisplay.displayResults(\n      resultsContainer, \n      this.currentBestCase, \n      this.currentWorstCase,\n      {\n        includeTooltips: true,\n        onLogTabChange: () => this.attachTooltipListeners()\n      }\n    );\n\n    // Reattach tooltip listeners for new content\n    this.attachTooltipListeners();\n  }\n\n\n  /**\n   * Clear simulation results\n   */\n  private clearResults(): void {\n    this.currentBestCase = null;\n    this.currentWorstCase = null;\n    this.showResults(false);\n    \n    const clearBtn = document.getElementById('clear-simulation-btn');\n    if (clearBtn) clearBtn.style.display = 'none';\n  }\n\n  /**\n   * Show/hide loading state\n   */\n  private showLoading(show: boolean): void {\n    const loadingEl = document.getElementById('simulation-loading');\n    if (loadingEl) {\n      loadingEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show/hide results\n   */\n  private showResults(show: boolean): void {\n    const resultsEl = document.getElementById('simulation-results');\n    if (resultsEl) {\n      resultsEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show error message with better UI\n   */\n  private showError(message: string): void {\n    // Remove existing error\n    this.hideError();\n\n    // Create error element\n    const errorElement = document.createElement('div');\n    errorElement.className = 'simulation-error';\n    errorElement.id = 'simulation-error';\n    errorElement.innerHTML = `\n      <div class=\"error-content\">\n        <span class=\"error-icon\">⚠️</span>\n        <span class=\"error-message\">${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Insert error before results container\n    const resultsContainer = document.getElementById('simulation-results');\n    if (resultsContainer && resultsContainer.parentNode) {\n      resultsContainer.parentNode.insertBefore(errorElement, resultsContainer);\n    } else {\n      // Fallback to container\n      if (this.container) {\n        this.container.appendChild(errorElement);\n      }\n    }\n\n    // Auto-hide after 10 seconds\n    setTimeout(() => {\n      this.hideError();\n    }, 10000);\n  }\n\n  /**\n   * Hide error message\n   */\n  private hideError(): void {\n    const errorElement = document.getElementById('simulation-error');\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  /**\n   * Add battle simulation specific styles\n   */\n  private addBattleSimulationStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .battle-simulation-section {\n        margin-top: 2rem;\n        padding: 2rem;\n        background: linear-gradient(135deg, #fff0f0 0%, #f8f9fa 100%);\n        border: 2px solid #e74c3c;\n        border-radius: 12px;\n      }\n\n      .section-description {\n        color: #666;\n        margin-bottom: 2rem;\n        font-size: 1.1rem;\n        line-height: 1.6;\n      }\n\n      .enemy-input-container {\n        background: white;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .input-help {\n        color: #666;\n        font-size: 0.9rem;\n        margin-top: 0.5rem;\n        display: block;\n      }\n\n      .simulation-controls {\n        margin-top: 1.5rem;\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .simulation-loading {\n        text-align: center;\n        padding: 2rem;\n        background: white;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .simulation-results {\n        background: white;\n        border-radius: 8px;\n        padding: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .results-header {\n        text-align: center;\n        margin-bottom: 2rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .results-summary {\n        color: #666;\n        font-size: 1.1rem;\n        margin-top: 0.5rem;\n      }\n\n      .scenario-comparison {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .scenario-card {\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .scenario-card.best-case {\n        background: #f0fff4;\n        border-color: #27ae60;\n      }\n\n      .scenario-card.worst-case {\n        background: #fff5f5;\n        border-color: #e74c3c;\n      }\n\n      .scenario-card h4 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.3rem;\n      }\n\n      .scenario-description {\n        color: #666;\n        margin-bottom: 1rem;\n        font-style: italic;\n      }\n\n      .scenario-stats, .comparison-stats {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .stat, .comparison-stat {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 4px;\n      }\n\n      .stat-label {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .stat-value {\n        font-weight: 700;\n        color: #2c3e50;\n      }\n\n      .stat-value.positive {\n        color: #27ae60;\n      }\n\n      .stat-value.negative {\n        color: #e74c3c;\n      }\n\n      .comparison-summary {\n        background: #f8f9fa;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n      }\n\n      .comparison-summary h4 {\n        margin: 0 0 1rem 0;\n        color: #2c3e50;\n      }\n\n      .detailed-logs {\n        border-top: 2px solid #eee;\n        padding-top: 2rem;\n      }\n\n      .log-tabs {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n\n      .log-tab {\n        padding: 0.75rem 1.5rem;\n        border: 2px solid #ddd;\n        background: #f8f9fa;\n        border-radius: 6px 6px 0 0;\n        cursor: pointer;\n        font-weight: 600;\n        transition: all 0.2s;\n      }\n\n      .log-tab.active {\n        background: white;\n        border-bottom-color: white;\n        color: #2c3e50;\n      }\n\n      .log-content {\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 0 6px 6px 6px;\n        padding: 1.5rem;\n        min-height: 300px;\n        max-height: 500px;\n        overflow-y: auto;\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      .combat-log.hidden {\n        display: none;\n      }\n\n      .log-entries {\n        font-family: 'Courier New', monospace;\n        font-size: 0.9rem;\n        line-height: 1.6;\n      }\n\n      .log-entry {\n        padding: 0.5rem;\n        border-bottom: 1px solid #f0f0f0;\n        border-radius: 4px;\n        margin-bottom: 2px;\n      }\n\n      .log-entry.player-turn {\n        background-color: #e3f2fd;\n        border-left: 3px solid #2196f3;\n      }\n\n      .log-entry.enemy-turn {\n        background-color: #ffebee;\n        border-left: 3px solid #f44336;\n      }\n\n      .turn-number {\n        color: #666;\n        font-weight: 600;\n        margin-right: 0.5rem;\n      }\n\n      .action-text {\n        color: #333;\n      }\n\n      .no-log {\n        text-align: center;\n        color: #666;\n        font-style: italic;\n        padding: 2rem;\n      }\n\n      .input.error {\n        border-color: #e74c3c;\n        background-color: #fff5f5;\n        box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.2);\n      }\n\n      .input-error-message {\n        color: #e74c3c;\n        font-size: 0.85rem;\n        margin-top: 0.25rem;\n        display: block;\n        font-weight: 500;\n      }\n\n      .simulation-error {\n        background: #f8d7da;\n        border: 2px solid #e74c3c;\n        border-radius: 8px;\n        margin-bottom: 1rem;\n        animation: slideIn 0.3s ease-out;\n      }\n\n      .error-content {\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .error-icon {\n        font-size: 1.2rem;\n        flex-shrink: 0;\n      }\n\n      .error-message {\n        flex: 1;\n        color: #721c24;\n        font-weight: 500;\n        line-height: 1.4;\n      }\n\n      .error-close {\n        background: none;\n        border: none;\n        font-size: 1.5rem;\n        color: #721c24;\n        cursor: pointer;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        transition: background-color 0.2s;\n      }\n\n      .error-close:hover {\n        background-color: rgba(114, 28, 36, 0.1);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      .loading-spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid #f3f3f3;\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 1rem;\n      }\n\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n\n      @media (max-width: 768px) {\n        .scenario-comparison {\n          grid-template-columns: 1fr;\n        }\n        \n        .simulation-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n        \n        .log-tabs {\n          flex-direction: column;\n        }\n        \n        .log-tab {\n          border-radius: 6px;\n        }\n        \n        .log-content {\n          border-radius: 6px;\n        }\n      }\n\n      /* Help Section Styles */\n      .help-section {\n        background: #e8f5e8;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-top: 2rem;\n        border: 2px solid #27ae60;\n      }\n\n      .help-section h4 {\n        margin: 0 0 1rem 0;\n        color: #1e7e34;\n        font-size: 1.1rem;\n      }\n\n      .help-content {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .help-item {\n        background: white;\n        padding: 0.75rem;\n        border-radius: 6px;\n        border-left: 4px solid #27ae60;\n        font-size: 0.9rem;\n        line-height: 1.4;\n        color: #333333;\n      }\n\n      .help-icon {\n        display: inline-block;\n        margin-left: 0.5rem;\n        cursor: help;\n        color: #007bff;\n        font-size: 0.9rem;\n        transition: all 0.2s;\n        user-select: none;\n      }\n\n      .help-icon:hover {\n        color: #0056b3;\n        transform: scale(1.1);\n      }\n\n      /* Tooltip Styles */\n      .tooltip {\n        position: fixed;\n        background: #2c3e50;\n        color: white;\n        padding: 0;\n        border-radius: 8px;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        z-index: 1000;\n        max-width: 300px;\n        font-size: 0.9rem;\n        line-height: 1.4;\n      }\n\n      .tooltip-content {\n        padding: 1rem;\n      }\n\n      .tooltip-arrow {\n        position: absolute;\n        top: -6px;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 0;\n        height: 0;\n        border-left: 6px solid transparent;\n        border-right: 6px solid transparent;\n        border-bottom: 6px solid #2c3e50;\n      }\n\n      .tooltip.hidden {\n        display: none;\n      }\n\n      /* Simulation Note Styles */\n      .simulation-note {\n        margin-bottom: 1.5rem;\n      }\n\n      .info-note {\n        background: #e3f2fd;\n        border: 1px solid #2196f3;\n        border-radius: 6px;\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .note-icon {\n        font-size: 1.2rem;\n        color: #1976d2;\n      }\n\n      .note-text {\n        color: #1565c0;\n        font-weight: 500;\n        font-size: 0.95rem;\n      }\n\n      /* Enemy Type Selection Styles */\n      .enemy-type-selection {\n        background-color: #f8f9fa;\n        border: 1px solid #dee2e6;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 20px;\n      }\n\n      .enemy-type-selection h4 {\n        margin-top: 0;\n        margin-bottom: 15px;\n        color: #495057;\n        font-size: 18px;\n      }\n\n      .enemy-type-options {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n\n      .radio-option {\n        display: flex;\n        align-items: flex-start;\n        gap: 10px;\n        padding: 15px;\n        border: 2px solid #dee2e6;\n        border-radius: 8px;\n        background-color: white;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .radio-option:hover {\n        border-color: #007bff;\n        background-color: #f8f9fa;\n      }\n\n      .radio-option:has(input:checked) {\n        border-color: #007bff;\n        background-color: #e7f3ff;\n      }\n\n      .radio-option input[type=\"radio\"] {\n        margin: 0;\n        margin-top: 2px;\n      }\n\n      .radio-label {\n        font-weight: 600;\n        color: #495057;\n        display: block;\n        margin-bottom: 5px;\n      }\n\n      .radio-help {\n        color: #6c757d;\n        font-size: 14px;\n        line-height: 1.4;\n        display: block;\n      }\n\n      .enemy-config-section {\n        margin-top: 15px;\n        padding: 15px;\n        background-color: #fff;\n        border: 1px solid #dee2e6;\n        border-radius: 6px;\n      }\n\n      .enemy-unit-selection {\n        margin-top: 15px;\n      }\n\n      .selected-enemy-display {\n        margin-bottom: 15px;\n      }\n\n      .no-selection-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 10px;\n        padding: 20px;\n        background-color: #f8f9fa;\n        border: 2px dashed #dee2e6;\n        border-radius: 8px;\n        text-align: center;\n      }\n\n      .no-selection-message .icon {\n        font-size: 24px;\n        color: #6c757d;\n      }\n\n      .no-selection-message .message {\n        font-weight: 600;\n        color: #495057;\n      }\n\n      .no-selection-message .help {\n        color: #6c757d;\n        font-size: 14px;\n      }\n\n      .selected-enemy-card {\n        padding: 15px;\n        background-color: #e7f3ff;\n        border: 1px solid #007bff;\n        border-radius: 8px;\n      }\n\n      .enemy-unit-card {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n\n      .enemy-unit-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        gap: 15px;\n      }\n\n      .enemy-unit-name {\n        font-weight: 600;\n        color: #495057;\n        margin: 0;\n        font-size: 18px;\n      }\n\n      .enemy-unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n      }\n\n      .unit-type-tag {\n        background-color: #007bff;\n        color: white;\n        padding: 4px 8px;\n        border-radius: 4px;\n        font-size: 12px;\n        font-weight: 500;\n      }\n\n      .enemy-unit-stats {\n        display: grid;\n        gap: 10px;\n      }\n\n      .stat-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 8px 12px;\n        background-color: rgba(255, 255, 255, 0.7);\n        border-radius: 4px;\n      }\n\n      .stat-item .stat-label {\n        font-weight: 500;\n        color: #495057;\n      }\n\n      .stat-item .stat-value {\n        font-weight: 600;\n        color: #007bff;\n      }\n\n      .enemy-selection-controls {\n        display: flex;\n        gap: 10px;\n        align-items: center;\n      }\n\n      .select-enemy-unit-btn {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .select-enemy-unit-btn:hover {\n        background-color: #0056b3;\n      }\n\n      .change-enemy-unit-btn {\n        background-color: #6c757d;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: background-color 0.2s ease;\n      }\n\n      .change-enemy-unit-btn:hover {\n        background-color: #5a6268;\n      }\n\n      /* Mobile Responsiveness for Enemy Unit Features */\n      @media (max-width: 768px) {\n        .enemy-type-selection {\n          padding: 15px;\n        }\n\n        .radio-option {\n          padding: 12px;\n        }\n\n        .enemy-unit-header {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 10px;\n        }\n\n        .enemy-selection-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .select-enemy-unit-btn,\n        .change-enemy-unit-btn {\n          width: 100%;\n        }\n\n        .stat-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 5px;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Display pre-calculated battle results without running a new simulation\n   */\n  displayPreCalculatedResults(battleAnalysis: any): void {\n    console.log('BattleSimulationComponent: displayPreCalculatedResults called', battleAnalysis);\n    console.log('BattleSimulationComponent: bestCase structure:', battleAnalysis.bestCase);\n    console.log('BattleSimulationComponent: worstCase structure:', battleAnalysis.worstCase);\n    \n    if (!this.container) {\n      console.log('BattleSimulationComponent: no container');\n      return;\n    }\n\n    // Store the results (convert from legacy format if needed)\n    if (battleAnalysis.bestCase && battleAnalysis.worstCase) {\n      this.currentBestCase = battleAnalysis.bestCase;\n      this.currentWorstCase = battleAnalysis.worstCase;\n      \n      console.log('BattleSimulationComponent: currentBestCase totalDamageDealt:', this.currentBestCase!.totalDamageDealt);\n      console.log('BattleSimulationComponent: currentWorstCase totalDamageDealt:', this.currentWorstCase!.totalDamageDealt);\n    } else {\n      console.warn('BattleSimulationComponent: Invalid battle analysis format');\n      return;\n    }\n\n    // Find the results container\n    const resultsContainer = this.container.querySelector('#simulation-results');\n    if (!resultsContainer) {\n      console.log('BattleSimulationComponent: simulation-results container not found');\n      return;\n    }\n    console.log('BattleSimulationComponent: found results container', resultsContainer);\n\n    // Show the results container\n    resultsContainer.classList.remove('hidden');\n\n    // Display the pre-calculated results\n    this.displayResults();\n\n    // Make sure results are visible\n    this.showResults(true);\n\n    // Hide simulation controls for damage optimization mode (view-only)\n    const controlsContainer = this.container.querySelector('.simulation-controls');\n    const enemyInputContainer = this.container.querySelector('.enemy-input-container');\n    if (controlsContainer) {\n      (controlsContainer as HTMLElement).style.display = 'none';\n    }\n    if (enemyInputContainer) {\n      (enemyInputContainer as HTMLElement).style.display = 'none';\n    }\n\n    // Show a note that these are pre-calculated results\n    const noteContainer = this.container.querySelector('#simulation-note');\n    if (noteContainer) {\n      noteContainer.innerHTML = `\n        <div class=\"info-note\">\n          <span class=\"note-icon\">ℹ️</span>\n          <span class=\"note-text\">Showing pre-calculated battle results from damage optimization</span>\n        </div>\n      `;\n      noteContainer.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Show simulation controls (for stacking mode)\n   */\n  private showSimulationControls(): void {\n    if (!this.container) return;\n\n    const controlsContainer = this.container.querySelector('.simulation-controls');\n    const enemyInputContainer = this.container.querySelector('.enemy-input-container');\n    if (controlsContainer) {\n      (controlsContainer as HTMLElement).style.display = 'block';\n    }\n    if (enemyInputContainer) {\n      (enemyInputContainer as HTMLElement).style.display = 'block';\n    }\n  }\n}\n","/**\n * Manual Battle Simulation Types\n * Types for user-configured battle scenarios where both player and enemy armies are manually set up\n */\n\nimport { Unit, StackingGroup } from './units';\nimport { BattleResult, BattleAnalysis, BattleConfiguration } from './battleSimulation';\nimport { UnifiedBattleResult } from '../services/unified-battle-simulation/types';\n\n/**\n * Configuration for a single army side in manual battle\n * Updated to use unified battle system format\n */\nexport interface ManualArmyConfiguration {\n  /** Unit groups in this army using unified stacking format */\n  stackingOrder: StackingGroup[];\n  /** Total strength of all units in this army */\n  totalStrength: number;\n  /** Total health of all units in this army */\n  totalHealth: number;\n  /** Display name for this army */\n  name: string;\n  /** Side identifier */\n  side: 'player' | 'enemy';\n}\n\n/**\n * Complete manual battle configuration\n */\nexport interface ManualBattleConfiguration {\n  /** Player army configuration */\n  playerArmy: ManualArmyConfiguration;\n  /** Enemy army configuration */\n  enemyArmy: ManualArmyConfiguration;\n  /** Whether player gets first attack */\n  playerGoesFirst: boolean;\n  /** Battle name/description */\n  battleName?: string;\n}\n\n\n/**\n * Manual battle analysis with both scenarios - using unified format directly\n */\nexport interface ManualBattleAnalysis {\n  /** Best case scenario result (player attacks first) */\n  bestCase: UnifiedBattleResult;\n  /** Worst case scenario result (enemy attacks first) */\n  worstCase: UnifiedBattleResult;\n  /** Comparison metrics between scenarios */\n  comparison: {\n    /** Difference in damage dealt between best and worst case */\n    damageDifference: number;\n    /** Difference in battle duration between best and worst case */\n    survivalDifference: number;\n    /** Average damage across both scenarios */\n    averageDamage: number;\n    /** Average battle duration across both scenarios */\n    averageSurvival: number;\n  };\n  /** Original manual configuration */\n  manualConfiguration: ManualBattleConfiguration;\n}\n\n/**\n * Validation result for manual army configuration\n */\nexport interface ManualArmyValidationResult {\n  /** Whether the army configuration is valid */\n  isValid: boolean;\n  /** Validation error messages */\n  errors: string[];\n  /** Warning messages (non-blocking) */\n  warnings: string[];\n  /** Total unit count */\n  totalUnits: number;\n  /** Whether army has infinite units */\n  hasInfiniteUnits: boolean;\n}\n\n/**\n * Unit selection state for dual army input\n */\nexport interface UnitSelectionState {\n  /** Currently selected unit (if any) */\n  selectedUnit: Unit | null;\n  /** Current quantity input */\n  quantity: number;\n  /** Whether infinite is enabled (enemy side only) */\n  isInfinite: boolean;\n  /** Whether this selection is valid */\n  isValid: boolean;\n  /** Validation message */\n  validationMessage?: string;\n}\n\n/**\n * Props for dual army input component\n */\nexport interface DualArmyInputProps {\n  /** Available units to choose from for player army */\n  availableUnits: Unit[];\n  /** Available units to choose from for enemy army (defaults to availableUnits if not provided) */\n  availableEnemyUnits?: Unit[];\n  /** Current player army configuration */\n  playerArmy: ManualArmyConfiguration;\n  /** Current enemy army configuration */\n  enemyArmy: ManualArmyConfiguration;\n  /** Callback when player army changes */\n  onPlayerArmyChange: (army: ManualArmyConfiguration) => void;\n  /** Callback when enemy army changes */\n  onEnemyArmyChange: (army: ManualArmyConfiguration) => void;\n  /** Whether the form is disabled */\n  disabled?: boolean;\n}\n\n/**\n * Utility functions for manual battle configuration\n */\nexport class ManualBattleUtils {\n  /**\n   * Get stacking groups from manual army configuration (now directly available)\n   */\n  static convertToStackingGroups(army: ManualArmyConfiguration): StackingGroup[] {\n    return army.stackingOrder\n      .filter(group => group.count > 0)\n      .sort((a, b) => a.totalHealth - b.totalHealth); // Sort by total health (weakest first)\n  }\n\n  /**\n   * Convert manual battle configuration to standard battle configuration\n   */\n  static convertToBattleConfiguration(\n    manualConfig: ManualBattleConfiguration\n  ): BattleConfiguration {\n    const playerStackingGroups = this.convertToStackingGroups(manualConfig.playerArmy);\n    \n    // For enemy army, count total enemy groups\n    const enemyGroups = manualConfig.enemyArmy.stackingOrder\n      .filter(group => group.count > 0)\n      .reduce((total, group) => total + Math.min(group.count, 100), 0); // Cap each group at 100 for performance\n    \n    return {\n      playerArmy: {\n        units: {}, // Legacy format - we use stackingOrder\n        stackingOrder: playerStackingGroups,\n        totalStrength: playerStackingGroups.reduce((sum, group) => sum + (group.count * group.unit.strength), 0),\n        totalHealth: playerStackingGroups.reduce((sum, group) => sum + group.totalHealth, 0),\n        totalLeadershipCost: 0, // Not used in manual battle\n        totalDominanceCost: 0, // Not used in manual battle\n        totalMercenaryCount: 0, // Not used in manual battle\n        isValidStacking: true,\n        efficiencyScore: 0 // Not used in manual battle\n      },\n      enemyGroupCount: Math.min(enemyGroups, 100), // Cap at 100 for performance\n      playerGoesFirst: manualConfig.playerGoesFirst\n    };\n  }\n\n  /**\n   * Validate manual army configuration\n   */\n  static validateArmyConfiguration(army: ManualArmyConfiguration): ManualArmyValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    let totalUnits = 0;\n    let hasInfiniteUnits = false;\n\n    // Check if army has any units\n    if (army.stackingOrder.length === 0) {\n      errors.push('Army must have at least one unit type');\n    }\n\n    // Validate each stacking group\n    for (const group of army.stackingOrder) {\n      if (!group.unit) {\n        errors.push('Invalid unit configuration');\n        continue;\n      }\n\n      if (group.count <= 0) {\n        errors.push(`Unit \"${group.unit.name}\" must have a positive quantity`);\n      } else if (group.count > 10000) {\n        warnings.push(`Unit \"${group.unit.name}\" has a very large quantity (${group.count})`);\n      }\n      \n      totalUnits += group.count;\n      \n      // Check for very large counts that might indicate infinite units\n      if (group.count > 100000) {\n        hasInfiniteUnits = true;\n      }\n    }\n\n    // Check for reasonable army size\n    if (!hasInfiniteUnits && totalUnits > 50000) {\n      warnings.push(`Army size is very large (${totalUnits} total units). This may affect performance.`);\n    }\n\n    // Check for duplicate units\n    const unitNames = army.stackingOrder.map(g => g.unit.name);\n    const duplicates = unitNames.filter((name, index) => unitNames.indexOf(name) !== index);\n    if (duplicates.length > 0) {\n      errors.push(`Duplicate units found: ${Array.from(new Set(duplicates)).join(', ')}`);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      totalUnits,\n      hasInfiniteUnits\n    };\n  }\n\n  /**\n   * Create empty manual army configuration\n   */\n  static createEmptyArmy(side: 'player' | 'enemy', name: string): ManualArmyConfiguration {\n    return {\n      stackingOrder: [],\n      totalStrength: 0,\n      totalHealth: 0,\n      name,\n      side\n    };\n  }\n\n  /**\n   * Add unit to manual army configuration\n   */\n  static addUnitToArmy(\n    army: ManualArmyConfiguration, \n    unit: Unit, \n    quantity: number, \n    isInfinite: boolean = false\n  ): ManualArmyConfiguration {\n    // Use large number for infinite units\n    const actualCount = isInfinite ? MANUAL_BATTLE_CONSTANTS.INFINITE_UNIT_VALUE : quantity;\n    const totalHealth = unit.health * actualCount;\n    \n    // Check if unit already exists\n    const existingIndex = army.stackingOrder.findIndex(g => g.unit.name === unit.name);\n    \n    const newStackingOrder = [...army.stackingOrder];\n    const newGroup: StackingGroup = {\n      count: actualCount,\n      totalHealth,\n      unit\n    };\n    \n    if (existingIndex >= 0) {\n      // Update existing group\n      newStackingOrder[existingIndex] = newGroup;\n    } else {\n      // Add new group\n      newStackingOrder.push(newGroup);\n    }\n\n    // Recalculate army totals\n    const totalStrength = newStackingOrder.reduce((sum, g) => sum + (g.count * g.unit.strength), 0);\n    const totalHealthSum = newStackingOrder.reduce((sum, g) => sum + g.totalHealth, 0);\n\n    return {\n      ...army,\n      stackingOrder: newStackingOrder,\n      totalStrength,\n      totalHealth: totalHealthSum\n    };\n  }\n\n  /**\n   * Remove unit from manual army configuration\n   */\n  static removeUnitFromArmy(army: ManualArmyConfiguration, unitName: string): ManualArmyConfiguration {\n    const newStackingOrder = army.stackingOrder.filter(g => g.unit.name !== unitName);\n    \n    // Recalculate army totals\n    const totalStrength = newStackingOrder.reduce((sum, g) => sum + (g.count * g.unit.strength), 0);\n    const totalHealth = newStackingOrder.reduce((sum, g) => sum + g.totalHealth, 0);\n    \n    return {\n      ...army,\n      stackingOrder: newStackingOrder,\n      totalStrength,\n      totalHealth\n    };\n  }\n\n  /**\n   * Get army summary for display\n   */\n  static getArmySummary(army: ManualArmyConfiguration): string {\n    if (army.stackingOrder.length === 0) {\n      return 'No units configured';\n    }\n\n    const totalTypes = army.stackingOrder.length;\n    const infiniteCount = army.stackingOrder.filter(g => g.count > 100000).length; // Assume large counts are infinite\n    const finiteTotal = army.stackingOrder\n      .filter(g => g.count <= 100000)\n      .reduce((sum, g) => sum + g.count, 0);\n\n    if (infiniteCount > 0) {\n      return `${totalTypes} unit types (${infiniteCount} infinite, ${finiteTotal} finite)`;\n    } else {\n      return `${totalTypes} unit types, ${finiteTotal} total units`;\n    }\n  }\n}\n\n/**\n * Constants for manual battle simulation\n */\nexport const MANUAL_BATTLE_CONSTANTS = {\n  /** Maximum finite units per army unit type */\n  MAX_FINITE_UNITS: 10000,\n  /** Maximum army unit types */\n  MAX_ARMY_UNIT_TYPES: 50,\n  /** Infinite unit placeholder value - using a very large number to avoid conflicts with realistic army sizes */\n  INFINITE_UNIT_VALUE: 999999999,\n  /** Maximum enemy groups for simulation performance */\n  MAX_ENEMY_GROUPS: 100\n} as const;","/**\n * Dual Army Input Form Component\n * Allows configuration of both player and enemy armies for manual battle simulation\n */\n\nimport { Unit } from '../../types/units';\nimport { \n  ManualArmyConfiguration, \n  DualArmyInputProps,\n  UnitSelectionState,\n  ManualBattleUtils,\n  MANUAL_BATTLE_CONSTANTS\n} from '../../types/manualBattle';\n\nexport class DualArmyInputForm {\n  private container: HTMLElement | null = null;\n  private props: DualArmyInputProps;\n  private playerUnitSelection: UnitSelectionState = this.createEmptySelection();\n  private enemyUnitSelection: UnitSelectionState = this.createEmptySelection();\n\n  constructor(props: DualArmyInputProps) {\n    this.props = props;\n  }\n\n  /**\n   * Mount the component to a container\n   */\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Unmount the component\n   */\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.container = null;\n    }\n  }\n\n  /**\n   * Update component props\n   */\n  public updateProps(props: Partial<DualArmyInputProps>): void {\n    this.props = { ...this.props, ...props };\n    if (this.container) {\n      // Only update the army lists if armies have changed, for better performance\n      if (props.playerArmy || props.enemyArmy) {\n        this.updateArmyLists();\n      }\n      // Re-render if other props have changed\n      if (props.availableUnits || props.availableEnemyUnits || props.disabled !== undefined) {\n        this.render();\n        this.attachEventListeners();\n      }\n    }\n  }\n\n  /**\n   * Create empty unit selection state\n   */\n  private createEmptySelection(): UnitSelectionState {\n    return {\n      selectedUnit: null,\n      quantity: 1,\n      isInfinite: false,\n      isValid: false\n    };\n  }\n\n  /**\n   * Render the dual army input form\n   */\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"dual-army-input\">\n        <h3 class=\"dual-army-title\">⚔️ Configure Battle Armies</h3>\n        <p class=\"dual-army-description\">\n          Set up both player and enemy armies by selecting units and quantities for each side.\n        </p>\n\n        <div class=\"army-panels\">\n          <!-- Player Army Panel -->\n          <div class=\"army-panel player-army\">\n            <div class=\"army-panel-header\">\n              <h4 class=\"army-title\">👤 Player Army</h4>\n              <div class=\"army-summary\">\n                <span class=\"army-summary-text\">${ManualBattleUtils.getArmySummary(this.props.playerArmy)}</span>\n              </div>\n            </div>\n\n            <div class=\"army-configuration\">\n              <div class=\"unit-selection\">\n                <div class=\"input-group\">\n                  <label for=\"player-unit-select\" class=\"input-label\">Select Unit:</label>\n                  <select id=\"player-unit-select\" class=\"unit-select\">\n                    <option value=\"\">Choose a unit...</option>\n                    ${this.renderUnitOptions('player')}\n                  </select>\n                </div>\n\n                <div class=\"input-group\">\n                  <label for=\"player-quantity\" class=\"input-label\">Quantity:</label>\n                  <input\n                    type=\"number\"\n                    id=\"player-quantity\"\n                    class=\"quantity-input\"\n                    min=\"1\"\n                    max=\"${MANUAL_BATTLE_CONSTANTS.MAX_FINITE_UNITS}\"\n                    value=\"${this.playerUnitSelection.quantity}\"\n                    placeholder=\"Enter quantity\"\n                  >\n                </div>\n\n                <div class=\"unit-actions\">\n                  <button id=\"add-player-unit\" class=\"btn btn-primary\" disabled>\n                    ➕ Add to Army\n                  </button>\n                </div>\n              </div>\n\n              <div class=\"army-list\">\n                <h5>Current Army:</h5>\n                <div id=\"player-army-list\" class=\"unit-list\">\n                  ${this.renderArmyList(this.props.playerArmy, 'player')}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Enemy Army Panel -->\n          <div class=\"army-panel enemy-army\">\n            <div class=\"army-panel-header\">\n              <h4 class=\"army-title\">👹 Enemy Army</h4>\n              <div class=\"army-summary\">\n                <span class=\"army-summary-text\">${ManualBattleUtils.getArmySummary(this.props.enemyArmy)}</span>\n              </div>\n            </div>\n\n            <div class=\"army-configuration\">\n              <div class=\"unit-selection\">\n                <div class=\"input-group\">\n                  <label for=\"enemy-unit-select\" class=\"input-label\">Select Unit:</label>\n                  <select id=\"enemy-unit-select\" class=\"unit-select\">\n                    <option value=\"\">Choose a unit...</option>\n                    ${this.renderUnitOptions('enemy')}\n                  </select>\n                </div>\n\n                <div class=\"input-group\">\n                  <label for=\"enemy-quantity\" class=\"input-label\">Quantity:</label>\n                  <div class=\"quantity-controls\">\n                    <input\n                      type=\"number\"\n                      id=\"enemy-quantity\"\n                      class=\"quantity-input\"\n                      min=\"1\"\n                      max=\"${MANUAL_BATTLE_CONSTANTS.MAX_FINITE_UNITS}\"\n                      value=\"${this.enemyUnitSelection.quantity}\"\n                      placeholder=\"Enter quantity\"\n                      ${this.enemyUnitSelection.isInfinite ? 'disabled' : ''}\n                    >\n                    <label class=\"infinite-toggle\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"enemy-infinite\"\n                        ${this.enemyUnitSelection.isInfinite ? 'checked' : ''}\n                      >\n                      <span class=\"infinite-label\">Infinite</span>\n                    </label>\n                  </div>\n                </div>\n\n                <div class=\"unit-actions\">\n                  <button id=\"add-enemy-unit\" class=\"btn btn-primary\" disabled>\n                    ➕ Add to Army\n                  </button>\n                </div>\n              </div>\n\n              <div class=\"army-list\">\n                <h5>Current Army:</h5>\n                <div id=\"enemy-army-list\" class=\"unit-list\">\n                  ${this.renderArmyList(this.props.enemyArmy, 'enemy')}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"army-actions\">\n          <button id=\"clear-all-armies\" class=\"btn btn-secondary\">\n            🗑️ Clear Both Armies\n          </button>\n          <button id=\"validate-armies\" class=\"btn btn-outline\">\n            ✅ Validate Armies\n          </button>\n        </div>\n\n        <div id=\"validation-results\" class=\"validation-results hidden\">\n          <!-- Validation results will be displayed here -->\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  /**\n   * Render unit options for select dropdown\n   */\n  private renderUnitOptions(side: 'player' | 'enemy' = 'player'): string {\n    const units = side === 'player' \n      ? this.props.availableUnits \n      : (this.props.availableEnemyUnits || this.props.availableUnits);\n    \n    return units\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .map(unit => `\n        <option value=\"${unit.name}\" title=\"${this.getUnitTooltip(unit)}\">\n          ${unit.name} (${unit.strength} STR, ${unit.health} HP)\n        </option>\n      `).join('');\n  }\n\n  /**\n   * Get tooltip text for unit\n   */\n  private getUnitTooltip(unit: Unit): string {\n    return `Health: ${unit.health}, Strength: ${unit.strength}, Types: ${unit.unit_types.join(', ')}`;\n  }\n\n  /**\n   * Render army list for a specific side\n   */\n  private renderArmyList(army: ManualArmyConfiguration, side: 'player' | 'enemy'): string {\n    if (army.stackingOrder.length === 0) {\n      return '<p class=\"empty-army\">No units added</p>';\n    }\n\n    return army.stackingOrder.map(group => {\n      const isInfinite = group.count >= MANUAL_BATTLE_CONSTANTS.INFINITE_UNIT_VALUE;\n      return `\n        <div class=\"army-unit-item\" data-unit-name=\"${group.unit.name}\">\n          <div class=\"unit-info\">\n            <span class=\"unit-name\">${group.unit.name}</span>\n            <span class=\"unit-stats\">${group.unit.strength} STR • ${group.unit.health} HP</span>\n          </div>\n          <div class=\"unit-quantity\">\n            ${isInfinite ? \n              '<span class=\"infinite-badge\">∞ Infinite</span>' : \n              `<span class=\"quantity-badge\">${group.count.toLocaleString()}</span>`\n            }\n          </div>\n          <div class=\"unit-actions\">\n            <button class=\"btn-remove\" data-side=\"${side}\" data-unit=\"${group.unit.name}\">\n              🗑️\n            </button>\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    if (!this.container) return;\n\n    // Player unit selection\n    const playerUnitSelect = this.container.querySelector('#player-unit-select') as HTMLSelectElement;\n    const playerQuantity = this.container.querySelector('#player-quantity') as HTMLInputElement;\n    const addPlayerUnit = this.container.querySelector('#add-player-unit') as HTMLButtonElement;\n\n    // Enemy unit selection\n    const enemyUnitSelect = this.container.querySelector('#enemy-unit-select') as HTMLSelectElement;\n    const enemyQuantity = this.container.querySelector('#enemy-quantity') as HTMLInputElement;\n    const enemyInfinite = this.container.querySelector('#enemy-infinite') as HTMLInputElement;\n    const addEnemyUnit = this.container.querySelector('#add-enemy-unit') as HTMLButtonElement;\n\n    // Action buttons\n    const clearAll = this.container.querySelector('#clear-all-armies') as HTMLButtonElement;\n    const validate = this.container.querySelector('#validate-armies') as HTMLButtonElement;\n\n    // Player unit selection listeners\n    if (playerUnitSelect) {\n      playerUnitSelect.addEventListener('change', () => this.handlePlayerUnitSelection());\n    }\n    if (playerQuantity) {\n      playerQuantity.addEventListener('input', () => this.handlePlayerQuantityChange());\n    }\n    if (addPlayerUnit) {\n      addPlayerUnit.addEventListener('click', () => this.handleAddPlayerUnit());\n    }\n\n    // Enemy unit selection listeners\n    if (enemyUnitSelect) {\n      enemyUnitSelect.addEventListener('change', () => this.handleEnemyUnitSelection());\n    }\n    if (enemyQuantity) {\n      enemyQuantity.addEventListener('input', () => this.handleEnemyQuantityChange());\n    }\n    if (enemyInfinite) {\n      enemyInfinite.addEventListener('change', () => this.handleEnemyInfiniteToggle());\n    }\n    if (addEnemyUnit) {\n      addEnemyUnit.addEventListener('click', () => this.handleAddEnemyUnit());\n    }\n\n    // Action button listeners\n    if (clearAll) {\n      clearAll.addEventListener('click', () => this.handleClearAllArmies());\n    }\n    if (validate) {\n      validate.addEventListener('click', () => this.handleValidateArmies());\n    }\n\n    // Unit removal listeners\n    this.container.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.classList.contains('btn-remove')) {\n        const side = target.dataset.side as 'player' | 'enemy';\n        const unitName = target.dataset.unit;\n        if (side && unitName) {\n          this.handleRemoveUnit(side, unitName);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handle player unit selection\n   */\n  private handlePlayerUnitSelection(): void {\n    const select = this.container?.querySelector('#player-unit-select') as HTMLSelectElement;\n    if (!select) return;\n\n    const unitName = select.value;\n    const unit = this.props.availableUnits.find(u => u.name === unitName) || null;\n    \n    this.playerUnitSelection = {\n      ...this.playerUnitSelection,\n      selectedUnit: unit,\n      isValid: unit !== null && this.playerUnitSelection.quantity > 0\n    };\n\n    this.updateAddButton('player');\n  }\n\n  /**\n   * Handle player quantity change\n   */\n  private handlePlayerQuantityChange(): void {\n    const input = this.container?.querySelector('#player-quantity') as HTMLInputElement;\n    if (!input) return;\n\n    const quantity = parseInt(input.value) || 0;\n    \n    this.playerUnitSelection = {\n      ...this.playerUnitSelection,\n      quantity,\n      isValid: this.playerUnitSelection.selectedUnit !== null && quantity > 0\n    };\n\n    this.updateAddButton('player');\n  }\n\n  /**\n   * Handle enemy unit selection\n   */\n  private handleEnemyUnitSelection(): void {\n    const select = this.container?.querySelector('#enemy-unit-select') as HTMLSelectElement;\n    if (!select) return;\n\n    const unitName = select.value;\n    const enemyUnits = this.props.availableEnemyUnits || this.props.availableUnits;\n    const unit = enemyUnits.find(u => u.name === unitName) || null;\n    \n    this.enemyUnitSelection = {\n      ...this.enemyUnitSelection,\n      selectedUnit: unit,\n      isValid: unit !== null && (this.enemyUnitSelection.isInfinite || this.enemyUnitSelection.quantity > 0)\n    };\n\n    this.updateAddButton('enemy');\n  }\n\n  /**\n   * Handle enemy quantity change\n   */\n  private handleEnemyQuantityChange(): void {\n    const input = this.container?.querySelector('#enemy-quantity') as HTMLInputElement;\n    if (!input) return;\n\n    const quantity = parseInt(input.value) || 0;\n    \n    this.enemyUnitSelection = {\n      ...this.enemyUnitSelection,\n      quantity,\n      isValid: this.enemyUnitSelection.selectedUnit !== null && \n               (this.enemyUnitSelection.isInfinite || quantity > 0)\n    };\n\n    this.updateAddButton('enemy');\n  }\n\n  /**\n   * Handle enemy infinite toggle\n   */\n  private handleEnemyInfiniteToggle(): void {\n    const checkbox = this.container?.querySelector('#enemy-infinite') as HTMLInputElement;\n    const quantityInput = this.container?.querySelector('#enemy-quantity') as HTMLInputElement;\n    \n    if (!checkbox || !quantityInput) return;\n\n    const isInfinite = checkbox.checked;\n    \n    this.enemyUnitSelection = {\n      ...this.enemyUnitSelection,\n      isInfinite,\n      isValid: this.enemyUnitSelection.selectedUnit !== null && \n               (isInfinite || this.enemyUnitSelection.quantity > 0)\n    };\n\n    // Disable/enable quantity input based on infinite toggle\n    quantityInput.disabled = isInfinite;\n    if (isInfinite) {\n      quantityInput.value = '0';\n    }\n\n    this.updateAddButton('enemy');\n  }\n\n  /**\n   * Update add button state\n   */\n  private updateAddButton(side: 'player' | 'enemy'): void {\n    const button = this.container?.querySelector(`#add-${side}-unit`) as HTMLButtonElement;\n    if (!button) return;\n\n    const selection = side === 'player' ? this.playerUnitSelection : this.enemyUnitSelection;\n    button.disabled = !selection.isValid || this.props.disabled || false;\n  }\n\n  /**\n   * Handle adding player unit\n   */\n  private handleAddPlayerUnit(): void {\n    if (!this.playerUnitSelection.selectedUnit || !this.playerUnitSelection.isValid) return;\n\n    const updatedArmy = ManualBattleUtils.addUnitToArmy(\n      this.props.playerArmy,\n      this.playerUnitSelection.selectedUnit,\n      this.playerUnitSelection.quantity,\n      false // Player can't have infinite units\n    );\n\n    // Update props first, then reset selection and update UI\n    this.props.onPlayerArmyChange(updatedArmy);\n    // Update internal props to reflect the change immediately\n    this.props = { ...this.props, playerArmy: updatedArmy };\n    this.resetPlayerSelection();\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle adding enemy unit\n   */\n  private handleAddEnemyUnit(): void {\n    if (!this.enemyUnitSelection.selectedUnit || !this.enemyUnitSelection.isValid) return;\n\n    const updatedArmy = ManualBattleUtils.addUnitToArmy(\n      this.props.enemyArmy,\n      this.enemyUnitSelection.selectedUnit,\n      this.enemyUnitSelection.quantity,\n      this.enemyUnitSelection.isInfinite\n    );\n\n    // Update props first, then reset selection and update UI\n    this.props.onEnemyArmyChange(updatedArmy);\n    // Update internal props to reflect the change immediately\n    this.props = { ...this.props, enemyArmy: updatedArmy };\n    this.resetEnemySelection();\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle removing unit from army\n   */\n  private handleRemoveUnit(side: 'player' | 'enemy', unitName: string): void {\n    if (side === 'player') {\n      const updatedArmy = ManualBattleUtils.removeUnitFromArmy(this.props.playerArmy, unitName);\n      this.props.onPlayerArmyChange(updatedArmy);\n      // Update internal props to reflect the change immediately\n      this.props = { ...this.props, playerArmy: updatedArmy };\n    } else {\n      const updatedArmy = ManualBattleUtils.removeUnitFromArmy(this.props.enemyArmy, unitName);\n      this.props.onEnemyArmyChange(updatedArmy);\n      // Update internal props to reflect the change immediately\n      this.props = { ...this.props, enemyArmy: updatedArmy };\n    }\n\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle clearing all armies\n   */\n  private handleClearAllArmies(): void {\n    const emptyPlayerArmy = ManualBattleUtils.createEmptyArmy('player', 'Player Army');\n    const emptyEnemyArmy = ManualBattleUtils.createEmptyArmy('enemy', 'Enemy Army');\n\n    this.props.onPlayerArmyChange(emptyPlayerArmy);\n    this.props.onEnemyArmyChange(emptyEnemyArmy);\n    // Update internal props to reflect the changes immediately\n    this.props = { ...this.props, playerArmy: emptyPlayerArmy, enemyArmy: emptyEnemyArmy };\n\n    this.updateArmyLists();\n  }\n\n  /**\n   * Handle validating armies\n   */\n  private handleValidateArmies(): void {\n    const playerValidation = ManualBattleUtils.validateArmyConfiguration(this.props.playerArmy);\n    const enemyValidation = ManualBattleUtils.validateArmyConfiguration(this.props.enemyArmy);\n\n    this.displayValidationResults(playerValidation, enemyValidation);\n  }\n\n  /**\n   * Update just the army lists without full re-render\n   */\n  private updateArmyLists(): void {\n    if (!this.container) return;\n\n    // Update player army list\n    const playerArmyList = this.container.querySelector('#player-army-list');\n    if (playerArmyList) {\n      playerArmyList.innerHTML = this.renderArmyList(this.props.playerArmy, 'player');\n    }\n\n    // Update enemy army list\n    const enemyArmyList = this.container.querySelector('#enemy-army-list');\n    if (enemyArmyList) {\n      enemyArmyList.innerHTML = this.renderArmyList(this.props.enemyArmy, 'enemy');\n    }\n\n    // Update army summaries in headers\n    const playerSummary = this.container.querySelector('.player-army .army-summary-text');\n    if (playerSummary) {\n      playerSummary.textContent = ManualBattleUtils.getArmySummary(this.props.playerArmy);\n    }\n\n    const enemySummary = this.container.querySelector('.enemy-army .army-summary-text');\n    if (enemySummary) {\n      enemySummary.textContent = ManualBattleUtils.getArmySummary(this.props.enemyArmy);\n    }\n\n    // Re-attach event listeners for remove buttons since we updated the HTML\n    this.attachRemoveEventListeners();\n  }\n\n  /**\n   * Attach event listeners specifically for remove buttons\n   */\n  private attachRemoveEventListeners(): void {\n    if (!this.container) return;\n\n    // Remove existing listeners by cloning nodes (to remove all listeners)\n    const removeButtons = this.container.querySelectorAll('.btn-remove');\n    removeButtons.forEach(button => {\n      const newButton = button.cloneNode(true) as HTMLElement;\n      button.parentNode?.replaceChild(newButton, button);\n      \n      newButton.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        // Check both the target and the button itself for dataset attributes\n        const side = (target.dataset.side || newButton.dataset.side) as 'player' | 'enemy';\n        const unitName = target.dataset.unit || newButton.dataset.unit;\n        if (side && unitName) {\n          this.handleRemoveUnit(side, unitName);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display validation results\n   */\n  private displayValidationResults(\n    playerValidation: any, \n    enemyValidation: any\n  ): void {\n    const resultsContainer = this.container?.querySelector('#validation-results');\n    if (!resultsContainer) return;\n\n    const allErrors = [...playerValidation.errors, ...enemyValidation.errors];\n    const allWarnings = [...playerValidation.warnings, ...enemyValidation.warnings];\n    const isValid = allErrors.length === 0;\n\n    resultsContainer.innerHTML = `\n      <div class=\"validation-summary ${isValid ? 'valid' : 'invalid'}\">\n        <h4>${isValid ? '✅ Armies Valid' : '❌ Validation Errors'}</h4>\n        \n        ${allErrors.length > 0 ? `\n          <div class=\"errors\">\n            <h5>Errors:</h5>\n            <ul>\n              ${allErrors.map(error => `<li>${error}</li>`).join('')}\n            </ul>\n          </div>\n        ` : ''}\n        \n        ${allWarnings.length > 0 ? `\n          <div class=\"warnings\">\n            <h5>Warnings:</h5>\n            <ul>\n              ${allWarnings.map(warning => `<li>${warning}</li>`).join('')}\n            </ul>\n          </div>\n        ` : ''}\n        \n        <div class=\"summary-stats\">\n          <p><strong>Player Army:</strong> ${ManualBattleUtils.getArmySummary(this.props.playerArmy)}</p>\n          <p><strong>Enemy Army:</strong> ${ManualBattleUtils.getArmySummary(this.props.enemyArmy)}</p>\n        </div>\n      </div>\n    `;\n\n    resultsContainer.classList.remove('hidden');\n  }\n\n  /**\n   * Reset player selection state\n   */\n  private resetPlayerSelection(): void {\n    this.playerUnitSelection = this.createEmptySelection();\n    const select = this.container?.querySelector('#player-unit-select') as HTMLSelectElement;\n    const input = this.container?.querySelector('#player-quantity') as HTMLInputElement;\n    \n    if (select) select.value = '';\n    if (input) input.value = '1';\n  }\n\n  /**\n   * Reset enemy selection state\n   */\n  private resetEnemySelection(): void {\n    this.enemyUnitSelection = this.createEmptySelection();\n    const select = this.container?.querySelector('#enemy-unit-select') as HTMLSelectElement;\n    const input = this.container?.querySelector('#enemy-quantity') as HTMLInputElement;\n    const checkbox = this.container?.querySelector('#enemy-infinite') as HTMLInputElement;\n    \n    if (select) select.value = '';\n    if (input) {\n      input.value = '1';\n      input.disabled = false;\n    }\n    if (checkbox) checkbox.checked = false;\n  }\n\n  /**\n   * Add component styles\n   */\n  private addStyles(): void {\n    const styleId = 'dual-army-input-styles';\n    if (document.getElementById(styleId)) return;\n\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `\n      .dual-army-input {\n        max-width: 1200px;\n        margin: 0 auto;\n      }\n\n      .dual-army-title {\n        text-align: center;\n        color: #2c3e50;\n        margin-bottom: 1rem;\n      }\n\n      .dual-army-description {\n        text-align: center;\n        color: #666;\n        margin-bottom: 2rem;\n      }\n\n      .army-panels {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .army-panel {\n        border: 2px solid;\n        border-radius: 12px;\n        padding: 1.5rem;\n        background: white;\n      }\n\n      .army-panel.player-army {\n        border-color: #3498db;\n        background: linear-gradient(135deg, #f0f8ff 0%, #ffffff 100%);\n      }\n\n      .army-panel.enemy-army {\n        border-color: #e74c3c;\n        background: linear-gradient(135deg, #fff0f0 0%, #ffffff 100%);\n      }\n\n      .army-panel-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 1.5rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .army-title {\n        margin: 0;\n        font-size: 1.3rem;\n        color: #2c3e50;\n      }\n\n      .army-summary {\n        font-size: 0.9rem;\n        color: #666;\n      }\n\n      .unit-selection {\n        margin-bottom: 1.5rem;\n        padding: 1rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 8px;\n        border: 1px solid #eee;\n      }\n\n      .input-group {\n        margin-bottom: 1rem;\n      }\n\n      .input-label {\n        display: block;\n        font-weight: 600;\n        margin-bottom: 0.5rem;\n        color: #333;\n      }\n\n      .unit-select, .quantity-input {\n        width: 100%;\n        padding: 0.75rem;\n        border: 2px solid #ddd;\n        border-radius: 6px;\n        font-size: 1rem;\n        transition: border-color 0.2s;\n      }\n\n      .unit-select:focus, .quantity-input:focus {\n        outline: none;\n        border-color: #3498db;\n      }\n\n      .quantity-controls {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .quantity-input {\n        flex: 1;\n      }\n\n      .infinite-toggle {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n        font-weight: 600;\n        color: #e74c3c;\n        cursor: pointer;\n        user-select: none;\n      }\n\n      .infinite-label {\n        white-space: nowrap;\n      }\n\n      .unit-actions {\n        text-align: center;\n        margin-top: 1rem;\n      }\n\n      .army-list {\n        background: rgba(0,0,0,0.05);\n        border-radius: 8px;\n        padding: 1rem;\n      }\n\n      .army-list h5 {\n        margin: 0 0 1rem 0;\n        color: #333;\n        font-size: 1rem;\n      }\n\n      .unit-list {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n\n      .empty-army {\n        text-align: center;\n        color: #999;\n        font-style: italic;\n        margin: 1rem 0;\n      }\n\n      .army-unit-item {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n        padding: 0.75rem;\n        background: white;\n        border-radius: 6px;\n        border: 1px solid #ddd;\n      }\n\n      .unit-info {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: 0.25rem;\n      }\n\n      .unit-name {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .unit-stats {\n        font-size: 0.85rem;\n        color: #666;\n      }\n\n      .unit-quantity {\n        display: flex;\n        align-items: center;\n      }\n\n      .quantity-badge {\n        background: #3498db;\n        color: white;\n        padding: 0.25rem 0.75rem;\n        border-radius: 12px;\n        font-weight: 600;\n        font-size: 0.85rem;\n      }\n\n      .infinite-badge {\n        background: linear-gradient(45deg, #e74c3c, #c0392b);\n        color: white;\n        padding: 0.25rem 0.75rem;\n        border-radius: 12px;\n        font-weight: 600;\n        font-size: 0.85rem;\n        animation: pulse 2s infinite;\n      }\n\n      @keyframes pulse {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.7; }\n      }\n\n      .unit-actions {\n        display: flex;\n        gap: 0.5rem;\n      }\n\n      .btn-remove {\n        background: #e74c3c;\n        color: white;\n        border: none;\n        padding: 0.5rem;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 0.8rem;\n        transition: background-color 0.2s;\n      }\n\n      .btn-remove:hover {\n        background: #c0392b;\n      }\n\n      .army-actions {\n        text-align: center;\n        margin: 2rem 0;\n        display: flex;\n        gap: 1rem;\n        justify-content: center;\n      }\n\n      .validation-results {\n        margin-top: 2rem;\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .validation-summary.valid {\n        background: #d4edda;\n        border-color: #27ae60;\n        color: #155724;\n      }\n\n      .validation-summary.invalid {\n        background: #f8d7da;\n        border-color: #e74c3c;\n        color: #721c24;\n      }\n\n      .validation-summary h4 {\n        margin: 0 0 1rem 0;\n      }\n\n      .errors ul, .warnings ul {\n        margin: 0.5rem 0;\n        padding-left: 1.5rem;\n      }\n\n      .errors {\n        color: #e74c3c;\n      }\n\n      .warnings {\n        color: #f39c12;\n      }\n\n      .summary-stats {\n        margin-top: 1rem;\n        padding-top: 1rem;\n        border-top: 1px solid rgba(0,0,0,0.1);\n      }\n\n      .summary-stats p {\n        margin: 0.5rem 0;\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      /* Mobile Responsiveness */\n      @media (max-width: 768px) {\n        .army-panels {\n          grid-template-columns: 1fr;\n        }\n\n        .army-panel-header {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 0.5rem;\n        }\n\n        .quantity-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .army-actions {\n          flex-direction: column;\n        }\n\n        .army-unit-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 0.75rem;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n}","/**\n * Manual Battle Simulation Component\n * Provides a complete interface for manually configuring and simulating battles between custom armies\n */\n\nimport { Unit } from '../../types/units';\nimport { EnemyUnit } from '../../types/enemyUnits';\nimport { \n  ManualBattleConfiguration, \n  ManualArmyConfiguration,\n  ManualBattleAnalysis,\n  ManualBattleUtils,\n  MANUAL_BATTLE_CONSTANTS\n} from '../../types/manualBattle';\nimport { DualArmyInputForm } from '../UnitInput/DualArmyInputForm';\nimport { BattleResultsDisplay } from './BattleResultsDisplay';\nimport { UnitLoader } from '../../services/unitLoader';\nimport { EnemyUnitLoader } from '../../services/enemyUnitLoader';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\n\nexport interface ManualBattleSimulationProps {\n  /** Unit loader for accessing unit data */\n  unitLoader: UnitLoader;\n  /** Callback when battle results are available */\n  onBattleComplete?: (analysis: ManualBattleAnalysis) => void;\n  /** Whether the component is disabled */\n  disabled?: boolean;\n}\n\nexport class ManualBattleSimulationComponent {\n  private container: HTMLElement | null = null;\n  private props: ManualBattleSimulationProps;\n  private dualArmyForm: DualArmyInputForm | null = null;\n  private availableUnits: Unit[] = [];\n  private enemyUnits: EnemyUnit[] = [];\n  private enemyUnitLoader: EnemyUnitLoader;\n  private enemyUnitStorage: EnemyUnitStorageService;\n  private currentBattleConfig: ManualBattleConfiguration | null = null;\n  private currentAnalysis: ManualBattleAnalysis | null = null;\n  private isLoading: boolean = false;\n\n  constructor(props: ManualBattleSimulationProps) {\n    this.props = props;\n    this.enemyUnitLoader = new EnemyUnitLoader();\n    this.enemyUnitStorage = new EnemyUnitStorageService();\n    this.initializeDefaultBattleConfig();\n  }\n\n  /**\n   * Mount the component to a container\n   */\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    await this.loadUnits();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Unmount the component\n   */\n  public unmount(): void {\n    if (this.dualArmyForm) {\n      this.dualArmyForm.unmount();\n      this.dualArmyForm = null;\n    }\n    if (this.container) {\n      this.container.innerHTML = '';\n      this.container = null;\n    }\n  }\n\n  /**\n   * Update component props\n   */\n  public updateProps(props: Partial<ManualBattleSimulationProps>): void {\n    this.props = { ...this.props, ...props };\n  }\n\n  /**\n   * Initialize default battle configuration\n   */\n  private initializeDefaultBattleConfig(): void {\n    this.currentBattleConfig = {\n      playerArmy: ManualBattleUtils.createEmptyArmy('player', 'Player Army'),\n      enemyArmy: ManualBattleUtils.createEmptyArmy('enemy', 'Enemy Army'),\n      playerGoesFirst: true,\n      battleName: 'Custom Battle'\n    };\n  }\n\n  /**\n   * Load available units (regular units + enemy units)\n   */\n  private async loadUnits(): Promise<void> {\n    try {\n      // Load regular units for player army\n      this.availableUnits = this.props.unitLoader.getAllUnits();\n      if (this.availableUnits.length === 0) {\n        // Try to load from default source if no units loaded\n        this.availableUnits = await this.props.unitLoader.loadPresetUnits();\n      }\n\n      // Load enemy units from JSON file\n      try {\n        this.enemyUnits = await this.enemyUnitLoader.loadPresetEnemyUnits();\n      } catch (error) {\n        console.warn('Could not load enemy_units.json, continuing with regular units only:', error);\n        this.enemyUnits = [];\n      }\n\n      // Load user-created enemy units from localStorage\n      try {\n        const userEnemyUnits = this.enemyUnitStorage.getAllUserEnemyUnits();\n        // Convert UserEnemyUnit to EnemyUnit by removing the extra properties\n        const convertedUserUnits: EnemyUnit[] = userEnemyUnits.map((unit: any) => ({\n          name: unit.name,\n          unit_types: unit.unit_types,\n          health: unit.health,\n          strength: unit.strength,\n          attack_modifiers: unit.attack_modifiers\n        }));\n        \n        // Add user-created units to enemy units array\n        this.enemyUnits.push(...convertedUserUnits);\n      } catch (error) {\n        console.warn('Could not load user enemy units:', error);\n      }\n\n      console.log(`Loaded ${this.availableUnits.length} regular units and ${this.enemyUnits.length} enemy units`);\n    } catch (error) {\n      console.error('Failed to load units:', error);\n      this.showError('Failed to load unit data. Please refresh the page.');\n    }\n  }\n\n  /**\n   * Convert enemy unit to regular unit format for dual army input\n   */\n  private convertEnemyUnitToUnit(enemyUnit: EnemyUnit): Unit {\n    return {\n      name: `${enemyUnit.name} [Enemy]`, // Mark as enemy unit\n      unit_types: enemyUnit.unit_types,\n      cost_type: 'Leadership', // Default since enemy units don't have costs\n      health: enemyUnit.health,\n      strength: enemyUnit.strength,\n      leadership_cost: 0, // Enemy units don't have costs\n      dominance_cost: 0,\n      authority_cost: 0,\n      food_consumption: 0,\n      carrying_capacity: 0,\n      revival_cost_gold: 0,\n      revival_cost_silver: 0,\n      source_file: 'enemy_units',\n      attack_modifiers: enemyUnit.attack_modifiers?.map(mod => ({\n        target_type: mod.target_type,\n        modifier_type: mod.modifier_type,\n        value: mod.value\n      })) || undefined\n    };\n  }\n\n  /**\n   * Get combined units for enemy army (regular units + converted enemy units)\n   */\n  private getEnemyArmyUnits(): Unit[] {\n    const regularUnits = this.availableUnits;\n    const convertedEnemyUnits = this.enemyUnits.map(unit => this.convertEnemyUnitToUnit(unit));\n    return [...regularUnits, ...convertedEnemyUnits];\n  }\n\n  /**\n   * Render the manual battle simulation interface\n   */\n  private render(): void {\n    if (!this.container || !this.currentBattleConfig) return;\n\n    this.container.innerHTML = `\n      <div class=\"manual-battle-simulation\">\n        <header class=\"manual-battle-header\">\n          <h2 class=\"manual-battle-title\">⚔️ Manual Battle Simulation</h2>\n          <p class=\"manual-battle-description\">\n            Configure custom armies for both player and enemy sides, then simulate the battle \n            to see detailed combat results and analysis.\n          </p>\n        </header>\n\n        <!-- Army Configuration Section -->\n        <section class=\"army-config-section\">\n          <div id=\"dual-army-form-container\"></div>\n        </section>\n\n        <!-- Battle Configuration Section -->\n        <section class=\"battle-config-section\">\n          <h3>⚙️ Battle Settings</h3>\n          <div class=\"battle-settings\">\n            <div class=\"setting-group\">\n              <label for=\"battle-name\" class=\"setting-label\">Battle Name:</label>\n              <input\n                type=\"text\"\n                id=\"battle-name\"\n                class=\"setting-input\"\n                value=\"${this.currentBattleConfig.battleName || 'Custom Battle'}\"\n                placeholder=\"Enter battle name\"\n                maxlength=\"50\"\n              >\n            </div>\n\n            <div class=\"setting-group\">\n              <label class=\"setting-label\">Initiative:</label>\n              <div class=\"radio-group\">\n                <label class=\"radio-option\">\n                  <input\n                    type=\"radio\"\n                    name=\"initiative\"\n                    value=\"player\"\n                    ${this.currentBattleConfig.playerGoesFirst ? 'checked' : ''}\n                  >\n                  <span>Player goes first (Best Case)</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input\n                    type=\"radio\"\n                    name=\"initiative\"\n                    value=\"enemy\"\n                    ${!this.currentBattleConfig.playerGoesFirst ? 'checked' : ''}\n                  >\n                  <span>Enemy goes first (Worst Case)</span>\n                </label>\n                <label class=\"radio-option\">\n                  <input\n                    type=\"radio\"\n                    name=\"initiative\"\n                    value=\"both\"\n                    checked\n                  >\n                  <span>Simulate both scenarios</span>\n                </label>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <!-- Battle Actions -->\n        <section class=\"battle-actions\">\n          <div class=\"action-buttons\">\n            <button id=\"simulate-battle\" class=\"btn btn-primary large-btn\" disabled>\n              🎯 Simulate Battle\n            </button>\n            <button id=\"clear-all\" class=\"btn btn-secondary\">\n              🗑️ Clear All\n            </button>\n            <button id=\"save-config\" class=\"btn btn-outline\" style=\"display: none;\">\n              💾 Save Configuration\n            </button>\n          </div>\n          \n          <div id=\"battle-status\" class=\"battle-status hidden\">\n            <!-- Status messages will appear here -->\n          </div>\n        </section>\n\n        <!-- Loading State -->\n        <div id=\"loading-state\" class=\"loading-state hidden\">\n          <div class=\"loading-spinner\"></div>\n          <p class=\"loading-message\">Running battle simulation...</p>\n          <div class=\"loading-details\">\n            <small>This may take a moment for large armies</small>\n          </div>\n        </div>\n\n        <!-- Battle Results -->\n        <section id=\"battle-results\" class=\"battle-results hidden\">\n          <!-- Results will be populated here -->\n        </section>\n\n        <!-- Error Display -->\n        <div id=\"error-display\" class=\"error-display hidden\">\n          <!-- Error messages will appear here -->\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n    this.mountDualArmyForm();\n    this.updateSimulateButton();\n  }\n\n  /**\n   * Mount the dual army form component\n   */\n  private mountDualArmyForm(): void {\n    const formContainer = this.container?.querySelector('#dual-army-form-container');\n    if (!formContainer || !this.currentBattleConfig) return;\n\n    if (this.dualArmyForm) {\n      this.dualArmyForm.unmount();\n    }\n\n    this.dualArmyForm = new DualArmyInputForm({\n      availableUnits: this.availableUnits,\n      availableEnemyUnits: this.getEnemyArmyUnits(),\n      playerArmy: this.currentBattleConfig.playerArmy,\n      enemyArmy: this.currentBattleConfig.enemyArmy,\n      onPlayerArmyChange: (army) => this.handlePlayerArmyChange(army),\n      onEnemyArmyChange: (army) => this.handleEnemyArmyChange(army),\n      disabled: this.isLoading || this.props.disabled\n    });\n\n    this.dualArmyForm.mount(formContainer as HTMLElement);\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    if (!this.container) return;\n\n    // Battle name input\n    const battleNameInput = this.container.querySelector('#battle-name') as HTMLInputElement;\n    if (battleNameInput) {\n      battleNameInput.addEventListener('input', () => this.handleBattleNameChange());\n    }\n\n    // Initiative radio buttons\n    const initiativeRadios = this.container.querySelectorAll('input[name=\"initiative\"]');\n    initiativeRadios.forEach(radio => {\n      radio.addEventListener('change', () => this.handleInitiativeChange());\n    });\n\n    // Action buttons\n    const simulateBtn = this.container.querySelector('#simulate-battle') as HTMLButtonElement;\n    const clearAllBtn = this.container.querySelector('#clear-all') as HTMLButtonElement;\n    const saveConfigBtn = this.container.querySelector('#save-config') as HTMLButtonElement;\n\n    if (simulateBtn) {\n      simulateBtn.addEventListener('click', () => this.handleSimulateBattle());\n    }\n    if (clearAllBtn) {\n      clearAllBtn.addEventListener('click', () => this.handleClearAll());\n    }\n    if (saveConfigBtn) {\n      saveConfigBtn.addEventListener('click', () => this.handleSaveConfig());\n    }\n  }\n\n  /**\n   * Handle player army configuration change\n   */\n  private handlePlayerArmyChange(army: ManualArmyConfiguration): void {\n    if (!this.currentBattleConfig) return;\n    \n    this.currentBattleConfig = {\n      ...this.currentBattleConfig,\n      playerArmy: army\n    };\n\n    this.updateSimulateButton();\n    this.clearResults();\n  }\n\n  /**\n   * Handle enemy army configuration change\n   */\n  private handleEnemyArmyChange(army: ManualArmyConfiguration): void {\n    if (!this.currentBattleConfig) return;\n    \n    this.currentBattleConfig = {\n      ...this.currentBattleConfig,\n      enemyArmy: army\n    };\n\n    this.updateSimulateButton();\n    this.clearResults();\n  }\n\n  /**\n   * Handle battle name change\n   */\n  private handleBattleNameChange(): void {\n    const input = this.container?.querySelector('#battle-name') as HTMLInputElement;\n    if (!input || !this.currentBattleConfig) return;\n\n    this.currentBattleConfig = {\n      ...this.currentBattleConfig,\n      battleName: input.value.trim() || 'Custom Battle'\n    };\n  }\n\n  /**\n   * Handle initiative change\n   */\n  private handleInitiativeChange(): void {\n    const selectedRadio = this.container?.querySelector('input[name=\"initiative\"]:checked') as HTMLInputElement;\n    if (!selectedRadio || !this.currentBattleConfig) return;\n\n    const value = selectedRadio.value;\n    if (value === 'player' || value === 'enemy') {\n      this.currentBattleConfig = {\n        ...this.currentBattleConfig,\n        playerGoesFirst: value === 'player'\n      };\n    }\n    // For 'both', we'll handle this during simulation\n  }\n\n  /**\n   * Update simulate button state\n   */\n  private updateSimulateButton(): void {\n    const button = this.container?.querySelector('#simulate-battle') as HTMLButtonElement;\n    if (!button || !this.currentBattleConfig) return;\n\n    const playerValid = this.currentBattleConfig.playerArmy.stackingOrder.length > 0;\n    const enemyValid = this.currentBattleConfig.enemyArmy.stackingOrder.length > 0;\n    const canSimulate = playerValid && enemyValid && !this.isLoading && !this.props.disabled;\n\n    button.disabled = !canSimulate;\n\n    // Update button text based on state\n    if (!playerValid && !enemyValid) {\n      button.textContent = '🎯 Configure armies to simulate';\n    } else if (!playerValid) {\n      button.textContent = '🎯 Add player units to simulate';\n    } else if (!enemyValid) {\n      button.textContent = '🎯 Add enemy units to simulate';\n    } else if (this.isLoading) {\n      button.textContent = '⏳ Simulating...';\n    } else {\n      button.textContent = '🎯 Simulate Battle';\n    }\n  }\n\n  /**\n   * Handle simulate battle\n   */\n  private async handleSimulateBattle(): Promise<void> {\n    if (!this.currentBattleConfig || this.isLoading) return;\n\n    // Validate armies\n    const playerValidation = ManualBattleUtils.validateArmyConfiguration(this.currentBattleConfig.playerArmy);\n    const enemyValidation = ManualBattleUtils.validateArmyConfiguration(this.currentBattleConfig.enemyArmy);\n\n    if (!playerValidation.isValid || !enemyValidation.isValid) {\n      const allErrors = [...playerValidation.errors, ...enemyValidation.errors];\n      this.showError(`Cannot simulate battle: ${allErrors.join(', ')}`);\n      return;\n    }\n\n    this.setLoading(true);\n    this.hideError();\n    this.clearResults();\n\n    try {\n      // Check which scenarios to simulate\n      const initiativeRadio = this.container?.querySelector('input[name=\"initiative\"]:checked') as HTMLInputElement;\n      const initiativeValue = initiativeRadio?.value || 'both';\n\n      // Import and use the unified battle system via adapter\n      const { UnifiedBattleSimulation } = await import('../../services/unified-battle-simulation/UnifiedBattleSimulation');\n      const battleService = new UnifiedBattleSimulation();\n\n      let analysis: ManualBattleAnalysis;\n\n      if (initiativeValue === 'both') {\n        // Simulate both scenarios using unified battle system\n        const bestCaseConfig = {\n          playerArmy: {\n            stackingOrder: this.currentBattleConfig!.playerArmy.stackingOrder,\n            totalStrength: this.currentBattleConfig!.playerArmy.totalStrength,\n            totalHealth: this.currentBattleConfig!.playerArmy.totalHealth\n          },\n          enemies: this.currentBattleConfig!.enemyArmy.stackingOrder.map((group, index) => ({\n            type: group.count >= MANUAL_BATTLE_CONSTANTS.INFINITE_UNIT_VALUE ? 'infinite' as const : 'mortal' as const,\n            unit: group.unit,\n            groupIndex: index,\n            count: group.count,\n            currentCount: group.count,\n          })),\n          playerGoesFirst: true\n        };\n        \n        const worstCaseConfig = {\n          ...bestCaseConfig,\n          playerGoesFirst: false\n        };\n        \n        const bestCase = battleService.simulateBattle(bestCaseConfig);\n        const worstCase = battleService.simulateBattle(worstCaseConfig);\n        \n        analysis = {\n          bestCase,\n          worstCase,\n          comparison: {\n            damageDifference: bestCase.totalDamageDealt - worstCase.totalDamageDealt,\n            survivalDifference: bestCase.battleDuration - worstCase.battleDuration,\n            averageDamage: (bestCase.totalDamageDealt + worstCase.totalDamageDealt) / 2,\n            averageSurvival: (bestCase.battleDuration + worstCase.battleDuration) / 2\n          },\n          manualConfiguration: this.currentBattleConfig\n        };\n      } else {\n        // Simulate single scenario using unified battle system\n        const singleConfig = {\n          playerArmy: {\n            stackingOrder: this.currentBattleConfig!.playerArmy.stackingOrder,\n            totalStrength: this.currentBattleConfig!.playerArmy.totalStrength,\n            totalHealth: this.currentBattleConfig!.playerArmy.totalHealth\n          },\n          enemies: this.currentBattleConfig!.enemyArmy.stackingOrder.map((group, index) => ({\n            type: group.count >= MANUAL_BATTLE_CONSTANTS.INFINITE_UNIT_VALUE ? 'infinite' as const : 'mortal' as const,\n            unit: group.unit,\n            groupIndex: index,\n            count: group.count,\n            currentCount: group.count,\n          })),\n          playerGoesFirst: initiativeValue === 'player'\n        };\n        \n        const singleResult = battleService.simulateBattle(singleConfig);\n        \n        // Create analysis with same result for both scenarios\n        analysis = {\n          bestCase: singleResult,\n          worstCase: singleResult,\n          comparison: {\n            damageDifference: 0,\n            survivalDifference: 0,\n            averageDamage: singleResult.totalDamageDealt,\n            averageSurvival: singleResult.battleDuration\n          },\n          manualConfiguration: this.currentBattleConfig\n        };\n      }\n\n      this.currentAnalysis = analysis;\n      this.displayResults();\n      \n      // Call callback if provided\n      if (this.props.onBattleComplete) {\n        this.props.onBattleComplete(analysis);\n      }\n\n    } catch (error) {\n      console.error('Battle simulation failed:', error);\n      this.showError(\n        error instanceof Error \n          ? `Battle simulation failed: ${error.message}`\n          : 'Battle simulation failed with an unknown error'\n      );\n    } finally {\n      this.setLoading(false);\n    }\n  }\n\n  /**\n   * Handle clear all\n   */\n  private handleClearAll(): void {\n    this.initializeDefaultBattleConfig();\n    this.clearResults();\n    this.hideError();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  /**\n   * Handle save configuration (placeholder for future feature)\n   */\n  private handleSaveConfig(): void {\n    if (!this.currentBattleConfig) return;\n\n    // For now, just show a message. This could be expanded to save to localStorage or server\n    const config = JSON.stringify(this.currentBattleConfig, null, 2);\n    console.log('Battle Configuration:', config);\n    \n    this.showStatus('Configuration saved to console (feature in development)', 'info');\n  }\n\n  /**\n   * Display battle results\n   */\n  private displayResults(): void {\n    if (!this.currentAnalysis || !this.container) return;\n\n    const resultsSection = this.container.querySelector('#battle-results');\n    if (!resultsSection) return;\n\n    const { bestCase, worstCase, manualConfiguration } = this.currentAnalysis;\n\n    // Create custom header with battle-specific information\n    const customHeader = `\n      <div class=\"manual-battle-header\">\n        <h3>📊 Battle Results: ${manualConfiguration.battleName}</h3>\n        <p class=\"battle-summary\">\n          ${manualConfiguration.playerArmy.name} vs ${manualConfiguration.enemyArmy.name}\n        </p>\n        <div class=\"army-summaries\">\n          <div class=\"army-summary player-summary\">\n            <h4>👤 ${manualConfiguration.playerArmy.name}</h4>\n            <p>${ManualBattleUtils.getArmySummary(manualConfiguration.playerArmy)}</p>\n          </div>\n          <div class=\"army-summary enemy-summary\">\n            <h4>👹 ${manualConfiguration.enemyArmy.name}</h4>\n            <p>${ManualBattleUtils.getArmySummary(manualConfiguration.enemyArmy)}</p>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Create actions section\n    const actionsSection = `\n      <div class=\"results-actions\">\n        <button id=\"export-results\" class=\"btn btn-outline\">\n          📄 Export Results\n        </button>\n        <button id=\"simulate-again\" class=\"btn btn-secondary\">\n          🔄 Simulate Again\n        </button>\n        <button id=\"clear-results\" class=\"btn btn-outline\">\n          🗑️ Clear Results\n        </button>\n      </div>\n    `;\n\n    // Set custom header\n    resultsSection.innerHTML = customHeader;\n    \n    // Create container for shared battle results\n    const sharedResultsContainer = document.createElement('div');\n    sharedResultsContainer.className = 'shared-battle-results';\n    resultsSection.appendChild(sharedResultsContainer);\n\n    // Use shared utility for core battle results display\n    BattleResultsDisplay.displayResults(\n      sharedResultsContainer,\n      bestCase,\n      worstCase,\n      {\n        title: 'Scenario Analysis',\n        subtitle: 'Detailed comparison of best and worst case battle outcomes'\n      }\n    );\n\n    // Add actions section at the end\n    const actionsDiv = document.createElement('div');\n    actionsDiv.innerHTML = actionsSection;\n    resultsSection.appendChild(actionsDiv);\n\n    resultsSection.classList.remove('hidden');\n    this.attachResultsEventListeners();\n  }\n\n\n  /**\n   * Attach event listeners for results section\n   */\n  private attachResultsEventListeners(): void {\n    if (!this.container) return;\n\n    // Log tab switching\n    const logTabs = this.container.querySelectorAll('.log-tab');\n    logTabs.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        const scenario = target.dataset.scenario;\n        \n        // Update active tab\n        logTabs.forEach(t => t.classList.remove('active'));\n        target.classList.add('active');\n        \n        // Show corresponding log\n        const logs = this.container!.querySelectorAll('.combat-log');\n        logs.forEach(log => {\n          log.classList.remove('active');\n          log.classList.add('hidden');\n        });\n        \n        const activeLog = this.container!.querySelector(`#${scenario}-case-log`);\n        if (activeLog) {\n          activeLog.classList.add('active');\n          activeLog.classList.remove('hidden');\n        }\n      });\n    });\n\n    // Results actions\n    const exportBtn = this.container.querySelector('#export-results') as HTMLButtonElement;\n    const simulateAgainBtn = this.container.querySelector('#simulate-again') as HTMLButtonElement;\n\n    if (exportBtn) {\n      exportBtn.addEventListener('click', () => this.handleExportResults());\n    }\n    if (simulateAgainBtn) {\n      simulateAgainBtn.addEventListener('click', () => this.handleSimulateAgain());\n    }\n  }\n\n  /**\n   * Handle export results (placeholder for future feature)\n   */\n  private handleExportResults(): void {\n    if (!this.currentAnalysis) return;\n\n    // For now, just log to console. This could be expanded to export as JSON/CSV/etc.\n    const results = JSON.stringify(this.currentAnalysis, null, 2);\n    console.log('Battle Results:', results);\n    \n    this.showStatus('Results exported to console (feature in development)', 'info');\n  }\n\n  /**\n   * Handle simulate again\n   */\n  private handleSimulateAgain(): void {\n    this.clearResults();\n    this.handleSimulateBattle();\n  }\n\n  /**\n   * Set loading state\n   */\n  private setLoading(loading: boolean): void {\n    this.isLoading = loading;\n    \n    const loadingEl = this.container?.querySelector('#loading-state');\n    const resultsEl = this.container?.querySelector('#battle-results');\n    \n    if (loadingEl) {\n      loadingEl.classList.toggle('hidden', !loading);\n    }\n    \n    if (loading && resultsEl) {\n      resultsEl.classList.add('hidden');\n    }\n\n    this.updateSimulateButton();\n    \n    // Update dual army form disabled state\n    if (this.dualArmyForm) {\n      this.dualArmyForm.updateProps({ disabled: loading || this.props.disabled });\n    }\n  }\n\n  /**\n   * Clear results\n   */\n  private clearResults(): void {\n    this.currentAnalysis = null;\n    const resultsEl = this.container?.querySelector('#battle-results');\n    if (resultsEl) {\n      resultsEl.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Show error message\n   */\n  private showError(message: string): void {\n    const errorEl = this.container?.querySelector('#error-display');\n    if (!errorEl) return;\n\n    errorEl.innerHTML = `\n      <div class=\"error-content\">\n        <span class=\"error-icon\">⚠️</span>\n        <span class=\"error-message\">${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.classList.add('hidden')\">×</button>\n      </div>\n    `;\n\n    errorEl.classList.remove('hidden');\n\n    // Auto-hide after 10 seconds\n    setTimeout(() => this.hideError(), 10000);\n  }\n\n  /**\n   * Hide error message\n   */\n  private hideError(): void {\n    const errorEl = this.container?.querySelector('#error-display');\n    if (errorEl) {\n      errorEl.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Show status message\n   */\n  private showStatus(message: string, type: 'info' | 'success' | 'warning' = 'info'): void {\n    const statusEl = this.container?.querySelector('#battle-status');\n    if (!statusEl) return;\n\n    statusEl.innerHTML = `\n      <div class=\"status-message ${type}\">\n        ${message}\n      </div>\n    `;\n\n    statusEl.classList.remove('hidden');\n\n    // Auto-hide after 5 seconds\n    setTimeout(() => {\n      statusEl.classList.add('hidden');\n    }, 5000);\n  }\n\n  /**\n   * Add component styles\n   */\n  private addStyles(): void {\n    const styleId = 'manual-battle-simulation-styles';\n    if (document.getElementById(styleId)) return;\n\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = `\n      .manual-battle-simulation {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: 2rem;\n      }\n\n      .manual-battle-header {\n        text-align: center;\n        margin-bottom: 3rem;\n        padding-bottom: 2rem;\n        border-bottom: 3px solid #eee;\n      }\n\n      .manual-battle-title {\n        font-size: 2.5rem;\n        color: #2c3e50;\n        margin-bottom: 1rem;\n      }\n\n      .manual-battle-description {\n        font-size: 1.1rem;\n        color: #666;\n        line-height: 1.6;\n        max-width: 800px;\n        margin: 0 auto;\n      }\n\n      .army-config-section {\n        margin-bottom: 3rem;\n      }\n\n      .battle-config-section {\n        background: #f8f9fa;\n        padding: 2rem;\n        border-radius: 12px;\n        margin-bottom: 2rem;\n        border: 2px solid #dee2e6;\n      }\n\n      .battle-config-section h3 {\n        margin: 0 0 1.5rem 0;\n        color: #2c3e50;\n      }\n\n      .battle-settings {\n        display: grid;\n        gap: 2rem;\n      }\n\n      .setting-group {\n        display: flex;\n        flex-direction: column;\n        gap: 0.5rem;\n      }\n\n      .setting-label {\n        font-weight: 600;\n        color: #333;\n        margin-bottom: 0.5rem;\n      }\n\n      .setting-input {\n        padding: 0.75rem;\n        border: 2px solid #ddd;\n        border-radius: 6px;\n        font-size: 1rem;\n        max-width: 300px;\n      }\n\n      .setting-input:focus {\n        outline: none;\n        border-color: #3498db;\n      }\n\n      .radio-group {\n        display: flex;\n        flex-direction: column;\n        gap: 0.75rem;\n      }\n\n      .radio-option {\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n        padding: 0.75rem;\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 6px;\n        cursor: pointer;\n        transition: all 0.2s;\n        color: #2c3e50;\n        font-weight: 500;\n      }\n\n      .radio-option:hover {\n        border-color: #3498db;\n        background: #f0f8ff;\n        color: #1e3a8a;\n      }\n\n      .radio-option:has(input:checked) {\n        border-color: #3498db;\n        background: #e7f3ff;\n        color: #1e3a8a;\n        font-weight: 600;\n      }\n\n      .radio-option span {\n        color: inherit;\n        font-weight: inherit;\n      }\n\n      .battle-actions {\n        text-align: center;\n        margin-bottom: 2rem;\n      }\n\n      .action-buttons {\n        display: flex;\n        gap: 1rem;\n        justify-content: center;\n        margin-bottom: 1rem;\n      }\n\n      .battle-status {\n        margin-top: 1rem;\n      }\n\n      .status-message {\n        padding: 1rem;\n        border-radius: 6px;\n        border: 1px solid;\n      }\n\n      .status-message.info {\n        background: #e3f2fd;\n        border-color: #2196f3;\n        color: #1565c0;\n      }\n\n      .status-message.success {\n        background: #e8f5e9;\n        border-color: #4caf50;\n        color: #2e7d32;\n      }\n\n      .status-message.warning {\n        background: #fff3e0;\n        border-color: #ff9800;\n        color: #f57c00;\n      }\n\n      .loading-state {\n        text-align: center;\n        padding: 3rem;\n        background: white;\n        border-radius: 12px;\n        border: 2px solid #3498db;\n      }\n\n      .loading-spinner {\n        width: 50px;\n        height: 50px;\n        border: 5px solid #f3f3f3;\n        border-top: 5px solid #3498db;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 1rem;\n      }\n\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n\n      .loading-message {\n        font-size: 1.2rem;\n        color: #2c3e50;\n        margin-bottom: 0.5rem;\n      }\n\n      .loading-details {\n        color: #666;\n      }\n\n      .battle-results {\n        background: white;\n        border-radius: 12px;\n        padding: 2rem;\n        border: 2px solid #27ae60;\n      }\n\n      .results-header {\n        text-align: center;\n        margin-bottom: 2rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .results-header h3 {\n        color: #2c3e50;\n        margin-bottom: 0.5rem;\n      }\n\n      .battle-summary {\n        color: #666;\n        font-size: 1.1rem;\n      }\n\n      .army-summaries {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .army-summary {\n        padding: 1rem;\n        border-radius: 8px;\n        text-align: center;\n      }\n\n      .army-summary.player-summary {\n        background: #e3f2fd;\n        border: 2px solid #2196f3;\n      }\n\n      .army-summary.enemy-summary {\n        background: #ffebee;\n        border: 2px solid #f44336;\n      }\n\n      .army-summary h4 {\n        margin: 0 0 0.5rem 0;\n        color: #2c3e50;\n      }\n\n      .scenario-comparison {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .scenario-card {\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .scenario-card.best-case {\n        background: #f0fff4;\n        border-color: #27ae60;\n      }\n\n      .scenario-card.worst-case {\n        background: #fff5f5;\n        border-color: #e74c3c;\n      }\n\n      .scenario-card h4 {\n        margin: 0 0 1rem 0;\n        font-size: 1.2rem;\n      }\n\n      .scenario-stats, .comparison-stats {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .stat, .comparison-stat {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 4px;\n      }\n\n      .stat-label {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .stat-value {\n        font-weight: 700;\n        color: #2c3e50;\n      }\n\n      .stat-value.positive {\n        color: #27ae60;\n      }\n\n      .stat-value.negative {\n        color: #e74c3c;\n      }\n\n      .comparison-analysis {\n        background: #f8f9fa;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n      }\n\n      .comparison-analysis h4 {\n        margin: 0 0 1rem 0;\n        color: #2c3e50;\n      }\n\n      .combat-logs {\n        border-top: 2px solid #eee;\n        padding-top: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .log-tabs {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n\n      .log-tab {\n        padding: 0.75rem 1.5rem;\n        border: 2px solid #ddd;\n        background: #f8f9fa;\n        border-radius: 6px 6px 0 0;\n        cursor: pointer;\n        font-weight: 600;\n        transition: all 0.2s;\n      }\n\n      .log-tab.active {\n        background: white;\n        border-bottom-color: white;\n        color: #2c3e50;\n      }\n\n      .log-content {\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 0 6px 6px 6px;\n        padding: 1.5rem;\n        min-height: 300px;\n        max-height: 500px;\n        overflow-y: auto;\n      }\n\n      .combat-log.hidden {\n        display: none;\n      }\n\n      .log-entries {\n        font-family: 'Courier New', monospace;\n        font-size: 0.9rem;\n        line-height: 1.6;\n      }\n\n      .log-entry {\n        padding: 0.5rem;\n        border-bottom: 1px solid #f0f0f0;\n        border-radius: 4px;\n        margin-bottom: 2px;\n      }\n\n      .log-entry.player-turn {\n        background-color: #e3f2fd;\n        border-left: 3px solid #2196f3;\n      }\n\n      .log-entry.enemy-turn {\n        background-color: #ffebee;\n        border-left: 3px solid #f44336;\n      }\n\n      .turn-number {\n        color: #666;\n        font-weight: 600;\n        margin-right: 0.5rem;\n      }\n\n      .action-text {\n        color: #333;\n      }\n\n      .no-log {\n        text-align: center;\n        color: #666;\n        font-style: italic;\n        padding: 2rem;\n      }\n\n      .results-actions {\n        text-align: center;\n        padding-top: 1rem;\n        border-top: 2px solid #eee;\n        display: flex;\n        gap: 1rem;\n        justify-content: center;\n      }\n\n      .error-display {\n        background: #f8d7da;\n        border: 2px solid #e74c3c;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n        animation: slideIn 0.3s ease-out;\n      }\n\n      .error-content {\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .error-icon {\n        font-size: 1.2rem;\n        flex-shrink: 0;\n      }\n\n      .error-message {\n        flex: 1;\n        color: #721c24;\n        font-weight: 500;\n        line-height: 1.4;\n      }\n\n      .error-close {\n        background: none;\n        border: none;\n        font-size: 1.5rem;\n        color: #721c24;\n        cursor: pointer;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        transition: background-color 0.2s;\n      }\n\n      .error-close:hover {\n        background-color: rgba(114, 28, 36, 0.1);\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      /* Mobile Responsiveness */\n      @media (max-width: 768px) {\n        .manual-battle-simulation {\n          padding: 1rem;\n        }\n\n        .manual-battle-title {\n          font-size: 2rem;\n        }\n\n        .action-buttons {\n          flex-direction: column;\n        }\n\n        .army-summaries {\n          grid-template-columns: 1fr;\n        }\n\n        .scenario-comparison {\n          grid-template-columns: 1fr;\n        }\n\n        .log-tabs {\n          flex-direction: column;\n        }\n\n        .log-tab {\n          border-radius: 6px;\n        }\n\n        .log-content {\n          border-radius: 6px;\n        }\n\n        .results-actions {\n          flex-direction: column;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n}","/**\n * Enemy Unit Input Form component for creating and editing enemy units\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitValidationService } from '../../services/enemyUnitValidation';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\n\ninterface EnemyUnitInputFormProps {\n  onSave: (enemyUnit: UserEnemyUnit) => void;\n  onCancel: () => void;\n  editingUnit?: UserEnemyUnit | null;\n  mode: 'create' | 'edit';\n}\n\nexport class EnemyUnitInputForm {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitInputFormProps;\n  private storage: EnemyUnitStorageService;\n  private attackModifiers: Record<string, number> = {};\n\n  constructor(props: EnemyUnitInputFormProps) {\n    this.props = props;\n    this.storage = new EnemyUnitStorageService();\n  }\n\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.initializeForm();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private initializeForm(): void {\n    // Initialize attack modifiers from editing unit or empty\n    if (this.props.editingUnit?.attack_modifiers) {\n      // Convert attack modifiers array to Record<string, number>\n      this.attackModifiers = {};\n      this.props.editingUnit.attack_modifiers.forEach(modifier => {\n        this.attackModifiers[modifier.target_type] = modifier.value;\n      });\n    } else {\n      this.attackModifiers = {};\n    }\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    const isEdit = this.props.mode === 'edit';\n    const unit = this.props.editingUnit;\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-input-form\">\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <h2 class=\"card-title\">\n              ${isEdit ? '✏️ Edit Enemy Unit' : '➕ Create New Enemy Unit'}\n            </h2>\n            <p class=\"text-secondary\">\n              ${isEdit ? 'Modify the enemy unit details below' : 'Define a custom enemy unit for battle simulations'}\n            </p>\n          </div>\n          \n          <form id=\"enemy-unit-form\" class=\"enemy-unit-form\">\n            <!-- Basic Information Section -->\n            <div class=\"form-section\">\n              <h3>📋 Basic Information</h3>\n              <div class=\"grid grid-cols-2 gap-4\">\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-name\">Enemy Unit Name *</label>\n                  <input \n                    type=\"text\" \n                    id=\"enemy-name\" \n                    class=\"form-input\" \n                    value=\"${unit?.name || ''}\"\n                    placeholder=\"e.g., Elite Dark Elf Archer\"\n                    required\n                    maxlength=\"50\"\n                  >\n                  <div class=\"form-error\" id=\"enemy-name-error\"></div>\n                  <small class=\"form-help\">Choose a descriptive name for this enemy unit</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-description\">Description</label>\n                  <input\n                    type=\"text\"\n                    id=\"enemy-description\"\n                    class=\"form-input\"\n                    value=\"\"\n                    placeholder=\"Optional description\"\n                    maxlength=\"100\"\n                  >\n                  <small class=\"form-help\">Optional description for this enemy unit</small>\n                </div>\n              </div>\n            </div>\n\n            <!-- Combat Stats Section -->\n            <div class=\"form-section\">\n              <h3>⚔️ Combat Statistics</h3>\n              <div class=\"grid grid-cols-3 gap-4\">\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-health\">Health Points *</label>\n                  <input \n                    type=\"number\" \n                    id=\"enemy-health\" \n                    class=\"form-input\" \n                    value=\"${unit?.health || ''}\"\n                    min=\"1\" \n                    max=\"10000000\"\n                    placeholder=\"e.g., 50000\"\n                    required\n                  >\n                  <div class=\"form-error\" id=\"enemy-health-error\"></div>\n                  <small class=\"form-help\">Total health points (1 - 10,000,000)</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-strength\">Strength *</label>\n                  <input \n                    type=\"number\" \n                    id=\"enemy-strength\" \n                    class=\"form-input\" \n                    value=\"${unit?.strength || ''}\"\n                    min=\"1\" \n                    max=\"1000000\"\n                    placeholder=\"e.g., 8000\"\n                    required\n                  >\n                  <div class=\"form-error\" id=\"enemy-strength-error\"></div>\n                  <small class=\"form-help\">Attack strength (1 - 1,000,000)</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-unit-types\">Unit Types</label>\n                  <input \n                    type=\"text\" \n                    id=\"enemy-unit-types\" \n                    class=\"form-input\" \n                    value=\"${unit?.unit_types?.join(', ') || ''}\"\n                    placeholder=\"e.g., Ranged, Human, Elite\"\n                  >\n                  <div class=\"form-error\" id=\"enemy-unit-types-error\"></div>\n                  <small class=\"form-help\">Comma-separated unit types (optional)</small>\n                </div>\n              </div>\n            </div>\n\n            <!-- Attack Modifiers Section -->\n            <div class=\"form-section\">\n              <h3>🎯 Attack Modifiers</h3>\n              <p class=\"text-sm text-secondary mb-4\">\n                Define strength bonuses against specific unit types. Use absolute values (e.g., 1000 = +1000 strength vs that type).\n              </p>\n              \n              <div class=\"attack-modifiers-container\">\n                <div class=\"modifier-controls\">\n                  <div class=\"add-modifier-form\">\n                    <div class=\"grid grid-cols-3 gap-2\">\n                      <input \n                        type=\"text\" \n                        id=\"new-modifier-type\" \n                        class=\"form-input\" \n                        placeholder=\"Unit type (e.g., Human)\"\n                      >\n                      <input \n                        type=\"number\" \n                        id=\"new-modifier-value\" \n                        class=\"form-input\" \n                        placeholder=\"Bonus strength\"\n                        min=\"0\"\n                        max=\"100000\"\n                      >\n                      <button type=\"button\" id=\"add-modifier-btn\" class=\"btn btn-primary\">\n                        ➕ Add\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                \n                <div id=\"attack-modifiers-list\" class=\"attack-modifiers-list\">\n                  <!-- Attack modifiers will be populated here -->\n                </div>\n              </div>\n            </div>\n\n            <!-- Form Actions -->\n            <div class=\"form-section\">\n              <div class=\"form-actions\">\n                <button type=\"submit\" class=\"btn btn-success btn-lg\" id=\"save-btn\">\n                  <span>${isEdit ? '💾 Update Enemy Unit' : '✅ Create Enemy Unit'}</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-secondary btn-lg\" id=\"cancel-btn\">\n                  <span>❌ Cancel</span>\n                </button>\n                ${isEdit ? `\n                  <button type=\"button\" class=\"btn btn-danger btn-lg\" id=\"delete-btn\">\n                    <span>🗑️ Delete</span>\n                  </button>\n                ` : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n    this.populateAttackModifiers();\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-input-form {\n        max-width: 800px;\n        margin: 0 auto;\n        padding: var(--spacing-lg);\n      }\n\n      .form-section {\n        margin-bottom: var(--spacing-xl);\n        padding-bottom: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n      }\n\n      .form-section:last-child {\n        border-bottom: none;\n        margin-bottom: 0;\n      }\n\n      .form-section h3 {\n        font-size: var(--font-size-lg);\n        margin-bottom: var(--spacing-md);\n        color: var(--color-text);\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-sm);\n      }\n\n      .form-group {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .form-label {\n        display: block;\n        font-weight: 600;\n        margin-bottom: var(--spacing-xs);\n        color: var(--color-text);\n        font-size: var(--font-size-sm);\n      }\n\n      .form-input {\n        width: 100%;\n        padding: var(--spacing-sm);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        font-size: var(--font-size-sm);\n        transition: border-color var(--transition-fast);\n        background-color: var(--color-background);\n        color: var(--color-text);\n      }\n\n      .form-input:focus {\n        outline: none;\n        border-color: var(--color-primary);\n        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n      }\n\n      .form-input.error {\n        border-color: var(--color-danger);\n        background-color: rgba(239, 68, 68, 0.05);\n      }\n\n      .form-error {\n        color: var(--color-danger);\n        font-size: var(--font-size-xs);\n        margin-top: var(--spacing-xs);\n        min-height: 1.2em;\n        font-weight: 500;\n      }\n\n      .form-help {\n        color: var(--color-text-secondary);\n        font-size: var(--font-size-xs);\n        margin-top: var(--spacing-xs);\n        display: block;\n      }\n\n      .grid {\n        display: grid;\n        gap: var(--spacing-md);\n      }\n\n      .grid-cols-2 {\n        grid-template-columns: repeat(2, 1fr);\n      }\n\n      .grid-cols-3 {\n        grid-template-columns: repeat(3, 1fr);\n      }\n\n      .gap-2 {\n        gap: var(--spacing-sm);\n      }\n\n      .gap-4 {\n        gap: var(--spacing-md);\n      }\n\n      /* Attack Modifiers Styles */\n      .attack-modifiers-container {\n        background: var(--color-surface);\n        border-radius: var(--radius-md);\n        padding: var(--spacing-md);\n        border: 1px solid var(--color-border);\n      }\n\n      .modifier-controls {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .add-modifier-form {\n        background: var(--color-background);\n        padding: var(--spacing-md);\n        border-radius: var(--radius-sm);\n        border: 1px solid var(--color-border);\n      }\n\n      .attack-modifiers-list {\n        min-height: 60px;\n        max-height: 300px;\n        overflow-y: auto;\n      }\n\n      .modifier-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: var(--spacing-sm);\n        background: var(--color-background);\n        border: 1px solid var(--color-border);\n        border-radius: var(--radius-sm);\n        margin-bottom: var(--spacing-xs);\n        transition: all var(--transition-fast);\n      }\n\n      .modifier-item:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .modifier-info {\n        flex: 1;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .modifier-type {\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .modifier-value {\n        color: var(--color-success);\n        font-weight: 500;\n      }\n\n      .modifier-actions {\n        display: flex;\n        gap: var(--spacing-xs);\n      }\n\n      .btn-xs {\n        padding: var(--spacing-xs) var(--spacing-sm);\n        font-size: var(--font-size-xs);\n        border-radius: var(--radius-sm);\n      }\n\n      .empty-modifiers {\n        text-align: center;\n        color: var(--color-text-secondary);\n        font-style: italic;\n        padding: var(--spacing-lg);\n        border: 2px dashed var(--color-border);\n        border-radius: var(--radius-md);\n      }\n\n      /* Form Actions */\n      .form-actions {\n        display: flex;\n        gap: var(--spacing-md);\n        justify-content: center;\n        flex-wrap: wrap;\n      }\n\n      .btn-lg {\n        padding: var(--spacing-md) var(--spacing-lg);\n        font-size: var(--font-size-md);\n        font-weight: 600;\n        min-width: 160px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: var(--spacing-xs);\n      }\n\n      .btn-lg:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .enemy-unit-input-form {\n          padding: var(--spacing-md);\n        }\n\n        .grid-cols-2,\n        .grid-cols-3 {\n          grid-template-columns: 1fr;\n        }\n\n        .form-actions {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .btn-lg {\n          min-width: auto;\n          width: 100%;\n        }\n\n        .add-modifier-form .grid-cols-3 {\n          grid-template-columns: 1fr;\n          gap: var(--spacing-sm);\n        }\n\n        .modifier-item {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-sm);\n        }\n\n        .modifier-info {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-xs);\n        }\n\n        .modifier-actions {\n          justify-content: center;\n        }\n      }\n\n      @media (max-width: 480px) {\n        .card-title {\n          font-size: var(--font-size-lg);\n        }\n\n        .form-section h3 {\n          font-size: var(--font-size-md);\n        }\n\n        .attack-modifiers-container {\n          padding: var(--spacing-sm);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private populateAttackModifiers(): void {\n    const modifiersList = document.getElementById('attack-modifiers-list');\n    if (!modifiersList) return;\n\n    if (Object.keys(this.attackModifiers).length === 0) {\n      modifiersList.innerHTML = `\n        <div class=\"empty-modifiers\">\n          <p>No attack modifiers defined</p>\n          <small>Add modifiers above to give this enemy unit bonuses against specific unit types</small>\n        </div>\n      `;\n      return;\n    }\n\n    modifiersList.innerHTML = Object.entries(this.attackModifiers)\n      .map(([unitType, bonus]) => `\n        <div class=\"modifier-item\" data-unit-type=\"${unitType}\">\n          <div class=\"modifier-info\">\n            <span class=\"modifier-type\">${unitType}</span>\n            <span class=\"modifier-value\">+${bonus.toLocaleString()} strength</span>\n          </div>\n          <div class=\"modifier-actions\">\n            <button type=\"button\" class=\"btn btn-xs btn-secondary edit-modifier-btn\" data-unit-type=\"${unitType}\">\n              ✏️ Edit\n            </button>\n            <button type=\"button\" class=\"btn btn-xs btn-danger remove-modifier-btn\" data-unit-type=\"${unitType}\">\n              🗑️ Remove\n            </button>\n          </div>\n        </div>\n      `).join('');\n\n    this.attachModifierEventListeners();\n  }\n\n  private attachEventListeners(): void {\n    const form = document.getElementById('enemy-unit-form') as HTMLFormElement;\n    const saveBtn = document.getElementById('save-btn');\n    const cancelBtn = document.getElementById('cancel-btn');\n    const deleteBtn = document.getElementById('delete-btn');\n    const addModifierBtn = document.getElementById('add-modifier-btn');\n\n    // Form submission\n    if (form) {\n      form.addEventListener('submit', this.handleSubmit.bind(this));\n    }\n\n    // Button actions\n    if (saveBtn) {\n      saveBtn.addEventListener('click', this.handleSubmit.bind(this));\n    }\n\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    if (deleteBtn) {\n      deleteBtn.addEventListener('click', this.handleDelete.bind(this));\n    }\n\n    if (addModifierBtn) {\n      addModifierBtn.addEventListener('click', this.handleAddModifier.bind(this));\n    }\n\n    // Real-time validation\n    this.addValidationListeners();\n\n    // Enter key for adding modifiers\n    const newModifierValue = document.getElementById('new-modifier-value');\n    if (newModifierValue) {\n      newModifierValue.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          this.handleAddModifier();\n        }\n      });\n    }\n  }\n\n  private attachModifierEventListeners(): void {\n    // Edit modifier buttons\n    document.querySelectorAll('.edit-modifier-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const unitType = (e.target as HTMLElement).dataset.unitType;\n        if (unitType) {\n          this.handleEditModifier(unitType);\n        }\n      });\n    });\n\n    // Remove modifier buttons\n    document.querySelectorAll('.remove-modifier-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const unitType = (e.target as HTMLElement).dataset.unitType;\n        if (unitType) {\n          this.handleRemoveModifier(unitType);\n        }\n      });\n    });\n  }\n\n  private addValidationListeners(): void {\n    const fields = ['enemy-name', 'enemy-health', 'enemy-strength', 'enemy-unit-types'];\n    \n    fields.forEach(fieldId => {\n      const input = document.getElementById(fieldId) as HTMLInputElement;\n      if (input) {\n        input.addEventListener('blur', () => this.validateField(fieldId));\n        input.addEventListener('input', () => this.clearFieldError(fieldId));\n      }\n    });\n  }\n\n  private validateField(fieldId: string): boolean {\n    const input = document.getElementById(fieldId) as HTMLInputElement;\n    const errorElement = document.getElementById(`${fieldId}-error`);\n    \n    if (!input || !errorElement) return true;\n\n    let validation;\n    \n    switch (fieldId) {\n      case 'enemy-name':\n        validation = EnemyUnitValidationService.validateName(input.value);\n        break;\n      case 'enemy-health':\n        validation = EnemyUnitValidationService.validateHealth(parseInt(input.value));\n        break;\n      case 'enemy-strength':\n        validation = EnemyUnitValidationService.validateStrength(parseInt(input.value));\n        break;\n      case 'enemy-unit-types':\n        const types = input.value.split(',').map(t => t.trim()).filter(t => t);\n        validation = EnemyUnitValidationService.validateUnitTypes(types);\n        break;\n      default:\n        return true;\n    }\n\n    if (validation.isValid) {\n      input.classList.remove('error');\n      errorElement.textContent = '';\n      return true;\n    } else {\n      input.classList.add('error');\n      errorElement.textContent = validation.error || '';\n      return false;\n    }\n  }\n\n  private clearFieldError(fieldId: string): void {\n    const input = document.getElementById(fieldId) as HTMLInputElement;\n    const errorElement = document.getElementById(`${fieldId}-error`);\n    \n    if (input && errorElement) {\n      input.classList.remove('error');\n      errorElement.textContent = '';\n    }\n  }\n\n  private handleAddModifier(): void {\n    const typeInput = document.getElementById('new-modifier-type') as HTMLInputElement;\n    const valueInput = document.getElementById('new-modifier-value') as HTMLInputElement;\n\n    if (!typeInput || !valueInput) return;\n\n    const unitType = typeInput.value.trim();\n    const bonusValue = parseInt(valueInput.value);\n\n    // Validate inputs\n    if (!unitType) {\n      alert('Please enter a unit type');\n      typeInput.focus();\n      return;\n    }\n\n    if (isNaN(bonusValue) || bonusValue < 0) {\n      alert('Please enter a valid bonus value (0 or greater)');\n      valueInput.focus();\n      return;\n    }\n\n    // Check for duplicates\n    if (this.attackModifiers[unitType]) {\n      if (!confirm(`A modifier for \"${unitType}\" already exists. Replace it?`)) {\n        return;\n      }\n    }\n\n    // Add the modifier\n    this.attackModifiers[unitType] = bonusValue;\n\n    // Clear inputs\n    typeInput.value = '';\n    valueInput.value = '';\n\n    // Refresh the display\n    this.populateAttackModifiers();\n\n    // Focus back to type input for easy addition of more modifiers\n    typeInput.focus();\n  }\n\n  private handleEditModifier(unitType: string): void {\n    const currentValue = this.attackModifiers[unitType];\n    const newValue = prompt(`Edit strength bonus for \"${unitType}\":`, currentValue.toString());\n\n    if (newValue === null) return; // User cancelled\n\n    const parsedValue = parseInt(newValue);\n    if (isNaN(parsedValue) || parsedValue < 0) {\n      alert('Please enter a valid bonus value (0 or greater)');\n      return;\n    }\n\n    this.attackModifiers[unitType] = parsedValue;\n    this.populateAttackModifiers();\n  }\n\n  private handleRemoveModifier(unitType: string): void {\n    if (confirm(`Remove attack modifier for \"${unitType}\"?`)) {\n      delete this.attackModifiers[unitType];\n      this.populateAttackModifiers();\n    }\n  }\n\n  private handleSubmit(event: Event): void {\n    event.preventDefault();\n    \n    if (!this.validateForm()) {\n      return;\n    }\n\n    const enemyUnit = this.collectFormData();\n    if (enemyUnit) {\n      this.props.onSave(enemyUnit);\n    }\n  }\n\n  private handleCancel(): void {\n    if (this.hasUnsavedChanges()) {\n      if (confirm('You have unsaved changes. Are you sure you want to cancel?')) {\n        this.props.onCancel();\n      }\n    } else {\n      this.props.onCancel();\n    }\n  }\n\n  private handleDelete(): void {\n    if (!this.props.editingUnit) return;\n\n    const unitName = this.props.editingUnit.name;\n    if (confirm(`Are you sure you want to delete \"${unitName}\"? This action cannot be undone.`)) {\n      const result = this.storage.deleteUserEnemyUnit(this.props.editingUnit.id ?? '');\n      if (result.success) {\n        this.props.onCancel(); // Close the form after deletion\n      } else {\n        alert(`Failed to delete unit: ${result.error}`);\n      }\n    }\n  }\n\n  private validateForm(): boolean {\n    const fields = ['enemy-name', 'enemy-health', 'enemy-strength', 'enemy-unit-types'];\n    let isValid = true;\n\n    fields.forEach(fieldId => {\n      if (!this.validateField(fieldId)) {\n        isValid = false;\n      }\n    });\n\n    return isValid;\n  }\n\n  private collectFormData(): UserEnemyUnit | null {\n    try {\n      const nameInput = document.getElementById('enemy-name') as HTMLInputElement;\n      const healthInput = document.getElementById('enemy-health') as HTMLInputElement;\n      const strengthInput = document.getElementById('enemy-strength') as HTMLInputElement;\n      const unitTypesInput = document.getElementById('enemy-unit-types') as HTMLInputElement;\n\n      const name = nameInput.value.trim();\n      const health = parseInt(healthInput.value);\n      const strength = parseInt(strengthInput.value);\n      const unitTypes = unitTypesInput.value\n        .split(',')\n        .map(t => t.trim())\n        .filter(t => t);\n\n      // Convert attack modifiers back to array format\n      const attackModifiersArray = Object.keys(this.attackModifiers).length > 0\n        ? Object.entries(this.attackModifiers).map(([target_type, value]) => ({\n            target_type,\n            modifier_type: 'Strength' as const,\n            value\n          }))\n        : undefined;\n\n      const enemyUnit: UserEnemyUnit = {\n        id: this.props.editingUnit?.id || `user_enemy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        name,\n        unit_types: unitTypes,\n        health,\n        strength,\n        attack_modifiers: attackModifiersArray,\n        createdAt: this.props.editingUnit?.createdAt || new Date(),\n        modifiedAt: new Date()\n      };\n\n      // Final validation\n      const validation = EnemyUnitValidationService.validateUserEnemyUnit(enemyUnit);\n      if (!validation.isValid) {\n        alert(`Validation failed: ${validation.errors.join(', ')}`);\n        return null;\n      }\n\n      return enemyUnit;\n    } catch (error) {\n      console.error('Error collecting form data:', error);\n      alert('Error collecting form data. Please check your inputs.');\n      return null;\n    }\n  }\n\n  private hasUnsavedChanges(): boolean {\n    if (!this.props.editingUnit) {\n      // For new units, check if any fields have been filled\n      const nameInput = document.getElementById('enemy-name') as HTMLInputElement;\n      const healthInput = document.getElementById('enemy-health') as HTMLInputElement;\n      const strengthInput = document.getElementById('enemy-strength') as HTMLInputElement;\n\n      return !!(nameInput?.value.trim() || healthInput?.value || strengthInput?.value);\n    }\n\n    // For editing, compare current values with original\n    const currentData = this.collectFormData();\n    if (!currentData) return false;\n\n    const original = this.props.editingUnit;\n    return (\n      currentData.name !== original.name ||\n      currentData.health !== original.health ||\n      currentData.strength !== original.strength ||\n      JSON.stringify(currentData.unit_types) !== JSON.stringify(original.unit_types) ||\n      JSON.stringify(currentData.attack_modifiers) !== JSON.stringify(original.attack_modifiers)\n    );\n  }\n\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}","/**\n * Enemy Unit Manager component for viewing and managing user-created enemy units\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { EnemyUnit, UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\nimport { EnemyUnitInputForm } from './EnemyUnitInputForm';\n\ninterface EnemyUnitManagerProps {\n  onClose?: () => void;\n  onUnitSelect?: (unit: UserEnemyUnit) => void;\n  mode: 'standalone' | 'embedded';\n}\n\nexport class EnemyUnitManager {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitManagerProps;\n  private storage: EnemyUnitStorageService;\n  private userUnits: UserEnemyUnit[] = [];\n  private filteredUnits: UserEnemyUnit[] = [];\n  private currentFilter: string = '';\n  private sortBy: 'name' | 'created' | 'modified' | 'health' | 'strength' = 'name';\n  private sortOrder: 'asc' | 'desc' = 'asc';\n  private selectedUnits: Set<string> = new Set();\n  private showingForm: boolean = false;\n  private editingUnit: UserEnemyUnit | null = null;\n\n  constructor(props: EnemyUnitManagerProps) {\n    this.props = props;\n    this.storage = new EnemyUnitStorageService();\n  }\n\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.loadData();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private loadData(): void {\n    this.userUnits = this.storage.getAllUserEnemyUnits();\n    this.updateFilteredUnits();\n  }\n\n  private updateFilteredUnits(): void {\n    let filtered = [...this.userUnits];\n\n    // Apply search filter\n    if (this.currentFilter.trim()) {\n      const lowerFilter = this.currentFilter.toLowerCase();\n      filtered = filtered.filter(unit =>\n        unit.name.toLowerCase().includes(lowerFilter) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(lowerFilter))\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let comparison = 0;\n      \n      switch (this.sortBy) {\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'created':\n          comparison = (a.createdAt?.getTime() ?? 0) - (b.createdAt?.getTime() ?? 0);\n          break;\n        case 'modified':\n          comparison = (a.modifiedAt?.getTime() ?? 0) - (b.modifiedAt?.getTime() ?? 0);\n          break;\n        case 'health':\n          comparison = a.health - b.health;\n          break;\n        case 'strength':\n          comparison = a.strength - b.strength;\n          break;\n      }\n\n      return this.sortOrder === 'desc' ? -comparison : comparison;\n    });\n\n    this.filteredUnits = filtered;\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    if (this.showingForm) {\n      this.renderForm();\n      return;\n    }\n\n    const isStandalone = this.props.mode === 'standalone';\n    const stats = this.storage.getStorageStats();\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-manager ${isStandalone ? 'standalone' : 'embedded'}\">\n        ${isStandalone ? `\n          <div class=\"manager-header\">\n            <div class=\"header-content\">\n              <h1 class=\"manager-title\">\n                👤 Custom Enemy Units\n              </h1>\n              <p class=\"manager-subtitle\">\n                Manage your custom enemy units for battle simulations\n              </p>\n            </div>\n            ${this.props.onClose ? `\n              <button class=\"btn btn-secondary\" id=\"close-manager\">\n                ❌ Close\n              </button>\n            ` : ''}\n          </div>\n        ` : ''}\n        \n        <div class=\"manager-content\">\n          <!-- Statistics Panel -->\n          <div class=\"stats-panel\">\n            <div class=\"stats-grid\">\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">📊</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.totalUnits}</span>\n                  <span class=\"stat-label\">Total Units</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">💾</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${Math.round(stats.storageSize / 1024)}KB</span>\n                  <span class=\"stat-label\">Storage Used</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">📅</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.unitsCreatedToday}</span>\n                  <span class=\"stat-label\">Created Today</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">🔄</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.lastModified ? this.formatDate(stats.lastModified) : 'Never'}</span>\n                  <span class=\"stat-label\">Last Modified</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Controls Panel -->\n          <div class=\"controls-panel\">\n            <div class=\"controls-row\">\n              <div class=\"search-controls\">\n                <div class=\"search-input-group\">\n                  <input \n                    type=\"text\" \n                    id=\"unit-search\" \n                    class=\"form-input search-input\" \n                    placeholder=\"🔍 Search units...\"\n                    value=\"${this.currentFilter}\"\n                  >\n                  <button class=\"btn btn-secondary btn-sm\" id=\"clear-search\">\n                    ❌ Clear\n                  </button>\n                </div>\n              </div>\n              \n              <div class=\"action-controls\">\n                <button class=\"btn btn-success\" id=\"create-unit-btn\">\n                  ➕ Create New Unit\n                </button>\n                <div class=\"dropdown\" id=\"bulk-actions-dropdown\">\n                  <button class=\"btn btn-secondary dropdown-toggle\" id=\"bulk-actions-btn\" ${this.selectedUnits.size === 0 ? 'disabled' : ''}>\n                    📋 Bulk Actions (${this.selectedUnits.size})\n                  </button>\n                  <div class=\"dropdown-menu\">\n                    <button class=\"dropdown-item\" id=\"export-selected\">📤 Export Selected</button>\n                    <button class=\"dropdown-item\" id=\"delete-selected\">🗑️ Delete Selected</button>\n                  </div>\n                </div>\n                <div class=\"dropdown\" id=\"import-export-dropdown\">\n                  <button class=\"btn btn-secondary dropdown-toggle\" id=\"import-export-btn\">\n                    📁 Import/Export\n                  </button>\n                  <div class=\"dropdown-menu\">\n                    <button class=\"dropdown-item\" id=\"import-units\">📥 Import Units</button>\n                    <button class=\"dropdown-item\" id=\"export-all\">📤 Export All</button>\n                    <button class=\"dropdown-item\" id=\"clear-all\">🗑️ Clear All</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"controls-row\">\n              <div class=\"sort-controls\">\n                <label class=\"form-label\">Sort by:</label>\n                <select class=\"form-input sort-select\" id=\"sort-by\">\n                  <option value=\"name\" ${this.sortBy === 'name' ? 'selected' : ''}>Name</option>\n                  <option value=\"created\" ${this.sortBy === 'created' ? 'selected' : ''}>Date Created</option>\n                  <option value=\"modified\" ${this.sortBy === 'modified' ? 'selected' : ''}>Last Modified</option>\n                  <option value=\"health\" ${this.sortBy === 'health' ? 'selected' : ''}>Health</option>\n                  <option value=\"strength\" ${this.sortBy === 'strength' ? 'selected' : ''}>Strength</option>\n                </select>\n                <button class=\"btn btn-secondary btn-sm\" id=\"sort-order-btn\">\n                  ${this.sortOrder === 'asc' ? '⬆️ Ascending' : '⬇️ Descending'}\n                </button>\n              </div>\n              \n              <div class=\"selection-controls\">\n                <button class=\"btn btn-secondary btn-sm\" id=\"select-all\">\n                  ☑️ Select All\n                </button>\n                <button class=\"btn btn-secondary btn-sm\" id=\"select-none\" ${this.selectedUnits.size === 0 ? 'disabled' : ''}>\n                  ⬜ Select None\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Units List -->\n          <div class=\"units-list-container\">\n            <div class=\"units-list-header\">\n              <span class=\"results-info\">\n                Showing ${this.filteredUnits.length} of ${this.userUnits.length} units\n                ${this.selectedUnits.size > 0 ? `(${this.selectedUnits.size} selected)` : ''}\n              </span>\n            </div>\n            \n            <div class=\"units-list\" id=\"units-list\">\n              ${this.renderUnitsList()}\n            </div>\n          </div>\n        </div>\n        \n        <!-- Hidden file input for import -->\n        <input type=\"file\" id=\"import-file-input\" accept=\".json\" style=\"display: none;\">\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  private renderForm(): void {\n    if (!this.container) return;\n\n    const formContainer = document.createElement('div');\n    this.container.innerHTML = '';\n    this.container.appendChild(formContainer);\n\n    const form = new EnemyUnitInputForm({\n      onSave: this.handleFormSave.bind(this),\n      onCancel: this.handleFormCancel.bind(this),\n      editingUnit: this.editingUnit,\n      mode: this.editingUnit ? 'edit' : 'create'\n    });\n\n    form.mount(formContainer);\n  }\n\n  private renderUnitsList(): string {\n    if (this.filteredUnits.length === 0) {\n      return `\n        <div class=\"empty-state\">\n          <div class=\"empty-icon\">👤</div>\n          <h3>No custom enemy units</h3>\n          <p>Create your first custom enemy unit to get started</p>\n          <button class=\"btn btn-primary\" id=\"create-first-unit\">\n            ➕ Create Your First Unit\n          </button>\n        </div>\n      `;\n    }\n\n    return this.filteredUnits.map(unit => {\n      const isSelected = this.selectedUnits.has(unit.id ?? '');\n      \n      return `\n        <div class=\"unit-item ${isSelected ? 'selected' : ''}\" data-unit-id=\"${unit.id ?? ''}\">\n          <div class=\"unit-checkbox\">\n            <input \n              type=\"checkbox\" \n              class=\"unit-select-checkbox\" \n              data-unit-id=\"${unit.id}\"\n              ${isSelected ? 'checked' : ''}\n            >\n          </div>\n          \n          <div class=\"unit-content\">\n            <div class=\"unit-header\">\n              <div class=\"unit-basic-info\">\n                <h4 class=\"unit-name\">${unit.name}</h4>\n                <div class=\"unit-types\">\n                  ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n                </div>\n              </div>\n              \n              <div class=\"unit-stats-summary\">\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">❤️</span>\n                  <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">⚔️</span>\n                  <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">📊</span>\n                  <span class=\"stat-value\">${(unit.strength / unit.health).toFixed(3)}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"unit-details\">\n              <div class=\"unit-meta\">\n                <span class=\"meta-item\">\n                  <span class=\"meta-label\">Created:</span>\n                  <span class=\"meta-value\">${unit.createdAt ? this.formatDate(unit.createdAt) : 'Unknown'}</span>\n                </span>\n                <span class=\"meta-item\">\n                  <span class=\"meta-label\">Modified:</span>\n                  <span class=\"meta-value\">${unit.modifiedAt ? this.formatDate(unit.modifiedAt) : 'Unknown'}</span>\n                </span>\n              </div>\n              \n              ${unit.attack_modifiers && unit.attack_modifiers.length > 0 ? `\n                <div class=\"unit-modifiers\">\n                  <span class=\"modifiers-label\">🎯 Attack Bonuses:</span>\n                  <div class=\"modifiers-list\">\n                    ${unit.attack_modifiers.map(mod => \n                      `<span class=\"modifier-tag\">+${mod.value.toLocaleString()} vs ${mod.target_type}</span>`\n                    ).join('')}\n                  </div>\n                </div>\n              ` : ''}\n            </div>\n          </div>\n          \n          <div class=\"unit-actions\">\n            ${this.props.onUnitSelect ? `\n              <button class=\"btn btn-primary btn-sm\" data-action=\"select\" data-unit-id=\"${unit.id}\">\n                👆 Select\n              </button>\n            ` : ''}\n            <button class=\"btn btn-secondary btn-sm\" data-action=\"edit\" data-unit-id=\"${unit.id}\">\n              ✏️ Edit\n            </button>\n            <button class=\"btn btn-warning btn-sm\" data-action=\"duplicate\" data-unit-id=\"${unit.id}\">\n              📋 Duplicate\n            </button>\n            <button class=\"btn btn-danger btn-sm\" data-action=\"delete\" data-unit-id=\"${unit.id}\">\n              🗑️ Delete\n            </button>\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-manager {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .enemy-unit-manager.standalone {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: var(--spacing-lg);\n      }\n\n      .manager-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: var(--spacing-lg);\n        padding-bottom: var(--spacing-lg);\n        border-bottom: 2px solid var(--color-border);\n      }\n\n      .header-content h1 {\n        margin: 0 0 var(--spacing-xs) 0;\n        color: var(--color-text);\n        font-size: var(--font-size-2xl);\n      }\n\n      .header-content p {\n        margin: 0;\n        color: var(--color-text-secondary);\n        font-size: var(--font-size-sm);\n      }\n\n      .manager-content {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: var(--spacing-lg);\n      }\n\n      /* Statistics Panel */\n      .stats-panel {\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        padding: var(--spacing-lg);\n        border: 1px solid var(--color-border);\n      }\n\n      .stats-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: var(--spacing-md);\n      }\n\n      .stat-card {\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-md);\n        padding: var(--spacing-md);\n        background: var(--color-background);\n        border-radius: var(--radius-md);\n        border: 1px solid var(--color-border);\n      }\n\n      .stat-icon {\n        font-size: var(--font-size-xl);\n        width: 40px;\n        text-align: center;\n      }\n\n      .stat-info {\n        flex: 1;\n      }\n\n      .stat-value {\n        display: block;\n        font-size: var(--font-size-lg);\n        font-weight: 700;\n        color: var(--color-text);\n        line-height: 1.2;\n      }\n\n      .stat-label {\n        display: block;\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        margin-top: 2px;\n      }\n\n      /* Controls Panel */\n      .controls-panel {\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        padding: var(--spacing-lg);\n        border: 1px solid var(--color-border);\n      }\n\n      .controls-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        gap: var(--spacing-lg);\n        margin-bottom: var(--spacing-md);\n      }\n\n      .controls-row:last-child {\n        margin-bottom: 0;\n      }\n\n      .search-controls {\n        flex: 1;\n        max-width: 400px;\n      }\n\n      .search-input-group {\n        display: flex;\n        gap: var(--spacing-sm);\n      }\n\n      .search-input {\n        flex: 1;\n      }\n\n      .action-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .sort-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .sort-controls .form-label {\n        margin: 0;\n        font-size: var(--font-size-sm);\n        white-space: nowrap;\n      }\n\n      .sort-select {\n        min-width: 150px;\n      }\n\n      .selection-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n      }\n\n      /* Dropdown Styles */\n      .dropdown {\n        position: relative;\n        display: inline-block;\n      }\n\n      .dropdown-toggle {\n        cursor: pointer;\n      }\n\n      .dropdown-menu {\n        position: absolute;\n        top: 100%;\n        right: 0;\n        background: var(--color-background);\n        border: 1px solid var(--color-border);\n        border-radius: var(--radius-md);\n        box-shadow: var(--shadow-lg);\n        z-index: 100;\n        min-width: 180px;\n        display: none;\n      }\n\n      .dropdown.open .dropdown-menu {\n        display: block;\n      }\n\n      .dropdown-item {\n        display: block;\n        width: 100%;\n        padding: var(--spacing-sm) var(--spacing-md);\n        text-align: left;\n        background: none;\n        border: none;\n        color: var(--color-text);\n        cursor: pointer;\n        font-size: var(--font-size-sm);\n        transition: background-color var(--transition-fast);\n      }\n\n      .dropdown-item:hover {\n        background-color: var(--color-surface);\n      }\n\n      .dropdown-item:first-child {\n        border-radius: var(--radius-md) var(--radius-md) 0 0;\n      }\n\n      .dropdown-item:last-child {\n        border-radius: 0 0 var(--radius-md) var(--radius-md);\n      }\n\n      /* Units List */\n      .units-list-container {\n        flex: 1;\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        border: 1px solid var(--color-border);\n        display: flex;\n        flex-direction: column;\n        overflow: hidden;\n      }\n\n      .units-list-header {\n        padding: var(--spacing-md) var(--spacing-lg);\n        background: var(--color-background);\n        border-bottom: 1px solid var(--color-border);\n      }\n\n      .results-info {\n        font-size: var(--font-size-sm);\n        color: var(--color-text-secondary);\n        font-weight: 500;\n      }\n\n      .units-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: var(--spacing-md);\n      }\n\n      /* Unit Items */\n      .unit-item {\n        display: flex;\n        gap: var(--spacing-md);\n        padding: var(--spacing-md);\n        background: var(--color-background);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        margin-bottom: var(--spacing-md);\n        transition: all var(--transition-fast);\n      }\n\n      .unit-item:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      }\n\n      .unit-item.selected {\n        border-color: var(--color-success);\n        background-color: rgba(34, 197, 94, 0.05);\n      }\n\n      .unit-checkbox {\n        display: flex;\n        align-items: flex-start;\n        padding-top: 2px;\n      }\n\n      .unit-select-checkbox {\n        width: 18px;\n        height: 18px;\n        cursor: pointer;\n      }\n\n      .unit-content {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .unit-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .unit-basic-info {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .unit-name {\n        margin: 0 0 var(--spacing-xs) 0;\n        font-size: var(--font-size-md);\n        color: var(--color-text);\n        font-weight: 600;\n      }\n\n      .unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .unit-type-tag {\n        background-color: var(--color-surface);\n        color: var(--color-text-secondary);\n        padding: 2px 8px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        border: 1px solid var(--color-border);\n      }\n\n      .unit-stats-summary {\n        display: flex;\n        gap: var(--spacing-md);\n        align-items: center;\n      }\n\n      .stat-item {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        font-size: var(--font-size-sm);\n      }\n\n      .stat-icon {\n        font-size: var(--font-size-sm);\n      }\n\n      .stat-value {\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .unit-details {\n        margin-top: var(--spacing-sm);\n        padding-top: var(--spacing-sm);\n        border-top: 1px solid var(--color-border);\n      }\n\n      .unit-meta {\n        display: flex;\n        gap: var(--spacing-lg);\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .meta-item {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n      }\n\n      .meta-label {\n        font-weight: 500;\n      }\n\n      .unit-modifiers {\n        margin-top: var(--spacing-sm);\n      }\n\n      .modifiers-label {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        display: block;\n        margin-bottom: var(--spacing-xs);\n      }\n\n      .modifiers-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .modifier-tag {\n        background-color: var(--color-warning);\n        color: white;\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        font-weight: 500;\n      }\n\n      .unit-actions {\n        display: flex;\n        flex-direction: column;\n        gap: var(--spacing-xs);\n        align-items: stretch;\n        min-width: 120px;\n      }\n\n      .unit-actions .btn {\n        font-size: var(--font-size-xs);\n        padding: var(--spacing-xs) var(--spacing-sm);\n        white-space: nowrap;\n      }\n\n      /* Empty State */\n      .empty-state {\n        text-align: center;\n        padding: var(--spacing-xl);\n        color: var(--color-text-secondary);\n      }\n\n      .empty-icon {\n        font-size: 4rem;\n        margin-bottom: var(--spacing-lg);\n      }\n\n      .empty-state h3 {\n        margin: 0 0 var(--spacing-sm) 0;\n        color: var(--color-text);\n      }\n\n      .empty-state p {\n        margin: 0 0 var(--spacing-lg) 0;\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .enemy-unit-manager.standalone {\n          padding: var(--spacing-md);\n        }\n\n        .manager-header {\n          flex-direction: column;\n          gap: var(--spacing-md);\n          text-align: center;\n        }\n\n        .stats-grid {\n          grid-template-columns: repeat(2, 1fr);\n        }\n\n        .controls-row {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-md);\n        }\n\n        .search-controls {\n          max-width: none;\n        }\n\n        .action-controls {\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n\n        .sort-controls {\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n\n        .unit-item {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-header {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-stats-summary {\n          justify-content: space-around;\n        }\n\n        .unit-actions {\n          flex-direction: row;\n          min-width: auto;\n        }\n\n        .unit-actions .btn {\n          flex: 1;\n        }\n\n        .unit-meta {\n          flex-direction: column;\n          gap: var(--spacing-xs);\n        }\n      }\n\n      @media (max-width: 480px) {\n        .stats-grid {\n          grid-template-columns: 1fr;\n        }\n\n        .action-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .selection-controls {\n          flex-direction: column;\n        }\n\n        .unit-actions {\n          flex-direction: column;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private attachEventListeners(): void {\n    // Close button\n    const closeBtn = document.getElementById('close-manager');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => this.props.onClose?.());\n    }\n\n    // Search\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.addEventListener('input', this.handleSearch.bind(this));\n    }\n\n    const clearSearchBtn = document.getElementById('clear-search');\n    if (clearSearchBtn) {\n      clearSearchBtn.addEventListener('click', this.handleClearSearch.bind(this));\n    }\n\n    // Create unit\n    const createBtn = document.getElementById('create-unit-btn');\n    if (createBtn) {\n      createBtn.addEventListener('click', this.handleCreateUnit.bind(this));\n    }\n\n    const createFirstBtn = document.getElementById('create-first-unit');\n    if (createFirstBtn) {\n      createFirstBtn.addEventListener('click', this.handleCreateUnit.bind(this));\n    }\n\n    // Sorting\n    const sortSelect = document.getElementById('sort-by') as HTMLSelectElement;\n    if (sortSelect) {\n      sortSelect.addEventListener('change', this.handleSortChange.bind(this));\n    }\n\n    const sortOrderBtn = document.getElementById('sort-order-btn');\n    if (sortOrderBtn) {\n      sortOrderBtn.addEventListener('click', this.handleSortOrderToggle.bind(this));\n    }\n\n    // Selection\n    const selectAllBtn = document.getElementById('select-all');\n    if (selectAllBtn) {\n      selectAllBtn.addEventListener('click', this.handleSelectAll.bind(this));\n    }\n\n    const selectNoneBtn = document.getElementById('select-none');\n    if (selectNoneBtn) {\n      selectNoneBtn.addEventListener('click', this.handleSelectNone.bind(this));\n    }\n\n    // Checkboxes\n    document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n      checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));\n    });\n\n    // Unit actions\n    document.querySelectorAll('[data-action]').forEach(btn => {\n      btn.addEventListener('click', this.handleUnitAction.bind(this));\n    });\n\n    // Dropdown toggles\n    this.attachDropdownListeners();\n\n    // Import/Export actions\n    this.attachImportExportListeners();\n  }\n\n  private attachDropdownListeners(): void {\n    document.querySelectorAll('.dropdown-toggle').forEach(toggle => {\n      toggle.addEventListener('click', (e) => {\n        e.stopPropagation();\n        const dropdown = toggle.closest('.dropdown');\n        if (dropdown) {\n          // Close other dropdowns\n          document.querySelectorAll('.dropdown.open').forEach(other => {\n            if (other !== dropdown) {\n              other.classList.remove('open');\n            }\n          });\n          // Toggle current dropdown\n          dropdown.classList.toggle('open');\n        }\n      });\n    });\n\n    // Close dropdowns when clicking outside\n    document.addEventListener('click', () => {\n      document.querySelectorAll('.dropdown.open').forEach(dropdown => {\n        dropdown.classList.remove('open');\n      });\n    });\n  }\n\n  private attachImportExportListeners(): void {\n    // Import units\n    const importBtn = document.getElementById('import-units');\n    if (importBtn) {\n      importBtn.addEventListener('click', this.handleImportUnits.bind(this));\n    }\n\n    // Export all\n    const exportAllBtn = document.getElementById('export-all');\n    if (exportAllBtn) {\n      exportAllBtn.addEventListener('click', this.handleExportAll.bind(this));\n    }\n\n    // Export selected\n    const exportSelectedBtn = document.getElementById('export-selected');\n    if (exportSelectedBtn) {\n      exportSelectedBtn.addEventListener('click', this.handleExportSelected.bind(this));\n    }\n\n    // Delete selected\n    const deleteSelectedBtn = document.getElementById('delete-selected');\n    if (deleteSelectedBtn) {\n      deleteSelectedBtn.addEventListener('click', this.handleDeleteSelected.bind(this));\n    }\n\n    // Clear all\n    const clearAllBtn = document.getElementById('clear-all');\n    if (clearAllBtn) {\n      clearAllBtn.addEventListener('click', this.handleClearAll.bind(this));\n    }\n\n    // File input for import\n    const fileInput = document.getElementById('import-file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.addEventListener('change', this.handleFileImport.bind(this));\n    }\n  }\n\n  private formatDate(date: Date): string {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) {\n      return 'Today';\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 7) {\n      return `${diffDays} days ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  }\n\n  private handleFormSave(unit: UserEnemyUnit): void {\n    if (this.editingUnit) {\n      // Update existing unit\n      const result = this.storage.updateUserEnemyUnit(this.editingUnit.id ?? '', unit);\n      if (result.success) {\n        this.showingForm = false;\n        this.editingUnit = null;\n        this.loadData();\n        this.render();\n        this.attachEventListeners();\n      } else {\n        alert(`Failed to update unit: ${result.error}`);\n      }\n    } else {\n      // Create new unit\n      const result = this.storage.addUserEnemyUnit(unit);\n      if (result.success) {\n        this.showingForm = false;\n        this.loadData();\n        this.render();\n        this.attachEventListeners();\n      } else {\n        alert(`Failed to create unit: ${result.error}`);\n      }\n    }\n  }\n\n  private handleFormCancel(): void {\n    this.showingForm = false;\n    this.editingUnit = null;\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private handleSearch(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.currentFilter = input.value;\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleClearSearch(): void {\n    this.currentFilter = '';\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.value = '';\n    }\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleCreateUnit(): void {\n    this.showingForm = true;\n    this.editingUnit = null;\n    this.render();\n  }\n\n  private handleSortChange(event: Event): void {\n    const select = event.target as HTMLSelectElement;\n    this.sortBy = select.value as any;\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleSortOrderToggle(): void {\n    this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n    \n    // Update button text\n    const btn = document.getElementById('sort-order-btn');\n    if (btn) {\n      btn.textContent = this.sortOrder === 'asc' ? '⬆️ Ascending' : '⬇️ Descending';\n    }\n  }\n\n  private handleSelectAll(): void {\n    this.selectedUnits.clear();\n    this.filteredUnits.forEach(unit => {\n      if (unit.id) this.selectedUnits.add(unit.id);\n    });\n    this.refreshSelectionUI();\n  }\n\n  private handleSelectNone(): void {\n    this.selectedUnits.clear();\n    this.refreshSelectionUI();\n  }\n\n  private handleCheckboxChange(event: Event): void {\n    const checkbox = event.target as HTMLInputElement;\n    const unitId = checkbox.dataset.unitId;\n    \n    if (unitId) {\n      if (checkbox.checked) {\n        this.selectedUnits.add(unitId);\n      } else {\n        this.selectedUnits.delete(unitId);\n      }\n      this.refreshSelectionUI();\n    }\n  }\n\n  private handleUnitAction(event: Event): void {\n    const btn = event.target as HTMLElement;\n    const action = btn.dataset.action;\n    const unitId = btn.dataset.unitId;\n    \n    if (!action || !unitId) return;\n\n    const unit = this.userUnits.find(u => u.id === unitId);\n    if (!unit) return;\n\n    switch (action) {\n      case 'select':\n        this.props.onUnitSelect?.(unit);\n        break;\n      case 'edit':\n        this.editingUnit = unit;\n        this.showingForm = true;\n        this.render();\n        break;\n      case 'duplicate':\n        this.handleDuplicateUnit(unit);\n        break;\n      case 'delete':\n        this.handleDeleteUnit(unit);\n        break;\n    }\n  }\n\n  private handleDuplicateUnit(unit: UserEnemyUnit): void {\n    const duplicateName = `${unit.name} (Copy)`;\n    const duplicateUnit: EnemyUnit = {\n      name: duplicateName,\n      unit_types: [...unit.unit_types],\n      health: unit.health,\n      strength: unit.strength,\n      attack_modifiers: unit.attack_modifiers ? [...unit.attack_modifiers] : undefined\n    };\n\n    const result = this.storage.addUserEnemyUnit(duplicateUnit);\n    if (result.success) {\n      this.loadData();\n      this.refreshUnitsList();\n    } else {\n      alert(`Failed to duplicate unit: ${result.error}`);\n    }\n  }\n\n  private handleDeleteUnit(unit: UserEnemyUnit): void {\n    if (confirm(`Are you sure you want to delete \"${unit.name}\"? This action cannot be undone.`)) {\n      const result = this.storage.deleteUserEnemyUnit(unit.id ?? '');\n      if (result.success) {\n        if (unit.id) this.selectedUnits.delete(unit.id);\n        this.loadData();\n        this.refreshUnitsList();\n      } else {\n        alert(`Failed to delete unit: ${result.error}`);\n      }\n    }\n  }\n\n  private handleImportUnits(): void {\n    const fileInput = document.getElementById('import-file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  }\n\n  private handleFileImport(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    const file = input.files?.[0];\n    \n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const jsonData = e.target?.result as string;\n        const result = this.storage.importUserEnemyUnits(jsonData, { skipDuplicates: true });\n        \n        if (result.success) {\n          let message = `Successfully imported ${result.imported} units.`;\n          if (result.skipped && result.skipped > 0) {\n            message += ` ${result.skipped} units were skipped.`;\n          }\n          if (result.errors && result.errors.length > 0) {\n            message += `\\n\\nErrors:\\n${result.errors.join('\\n')}`;\n          }\n          alert(message);\n          \n          this.loadData();\n          this.refreshUnitsList();\n        } else {\n          alert(`Import failed: ${result.errors?.join(', ') || 'Unknown error'}`);\n        }\n      } catch (error) {\n        alert('Failed to read file. Please ensure it\\'s a valid JSON file.');\n      }\n    };\n    \n    reader.readAsText(file);\n    input.value = ''; // Reset file input\n  }\n\n  private handleExportAll(): void {\n    const result = this.storage.exportUserEnemyUnits();\n    if (result.success && result.data) {\n      this.downloadJson(result.data, 'enemy-units-export.json');\n    } else {\n      alert(`Export failed: ${result.error}`);\n    }\n  }\n\n  private handleExportSelected(): void {\n    if (this.selectedUnits.size === 0) {\n      alert('No units selected for export.');\n      return;\n    }\n\n    const selectedUnitsList = this.userUnits.filter(unit => unit.id && this.selectedUnits.has(unit.id));\n    const exportData = {\n      version: '1.0',\n      exportDate: new Date().toISOString(),\n      units: selectedUnitsList.map(unit => ({\n        name: unit.name,\n        unit_types: unit.unit_types,\n        health: unit.health,\n        strength: unit.strength,\n        attack_modifiers: unit.attack_modifiers,\n        createdAt: unit.createdAt?.toISOString() ?? new Date().toISOString(),\n        modifiedAt: unit.modifiedAt?.toISOString() ?? new Date().toISOString()\n      }))\n    };\n\n    const jsonData = JSON.stringify(exportData, null, 2);\n    this.downloadJson(jsonData, `enemy-units-selected-${this.selectedUnits.size}.json`);\n  }\n\n  private handleDeleteSelected(): void {\n    if (this.selectedUnits.size === 0) {\n      alert('No units selected for deletion.');\n      return;\n    }\n\n    const count = this.selectedUnits.size;\n    if (confirm(`Are you sure you want to delete ${count} selected unit${count > 1 ? 's' : ''}? This action cannot be undone.`)) {\n      let deletedCount = 0;\n      const errors: string[] = [];\n\n      this.selectedUnits.forEach(unitId => {\n        const result = this.storage.deleteUserEnemyUnit(unitId);\n        if (result.success) {\n          deletedCount++;\n        } else {\n          errors.push(`Failed to delete unit: ${result.error}`);\n        }\n      });\n\n      this.selectedUnits.clear();\n      this.loadData();\n      this.refreshUnitsList();\n\n      let message = `Successfully deleted ${deletedCount} unit${deletedCount > 1 ? 's' : ''}.`;\n      if (errors.length > 0) {\n        message += `\\n\\nErrors:\\n${errors.join('\\n')}`;\n      }\n      alert(message);\n    }\n  }\n\n  private handleClearAll(): void {\n    if (this.userUnits.length === 0) {\n      alert('No units to clear.');\n      return;\n    }\n\n    if (confirm(`Are you sure you want to delete ALL ${this.userUnits.length} custom enemy units? This action cannot be undone.`)) {\n      const result = this.storage.clearAllUserEnemyUnits();\n      if (result.success) {\n        this.selectedUnits.clear();\n        this.loadData();\n        this.refreshUnitsList();\n        alert('All custom enemy units have been deleted.');\n      } else {\n        alert(`Failed to clear units: ${result.error}`);\n      }\n    }\n  }\n\n  private downloadJson(data: string, filename: string): void {\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  private refreshUnitsList(): void {\n    const unitsList = document.getElementById('units-list');\n    if (unitsList) {\n      unitsList.innerHTML = this.renderUnitsList();\n      \n      // Re-attach event listeners for new elements\n      document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n        checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));\n      });\n\n      document.querySelectorAll('[data-action]').forEach(btn => {\n        btn.addEventListener('click', this.handleUnitAction.bind(this));\n      });\n    }\n\n    // Update results info\n    const resultsInfo = document.querySelector('.results-info');\n    if (resultsInfo) {\n      resultsInfo.textContent = `Showing ${this.filteredUnits.length} of ${this.userUnits.length} units${this.selectedUnits.size > 0 ? ` (${this.selectedUnits.size} selected)` : ''}`;\n    }\n  }\n\n  private refreshSelectionUI(): void {\n    // Update checkboxes\n    document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n      const input = checkbox as HTMLInputElement;\n      const unitId = input.dataset.unitId;\n      if (unitId) {\n        input.checked = this.selectedUnits.has(unitId);\n      }\n    });\n\n    // Update unit item selection styling\n    document.querySelectorAll('.unit-item').forEach(item => {\n      const unitId = (item as HTMLElement).dataset.unitId;\n      if (unitId) {\n        if (this.selectedUnits.has(unitId)) {\n          item.classList.add('selected');\n        } else {\n          item.classList.remove('selected');\n        }\n      }\n    });\n\n    // Update bulk actions button\n    const bulkActionsBtn = document.getElementById('bulk-actions-btn');\n    if (bulkActionsBtn) {\n      bulkActionsBtn.textContent = `📋 Bulk Actions (${this.selectedUnits.size})`;\n      (bulkActionsBtn as HTMLButtonElement).disabled = this.selectedUnits.size === 0;\n    }\n\n    // Update select none button\n    const selectNoneBtn = document.getElementById('select-none');\n    if (selectNoneBtn) {\n      (selectNoneBtn as HTMLButtonElement).disabled = this.selectedUnits.size === 0;\n    }\n\n    // Update results info\n    const resultsInfo = document.querySelector('.results-info');\n    if (resultsInfo) {\n      resultsInfo.textContent = `Showing ${this.filteredUnits.length} of ${this.userUnits.length} units${this.selectedUnits.size > 0 ? ` (${this.selectedUnits.size} selected)` : ''}`;\n    }\n  }\n\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}","/**\n * Mobile utility functions for responsive behavior and touch interactions\n */\n\nexport interface BreakpointConfig {\n  mobileSmall: number;\n  mobileLarge: number;\n  tabletSmall: number;\n  tabletLarge: number;\n  desktop: number;\n}\n\nexport const BREAKPOINTS: BreakpointConfig = {\n  mobileSmall: 320,\n  mobileLarge: 480,\n  tabletSmall: 768,\n  tabletLarge: 1024,\n  desktop: 1200,\n};\n\nexport type LayoutMode = 'mobile' | 'tablet' | 'desktop';\n\n/**\n * Mobile detection and layout utilities\n */\nexport class MobileLayoutManager {\n  private currentMode: LayoutMode = 'desktop';\n  private listeners: Array<(mode: LayoutMode) => void> = [];\n\n  constructor() {\n    this.updateLayoutMode();\n    this.setupResizeListener();\n  }\n\n  /**\n   * Get current layout mode based on screen width\n   */\n  getCurrentMode(): LayoutMode {\n    return this.currentMode;\n  }\n\n  /**\n   * Check if current layout is mobile\n   */\n  isMobile(): boolean {\n    return this.currentMode === 'mobile';\n  }\n\n  /**\n   * Check if current layout is tablet\n   */\n  isTablet(): boolean {\n    return this.currentMode === 'tablet';\n  }\n\n  /**\n   * Check if current layout is desktop\n   */\n  isDesktop(): boolean {\n    return this.currentMode === 'desktop';\n  }\n\n  /**\n   * Check if device has touch capability\n   */\n  isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Get current viewport width\n   */\n  getViewportWidth(): number {\n    return window.innerWidth;\n  }\n\n  /**\n   * Add listener for layout mode changes\n   */\n  addLayoutChangeListener(callback: (mode: LayoutMode) => void): void {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * Remove layout change listener\n   */\n  removeLayoutChangeListener(callback: (mode: LayoutMode) => void): void {\n    const index = this.listeners.indexOf(callback);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Update layout mode based on current viewport\n   */\n  private updateLayoutMode(): void {\n    const width = this.getViewportWidth();\n    let newMode: LayoutMode;\n\n    if (width < BREAKPOINTS.tabletSmall) {\n      newMode = 'mobile';\n    } else if (width < BREAKPOINTS.tabletLarge) {\n      newMode = 'tablet';\n    } else {\n      newMode = 'desktop';\n    }\n\n    if (newMode !== this.currentMode) {\n      this.currentMode = newMode;\n      this.notifyListeners();\n    }\n  }\n\n  /**\n   * Setup resize listener for responsive behavior\n   */\n  private setupResizeListener(): void {\n    let resizeTimeout: number;\n    \n    window.addEventListener('resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = window.setTimeout(() => {\n        this.updateLayoutMode();\n      }, 150);\n    });\n  }\n\n  /**\n   * Notify all listeners of layout change\n   */\n  private notifyListeners(): void {\n    this.listeners.forEach(callback => callback(this.currentMode));\n  }\n}\n\n/**\n * Touch interaction utilities\n */\nexport class TouchInteractionManager {\n  /**\n   * Add swipe gesture support to an element\n   */\n  static addSwipeSupport(\n    element: HTMLElement,\n    onSwipeLeft?: () => void,\n    onSwipeRight?: () => void,\n    threshold: number = 50\n  ): void {\n    if (!('ontouchstart' in window)) return;\n\n    let startX: number = 0;\n    let startY: number = 0;\n    let startTime: number = 0;\n\n    element.addEventListener('touchstart', (e) => {\n      const touch = e.touches[0];\n      startX = touch.clientX;\n      startY = touch.clientY;\n      startTime = Date.now();\n    }, { passive: true });\n\n    element.addEventListener('touchend', (e) => {\n      if (e.changedTouches.length === 0) return;\n\n      const touch = e.changedTouches[0];\n      const endX = touch.clientX;\n      const endY = touch.clientY;\n      const endTime = Date.now();\n\n      const deltaX = endX - startX;\n      const deltaY = endY - startY;\n      const deltaTime = endTime - startTime;\n\n      // Check if it's a valid swipe (not too slow, not too vertical)\n      if (deltaTime < 500 && Math.abs(deltaX) > threshold && Math.abs(deltaY) < Math.abs(deltaX) * 0.5) {\n        if (deltaX > 0 && onSwipeRight) {\n          e.preventDefault();\n          onSwipeRight();\n        } else if (deltaX < 0 && onSwipeLeft) {\n          e.preventDefault();\n          onSwipeLeft();\n        }\n      }\n    }, { passive: false });\n  }\n  /**\n   * Add touch-friendly event listeners to an element\n   */\n  static addTouchSupport(element: HTMLElement, callback: () => void): void {\n    // Add both click and touch events for better compatibility\n    element.addEventListener('click', callback);\n    \n    if ('ontouchstart' in window) {\n      let touchStartTime: number;\n      \n      element.addEventListener('touchstart', (e) => {\n        touchStartTime = Date.now();\n        element.classList.add('touch-active');\n      });\n      \n      element.addEventListener('touchend', (e) => {\n        element.classList.remove('touch-active');\n        \n        // Only trigger if it was a quick tap (not a scroll)\n        if (Date.now() - touchStartTime < 200) {\n          e.preventDefault();\n          callback();\n        }\n      });\n      \n      element.addEventListener('touchcancel', () => {\n        element.classList.remove('touch-active');\n      });\n    }\n  }\n\n  /**\n   * Optimize scrollable element for mobile\n   */\n  static optimizeScrolling(element: HTMLElement): void {\n    // Add momentum scrolling for iOS\n    element.style.webkitOverflowScrolling = 'touch';\n    element.style.scrollBehavior = 'smooth';\n    \n    // Add scroll indicators\n    element.classList.add('scroll-momentum');\n  }\n\n  /**\n   * Add haptic feedback simulation (visual feedback)\n   */\n  static addHapticFeedback(element: HTMLElement): void {\n    element.addEventListener('touchstart', () => {\n      element.style.transform = 'scale(0.98)';\n      element.style.transition = 'transform 0.1s ease';\n    });\n\n    element.addEventListener('touchend', () => {\n      element.style.transform = 'scale(1)';\n    });\n\n    element.addEventListener('touchcancel', () => {\n      element.style.transform = 'scale(1)';\n    });\n  }\n\n  /**\n   * Add pull-to-refresh functionality\n   */\n  static addPullToRefresh(\n    container: HTMLElement,\n    onRefresh: () => Promise<void>,\n    threshold: number = 80\n  ): void {\n    if (!('ontouchstart' in window)) return;\n\n    let startY: number = 0;\n    let currentY: number = 0;\n    let isRefreshing: boolean = false;\n    let refreshIndicator: HTMLElement | null = null;\n\n    // Create refresh indicator\n    const createRefreshIndicator = () => {\n      if (refreshIndicator) return;\n\n      refreshIndicator = document.createElement('div');\n      refreshIndicator.className = 'pull-refresh-indicator';\n      refreshIndicator.innerHTML = `\n        <div class=\"refresh-spinner\"></div>\n        <span class=\"refresh-text\">Pull to refresh</span>\n      `;\n      container.insertBefore(refreshIndicator, container.firstChild);\n    };\n\n    container.addEventListener('touchstart', (e) => {\n      if (container.scrollTop === 0 && !isRefreshing) {\n        startY = e.touches[0].clientY;\n        createRefreshIndicator();\n      }\n    }, { passive: true });\n\n    container.addEventListener('touchmove', (e) => {\n      if (container.scrollTop === 0 && !isRefreshing && refreshIndicator) {\n        currentY = e.touches[0].clientY;\n        const pullDistance = Math.max(0, currentY - startY);\n\n        if (pullDistance > 0) {\n          e.preventDefault();\n          const progress = Math.min(pullDistance / threshold, 1);\n          refreshIndicator.style.transform = `translateY(${pullDistance * 0.5}px)`;\n          refreshIndicator.style.opacity = progress.toString();\n\n          if (pullDistance > threshold) {\n            refreshIndicator.querySelector('.refresh-text')!.textContent = 'Release to refresh';\n          } else {\n            refreshIndicator.querySelector('.refresh-text')!.textContent = 'Pull to refresh';\n          }\n        }\n      }\n    }, { passive: false });\n\n    container.addEventListener('touchend', async () => {\n      if (refreshIndicator && !isRefreshing) {\n        const pullDistance = currentY - startY;\n\n        if (pullDistance > threshold) {\n          isRefreshing = true;\n          refreshIndicator.querySelector('.refresh-text')!.textContent = 'Refreshing...';\n          refreshIndicator.querySelector('.refresh-spinner')!.classList.add('spinning');\n\n          try {\n            await onRefresh();\n          } finally {\n            isRefreshing = false;\n            if (refreshIndicator) {\n              refreshIndicator.style.transform = 'translateY(-100%)';\n              refreshIndicator.style.opacity = '0';\n              setTimeout(() => {\n                if (refreshIndicator && refreshIndicator.parentNode) {\n                  refreshIndicator.parentNode.removeChild(refreshIndicator);\n                  refreshIndicator = null;\n                }\n              }, 300);\n            }\n          }\n        } else {\n          refreshIndicator.style.transform = 'translateY(-100%)';\n          refreshIndicator.style.opacity = '0';\n          setTimeout(() => {\n            if (refreshIndicator && refreshIndicator.parentNode) {\n              refreshIndicator.parentNode.removeChild(refreshIndicator);\n              refreshIndicator = null;\n            }\n          }, 300);\n        }\n      }\n    });\n  }\n}\n\n/**\n * Mobile-specific CSS utilities\n */\nexport class MobileCSSManager {\n  /**\n   * Add mobile-specific CSS classes to body based on current layout\n   */\n  static updateBodyClasses(layoutManager: MobileLayoutManager): void {\n    const body = document.body;\n    \n    // Remove existing layout classes\n    body.classList.remove('layout-mobile', 'layout-tablet', 'layout-desktop');\n    \n    // Add current layout class\n    body.classList.add(`layout-${layoutManager.getCurrentMode()}`);\n    \n    // Add touch device class if applicable\n    if (layoutManager.isTouchDevice()) {\n      body.classList.add('touch-device');\n    }\n  }\n\n  /**\n   * Apply mobile-optimized styles to combat logs\n   */\n  static optimizeCombatLogs(): void {\n    const combatLogs = document.querySelectorAll('.combat-log');\n    \n    combatLogs.forEach(log => {\n      if (log instanceof HTMLElement) {\n        TouchInteractionManager.optimizeScrolling(log);\n      }\n    });\n  }\n\n  /**\n   * Apply mobile-optimized styles to unit cards\n   */\n  static optimizeUnitCards(): void {\n    const unitCards = document.querySelectorAll('.unit-card');\n    \n    unitCards.forEach(card => {\n      if (card instanceof HTMLElement) {\n        TouchInteractionManager.addHapticFeedback(card);\n      }\n    });\n  }\n}\n\n// Global mobile layout manager instance\nexport const mobileLayoutManager = new MobileLayoutManager();\n\n// Auto-update body classes when layout changes\nmobileLayoutManager.addLayoutChangeListener(() => {\n  MobileCSSManager.updateBodyClasses(mobileLayoutManager);\n});\n\n// Initialize body classes\nMobileCSSManager.updateBodyClasses(mobileLayoutManager);\n","/**\n * Responsive navigation manager for hybrid layout approach\n * Handles desktop, tablet, and mobile navigation patterns\n */\n\nimport { mobileLayoutManager, LayoutMode, TouchInteractionManager } from './mobileUtils';\n\nexport interface NavigationSection {\n  id: string;\n  title: string;\n  icon: string;\n  element: HTMLElement | null;\n  isAvailable: boolean;  // Whether the section has content and can be accessed\n  isCollapsed?: boolean;\n}\n\nexport class ResponsiveNavigationManager {\n  private sections: NavigationSection[] = [];\n  private currentActiveSection: string | null = null;\n  private tabContainer: HTMLElement | null = null;\n  private initialized = false;\n\n  constructor() {\n    this.setupLayoutListener();\n  }\n\n  /**\n   * Initialize the navigation system\n   */\n  public initialize(): void {\n    if (this.initialized) return;\n\n    this.identifySections();\n    this.createNavigationElements();\n    this.setupInitialLayout();\n    this.initialized = true;\n  }\n\n  /**\n   * Identify main sections in the app\n   */\n  private identifySections(): void {\n    this.sections = [\n      {\n        id: 'config-section',\n        title: 'Configuration',\n        icon: '⚙️',\n        element: document.getElementById('config-section'),\n        isAvailable: true,\n        isCollapsed: false\n      },\n      {\n        id: 'results-section',\n        title: 'Results',\n        icon: '🎯',\n        element: document.getElementById('results-section'),\n        isAvailable: false,\n        isCollapsed: false\n      },\n      {\n        id: 'battle-simulation-container',\n        title: 'Battle Simulation',\n        icon: '⚔️',\n        element: document.getElementById('battle-simulation-container'),\n        isAvailable: false,\n        isCollapsed: false\n      }\n    ];\n  }\n\n  /**\n   * Create navigation elements for different layouts\n   */\n  private createNavigationElements(): void {\n    this.createMobileTabNavigation();\n    this.createTabletCollapsibleHeaders();\n  }\n\n  /**\n   * Create mobile tab navigation\n   */\n  private createMobileTabNavigation(): void {\n    const mainContent = document.querySelector('.main-content');\n    if (!mainContent) return;\n\n    // Create tab container\n    const tabContainer = document.createElement('div');\n    tabContainer.className = 'mobile-tab-navigation mobile-only';\n    tabContainer.innerHTML = `\n      <div class=\"tab-nav-container\">\n        ${this.sections.map(section => `\n          <button class=\"tab-nav-item ${section.id === 'config-section' ? 'active' : ''}\" \n                  data-section=\"${section.id}\">\n            <span class=\"tab-icon\">${section.icon}</span>\n            <span class=\"tab-label\">${section.title}</span>\n          </button>\n        `).join('')}\n      </div>\n    `;\n\n    // Insert before main content\n    mainContent.parentNode?.insertBefore(tabContainer, mainContent);\n    this.tabContainer = tabContainer;\n\n    // Add event listeners\n    this.attachTabListeners();\n\n    // Add swipe support for mobile\n    this.addSwipeSupport();\n  }\n\n  /**\n   * Create tablet collapsible headers\n   */\n  private createTabletCollapsibleHeaders(): void {\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Create collapsible header\n      const header = document.createElement('div');\n      header.className = 'collapsible-header tablet-only';\n      header.innerHTML = `\n        <div class=\"collapsible-title\">\n          <span class=\"section-icon\">${section.icon}</span>\n          <h2>${section.title}</h2>\n          <span class=\"collapse-indicator\">▼</span>\n        </div>\n      `;\n\n      // Insert header before section content\n      section.element.insertBefore(header, section.element.firstChild);\n\n      // Add click listener\n      header.addEventListener('click', () => {\n        this.toggleSectionCollapse(section.id);\n      });\n    });\n  }\n\n  /**\n   * Setup initial layout based on current screen size\n   */\n  private setupInitialLayout(): void {\n    const currentMode = mobileLayoutManager.getCurrentMode();\n    this.applyLayoutMode(currentMode);\n\n    // Initialize tab visibility\n    this.updateTabVisibility();\n  }\n\n  /**\n   * Apply layout mode\n   */\n  private applyLayoutMode(mode: LayoutMode): void {\n    switch (mode) {\n      case 'mobile':\n        this.applyMobileLayout();\n        break;\n      case 'tablet':\n        this.applyTabletLayout();\n        break;\n      case 'desktop':\n        this.applyDesktopLayout();\n        break;\n    }\n  }\n\n  /**\n   * Apply mobile layout (tab navigation)\n   */\n  private applyMobileLayout(): void {\n    // Show only active section, hide others (but don't change isVisible for available sections)\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      if (section.id === this.currentActiveSection ||\n          (this.currentActiveSection === null && section.id === 'config-section')) {\n        section.element.classList.remove('hidden');\n        // Don't change isVisible - it tracks actual availability, not display state\n      } else {\n        section.element.classList.add('hidden');\n        // Don't change isVisible - it tracks actual availability, not display state\n      }\n    });\n\n    // Update tab active state\n    this.updateTabActiveState();\n  }\n\n  /**\n   * Apply tablet layout (collapsible sections)\n   */\n  private applyTabletLayout(): void {\n    // Show all available sections but allow collapsing\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Only show sections that are available\n      if (section.isAvailable) {\n        section.element.classList.remove('hidden');\n      } else {\n        section.element.classList.add('hidden');\n      }\n\n      // Apply collapsed state if needed\n      if (section.isCollapsed) {\n        section.element.classList.add('collapsed');\n      } else {\n        section.element.classList.remove('collapsed');\n      }\n    });\n  }\n\n  /**\n   * Apply desktop layout (current layout)\n   */\n  private applyDesktopLayout(): void {\n    // Show all available sections, remove any mobile/tablet specific classes\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Only show sections that are available\n      if (section.isAvailable) {\n        section.element.classList.remove('hidden', 'collapsed');\n      } else {\n        section.element.classList.add('hidden');\n      }\n      section.isCollapsed = false;\n    });\n  }\n\n  /**\n   * Switch to section (mobile)\n   */\n  public switchToSection(sectionId: string): void {\n    this.currentActiveSection = sectionId;\n\n    if (mobileLayoutManager.isMobile()) {\n      this.applyMobileLayout();\n    }\n  }\n\n  /**\n   * Toggle section collapse (tablet)\n   */\n  private toggleSectionCollapse(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section || !section.element) return;\n\n    section.isCollapsed = !section.isCollapsed;\n    \n    if (section.isCollapsed) {\n      section.element.classList.add('collapsed');\n    } else {\n      section.element.classList.remove('collapsed');\n    }\n\n    // Update collapse indicator\n    const indicator = section.element.querySelector('.collapse-indicator');\n    if (indicator) {\n      indicator.textContent = section.isCollapsed ? '▶' : '▼';\n    }\n  }\n\n  /**\n   * Attach tab navigation listeners\n   */\n  private attachTabListeners(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      tab.addEventListener('click', () => {\n        // Don't switch if tab is disabled\n        if (tab.classList.contains('disabled')) return;\n\n        const sectionId = tab.getAttribute('data-section');\n        if (sectionId) {\n          this.switchToSection(sectionId);\n        }\n      });\n    });\n  }\n\n  /**\n   * Update tab active state\n   */\n  private updateTabActiveState(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      const sectionId = tab.getAttribute('data-section');\n      if (sectionId === this.currentActiveSection || \n          (this.currentActiveSection === null && sectionId === 'config-section')) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n  }\n\n  /**\n   * Setup layout change listener\n   */\n  private setupLayoutListener(): void {\n    mobileLayoutManager.addLayoutChangeListener((mode) => {\n      if (this.initialized) {\n        this.applyLayoutMode(mode);\n      }\n    });\n  }\n\n  /**\n   * Show section (called when results are ready)\n   */\n  public showSection(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section) return;\n\n    // Refresh element reference if it's null\n    if (!section.element) {\n      section.element = document.getElementById(sectionId);\n      if (!section.element) return;\n    }\n\n    // Remove hidden class\n    section.element.classList.remove('hidden');\n    section.isAvailable = true;\n\n    // If mobile, switch to this section\n    if (mobileLayoutManager.isMobile()) {\n      this.switchToSection(sectionId);\n    }\n\n    // Update tab navigation to show this section is available\n    this.updateTabVisibility();\n  }\n\n  /**\n   * Hide section\n   */\n  public hideSection(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section || !section.element) return;\n\n    section.element.classList.add('hidden');\n    section.isAvailable = false;\n\n    // Update tab navigation\n    this.updateTabVisibility();\n\n    // If this was the active section on mobile, switch to config\n    if (mobileLayoutManager.isMobile() && this.currentActiveSection === sectionId) {\n      this.switchToSection('config-section');\n    }\n  }\n\n  /**\n   * Update tab visibility based on section availability\n   */\n  private updateTabVisibility(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      const sectionId = tab.getAttribute('data-section');\n      const section = this.sections.find(s => s.id === sectionId);\n\n      if (section) {\n        if (section.isAvailable) {\n          tab.classList.remove('disabled');\n          (tab as HTMLButtonElement).disabled = false;\n        } else {\n          tab.classList.add('disabled');\n          (tab as HTMLButtonElement).disabled = true;\n        }\n      }\n    });\n  }\n\n  /**\n   * Add swipe support for mobile navigation\n   */\n  private addSwipeSupport(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const mainContent = document.querySelector('.main-content');\n    if (!mainContent) return;\n\n    TouchInteractionManager.addSwipeSupport(\n      mainContent as HTMLElement,\n      () => this.swipeToNextSection(), // Swipe left = next section\n      () => this.swipeToPreviousSection() // Swipe right = previous section\n    );\n  }\n\n  /**\n   * Navigate to next available section via swipe\n   */\n  private swipeToNextSection(): void {\n    const availableSections = this.sections.filter(s => s.isAvailable);\n    const currentIndex = availableSections.findIndex(s => s.id === this.currentActiveSection);\n\n    if (currentIndex < availableSections.length - 1) {\n      const nextSection = availableSections[currentIndex + 1];\n      this.switchToSection(nextSection.id);\n    }\n  }\n\n  /**\n   * Navigate to previous available section via swipe\n   */\n  private swipeToPreviousSection(): void {\n    const availableSections = this.sections.filter(s => s.isAvailable);\n    const currentIndex = availableSections.findIndex(s => s.id === this.currentActiveSection);\n\n    if (currentIndex > 0) {\n      const previousSection = availableSections[currentIndex - 1];\n      this.switchToSection(previousSection.id);\n    }\n  }\n}\n\n// Global navigation manager instance\nexport const responsiveNavigation = new ResponsiveNavigationManager();\n","/**\n * Mobile-specific UI patterns and components\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\nexport interface FloatingActionButtonConfig {\n  icon: string;\n  label: string;\n  onClick: () => void;\n  position?: 'bottom-right' | 'bottom-left' | 'bottom-center';\n  color?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\n}\n\nexport interface BottomSheetConfig {\n  title: string;\n  content: string | HTMLElement;\n  actions?: Array<{\n    label: string;\n    onClick: () => void;\n    style?: 'primary' | 'secondary' | 'danger';\n  }>;\n  dismissible?: boolean;\n}\n\n/**\n * Mobile UI Pattern Manager\n */\nexport class MobileUIPatterns {\n  private static fabContainer: HTMLElement | null = null;\n  private static bottomSheetContainer: HTMLElement | null = null;\n\n  /**\n   * Create floating action button\n   */\n  static createFloatingActionButton(config: FloatingActionButtonConfig): HTMLElement {\n    const fab = document.createElement('button');\n    fab.className = `floating-action-button fab-${config.position || 'bottom-right'} fab-${config.color || 'primary'}`;\n    fab.innerHTML = `\n      <span class=\"fab-icon\">${config.icon}</span>\n      <span class=\"fab-label\">${config.label}</span>\n    `;\n    \n    fab.addEventListener('click', config.onClick);\n    \n    // Add touch feedback\n    fab.addEventListener('touchstart', () => {\n      fab.style.transform = 'scale(0.95)';\n    });\n    \n    fab.addEventListener('touchend', () => {\n      fab.style.transform = 'scale(1)';\n    });\n\n    return fab;\n  }\n\n  /**\n   * Show floating action button (only on mobile)\n   */\n  static showFloatingActionButton(config: FloatingActionButtonConfig): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    this.hideFloatingActionButton(); // Remove any existing FAB\n\n    if (!this.fabContainer) {\n      this.fabContainer = document.createElement('div');\n      this.fabContainer.className = 'fab-container';\n      document.body.appendChild(this.fabContainer);\n    }\n\n    const fab = this.createFloatingActionButton(config);\n    this.fabContainer.appendChild(fab);\n\n    // Animate in\n    setTimeout(() => {\n      fab.classList.add('fab-visible');\n    }, 10);\n  }\n\n  /**\n   * Hide floating action button\n   */\n  static hideFloatingActionButton(): void {\n    if (this.fabContainer) {\n      const fabs = this.fabContainer.querySelectorAll('.floating-action-button');\n      fabs.forEach(fab => {\n        fab.classList.remove('fab-visible');\n        setTimeout(() => {\n          if (fab.parentNode) {\n            fab.parentNode.removeChild(fab);\n          }\n        }, 300);\n      });\n    }\n  }\n\n  /**\n   * Create bottom sheet modal\n   */\n  static showBottomSheet(config: BottomSheetConfig): Promise<void> {\n    return new Promise((resolve) => {\n      if (!mobileLayoutManager.isMobile()) {\n        // On desktop, show as regular modal\n        this.showDesktopModal(config);\n        resolve();\n        return;\n      }\n\n      this.hideBottomSheet(); // Remove any existing bottom sheet\n\n      // Create backdrop\n      const backdrop = document.createElement('div');\n      backdrop.className = 'bottom-sheet-backdrop';\n\n      // Create bottom sheet\n      const bottomSheet = document.createElement('div');\n      bottomSheet.className = 'bottom-sheet';\n      \n      const header = document.createElement('div');\n      header.className = 'bottom-sheet-header';\n      header.innerHTML = `\n        <div class=\"bottom-sheet-handle\"></div>\n        <h3 class=\"bottom-sheet-title\">${config.title}</h3>\n        ${config.dismissible !== false ? '<button class=\"bottom-sheet-close\">×</button>' : ''}\n      `;\n\n      const content = document.createElement('div');\n      content.className = 'bottom-sheet-content';\n      if (typeof config.content === 'string') {\n        content.innerHTML = config.content;\n      } else {\n        content.appendChild(config.content);\n      }\n\n      const actions = document.createElement('div');\n      actions.className = 'bottom-sheet-actions';\n      if (config.actions) {\n        config.actions.forEach(action => {\n          const button = document.createElement('button');\n          button.className = `btn btn-${action.style || 'secondary'}`;\n          button.textContent = action.label;\n          button.addEventListener('click', () => {\n            action.onClick();\n            this.hideBottomSheet();\n            resolve();\n          });\n          actions.appendChild(button);\n        });\n      }\n\n      bottomSheet.appendChild(header);\n      bottomSheet.appendChild(content);\n      if (config.actions && config.actions.length > 0) {\n        bottomSheet.appendChild(actions);\n      }\n\n      // Create container\n      if (!this.bottomSheetContainer) {\n        this.bottomSheetContainer = document.createElement('div');\n        this.bottomSheetContainer.className = 'bottom-sheet-container';\n        document.body.appendChild(this.bottomSheetContainer);\n      }\n\n      this.bottomSheetContainer.appendChild(backdrop);\n      this.bottomSheetContainer.appendChild(bottomSheet);\n\n      // Add event listeners\n      if (config.dismissible !== false) {\n        backdrop.addEventListener('click', () => {\n          this.hideBottomSheet();\n          resolve();\n        });\n\n        const closeBtn = header.querySelector('.bottom-sheet-close');\n        if (closeBtn) {\n          closeBtn.addEventListener('click', () => {\n            this.hideBottomSheet();\n            resolve();\n          });\n        }\n      }\n\n      // Animate in\n      setTimeout(() => {\n        backdrop.classList.add('visible');\n        bottomSheet.classList.add('visible');\n      }, 10);\n    });\n  }\n\n  /**\n   * Hide bottom sheet\n   */\n  static hideBottomSheet(): void {\n    if (this.bottomSheetContainer) {\n      const backdrop = this.bottomSheetContainer.querySelector('.bottom-sheet-backdrop');\n      const bottomSheet = this.bottomSheetContainer.querySelector('.bottom-sheet');\n\n      if (backdrop && bottomSheet) {\n        backdrop.classList.remove('visible');\n        bottomSheet.classList.remove('visible');\n\n        setTimeout(() => {\n          if (this.bottomSheetContainer) {\n            this.bottomSheetContainer.innerHTML = '';\n          }\n        }, 300);\n      }\n    }\n  }\n\n  /**\n   * Show desktop modal (fallback for non-mobile)\n   */\n  private static showDesktopModal(config: BottomSheetConfig): void {\n    // Simple alert fallback for desktop\n    // In a real implementation, you might want to show a proper modal\n    const message = typeof config.content === 'string' ? config.content : config.title;\n    alert(message);\n  }\n\n  /**\n   * Create mobile-optimized dropdown\n   */\n  static createMobileDropdown(\n    trigger: HTMLElement,\n    options: Array<{ label: string; value: string; onClick: () => void }>\n  ): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    trigger.addEventListener('click', () => {\n      const content = document.createElement('div');\n      content.className = 'mobile-dropdown-content';\n      \n      options.forEach(option => {\n        const item = document.createElement('button');\n        item.className = 'mobile-dropdown-item';\n        item.textContent = option.label;\n        item.addEventListener('click', () => {\n          option.onClick();\n          this.hideBottomSheet();\n        });\n        content.appendChild(item);\n      });\n\n      this.showBottomSheet({\n        title: 'Select Option',\n        content: content,\n        dismissible: true\n      });\n    });\n  }\n\n  /**\n   * Add loading overlay for mobile\n   */\n  static showMobileLoading(message: string = 'Loading...'): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const overlay = document.createElement('div');\n    overlay.className = 'mobile-loading-overlay';\n    overlay.innerHTML = `\n      <div class=\"mobile-loading-content\">\n        <div class=\"mobile-loading-spinner\"></div>\n        <p class=\"mobile-loading-text\">${message}</p>\n      </div>\n    `;\n\n    document.body.appendChild(overlay);\n\n    setTimeout(() => {\n      overlay.classList.add('visible');\n    }, 10);\n  }\n\n  /**\n   * Hide mobile loading overlay\n   */\n  static hideMobileLoading(): void {\n    const overlay = document.querySelector('.mobile-loading-overlay');\n    if (overlay) {\n      overlay.classList.remove('visible');\n      setTimeout(() => {\n        if (overlay.parentNode) {\n          overlay.parentNode.removeChild(overlay);\n        }\n      }, 300);\n    }\n  }\n}\n\n// Auto-hide FAB when switching to desktop\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobileUIPatterns.hideFloatingActionButton();\n    MobileUIPatterns.hideBottomSheet();\n  }\n});\n","/**\n * Mobile performance optimization utilities\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\nexport interface PerformanceMetrics {\n  renderTime: number;\n  interactionTime: number;\n  scrollPerformance: number;\n  memoryUsage?: number;\n}\n\n/**\n * Mobile Performance Manager\n */\nexport class MobilePerformanceManager {\n  private static metrics: PerformanceMetrics = {\n    renderTime: 0,\n    interactionTime: 0,\n    scrollPerformance: 0\n  };\n\n  private static observers: Map<string, IntersectionObserver> = new Map();\n  private static rafId: number | null = null;\n\n  /**\n   * Initialize performance monitoring\n   */\n  static initialize(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    this.setupLazyLoading();\n    this.optimizeScrolling();\n    this.monitorInteractions();\n    this.setupMemoryMonitoring();\n  }\n\n  /**\n   * Setup lazy loading for non-critical sections\n   */\n  private static setupLazyLoading(): void {\n    const lazyElements = document.querySelectorAll('[data-lazy]');\n    \n    if (lazyElements.length === 0) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const element = entry.target as HTMLElement;\n            this.loadElement(element);\n            observer.unobserve(element);\n          }\n        });\n      },\n      {\n        rootMargin: '50px',\n        threshold: 0.1\n      }\n    );\n\n    lazyElements.forEach(element => observer.observe(element));\n    this.observers.set('lazy-loading', observer);\n  }\n\n  /**\n   * Load a lazy element\n   */\n  private static loadElement(element: HTMLElement): void {\n    const startTime = performance.now();\n\n    // Simulate loading content\n    const content = element.dataset.lazy;\n    if (content) {\n      element.innerHTML = content;\n      element.removeAttribute('data-lazy');\n    }\n\n    const endTime = performance.now();\n    this.metrics.renderTime += endTime - startTime;\n  }\n\n  /**\n   * Optimize scrolling performance\n   */\n  private static optimizeScrolling(): void {\n    const scrollableElements = document.querySelectorAll('.combat-log, .unit-family-content, .main-content');\n    \n    scrollableElements.forEach(element => {\n      let isScrolling = false;\n      let scrollTimeout: number;\n\n      element.addEventListener('scroll', () => {\n        if (!isScrolling) {\n          isScrolling = true;\n          this.requestOptimizedFrame(() => {\n            // Optimize scroll performance\n            this.optimizeScrollFrame(element as HTMLElement);\n            isScrolling = false;\n          });\n        }\n\n        // Clear timeout and set a new one\n        clearTimeout(scrollTimeout);\n        scrollTimeout = window.setTimeout(() => {\n          this.onScrollEnd(element as HTMLElement);\n        }, 150);\n      }, { passive: true });\n    });\n  }\n\n  /**\n   * Optimize scroll frame\n   */\n  private static optimizeScrollFrame(element: HTMLElement): void {\n    const startTime = performance.now();\n\n    // Hide elements that are far out of view to improve performance\n    const rect = element.getBoundingClientRect();\n    const children = element.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i] as HTMLElement;\n      const childRect = child.getBoundingClientRect();\n      \n      // Hide elements that are more than 2 viewport heights away\n      const isVisible = childRect.bottom > -window.innerHeight * 2 && \n                       childRect.top < window.innerHeight * 3;\n      \n      if (!isVisible && !child.classList.contains('scroll-hidden')) {\n        child.classList.add('scroll-hidden');\n        child.style.visibility = 'hidden';\n      } else if (isVisible && child.classList.contains('scroll-hidden')) {\n        child.classList.remove('scroll-hidden');\n        child.style.visibility = 'visible';\n      }\n    }\n\n    const endTime = performance.now();\n    this.metrics.scrollPerformance += endTime - startTime;\n  }\n\n  /**\n   * Handle scroll end\n   */\n  private static onScrollEnd(element: HTMLElement): void {\n    // Restore visibility to all hidden elements\n    const hiddenElements = element.querySelectorAll('.scroll-hidden');\n    hiddenElements.forEach(el => {\n      el.classList.remove('scroll-hidden');\n      (el as HTMLElement).style.visibility = 'visible';\n    });\n  }\n\n  /**\n   * Request optimized animation frame\n   */\n  private static requestOptimizedFrame(callback: () => void): void {\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n    }\n\n    this.rafId = requestAnimationFrame(() => {\n      callback();\n      this.rafId = null;\n    });\n  }\n\n  /**\n   * Monitor touch interactions\n   */\n  private static monitorInteractions(): void {\n    let interactionStart: number;\n\n    document.addEventListener('touchstart', () => {\n      interactionStart = performance.now();\n    }, { passive: true });\n\n    document.addEventListener('touchend', () => {\n      if (interactionStart) {\n        const interactionTime = performance.now() - interactionStart;\n        this.metrics.interactionTime = Math.max(this.metrics.interactionTime, interactionTime);\n      }\n    }, { passive: true });\n  }\n\n  /**\n   * Setup memory monitoring\n   */\n  private static setupMemoryMonitoring(): void {\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        this.metrics.memoryUsage = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n        \n        // Warn if memory usage is high\n        if (this.metrics.memoryUsage > 0.8) {\n          console.warn('High memory usage detected:', this.metrics.memoryUsage);\n          this.optimizeMemory();\n        }\n      }, 10000); // Check every 10 seconds\n    }\n  }\n\n  /**\n   * Optimize memory usage\n   */\n  private static optimizeMemory(): void {\n    // Clear unused observers\n    this.observers.forEach((observer, key) => {\n      if (key !== 'lazy-loading') {\n        observer.disconnect();\n        this.observers.delete(key);\n      }\n    });\n\n    // Force garbage collection if available\n    if ('gc' in window) {\n      (window as any).gc();\n    }\n  }\n\n  /**\n   * Get performance metrics\n   */\n  static getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset metrics\n   */\n  static resetMetrics(): void {\n    this.metrics = {\n      renderTime: 0,\n      interactionTime: 0,\n      scrollPerformance: 0\n    };\n  }\n\n  /**\n   * Add CSS optimizations for mobile\n   */\n  static addMobileCSSOptimizations(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Mobile Performance Optimizations */\n      * {\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      .scroll-hidden {\n        visibility: hidden !important;\n      }\n\n      /* Optimize animations for mobile */\n      @media (max-width: 767px) {\n        * {\n          animation-duration: 0.2s !important;\n          transition-duration: 0.2s !important;\n        }\n\n        /* Reduce motion for better performance */\n        @media (prefers-reduced-motion: reduce) {\n          * {\n            animation-duration: 0.01ms !important;\n            animation-iteration-count: 1 !important;\n            transition-duration: 0.01ms !important;\n          }\n        }\n\n        /* Optimize transforms */\n        .unit-card,\n        .tab-nav-item,\n        .btn {\n          will-change: transform;\n          transform: translateZ(0);\n        }\n\n        /* Optimize scrolling */\n        .combat-log,\n        .unit-family-content,\n        .main-content {\n          -webkit-overflow-scrolling: touch;\n          overflow-scrolling: touch;\n          will-change: scroll-position;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Cleanup performance monitoring\n   */\n  static cleanup(): void {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n}\n\n// Auto-initialize on mobile\nif (mobileLayoutManager.isMobile()) {\n  document.addEventListener('DOMContentLoaded', () => {\n    MobilePerformanceManager.initialize();\n    MobilePerformanceManager.addMobileCSSOptimizations();\n  });\n}\n\n// Cleanup when switching away from mobile\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobilePerformanceManager.cleanup();\n  } else {\n    MobilePerformanceManager.initialize();\n    MobilePerformanceManager.addMobileCSSOptimizations();\n  }\n});\n","/**\n * Mobile accessibility enhancements\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\n/**\n * Mobile Accessibility Manager\n */\nexport class MobileAccessibilityManager {\n  private static focusTracker: HTMLElement | null = null;\n  private static announcer: HTMLElement | null = null;\n\n  /**\n   * Initialize mobile accessibility features\n   */\n  static initialize(): void {\n    this.createScreenReaderAnnouncer();\n    this.setupFocusManagement();\n    this.enhanceTabNavigation();\n    this.addTouchAccessibility();\n    this.setupKeyboardNavigation();\n  }\n\n  /**\n   * Create screen reader announcer\n   */\n  private static createScreenReaderAnnouncer(): void {\n    if (this.announcer) return;\n\n    this.announcer = document.createElement('div');\n    this.announcer.setAttribute('aria-live', 'polite');\n    this.announcer.setAttribute('aria-atomic', 'true');\n    this.announcer.className = 'sr-only';\n    this.announcer.style.cssText = `\n      position: absolute !important;\n      width: 1px !important;\n      height: 1px !important;\n      padding: 0 !important;\n      margin: -1px !important;\n      overflow: hidden !important;\n      clip: rect(0, 0, 0, 0) !important;\n      white-space: nowrap !important;\n      border: 0 !important;\n    `;\n\n    document.body.appendChild(this.announcer);\n  }\n\n  /**\n   * Announce message to screen readers\n   */\n  static announce(message: string, priority: 'polite' | 'assertive' = 'polite'): void {\n    if (!this.announcer) this.createScreenReaderAnnouncer();\n\n    this.announcer!.setAttribute('aria-live', priority);\n    this.announcer!.textContent = message;\n\n    // Clear after announcement\n    setTimeout(() => {\n      if (this.announcer) {\n        this.announcer.textContent = '';\n      }\n    }, 1000);\n  }\n\n  /**\n   * Setup focus management for mobile\n   */\n  private static setupFocusManagement(): void {\n    // Track focus for mobile navigation\n    document.addEventListener('focusin', (e) => {\n      this.focusTracker = e.target as HTMLElement;\n    });\n\n    // Handle focus when switching tabs on mobile\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible' && mobileLayoutManager.isMobile()) {\n        this.restoreFocus();\n      }\n    });\n  }\n\n  /**\n   * Restore focus to appropriate element\n   */\n  private static restoreFocus(): void {\n    if (this.focusTracker && document.contains(this.focusTracker)) {\n      this.focusTracker.focus();\n    } else {\n      // Focus first interactive element in current section\n      const activeSection = document.querySelector('.main-content > :not(.hidden)');\n      if (activeSection) {\n        const firstInteractive = activeSection.querySelector('button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        if (firstInteractive) {\n          (firstInteractive as HTMLElement).focus();\n        }\n      }\n    }\n  }\n\n  /**\n   * Enhance tab navigation for mobile\n   */\n  private static enhanceTabNavigation(): void {\n    const tabContainer = document.querySelector('.mobile-tab-navigation');\n    if (!tabContainer) return;\n\n    // Add ARIA labels and roles\n    tabContainer.setAttribute('role', 'tablist');\n    tabContainer.setAttribute('aria-label', 'Main navigation');\n\n    const tabs = tabContainer.querySelectorAll('.tab-nav-item');\n    tabs.forEach((tab, index) => {\n      tab.setAttribute('role', 'tab');\n      tab.setAttribute('aria-selected', index === 0 ? 'true' : 'false');\n      tab.setAttribute('tabindex', index === 0 ? '0' : '-1');\n      \n      const sectionId = tab.getAttribute('data-section');\n      if (sectionId) {\n        tab.setAttribute('aria-controls', sectionId);\n        tab.id = `tab-${sectionId}`;\n      }\n\n      // Add keyboard navigation\n      tab.addEventListener('keydown', (e) => {\n        this.handleTabKeydown(e as KeyboardEvent, tabs, index);\n      });\n\n      // Announce tab changes\n      tab.addEventListener('click', () => {\n        const label = tab.querySelector('.tab-label')?.textContent || 'Section';\n        this.announce(`Switched to ${label} section`);\n        this.updateTabAria(tabs, index);\n      });\n    });\n  }\n\n  /**\n   * Handle keyboard navigation in tabs\n   */\n  private static handleTabKeydown(e: KeyboardEvent, tabs: NodeListOf<Element>, currentIndex: number): void {\n    let newIndex = currentIndex;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        newIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        newIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;\n        break;\n      case 'Home':\n        e.preventDefault();\n        newIndex = 0;\n        break;\n      case 'End':\n        e.preventDefault();\n        newIndex = tabs.length - 1;\n        break;\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n        (tabs[currentIndex] as HTMLElement).click();\n        return;\n    }\n\n    if (newIndex !== currentIndex) {\n      this.updateTabAria(tabs, newIndex);\n      (tabs[newIndex] as HTMLElement).focus();\n    }\n  }\n\n  /**\n   * Update ARIA attributes for tabs\n   */\n  private static updateTabAria(tabs: NodeListOf<Element>, activeIndex: number): void {\n    tabs.forEach((tab, index) => {\n      tab.setAttribute('aria-selected', index === activeIndex ? 'true' : 'false');\n      tab.setAttribute('tabindex', index === activeIndex ? '0' : '-1');\n    });\n  }\n\n  /**\n   * Add touch accessibility features\n   */\n  private static addTouchAccessibility(): void {\n    // Add touch feedback for screen readers\n    document.addEventListener('touchstart', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.matches('button, .unit-card, .tab-nav-item')) {\n        target.setAttribute('aria-pressed', 'true');\n      }\n    }, { passive: true });\n\n    document.addEventListener('touchend', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.matches('button, .unit-card, .tab-nav-item')) {\n        target.removeAttribute('aria-pressed');\n      }\n    }, { passive: true });\n\n    // Add double-tap to activate for complex elements\n    let lastTap = 0;\n    document.addEventListener('touchend', (e) => {\n      const currentTime = new Date().getTime();\n      const tapLength = currentTime - lastTap;\n      \n      if (tapLength < 500 && tapLength > 0) {\n        const target = e.target as HTMLElement;\n        if (target.matches('.unit-card, .army-composition')) {\n          this.announce('Double tap to activate', 'assertive');\n        }\n      }\n      lastTap = currentTime;\n    });\n  }\n\n  /**\n   * Setup keyboard navigation for mobile\n   */\n  private static setupKeyboardNavigation(): void {\n    // Add skip links for mobile\n    this.addSkipLinks();\n\n    // Handle escape key to close modals/sheets\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        const activeModal = document.querySelector('.bottom-sheet.visible, .mobile-loading-overlay.visible');\n        if (activeModal) {\n          e.preventDefault();\n          this.announce('Modal closed');\n          // Trigger close event\n          const closeBtn = activeModal.querySelector('.bottom-sheet-close');\n          if (closeBtn) {\n            (closeBtn as HTMLElement).click();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Add skip links for mobile navigation\n   */\n  private static addSkipLinks(): void {\n    const skipLinks = document.createElement('div');\n    skipLinks.className = 'skip-links';\n    skipLinks.innerHTML = `\n      <a href=\"#main-content\" class=\"skip-link\">Skip to main content</a>\n      <a href=\"#mobile-navigation\" class=\"skip-link\">Skip to navigation</a>\n    `;\n\n    document.body.insertBefore(skipLinks, document.body.firstChild);\n\n    // Add main content ID if not present\n    const mainContent = document.querySelector('.main-content');\n    if (mainContent && !mainContent.id) {\n      mainContent.id = 'main-content';\n    }\n\n    // Add navigation ID if not present\n    const navigation = document.querySelector('.mobile-tab-navigation');\n    if (navigation && !navigation.id) {\n      navigation.id = 'mobile-navigation';\n    }\n  }\n\n  /**\n   * Enhance form accessibility for mobile\n   */\n  static enhanceFormAccessibility(): void {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(form => {\n      // Add form labels and descriptions\n      const inputs = form.querySelectorAll('input, select, textarea');\n      inputs.forEach(input => {\n        const label = form.querySelector(`label[for=\"${input.id}\"]`);\n        if (!label && input.id) {\n          // Create label if missing\n          const newLabel = document.createElement('label');\n          newLabel.setAttribute('for', input.id);\n          newLabel.textContent = input.getAttribute('placeholder') || 'Input field';\n          newLabel.className = 'sr-only';\n          input.parentNode?.insertBefore(newLabel, input);\n        }\n\n        // Add required field announcements\n        if (input.hasAttribute('required')) {\n          input.setAttribute('aria-required', 'true');\n          input.addEventListener('invalid', () => {\n            this.announce('Required field is empty', 'assertive');\n          });\n        }\n      });\n\n      // Announce form submission\n      form.addEventListener('submit', () => {\n        this.announce('Form submitted');\n      });\n    });\n  }\n\n  /**\n   * Add ARIA labels to dynamic content\n   */\n  static addDynamicLabels(): void {\n    // Label unit cards\n    const unitCards = document.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      const unitName = card.querySelector('.unit-name')?.textContent;\n      if (unitName && !card.getAttribute('aria-label')) {\n        card.setAttribute('aria-label', `Unit: ${unitName}`);\n        card.setAttribute('role', 'button');\n      }\n    });\n\n    // Label army compositions\n    const compositions = document.querySelectorAll('.army-composition');\n    compositions.forEach((comp, index) => {\n      if (!comp.getAttribute('aria-label')) {\n        comp.setAttribute('aria-label', `Army composition ${index + 1}`);\n        comp.setAttribute('role', 'article');\n      }\n    });\n\n    // Label combat log entries\n    const combatActions = document.querySelectorAll('.combat-action');\n    combatActions.forEach((action, index) => {\n      if (!action.getAttribute('aria-label')) {\n        const actionText = action.textContent?.substring(0, 50) || 'Combat action';\n        action.setAttribute('aria-label', `Combat action ${index + 1}: ${actionText}`);\n      }\n    });\n  }\n\n  /**\n   * Cleanup accessibility features\n   */\n  static cleanup(): void {\n    if (this.announcer && this.announcer.parentNode) {\n      this.announcer.parentNode.removeChild(this.announcer);\n      this.announcer = null;\n    }\n\n    const skipLinks = document.querySelector('.skip-links');\n    if (skipLinks && skipLinks.parentNode) {\n      skipLinks.parentNode.removeChild(skipLinks);\n    }\n  }\n}\n\n// Auto-initialize on mobile\nif (mobileLayoutManager.isMobile()) {\n  document.addEventListener('DOMContentLoaded', () => {\n    MobileAccessibilityManager.initialize();\n  });\n}\n\n// Cleanup when switching away from mobile\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobileAccessibilityManager.cleanup();\n  } else {\n    MobileAccessibilityManager.initialize();\n  }\n});\n","/**\n * Main application component for the TotalBattle Army Calculator\n * Updated to use our validated unit data and stacking optimization algorithm\n */\n\nimport { Unit, OptimizationConstraints, ArmyComposition } from '../../types/units';\nimport { UnitLoader } from '../../services/unitLoader';\nimport { StackingOptimizer } from '../../services/stackingOptimizer';\nimport { DamageOptimizer, DamageOptimizationConstraints } from '../../services/damageOptimizer';\nimport { BattleSimulationComponent } from '../BattleSimulation/BattleSimulationComponent';\nimport { ManualBattleSimulationComponent } from '../BattleSimulation/ManualBattleSimulationComponent';\nimport { EnemyUnitManager } from '../EnemyUnits/EnemyUnitManager';\nimport { mobileLayoutManager, TouchInteractionManager, MobileCSSManager } from '../../utils/mobileUtils';\nimport { responsiveNavigation } from '../../utils/responsiveNavigation';\nimport { MobileUIPatterns } from '../../utils/mobileUIPatterns';\nimport { MobilePerformanceManager } from '../../utils/mobilePerformance';\nimport { MobileAccessibilityManager } from '../../utils/mobileAccessibility';\n\nexport class ArmyCalculatorApp {\n  private container: HTMLElement | null = null;\n  private unitLoader: UnitLoader;\n  private optimizer: StackingOptimizer | null = null;\n  private damageOptimizer: DamageOptimizer | null = null;\n  private selectedUnits: Set<string> = new Set();\n  private mercenaryLimits: Record<string, number> = {};\n  private battleSimulation: BattleSimulationComponent | null = null;\n  private manualBattleSimulation: ManualBattleSimulationComponent | null = null;\n  private currentOptimizedArmy: ArmyComposition | null = null;\n  private currentMode: 'stacking' | 'damage' | 'enemy-units' | 'manual-battle' = 'stacking';\n  private enemyUnitManager: EnemyUnitManager | null = null;\n  private selectedEnemyUnits: any[] = [];\n  private currentEnemyUnitSelector: any = null;\n  private currentEnemyUnitSelectorContainer: HTMLElement | null = null;\n\n  constructor() {\n    this.unitLoader = new UnitLoader();\n  }\n\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    this.render();\n    this.attachEventListeners();\n    await this.loadInitialData();\n\n    // Initialize mobile optimizations\n    this.initializeMobileOptimizations();\n\n    // Initialize responsive navigation\n    responsiveNavigation.initialize();\n\n    // Initialize Phase 3 mobile enhancements\n    this.initializeAdvancedMobileFeatures();\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"army-calculator\">\n        <header class=\"header\">\n          <h1>🏰 TotalBattle Army Calculator</h1>\n          <p class=\"subtitle\">Optimize your army composition for maximum effectiveness</p>\n\n          <!-- Mode Switcher -->\n          <div class=\"mode-switcher\">\n            <div class=\"mode-tabs\">\n              <button id=\"stacking-mode-btn\" class=\"mode-tab active\" data-mode=\"stacking\">\n                <span class=\"mode-icon\">🛡️</span>\n                <span class=\"mode-label\">Stacking Optimizer</span>\n                <span class=\"mode-desc\">Maximize budget usage</span>\n              </button>\n              <button id=\"damage-mode-btn\" class=\"mode-tab\" data-mode=\"damage\">\n                <span class=\"mode-icon\">⚔️</span>\n                <span class=\"mode-label\">Damage Optimizer</span>\n                <span class=\"mode-desc\">Maximize damage output</span>\n              </button>\n              <button id=\"enemy-units-btn\" class=\"mode-tab\" data-mode=\"enemy-units\">\n                <span class=\"mode-icon\">👹</span>\n                <span class=\"mode-label\">Enemy Units</span>\n                <span class=\"mode-desc\">Manage enemy units</span>\n              </button>\n              <button id=\"manual-battle-btn\" class=\"mode-tab\" data-mode=\"manual-battle\">\n                <span class=\"mode-icon\">⚔️</span>\n                <span class=\"mode-label\">Manual Battle</span>\n                <span class=\"mode-desc\">Custom battle simulation</span>\n              </button>\n            </div>\n          </div>\n        </header>\n\n        <main class=\"main-content\">\n          <!-- Army Configuration Section -->\n          <section class=\"card main-config-section\" id=\"config-section\">\n            <h1 class=\"main-title\" id=\"config-title\">⚔️ Army Configuration</h1>\n\n            <!-- Mode-specific description -->\n            <div class=\"mode-description\" id=\"mode-description\">\n              <p id=\"stacking-description\" class=\"mode-desc-text\">\n                Configure your army to maximize budget usage with optimal health stacking.\n              </p>\n              <p id=\"damage-description\" class=\"mode-desc-text hidden\">\n                Configure your army to maximize damage output against enemy forces.\n              </p>\n            </div>\n\n            <div class=\"config-grid\">\n              <!-- Resource Constraints -->\n              <div class=\"config-group resource-constraints\">\n                <h2 class=\"section-title\">💰 Resource Constraints</h2>\n                <div class=\"input-group\">\n                  <label for=\"leadership-budget\" class=\"input-label\">Leadership Points:</label>\n                  <input type=\"number\" id=\"leadership-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"dominance-budget\" class=\"input-label\">Dominance Points:</label>\n                  <input type=\"number\" id=\"dominance-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n\n                <!-- Damage Optimization Controls -->\n                <div class=\"damage-optimization-controls hidden\" id=\"damage-controls\">\n                  <div class=\"input-group\">\n                    <label for=\"enemy-count\" class=\"input-label\">Enemy Groups:</label>\n                    <input type=\"number\" id=\"enemy-count\" min=\"1\" max=\"20\" value=\"5\" class=\"input large-input\">\n                    <small class=\"input-help\">Number of enemy groups to optimize against</small>\n                  </div>\n                  <div class=\"input-group\">\n                    <label for=\"max-combinations\" class=\"input-label\">Max Combinations:</label>\n                    <input type=\"number\" id=\"max-combinations\" min=\"10\" max=\"200\" value=\"50\" class=\"input large-input\">\n                    <small class=\"input-help\">Performance limit (higher = more thorough but slower)</small>\n                  </div>\n                  <div class=\"input-group\">\n                    <label class=\"input-label\">Enemy Configuration:</label>\n                    <button id=\"select-enemy-units-btn\" class=\"btn btn-secondary\">\n                      👹 Select Enemy Units\n                    </button>\n                    <small class=\"input-help\">Choose specific enemy units for battle optimization</small>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Available Units -->\n              <div class=\"config-group unit-selection-group\">\n                <h2 class=\"section-title\">🛡️ Available Units</h2>\n                <div class=\"unit-selection\">\n                  <div class=\"unit-controls\">\n                    <div class=\"search-box\">\n                      <input type=\"text\" id=\"unit-search\" placeholder=\"Search units...\" class=\"input\">\n                    </div>\n                    <div class=\"filter-tabs\">\n                      <button class=\"filter-tab active\" data-filter=\"all\">All (101)</button>\n                      <button class=\"filter-tab\" data-filter=\"Guardsmen\">Guardsmen</button>\n                      <button class=\"filter-tab\" data-filter=\"Specialists\">Specialists</button>\n                      <button class=\"filter-tab\" data-filter=\"Engineer Corps\">Engineer Corps</button>\n                      <button class=\"filter-tab\" data-filter=\"Monsters\">Monsters</button>\n                      <button class=\"filter-tab\" data-filter=\"Mercenaries\">Mercenaries</button>\n                    </div>\n                    <div class=\"unit-type-filters\">\n                      <select id=\"unit-type-filter\" class=\"input\">\n                        <option value=\"\">All Unit Types</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div class=\"selected-units-summary\">\n                    <span id=\"selected-count\">0 units selected</span>\n                    <button id=\"select-all-visible\" class=\"btn btn-sm\">Select All Visible</button>\n                    <button id=\"clear-selection\" class=\"btn btn-sm\">Clear All</button>\n                  </div>\n                  <div id=\"unit-groups\" class=\"unit-groups\"></div>\n                </div>\n              </div>\n\n              <!-- Mercenary Limits -->\n              <div class=\"config-group mercenary-group\">\n                <h2 class=\"section-title\">🗡️ Mercenary Limits</h2>\n                <div id=\"mercenary-limits\" class=\"mercenary-limits\">\n                  <p class=\"text-muted\">Select mercenary units to set limits</p>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"action-buttons\">\n              <button id=\"optimize-btn\" class=\"btn btn-success large-btn\" disabled>\n                <span id=\"optimize-btn-text\">🚀 Optimize Army</span>\n              </button>\n              <button id=\"clear-btn\" class=\"btn btn-secondary large-btn\">🗑️ Clear Selection</button>\n            </div>\n          </section>\n\n          <!-- Results Section -->\n          <section class=\"card hidden\" id=\"results-section\">\n            <h2 id=\"results-title\">🎯 Optimization Results</h2>\n\n            <div id=\"optimization-stats\" class=\"optimization-stats\"></div>\n\n            <!-- Stacking Results -->\n            <div id=\"stacking-results\" class=\"results-container\">\n              <div id=\"army-compositions\" class=\"army-compositions\"></div>\n            </div>\n\n            <!-- Damage Results -->\n            <div id=\"damage-results\" class=\"results-container hidden\">\n              <div id=\"damage-army-list\" class=\"damage-army-list\"></div>\n\n              <!-- Selected Army Details -->\n              <div id=\"selected-army-details\" class=\"selected-army-details hidden\">\n                <h3>📋 Selected Army Details</h3>\n                <div id=\"selected-army-composition\" class=\"selected-army-composition\"></div>\n              </div>\n            </div>\n          </section>\n\n          <!-- Enemy Units Management Section -->\n          <section class=\"card hidden\" id=\"enemy-units-section\">\n            <h2>👹 Enemy Units Management</h2>\n            <div id=\"enemy-units-container\">\n              <!-- Enemy units manager component will be mounted here -->\n            </div>\n          </section>\n\n          <!-- Manual Battle Simulation Section -->\n          <section class=\"card hidden\" id=\"manual-battle-section\">\n            <div id=\"manual-battle-container\">\n              <!-- Manual battle simulation component will be mounted here -->\n            </div>\n          </section>\n\n          <!-- Battle Simulation Section -->\n          <div id=\"battle-simulation-container\" class=\"hidden\">\n            <!-- Battle simulation component will be mounted here -->\n          </div>\n\n        </main>\n\n        <!-- Loading Modal -->\n        <div id=\"loading-modal\" class=\"modal hidden\">\n          <div class=\"modal-content\">\n            <div class=\"loading-spinner\"></div>\n            <p>Optimizing army compositions...</p>\n          </div>\n        </div>\n\n        <footer class=\"footer\">\n          <p>Built for TotalBattle strategy optimization</p>\n        </footer>\n      </div>\n    `;\n\n    this.addUnitSelectionStyles();\n  }\n\n  /**\n   * Add CSS styles for the unit selection component\n   */\n  private addUnitSelectionStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Main Layout Improvements */\n      .main-config-section {\n        margin-bottom: 3rem;\n      }\n\n      .main-title {\n        font-size: 2.5rem;\n        margin-bottom: 2rem;\n        color: #2c3e50;\n        text-align: center;\n        font-weight: 700;\n      }\n\n      .section-title {\n        font-size: 1.5rem;\n        margin-bottom: 1.5rem;\n        color: #34495e;\n        font-weight: 600;\n        border-bottom: 2px solid #3498db;\n        padding-bottom: 0.5rem;\n      }\n\n      .config-grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 3rem;\n        margin-bottom: 2rem;\n      }\n\n      .config-group {\n        padding: 1.5rem;\n        background: #f8f9fa;\n        border-radius: 8px;\n        border: 1px solid #e9ecef;\n      }\n\n      .resource-constraints {\n        background: linear-gradient(135deg, #fff5f5 0%, #f8f9fa 100%);\n      }\n\n      .unit-selection-group {\n        background: linear-gradient(135deg, #f0f8ff 0%, #f8f9fa 100%);\n      }\n\n      .mercenary-group {\n        background: linear-gradient(135deg, #fff8f0 0%, #f8f9fa 100%);\n        margin-top: 2rem;\n      }\n\n      .input-group {\n        margin-bottom: 1.5rem;\n      }\n\n      .input-label {\n        display: block;\n        font-size: 1.2rem;\n        font-weight: 600;\n        margin-bottom: 0.75rem;\n        color: #2c3e50;\n      }\n\n      .large-input {\n        font-size: 1.2rem;\n        padding: 0.75rem 1rem;\n        border: 2px solid #bdc3c7;\n        border-radius: 6px;\n        width: 200px;\n        transition: border-color 0.3s;\n      }\n\n      .large-input:focus {\n        border-color: #3498db;\n        outline: none;\n        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\n      }\n\n      .action-buttons {\n        display: flex;\n        gap: 1.5rem;\n        justify-content: center;\n        margin-top: 2rem;\n        padding-top: 2rem;\n        border-top: 2px solid #ecf0f1;\n      }\n\n      .large-btn {\n        font-size: 1.3rem;\n        padding: 1rem 2rem;\n        border-radius: 8px;\n        font-weight: 600;\n        min-width: 200px;\n        transition: all 0.3s;\n      }\n\n      .large-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      }\n\n      /* Compact Data Section */\n      .compact-data-section {\n        margin-top: 3rem;\n        padding: 1rem;\n        background: #f8f9fa;\n        border: 1px solid #dee2e6;\n      }\n\n      .compact-data-section h3 {\n        font-size: 1.1rem;\n        margin-bottom: 1rem;\n        color: #6c757d;\n      }\n\n\n\n      .data-table {\n        width: 100%;\n        border-collapse: collapse;\n        font-size: 0.9rem;\n      }\n\n      .data-table th,\n      .data-table td {\n        padding: 0.5rem;\n        text-align: center;\n        border: 1px solid #dee2e6;\n      }\n\n      .data-table th {\n        background: #e9ecef;\n        font-weight: 600;\n        color: #495057;\n      }\n\n      .data-table td {\n        background: white;\n      }\n\n      /* Unit Selection Styles */\n      .unit-controls {\n        display: flex;\n        flex-direction: column;\n        gap: 1.5rem;\n        margin-bottom: 1.5rem;\n      }\n\n      .filter-tabs {\n        display: flex;\n        gap: 0.5rem;\n        flex-wrap: wrap;\n      }\n\n      .filter-tab {\n        padding: 0.5rem 1rem;\n        border: 1px solid #ddd;\n        background: white;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 0.9rem;\n        transition: all 0.2s;\n      }\n\n      .filter-tab:hover {\n        background: #f5f5f5;\n      }\n\n      .filter-tab.active {\n        background: #007bff;\n        color: white;\n        border-color: #007bff;\n      }\n\n      .unit-type-filters {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .selected-units-summary {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #f8f9fa;\n        border-radius: 4px;\n        font-size: 0.9rem;\n      }\n\n      .selected-units-summary .btn {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.8rem;\n      }\n\n      .unit-groups {\n        max-height: 500px;\n        overflow-y: auto;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n      }\n\n      /* Main Category Styles */\n      .main-category {\n        border-bottom: 2px solid #ddd;\n      }\n\n      .main-category:last-child {\n        border-bottom: none;\n      }\n\n      .main-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 1rem;\n        background: #e9ecef;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .main-category-header:hover {\n        background: #dee2e6;\n      }\n\n      .category-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .category-title h3 {\n        margin: 0;\n        font-size: 1.1rem;\n        color: #333;\n      }\n\n      .main-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .main-category-content.collapsed {\n        display: none;\n      }\n\n      /* Sub Category Styles */\n      .sub-category {\n        border-bottom: 1px solid #eee;\n        margin-left: 1rem;\n      }\n\n      .sub-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .sub-category-header:hover {\n        background: #f1f3f4;\n      }\n\n      .subcategory-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .subcategory-title h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #444;\n      }\n\n      .sub-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .sub-category-content.collapsed {\n        display: none;\n      }\n\n      /* Unit Family Styles */\n      .unit-family {\n        border-bottom: 1px solid #f0f0f0;\n        margin-left: 1rem;\n      }\n\n      .unit-family-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #fafbfc;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .unit-family-header:hover {\n        background: #f5f6f7;\n      }\n\n      .family-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .family-title h5 {\n        margin: 0;\n        font-size: 0.9rem;\n        color: #555;\n      }\n\n      .unit-family-content {\n        transition: all 0.3s ease;\n      }\n\n      .unit-family-content.collapsed {\n        display: none;\n      }\n\n      /* Expand Icons */\n      .expand-icon {\n        font-size: 0.8rem;\n        color: #666;\n        transition: transform 0.2s;\n      }\n\n      /* Action Buttons */\n      .category-actions,\n      .subcategory-actions,\n      .family-actions {\n        display: flex;\n        gap: 0.25rem;\n      }\n\n      .unit-group-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        border-bottom: 1px solid #eee;\n      }\n\n      .group-title {\n        display: flex;\n        flex-direction: column;\n        gap: 0.25rem;\n      }\n\n      .hierarchy {\n        font-size: 0.75rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      .unit-group-header h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #333;\n      }\n\n      .group-actions {\n        display: flex;\n        gap: 0.5rem;\n      }\n\n      .btn-xs {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.75rem;\n        border-radius: 3px;\n      }\n\n      /* Unit Cards Grid */\n      .unit-family-content {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 0.5rem;\n        padding: 0.75rem;\n        background: white;\n      }\n\n      /* Mobile responsive grid adjustments */\n      @media (max-width: 767px) {\n        .unit-family-content {\n          grid-template-columns: 1fr;\n          gap: 0.75rem;\n          padding: 1rem;\n        }\n\n        .unit-card {\n          min-height: 48px;\n          padding: 1rem;\n        }\n\n        .unit-name {\n          font-size: 1rem;\n        }\n\n        .unit-cost {\n          font-size: 0.9rem;\n        }\n\n        .stat {\n          font-size: 0.9rem;\n        }\n      }\n\n      @media (min-width: 768px) and (max-width: 1023px) {\n        .unit-family-content {\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n          gap: 0.75rem;\n        }\n\n        .unit-card {\n          min-height: 44px;\n          padding: 0.875rem;\n        }\n      }\n\n      .unit-card {\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        padding: 0.75rem;\n        cursor: pointer;\n        transition: all 0.2s;\n        background: white;\n        /* Mobile touch optimizations */\n        min-height: 44px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n\n      .unit-card:hover {\n        border-color: #007bff;\n        box-shadow: 0 2px 4px rgba(0,123,255,0.1);\n      }\n\n      .unit-card:active {\n        transform: scale(0.98);\n        background: #f8fafc;\n      }\n\n      .unit-card.selected {\n        border-color: #28a745;\n        background: #f8fff9;\n        box-shadow: 0 2px 4px rgba(40,167,69,0.2);\n      }\n\n      .unit-card.selected .unit-name {\n        color: #1e7e34 !important; /* Dark green for better contrast on light green background */\n        font-weight: 700;\n      }\n\n      .unit-card.selected .unit-cost {\n        color: #155724 !important; /* Darker green for cost text */\n        font-weight: 600;\n      }\n\n      .unit-card.selected .stat {\n        color: #155724 !important; /* Darker green for stats */\n        font-weight: 500;\n      }\n\n      .unit-card.selected .unit-types {\n        color: #155724 !important; /* Darker green for unit types */\n        font-weight: 500;\n      }\n\n      .unit-card.touch-active {\n        transform: scale(0.98);\n        background: #f0f9ff;\n      }\n\n      .unit-card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 0.5rem;\n      }\n\n      .unit-name {\n        font-weight: 600;\n        color: #333;\n        font-size: 0.9rem;\n        line-height: 1.2;\n      }\n\n      .unit-cost {\n        font-size: 0.8rem;\n        color: #666;\n        white-space: nowrap;\n      }\n\n      .unit-stats {\n        display: flex;\n        gap: 1rem;\n        margin-bottom: 0.5rem;\n      }\n\n      .stat {\n        font-size: 0.8rem;\n        color: #555;\n      }\n\n      .unit-types {\n        font-size: 0.75rem;\n        color: #777;\n        font-style: italic;\n      }\n\n      .no-units {\n        text-align: center;\n        padding: 2rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 768px) {\n        .main-title {\n          font-size: 2rem;\n        }\n\n        .section-title {\n          font-size: 1.3rem;\n        }\n\n        .large-input {\n          width: 100%;\n          font-size: 1.1rem;\n        }\n\n        .action-buttons {\n          flex-direction: column;\n          align-items: center;\n        }\n\n        .large-btn {\n          width: 100%;\n          max-width: 300px;\n        }\n\n        .unit-family-content {\n          grid-template-columns: 1fr;\n        }\n\n        .filter-tabs {\n          flex-direction: column;\n        }\n\n        .selected-units-summary {\n          flex-direction: column;\n          gap: 0.5rem;\n          align-items: stretch;\n        }\n\n        .data-table {\n          font-size: 0.8rem;\n        }\n\n        .data-table th,\n        .data-table td {\n          padding: 0.3rem;\n        }\n      }\n\n      /* Damage Optimization Results Styling Fixes */\n      .damage-army-card .unit-name {\n        color: #2c3e50 !important; /* Dark text for better readability */\n        font-weight: 600;\n        font-size: 0.9rem;\n      }\n\n      .damage-army-card .unit-item {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n        padding: 0.25rem 0;\n        border-bottom: 1px solid #f0f0f0;\n      }\n\n      .damage-army-card .unit-item:last-child {\n        border-bottom: none;\n      }\n\n      .damage-army-card .unit-count {\n        font-weight: 700;\n        color: #27ae60;\n        min-width: 3rem;\n        text-align: right;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Load initial unit data\n   */\n  private async loadInitialData(): Promise<void> {\n    try {\n\n\n      await this.unitLoader.loadPresetUnits();\n\n\n\n      this.displayUnitList();\n      this.updateOptimizeButton();\n\n    } catch (error) {\n      console.error('Failed to load unit data:', error);\n    }\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    // Mode switcher\n    const stackingModeBtn = document.getElementById('stacking-mode-btn') as HTMLButtonElement;\n    const damageModeBtn = document.getElementById('damage-mode-btn') as HTMLButtonElement;\n    const enemyUnitsBtn = document.getElementById('enemy-units-btn') as HTMLButtonElement;\n\n    // Existing elements\n    const unitSearch = document.getElementById('unit-search') as HTMLInputElement;\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const clearBtn = document.getElementById('clear-btn') as HTMLButtonElement;\n    const selectAllVisible = document.getElementById('select-all-visible') as HTMLButtonElement;\n    const clearSelection = document.getElementById('clear-selection') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const selectEnemyUnitsBtn = document.getElementById('select-enemy-units-btn') as HTMLButtonElement;\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n\n    // Mode switcher event listeners\n    if (stackingModeBtn) {\n      stackingModeBtn.addEventListener('click', () => this.switchMode('stacking'));\n    }\n\n    if (damageModeBtn) {\n      damageModeBtn.addEventListener('click', () => this.switchMode('damage'));\n    }\n\n    if (enemyUnitsBtn) {\n      enemyUnitsBtn.addEventListener('click', () => this.switchMode('enemy-units'));\n    }\n\n    const manualBattleBtn = document.getElementById('manual-battle-btn');\n    if (manualBattleBtn) {\n      manualBattleBtn.addEventListener('click', () => this.switchMode('manual-battle'));\n    }\n\n    if (selectEnemyUnitsBtn) {\n      selectEnemyUnitsBtn.addEventListener('click', () => this.openEnemyUnitSelector());\n    }\n\n    if (unitSearch) {\n      unitSearch.addEventListener('input', () => this.filterAndDisplayUnits());\n    }\n\n    if (unitTypeFilter) {\n      unitTypeFilter.addEventListener('change', () => this.filterAndDisplayUnits());\n    }\n\n    if (optimizeBtn) {\n      optimizeBtn.addEventListener('click', () => this.optimizeArmy());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (selectAllVisible) {\n      selectAllVisible.addEventListener('click', () => this.selectAllVisible());\n    }\n\n    if (clearSelection) {\n      clearSelection.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (leadershipBudget) {\n      leadershipBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    if (dominanceBudget) {\n      dominanceBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    // Enemy groups count change listener for dynamic updates\n    if (enemyCountInput) {\n      enemyCountInput.addEventListener('input', () => this.handleEnemyGroupsChange());\n    }\n\n    // Filter tab listeners\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.classList.contains('filter-tab')) {\n        this.handleFilterTabClick(target);\n      }\n    });\n  }\n\n\n\n  /**\n   * Display unit list with initial setup\n   */\n  private displayUnitList(): void {\n    this.setupUnitTypeFilter();\n    this.updateFilterTabCounts();\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Setup unit type filter dropdown\n   */\n  private setupUnitTypeFilter(): void {\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    if (!unitTypeFilter) return;\n\n    const allTypes = this.unitLoader.getUniqueUnitTypes();\n    unitTypeFilter.innerHTML = '<option value=\"\">All Unit Types</option>';\n\n    allTypes.forEach(type => {\n      const option = document.createElement('option');\n      option.value = type;\n      option.textContent = type;\n      unitTypeFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Update filter tab counts\n   */\n  private updateFilterTabCounts(): void {\n    const allUnits = this.unitLoader.getAllUnits();\n    const tabs = document.querySelectorAll('.filter-tab');\n\n    tabs.forEach(tab => {\n      const filter = tab.getAttribute('data-filter');\n      let count = 0;\n\n      if (filter === 'all') {\n        count = allUnits.length;\n      } else {\n        count = allUnits.filter(unit => this.getMainCategory(unit) === filter).length;\n      }\n\n      tab.textContent = `${filter === 'all' ? 'All' : filter} (${count})`;\n    });\n  }\n\n  /**\n   * Handle filter tab clicks\n   */\n  private handleFilterTabClick(tab: HTMLElement): void {\n    // Update active tab\n    document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));\n    tab.classList.add('active');\n\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Filter and display units based on current filters\n   */\n  private filterAndDisplayUnits(): void {\n    const searchQuery = (document.getElementById('unit-search') as HTMLInputElement)?.value || '';\n    const activeTab = document.querySelector('.filter-tab.active')?.getAttribute('data-filter') || 'all';\n    const unitTypeFilter = (document.getElementById('unit-type-filter') as HTMLSelectElement)?.value || '';\n\n    let units = this.unitLoader.getAllUnits();\n\n    // Apply main category filter\n    if (activeTab !== 'all') {\n      units = units.filter(unit => this.getMainCategory(unit) === activeTab);\n    }\n\n    // Apply unit type filter\n    if (unitTypeFilter) {\n      units = units.filter(unit => unit.unit_types.includes(unitTypeFilter));\n    }\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      units = units.filter(unit =>\n        unit.name.toLowerCase().includes(query) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(query))\n      );\n    }\n\n    this.renderGroupedUnits(units);\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Render units in hierarchical tree structure\n   */\n  private renderGroupedUnits(units: Unit[]): void {\n    const unitGroupsElement = document.getElementById('unit-groups');\n    if (!unitGroupsElement) return;\n\n    unitGroupsElement.innerHTML = '';\n\n    if (units.length === 0) {\n      unitGroupsElement.innerHTML = '<div class=\"no-units\">No units match your filters</div>';\n      return;\n    }\n\n    // Create hierarchical tree structure\n    const hierarchicalGroups = this.createHierarchicalGroups(units);\n\n    // Render main categories\n    Object.entries(hierarchicalGroups).forEach(([mainCategory, subCategories]) => {\n      const mainElement = this.createMainCategoryElement(mainCategory, subCategories);\n      unitGroupsElement.appendChild(mainElement);\n    });\n\n    // Attach all event listeners after DOM is created\n    this.attachAllEventListeners(hierarchicalGroups);\n  }\n\n  /**\n   * Create hierarchical group structure for tree display\n   */\n  private createHierarchicalGroups(units: Unit[]): Record<string, Record<string, Record<string, Unit[]>>> {\n    const hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>> = {\n      'Guardsmen': {},\n      'Specialists': {},\n      'Engineer Corps': {},\n      'Monsters': {},\n      'Mercenaries': {}\n    };\n\n    units.forEach(unit => {\n      const mainCategory = this.getMainCategory(unit);\n      const subCategory = this.getSubCategory(unit);\n      const familyName = this.getUnitFamily(unit);\n\n      if (!hierarchicalGroups[mainCategory][subCategory]) {\n        hierarchicalGroups[mainCategory][subCategory] = {};\n      }\n      if (!hierarchicalGroups[mainCategory][subCategory][familyName]) {\n        hierarchicalGroups[mainCategory][subCategory][familyName] = [];\n      }\n\n      hierarchicalGroups[mainCategory][subCategory][familyName].push(unit);\n    });\n\n    // Sort units within each family by strength\n    Object.values(hierarchicalGroups).forEach(subCategories => {\n      Object.values(subCategories).forEach(families => {\n        Object.values(families).forEach(units => {\n          units.sort((a, b) => a.strength - b.strength);\n        });\n      });\n    });\n\n    return hierarchicalGroups;\n  }\n\n  /**\n   * Determine main category for a unit based on actual unit_types\n   */\n  private getMainCategory(unit: Unit): string {\n    // Check if it's a mercenary first\n    if (unit.cost_type === 'Mercenary' || (unit.authority_cost ?? 0) > 0) {\n      return 'Mercenaries';\n    }\n\n    // Check unit types for category indicators (case-sensitive to match data)\n    const types = unit.unit_types;\n\n    // Engineer Corps: explicitly marked or siege engines\n    if (types.includes('Engineer corps') || types.includes('Siege engine')) {\n      return 'Engineer Corps';\n    }\n\n    // Guardsmen: explicitly marked as Guardsman\n    if (types.includes('Guardsman')) {\n      return 'Guardsmen';\n    }\n\n    // Specialists: explicitly marked as Specialist\n    if (types.includes('Specialist')) {\n      return 'Specialists';\n    }\n\n    // Monsters: non-human creatures (Beast, Dragon, Giant, Elemental, Flying creatures without Human)\n    if (types.includes('Beast') || types.includes('Dragon') || types.includes('Giant') ||\n        types.includes('Elemental') || types.includes('ELEMENTAL')) {\n      return 'Monsters';\n    }\n\n    // Flying units without Human are typically monsters\n    if (types.includes('Flying') && !types.includes('Human')) {\n      return 'Monsters';\n    }\n\n    // Remaining units are likely specialists or guardsmen\n    // If they have Human and basic combat types, they're probably guardsmen\n    if (types.includes('Human') && (types.includes('Melee') || types.includes('Ranged') || types.includes('Mounted'))) {\n      return 'Guardsmen';\n    }\n\n    // Default to Specialists for edge cases\n    return 'Specialists';\n  }\n\n  /**\n   * Determine subcategory for a unit based on combat role/type\n   */\n  private getSubCategory(unit: Unit): string {\n    const types = unit.unit_types;\n    const name = unit.name.toUpperCase();\n    const mainCategory = this.getMainCategory(unit);\n\n    // For Mercenaries, group by type\n    if (mainCategory === 'Mercenaries') {\n      if (types.includes('Guardsman')) return 'Elite Forces';\n      return 'Special Forces';\n    }\n\n    // For Engineer Corps, group by siege engine type\n    if (mainCategory === 'Engineer Corps') {\n      if (name.includes('CATAPULT')) return 'Catapults';\n      if (name.includes('BALLISTA')) return 'Ballistae';\n      if (name.includes('JOSEPHINE')) return 'Heavy Artillery';\n      if (types.includes('Siege engine')) return 'Siege Engines';\n    }\n\n    // For Monsters, group by creature type\n    if (mainCategory === 'Monsters') {\n      if (types.includes('Dragon')) return 'Dragons';\n      if (types.includes('Giant')) return 'Giants';\n      if (types.includes('Beast')) return 'Beasts';  // Flying Beasts go into Beasts\n      if (types.includes('Elemental') || types.includes('ELEMENTAL')) return 'Elementals';\n      if (types.includes('Flying')) return 'Flying';\n    }\n\n    // For Guardsmen and Specialists, group by combat role (your requested categories)\n    if (mainCategory === 'Guardsmen' || mainCategory === 'Specialists') {\n      if (types.includes('Ranged')) return 'Ranged';\n      if (types.includes('Melee')) return 'Melee';\n      if (types.includes('Mounted')) return 'Mounted';\n      if (types.includes('Flying')) return 'Flying';  // Flying Beasts go into Flying\n      if (types.includes('Beast')) return 'Flying';   // Non-flying Beasts also go into Flying for Specialists\n      if (types.includes('Scout')) return 'Scouts';\n    }\n\n    // Fallback groupings\n    if (types.includes('Human')) return 'Infantry';\n\n    return 'Other';\n  }\n\n  /**\n   * Get unit family name (base unit name without tier)\n   */\n  private getUnitFamily(unit: Unit): string {\n    // Extract base name by removing Roman numerals and common suffixes\n    let baseName = unit.name;\n\n    // Remove Roman numerals (I, II, III, IV, V, VI, VII)\n    baseName = baseName.replace(/\\s+(I{1,3}|IV|V|VI{0,2}|VII)$/, '');\n\n    // Handle special cases\n    if (baseName.includes('HEAVY ')) {\n      return baseName; // Keep \"HEAVY KNIGHT\", \"HEAVY HALBERDIER\", etc.\n    }\n\n    return baseName;\n  }\n\n  /**\n   * Create main category element (e.g., \"Guardsmen\")\n   */\n  private createMainCategoryElement(mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): HTMLElement {\n    const mainDiv = document.createElement('div');\n    mainDiv.className = 'main-category';\n\n    const totalUnits = this.countUnitsInCategory(subCategories);\n    const selectedUnits = this.countSelectedUnitsInCategory(subCategories);\n\n    mainDiv.innerHTML = `\n      <div class=\"main-category-header\" data-category=\"${mainCategory}\">\n        <div class=\"category-title\">\n          <h3>${mainCategory} (${selectedUnits}/${totalUnits})</h3>\n          <span class=\"expand-icon\">▼</span>\n        </div>\n        <div class=\"category-actions\">\n          <button class=\"btn btn-xs select-category\" data-category=\"${mainCategory}\">Select All</button>\n          <button class=\"btn btn-xs deselect-category\" data-category=\"${mainCategory}\">Deselect All</button>\n        </div>\n      </div>\n      <div class=\"main-category-content collapsed\">\n        ${Object.entries(subCategories).map(([subCategory, families]) =>\n          this.createSubCategoryHTML(mainCategory, subCategory, families)\n        ).join('')}\n      </div>\n    `;\n\n    return mainDiv;\n  }\n\n  /**\n   * Create sub category HTML string\n   */\n  private createSubCategoryHTML(mainCategory: string, subCategory: string, families: Record<string, Unit[]>): string {\n    const totalUnits = Object.values(families).reduce((sum, units) => sum + units.length, 0);\n    const selectedUnits = Object.values(families).reduce((sum, units) =>\n      sum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0);\n\n    return `\n      <div class=\"sub-category\" data-category=\"${mainCategory}\" data-subcategory=\"${subCategory}\">\n        <div class=\"sub-category-header\">\n          <div class=\"subcategory-title\">\n            <h4>${subCategory} (${selectedUnits}/${totalUnits})</h4>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"subcategory-actions\">\n            <button class=\"btn btn-xs select-subcategory\">Select All</button>\n            <button class=\"btn btn-xs deselect-subcategory\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"sub-category-content collapsed\">\n          ${Object.entries(families).map(([familyName, units]) =>\n            this.createUnitFamilyHTML(familyName, units)\n          ).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create unit family HTML string\n   */\n  private createUnitFamilyHTML(familyName: string, units: Unit[]): string {\n    const selectedUnits = units.filter(unit => this.selectedUnits.has(unit.name)).length;\n\n    return `\n      <div class=\"unit-family\" data-family=\"${familyName}\">\n        <div class=\"unit-family-header\">\n          <div class=\"family-title\">\n            <h5>${familyName} (${selectedUnits}/${units.length})</h5>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"family-actions\">\n            <button class=\"btn btn-xs select-family\">Select All</button>\n            <button class=\"btn btn-xs deselect-family\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"unit-family-content collapsed\">\n          ${units.map(unit => this.createUnitCard(unit)).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create a compact unit card\n   */\n  private createUnitCard(unit: Unit): string {\n    const isSelected = this.selectedUnits.has(unit.name);\n    const cost = this.getUnitCost(unit);\n\n    return `\n      <div class=\"unit-card ${isSelected ? 'selected' : ''}\" data-unit=\"${unit.name}\">\n        <div class=\"unit-card-header\">\n          <div class=\"unit-name\">${unit.name}</div>\n          <div class=\"unit-cost\">${unit.cost_type}: ${cost}</div>\n        </div>\n        <div class=\"unit-stats\">\n          <span class=\"stat\">HP: ${unit.health.toLocaleString()}</span>\n          <span class=\"stat\">STR: ${unit.strength.toLocaleString()}</span>\n        </div>\n        <div class=\"unit-types\">${unit.unit_types.slice(0, 3).join(', ')}${unit.unit_types.length > 3 ? '...' : ''}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Attach all event listeners after DOM is created\n   */\n  private attachAllEventListeners(hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>>): void {\n    // Attach main category listeners\n    document.querySelectorAll('.main-category').forEach((mainElement, index) => {\n      const mainCategories = Object.keys(hierarchicalGroups);\n      const mainCategory = mainCategories[index];\n      if (mainCategory) {\n        const subCategories = hierarchicalGroups[mainCategory];\n        this.attachMainCategoryListeners(mainElement as HTMLElement, mainCategory, subCategories);\n      }\n    });\n\n    // Attach sub category listeners\n    document.querySelectorAll('.sub-category').forEach((subElement) => {\n      const mainCategory = subElement.getAttribute('data-category');\n      const subCategory = subElement.getAttribute('data-subcategory');\n\n      if (mainCategory && subCategory && hierarchicalGroups[mainCategory]?.[subCategory]) {\n        const families = hierarchicalGroups[mainCategory][subCategory];\n        this.attachSubCategoryListeners(subElement as HTMLElement, families);\n      }\n    });\n\n    // Attach unit family listeners\n    document.querySelectorAll('.unit-family').forEach((familyElement) => {\n      const familyName = familyElement.getAttribute('data-family');\n\n      // Find the units for this family\n      let units: Unit[] = [];\n      Object.values(hierarchicalGroups).forEach(subCategories => {\n        Object.values(subCategories).forEach(families => {\n          if (families[familyName!]) {\n            units = families[familyName!];\n          }\n        });\n      });\n\n      if (units.length > 0) {\n        this.attachUnitFamilyListeners(familyElement as HTMLElement, units);\n      }\n    });\n  }\n\n  /**\n   * Count total units in a category\n   */\n  private countUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) => familySum + units.length, 0), 0);\n  }\n\n  /**\n   * Count selected units in a category\n   */\n  private countSelectedUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) =>\n        familySum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0), 0);\n  }\n\n  /**\n   * Attach event listeners to main category\n   */\n  private attachMainCategoryListeners(element: HTMLElement, mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): void {\n    const header = element.querySelector('.main-category-header') as HTMLElement;\n    const content = element.querySelector('.main-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing main-category elements for', mainCategory, { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Main category header clicked:', mainCategory, 'collapsed:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in category\n    const selectBtn = element.querySelector('.select-category') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-category') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInCategory(subCategories);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInCategory(subCategories);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to sub category\n   */\n  private attachSubCategoryListeners(element: HTMLElement, families: Record<string, Unit[]>): void {\n    const header = element.querySelector('.sub-category-header') as HTMLElement;\n    const content = element.querySelector('.sub-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing sub-category elements:', { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Sub-category header clicked, toggling:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in subcategory\n    const selectBtn = element.querySelector('.select-subcategory') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-subcategory') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInFamilies(families);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInFamilies(families);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to unit family\n   */\n  private attachUnitFamilyListeners(element: HTMLElement, units: Unit[]): void {\n    const header = element.querySelector('.unit-family-header') as HTMLElement;\n    const content = element.querySelector('.unit-family-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      if ((e.target as HTMLElement).classList.contains('btn')) return;\n\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in family\n    const selectBtn = element.querySelector('.select-family') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-family') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllUnits(units);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllUnits(units);\n      });\n    }\n\n    // Individual unit selection\n    const unitCards = element.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      card.addEventListener('click', () => {\n        const unitName = card.getAttribute('data-unit');\n        if (unitName) {\n          const unit = this.unitLoader.getUnitByName(unitName);\n          if (unit) {\n            this.toggleUnitSelection(unit);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Get unit cost for display\n   */\n  private getUnitCost(unit: Unit): number {\n    switch (unit.cost_type) {\n      case 'Leadership': return unit.leadership_cost ?? 0;\n      case 'Dominance': return unit.dominance_cost ?? 0;\n      case 'Authority':\n      case 'Mercenary': return unit.authority_cost ?? 0;\n      default: return 0;\n    }\n  }\n\n  /**\n   * Toggle unit selection\n   */\n  private toggleUnitSelection(unit: Unit): void {\n    if (this.selectedUnits.has(unit.name)) {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    } else {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        this.mercenaryLimits[unit.name] = 1; // Default limit\n      }\n    }\n\n    this.updateSelectionDisplay(); // Update selection without rebuilding\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n\n    // Update mobile FAB based on selection\n    if (mobileLayoutManager.isMobile()) {\n      this.addFloatingActionButton();\n    }\n  }\n\n  /**\n   * Update selection display without rebuilding the tree\n   */\n  private updateSelectionDisplay(): void {\n    // Update unit card selection states\n    document.querySelectorAll('.unit-card').forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        if (this.selectedUnits.has(unitName)) {\n          card.classList.add('selected');\n        } else {\n          card.classList.remove('selected');\n        }\n      }\n    });\n\n    // Update all counters in headers\n    this.updateAllCounters();\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Update all selection counters in headers\n   */\n  private updateAllCounters(): void {\n    // Update main category counters\n    document.querySelectorAll('.main-category').forEach((element, index) => {\n      const titleElement = element.querySelector('.category-title h3');\n      if (titleElement) {\n        const mainCategories = ['Guardsmen', 'Specialists', 'Engineer Corps', 'Monsters', 'Mercenaries'];\n        const mainCategory = mainCategories[index];\n        if (mainCategory) {\n          const { selected, total } = this.countUnitsInMainCategory(mainCategory);\n          const originalText = titleElement.textContent || '';\n          const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n          titleElement.textContent = `${baseText} (${selected}/${total})`;\n        }\n      }\n    });\n\n    // Update sub category counters\n    document.querySelectorAll('.sub-category').forEach(element => {\n      const titleElement = element.querySelector('.subcategory-title h4');\n      const mainCategory = element.getAttribute('data-category');\n      const subCategory = element.getAttribute('data-subcategory');\n\n      if (titleElement && mainCategory && subCategory) {\n        const { selected, total } = this.countUnitsInSubCategory(mainCategory, subCategory);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n\n    // Update family counters\n    document.querySelectorAll('.unit-family').forEach(element => {\n      const titleElement = element.querySelector('.family-title h5');\n      const familyName = element.getAttribute('data-family');\n\n      if (titleElement && familyName) {\n        const { selected, total } = this.countUnitsInFamily(familyName);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n  }\n\n  /**\n   * Count units in main category\n   */\n  private countUnitsInMainCategory(mainCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const categoryUnits = allUnits.filter(unit => this.getMainCategory(unit) === mainCategory);\n    const selectedCount = categoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: categoryUnits.length };\n  }\n\n  /**\n   * Count units in sub category\n   */\n  private countUnitsInSubCategory(mainCategory: string, subCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const subCategoryUnits = allUnits.filter(unit =>\n      this.getMainCategory(unit) === mainCategory && this.getSubCategory(unit) === subCategory\n    );\n    const selectedCount = subCategoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: subCategoryUnits.length };\n  }\n\n  /**\n   * Count units in family\n   */\n  private countUnitsInFamily(familyName: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const familyUnits = allUnits.filter(unit => this.getUnitFamily(unit) === familyName);\n    const selectedCount = familyUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: familyUnits.length };\n  }\n\n  /**\n   * Update selected units summary\n   */\n  private updateSelectedSummary(): void {\n    const selectedCountElement = document.getElementById('selected-count');\n    if (selectedCountElement) {\n      selectedCountElement.textContent = `${this.selectedUnits.size} units selected`;\n    }\n  }\n\n  /**\n   * Select all visible units\n   */\n  private selectAllVisible(): void {\n    const visibleUnitCards = document.querySelectorAll('.unit-card');\n    visibleUnitCards.forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        const unit = this.unitLoader.getUnitByName(unitName);\n        if (unit) {\n          this.selectedUnits.add(unit.name);\n          if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n            this.mercenaryLimits[unit.name] = 1;\n          }\n        }\n      }\n    });\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Select all units in a category\n   */\n  private selectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.selectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Deselect all units in a category\n   */\n  private deselectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.deselectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Select all units in families\n   */\n  private selectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.selectAllUnits(units);\n    });\n  }\n\n  /**\n   * Deselect all units in families\n   */\n  private deselectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.deselectAllUnits(units);\n    });\n  }\n\n  /**\n   * Select all units in array\n   */\n  private selectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        this.mercenaryLimits[unit.name] = 1;\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Deselect all units in array\n   */\n  private deselectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Update mercenary limits UI\n   */\n  private updateMercenaryLimits(): void {\n    const mercenaryLimitsElement = document.getElementById('mercenary-limits');\n    if (!mercenaryLimitsElement) return;\n\n    const mercenaryUnits = Array.from(this.selectedUnits)\n      .map(name => this.unitLoader.getUnitByName(name))\n      .filter(unit => unit && (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority'));\n\n    if (mercenaryUnits.length === 0) {\n      mercenaryLimitsElement.innerHTML = '<p class=\"text-muted\">Select mercenary units to set limits</p>';\n      return;\n    }\n\n    mercenaryLimitsElement.innerHTML = '';\n\n    mercenaryUnits.forEach(unit => {\n      if (!unit) return;\n\n      const mercItem = document.createElement('div');\n      mercItem.className = 'mercenary-item';\n\n      // Use different icon for Authority vs Mercenary units\n      const icon = unit.cost_type === 'Authority' ? '⚔️' : '🗡️';\n      const costDisplay = unit.cost_type === 'Authority' ? `AUTH: ${unit.authority_cost}` : `AUTH: ${unit.authority_cost}`;\n\n      mercItem.innerHTML = `\n        <div class=\"mercenary-label\">\n          <span class=\"unit-name\">${icon} ${unit.name}</span>\n          <span class=\"unit-stats\">(STR: ${unit.strength}, HP: ${unit.health}, ${costDisplay})</span>\n        </div>\n        <div class=\"mercenary-input\">\n          <label for=\"merc-${unit.name}\">Max Available:</label>\n          <input type=\"number\" id=\"merc-${unit.name}\" min=\"1\" max=\"100\" value=\"${this.mercenaryLimits[unit.name] || 1}\"\n                 data-unit=\"${unit.name}\" class=\"input\" placeholder=\"1\">\n        </div>\n      `;\n\n      const input = mercItem.querySelector('input') as HTMLInputElement;\n      input.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        this.mercenaryLimits[target.dataset.unit!] = parseInt(target.value) || 1;\n      });\n\n      mercenaryLimitsElement.appendChild(mercItem);\n    });\n  }\n\n\n\n  /**\n   * Update optimize button state\n   */\n  private updateOptimizeButton(): void {\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    if (!optimizeBtn || !leadershipBudget || !dominanceBudget) return;\n\n    const hasUnits = this.selectedUnits.size > 0;\n    const hasBudget = parseInt(leadershipBudget.value) > 0 ||\n                     parseInt(dominanceBudget.value) > 0 ||\n                     Object.keys(this.mercenaryLimits).length > 0;\n\n    optimizeBtn.disabled = !hasUnits || !hasBudget;\n  }\n\n  /**\n   * Optimize army composition\n   */\n  private async optimizeArmy(): Promise<void> {\n    try {\n      if (this.currentMode === 'stacking') {\n        this.showLoadingModal();\n        await this.optimizeForStacking();\n        this.hideLoadingModal();\n      } else {\n        // Damage optimization uses its own progress modal\n        await this.optimizeForDamage();\n      }\n\n    } catch (error) {\n      console.error('Optimization failed:', error);\n      alert('Optimization failed. Please check your inputs and try again.');\n\n      // Hide any open modals\n      this.hideLoadingModal();\n      this.hideProgressModal();\n    }\n  }\n\n  /**\n   * Optimize for stacking (original functionality)\n   */\n  private async optimizeForStacking(): Promise<void> {\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Array.from(this.selectedUnits));\n    this.optimizer = new StackingOptimizer(selectedUnitObjects);\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    const constraints: OptimizationConstraints = {\n      leadershipBudget: parseInt(leadershipBudget.value) || 0,\n      dominanceBudget: parseInt(dominanceBudget.value) || 0,\n      mercenaryLimits: { ...this.mercenaryLimits },\n      availableUnits: Array.from(this.selectedUnits)\n    };\n\n    const result = await this.optimizer.optimizeArmy(constraints);\n    this.displayStackingResults(result);\n  }\n\n  /**\n   * Optimize for damage output with progress feedback\n   */\n  private async optimizeForDamage(): Promise<void> {\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Array.from(this.selectedUnits));\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const enemyCount = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxCombinations = document.getElementById('max-combinations') as HTMLInputElement;\n\n    const constraints: DamageOptimizationConstraints = {\n      leadershipBudget: parseInt(leadershipBudget.value) || 0,\n      dominanceBudget: parseInt(dominanceBudget.value) || 0,\n      mercenaryLimits: { ...this.mercenaryLimits },\n      availableUnits: Array.from(this.selectedUnits),\n      enemyGroupCount: parseInt(enemyCount.value) || 5,\n      maxCombinations: parseInt(maxCombinations.value) || 50,\n      specificEnemyUnits: this.selectedEnemyUnits.length > 0 ? [...this.selectedEnemyUnits] : undefined\n    };\n\n    // Use async processing with progress feedback\n    await this.runDamageOptimizationWithProgress(constraints, selectedUnitObjects);\n  }\n\n  /**\n   * Run damage optimization with progress feedback using async processing\n   */\n  private async runDamageOptimizationWithProgress(\n    constraints: DamageOptimizationConstraints,\n    units: any[]\n  ): Promise<void> {\n    // Create abort controller for cancellation\n    this.optimizationAbortController = new AbortController();\n\n    // Show progress modal or mobile loading\n    if (mobileLayoutManager.isMobile()) {\n      MobileUIPatterns.showMobileLoading('Optimizing army composition...');\n    } else {\n      this.showProgressModal();\n    }\n\n    try {\n      // Initialize damage optimizer if not already done\n      if (!this.damageOptimizer) {\n        this.damageOptimizer = new DamageOptimizer();\n      }\n\n      // Add progress callback and abort signal to constraints\n      const enhancedConstraints = {\n        ...constraints,\n        signal: this.optimizationAbortController.signal,\n        onProgress: (progress: any) => {\n          this.updateProgressModal(progress.progress, progress.message, {\n            combinationsEvaluated: progress.combinationsEvaluated,\n            totalToEvaluate: progress.totalToEvaluate,\n            phase: progress.phase,\n            estimatedRemainingMs: progress.estimatedRemainingMs\n          });\n        }\n      };\n\n      // Run the optimization with real-time progress updates\n      const result = await this.damageOptimizer.optimizeForDamage(enhancedConstraints, units);\n\n      // Show completion briefly\n      await this.delay(500);\n\n      // Hide progress modal and show results\n      if (mobileLayoutManager.isMobile()) {\n        MobileUIPatterns.hideMobileLoading();\n      } else {\n        this.hideProgressModal();\n      }\n      this.displayDamageResults(result);\n\n    } catch (error) {\n      if (mobileLayoutManager.isMobile()) {\n        MobileUIPatterns.hideMobileLoading();\n      } else {\n        this.hideProgressModal();\n      }\n\n      if (error instanceof Error && error.message.includes('cancelled')) {\n        // User cancelled - don't show error\n        console.log('Optimization cancelled by user');\n      } else {\n        console.error('Damage optimization failed:', error);\n        alert(`Optimization failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n  }\n\n\n\n  /**\n   * Simple delay utility to allow UI updates\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Display stacking optimization results\n   */\n  private displayStackingResults(result: any): void {\n    const optimizationStats = document.getElementById('optimization-stats');\n    const armyCompositions = document.getElementById('army-compositions');\n    const resultsSection = document.getElementById('results-section');\n    const stackingResults = document.getElementById('stacking-results');\n    const damageResults = document.getElementById('damage-results');\n\n    if (!optimizationStats || !armyCompositions || !resultsSection) return;\n\n    // Show stacking results, hide damage results\n    if (stackingResults) stackingResults.classList.remove('hidden');\n    if (damageResults) damageResults.classList.add('hidden');\n\n    // Display optimization statistics\n    optimizationStats.innerHTML = `\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.compositions.length}</div>\n        <div class=\"stat-label\">Valid Solutions</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.totalCombinationsEvaluated.toLocaleString()}</div>\n        <div class=\"stat-label\">Combinations Tested</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${Math.round(result.executionTimeMs)}ms</div>\n        <div class=\"stat-label\">Execution Time</div>\n      </div>\n    `;\n\n    // Display army compositions\n    armyCompositions.innerHTML = '';\n\n    if (result.compositions.length === 0) {\n      armyCompositions.innerHTML = '<p class=\"text-center text-muted\">No valid army compositions found. Try adjusting your constraints.</p>';\n    } else {\n      result.compositions.forEach((composition: ArmyComposition, index: number) => {\n        const compositionDiv = this.createCompositionElement(composition, index + 1);\n        armyCompositions.appendChild(compositionDiv);\n      });\n    }\n\n    resultsSection.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('results-section');\n\n    // Store the best composition for potential battle simulation\n    if (result.compositions.length > 0) {\n      this.currentOptimizedArmy = result.compositions[0]; // Use the best composition\n      // Don't automatically show battle simulation in stacking mode\n      // Let the user navigate to it manually if they want to\n    }\n  }\n\n  /**\n   * Display damage optimization results\n   */\n  private displayDamageResults(result: any): void {\n    const optimizationStats = document.getElementById('optimization-stats');\n    const damageArmyList = document.getElementById('damage-army-list');\n    const resultsSection = document.getElementById('results-section');\n    const stackingResults = document.getElementById('stacking-results');\n    const damageResults = document.getElementById('damage-results');\n\n    if (!optimizationStats || !damageArmyList || !resultsSection) return;\n\n    // Show damage results, hide stacking results and battle simulation\n    if (stackingResults) stackingResults.classList.add('hidden');\n    if (damageResults) damageResults.classList.remove('hidden');\n\n    // Hide battle simulation container in damage mode\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (battleContainer) {\n      battleContainer.classList.add('hidden');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n\n    // Display optimization statistics\n    optimizationStats.innerHTML = `\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.rankedResults.length}</div>\n        <div class=\"stat-label\">Army Options</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.combinationsEvaluated.toLocaleString()}</div>\n        <div class=\"stat-label\">Combinations Tested</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${Math.round(result.optimizationTimeMs)}ms</div>\n        <div class=\"stat-label\">Execution Time</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.algorithmUsed}</div>\n        <div class=\"stat-label\">Algorithm</div>\n      </div>\n    `;\n\n    // Display damage optimization results\n    damageArmyList.innerHTML = '';\n\n    if (result.rankedResults.length === 0) {\n      damageArmyList.innerHTML = '<p class=\"text-center text-muted\">No valid army compositions found. Try adjusting your constraints.</p>';\n    } else {\n      result.rankedResults.slice(0, 10).forEach((armyResult: any, index: number) => {\n        const armyDiv = this.createDamageArmyElement(armyResult, index + 1);\n        damageArmyList.appendChild(armyDiv);\n      });\n    }\n\n    resultsSection.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('results-section');\n\n    // Scroll to the results section (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      setTimeout(() => {\n        resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n\n    // Don't show battle simulation in damage optimization mode\n    // Users can click on individual results to see detailed analysis\n  }\n\n  /**\n   * Show battle simulation section with pre-calculated results\n   */\n  private showBattleSimulationWithResults(battleAnalysis: any): void {\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (!battleContainer || !this.currentOptimizedArmy) return;\n\n    // Show the container first\n    battleContainer.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('battle-simulation-container');\n\n    // Initialize battle simulation component if not already done\n    if (!this.battleSimulation) {\n      this.battleSimulation = new BattleSimulationComponent();\n      this.battleSimulation.initialize(this.unitLoader);\n      // Mount only if it's a new component\n      this.battleSimulation.mount(battleContainer, this.currentOptimizedArmy);\n    }\n\n    // Display the pre-calculated results\n    this.battleSimulation.displayPreCalculatedResults(battleAnalysis);\n\n    // Scroll to battle simulation (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      battleContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  /**\n   * Show battle simulation section\n   */\n  private showBattleSimulation(): void {\n    if (!this.currentOptimizedArmy) return;\n\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (!battleContainer) return;\n\n    // Show the container first\n    battleContainer.classList.remove('hidden');\n\n    // Initialize battle simulation component if not already done\n    if (!this.battleSimulation) {\n      this.battleSimulation = new BattleSimulationComponent();\n      this.battleSimulation.initialize(this.unitLoader);\n    }\n\n    // Mount the battle simulation component\n    this.battleSimulation.mount(battleContainer, this.currentOptimizedArmy);\n\n    // Update responsive navigation after mounting\n    responsiveNavigation.showSection('battle-simulation-container');\n\n    // Scroll to battle simulation section (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      setTimeout(() => {\n        battleContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n  }\n\n  /**\n   * Create composition element\n   */\n  private createCompositionElement(composition: ArmyComposition, rank: number): HTMLElement {\n    const div = document.createElement('div');\n    div.className = 'army-composition';\n\n    // Use the new cleaner format from the optimizer\n    const cleanFormat = this.optimizer?.explainStacking(composition) || 'No stacking explanation available';\n\n    // Create the header with solution info\n    const header = `\n      <div class=\"composition-header\">\n        <div class=\"composition-title\">Solution ${rank} ${composition.isValidStacking ? '✅' : '❌'}</div>\n        <div class=\"composition-score\">Efficiency: ${composition.efficiencyScore.toFixed(2)}</div>\n      </div>\n    `;\n\n    // Convert the clean format to HTML with proper styling\n    const formattedContent = cleanFormat\n      .split('\\n')\n      .map(line => {\n        // Headers with special characters\n        if (line.includes('🏆 OPTIMIZED ARMY COMPOSITION')) {\n          return `<h3 class=\"army-title\">${line}</h3>`;\n        }\n        if (line.includes('═'.repeat(60))) {\n          return '<hr class=\"title-divider\">';\n        }\n        if (line.includes('📊 ARMY SUMMARY') || line.includes('🗡️ MERCENARY FORCES') ||\n            line.includes('👑 LEADERSHIP FORCES') || line.includes('⚡ DOMINANCE FORCES') ||\n            line.includes('⚔️ BATTLE ORDER')) {\n          return `<h4 class=\"section-header\">${line}</h4>`;\n        }\n        if (line.includes('─'.repeat(30)) || line.includes('─'.repeat(40))) {\n          return '<hr class=\"section-divider\">';\n        }\n        // Unit entries with indentation\n        if (line.includes('└─')) {\n          return `<div class=\"unit-detail\">${line}</div>`;\n        }\n        // Regular unit lines\n        if (line.trim() && !line.includes('═') && !line.includes('─')) {\n          return `<div class=\"unit-line\">${line}</div>`;\n        }\n        // Empty lines for spacing\n        if (line.trim() === '') {\n          return '<div class=\"spacing\"></div>';\n        }\n        return '';\n      })\n      .filter(line => line !== '')\n      .join('');\n\n    // Add battle simulation button for stacking mode\n    const battleButton = `\n      <div class=\"composition-actions\">\n        <button class=\"btn btn-secondary simulate-btn\" data-composition-index=\"${rank - 1}\">\n          ⚔️ Simulate Battle\n        </button>\n      </div>\n    `;\n\n    div.innerHTML = header + '<div class=\"composition-content\">' + formattedContent + '</div>' + battleButton;\n\n    // Add event listener for battle simulation button\n    const simulateBtn = div.querySelector('.simulate-btn') as HTMLButtonElement;\n    if (simulateBtn) {\n      simulateBtn.addEventListener('click', () => {\n        this.currentOptimizedArmy = composition;\n        this.showBattleSimulation();\n      });\n    }\n\n    return div;\n  }\n\n  /**\n   * Create damage army element for display\n   */\n  private createDamageArmyElement(armyResult: any, rank: number): HTMLElement {\n    const div = document.createElement('div');\n    div.className = 'damage-army-card';\n    div.setAttribute('data-army-index', (rank - 1).toString());\n\n    const strategy = armyResult.armyComposition.totalDominanceCost === 0 ? 'Leadership' :\n                    armyResult.armyComposition.totalLeadershipCost === 0 ? 'Dominance' : 'Mixed';\n\n    const strategyIcon = strategy === 'Leadership' ? '🛡️' : strategy === 'Dominance' ? '👹' : '⚔️';\n\n    // Add click handler\n    div.addEventListener('click', () => this.selectDamageArmy(armyResult, rank - 1));\n\n    div.innerHTML = `\n      <div class=\"damage-army-header\">\n        <div class=\"army-rank\">#${rank}</div>\n        <div class=\"army-strategy\">\n          <span class=\"strategy-icon\">${strategyIcon}</span>\n          <span class=\"strategy-label\">${strategy} Strategy</span>\n        </div>\n        <div class=\"army-damage\">\n          <span class=\"damage-value\">${armyResult.averageDamagePerBattle.toLocaleString()}</span>\n          <span class=\"damage-label\">avg damage/battle</span>\n        </div>\n        <div class=\"click-indicator\">\n          <span class=\"click-text\">Click for details</span>\n          <span class=\"click-icon\">👆</span>\n        </div>\n      </div>\n\n      <div class=\"damage-army-content\">\n        <div class=\"army-composition-summary\">\n          <h4>Army Composition:</h4>\n          <div class=\"unit-list\">\n            ${Object.entries(armyResult.armyComposition.units).map(([unitName, count]: [string, any]) =>\n              `<div class=\"unit-item\">\n                <span class=\"unit-count\">${count.toLocaleString()}x</span>\n                <span class=\"unit-name\">${unitName}</span>\n              </div>`\n            ).join('')}\n          </div>\n        </div>\n\n        <div class=\"army-stats-grid\">\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Total Strength:</span>\n            <span class=\"stat-value\">${armyResult.armyComposition.totalStrength.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Budget Usage:</span>\n            <span class=\"stat-value\">${armyResult.armyComposition.totalLeadershipCost}L / ${armyResult.armyComposition.totalDominanceCost}D</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Battle Range:</span>\n            <span class=\"stat-value\">${armyResult.battleAnalysis.worstCase.totalDamageDealt.toLocaleString()} - ${armyResult.battleAnalysis.bestCase.totalDamageDealt.toLocaleString()} damage</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Silver Cost:</span>\n            <span class=\"stat-value\">${armyResult.totalSilverCost.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Food Cost:</span>\n            <span class=\"stat-value\">${armyResult.totalFoodConsumption.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Efficiency:</span>\n            <span class=\"stat-value\">${armyResult.damageEfficiencyScore.toFixed(3)}</span>\n          </div>\n        </div>\n      </div>\n    `;\n\n    return div;\n  }\n\n  /**\n   * Select a damage army result for detailed view\n   */\n  private selectDamageArmy(armyResult: any, index: number): void {\n    // Update visual selection\n    const allCards = document.querySelectorAll('.damage-army-card');\n    allCards.forEach((card, i) => {\n      card.classList.toggle('selected', i === index);\n    });\n\n    // Show detailed composition\n    this.showSelectedArmyDetails(armyResult);\n\n    // Update battle simulation with this army and pre-calculated results\n    this.currentOptimizedArmy = armyResult.armyComposition;\n    this.showBattleSimulationWithResults(armyResult.battleAnalysis);\n  }\n\n  /**\n   * Show detailed composition for selected army\n   */\n  private showSelectedArmyDetails(armyResult: any): void {\n    const detailsContainer = document.getElementById('selected-army-details');\n    const compositionContainer = document.getElementById('selected-army-composition');\n\n    if (!detailsContainer || !compositionContainer) return;\n\n    // Create a detailed composition display similar to stacking results\n    const composition = armyResult.armyComposition;\n\n    // Generate detailed explanation using the stacking optimizer format\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Object.keys(composition.units));\n    const tempOptimizer = new StackingOptimizer(selectedUnitObjects);\n    const explanation = tempOptimizer.explainStacking(composition);\n\n    compositionContainer.innerHTML = `\n      <div class=\"selected-army-header\">\n        <h4>Army Composition Details</h4>\n        <div class=\"army-summary-stats\">\n          <span class=\"summary-stat\">\n            <strong>Total Damage:</strong> ${armyResult.averageDamagePerBattle.toLocaleString()}/battle\n          </span>\n          <span class=\"summary-stat\">\n            <strong>Total Strength:</strong> ${composition.totalStrength.toLocaleString()}\n          </span>\n          <span class=\"summary-stat\">\n            <strong>Army Size:</strong> ${Object.values(composition.units).reduce((sum: number, count: any) => sum + count, 0).toLocaleString()} units\n          </span>\n        </div>\n      </div>\n\n      <div class=\"composition-explanation\">\n        ${explanation.split('\\n').map(line => {\n          // Format the explanation lines\n          if (line.trim() === '') {\n            return '<div class=\"spacing\"></div>';\n          }\n          if (line.includes('Total') || line.includes('Budget')) {\n            return `<div class=\"summary-line\"><strong>${line}</strong></div>`;\n          }\n          if (line.includes('→')) {\n            return `<div class=\"unit-line\">${line}</div>`;\n          }\n          if (line.includes('✓') || line.includes('Valid')) {\n            return `<div class=\"validation-line success\">${line}</div>`;\n          }\n          return `<div class=\"explanation-line\">${line}</div>`;\n        }).join('')}\n      </div>\n\n      <div class=\"battle-performance-summary\">\n        <h5>Battle Performance Analysis</h5>\n        <div class=\"performance-grid\">\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Best Case:</span>\n            <span class=\"performance-value\">${armyResult.battleAnalysis.bestCase.totalDamageDealt.toLocaleString()} damage in ${armyResult.battleAnalysis.bestCase.battleDuration} turns</span>\n          </div>\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Worst Case:</span>\n            <span class=\"performance-value\">${armyResult.battleAnalysis.worstCase.totalDamageDealt.toLocaleString()} damage in ${armyResult.battleAnalysis.worstCase.battleDuration} turns</span>\n          </div>\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Efficiency Score:</span>\n            <span class=\"performance-value\">${armyResult.damageEfficiencyScore.toFixed(3)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"combat-logs-section\">\n        <h5>📜 Complete Combat Logs</h5>\n\n        <div class=\"combat-scenarios\">\n          <div class=\"combat-scenario\">\n            <h6>🟢 Best Case Scenario (You Attack First)</h6>\n            <div class=\"combat-log\">\n              ${this.formatCombatLog(armyResult.battleAnalysis.bestCase.combatLog)}\n            </div>\n          </div>\n\n          <div class=\"combat-scenario\">\n            <h6>🔴 Worst Case Scenario (Enemy Attacks First)</h6>\n            <div class=\"combat-log\">\n              ${this.formatCombatLog(armyResult.battleAnalysis.worstCase.combatLog)}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    detailsContainer.classList.remove('hidden');\n\n    // Scroll to the details section\n    detailsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private formatCombatLog(combatLog: any[]): string {\n    if (!combatLog || combatLog.length === 0) {\n      return '<div class=\"no-combat-log\">No combat actions recorded</div>';\n    }\n\n    return combatLog.map((action, index) => {\n      const isPlayerAction = action.attacker && !action.attacker.includes('Enemy');\n      const actionClass = isPlayerAction ? 'player-action' : 'enemy-action';\n\n      return `\n        <div class=\"combat-action ${actionClass}\">\n          <div class=\"action-header\">\n            <span class=\"turn-number\">Turn ${action.turn}</span>\n            <span class=\"action-type\">${isPlayerAction ? '⚔️ Player Attack' : '🛡️ Enemy Attack'}</span>\n          </div>\n          <div class=\"action-details\">\n            <strong>${action.attacker}</strong> ${action.action} <strong>${action.target}</strong>\n            ${action.damageDealt ? `<span class=\"damage-dealt\">(${action.damageDealt.toLocaleString()} damage)</span>` : ''}\n            ${action.eliminated ? '<span class=\"eliminated-indicator\">💀 Eliminated</span>' : ''}\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  /**\n   * Clear selection\n   */\n  private clearSelection(): void {\n    this.selectedUnits.clear();\n    this.mercenaryLimits = {};\n    this.currentOptimizedArmy = null;\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const resultsSection = document.getElementById('results-section');\n    const battleContainer = document.getElementById('battle-simulation-container');\n\n    if (leadershipBudget) leadershipBudget.value = '0';\n    if (dominanceBudget) dominanceBudget.value = '0';\n    if (resultsSection) {\n      resultsSection.classList.add('hidden');\n      responsiveNavigation.hideSection('results-section');\n    }\n    if (battleContainer) {\n      battleContainer.classList.add('hidden');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Switch between optimization modes\n   */\n  private switchMode(mode: 'stacking' | 'damage' | 'enemy-units' | 'manual-battle'): void {\n    this.currentMode = mode;\n\n    // Update mode tabs\n    const stackingBtn = document.getElementById('stacking-mode-btn');\n    const damageBtn = document.getElementById('damage-mode-btn');\n    const enemyUnitsBtn = document.getElementById('enemy-units-btn');\n    const manualBattleBtn = document.getElementById('manual-battle-btn');\n\n    if (stackingBtn && damageBtn && enemyUnitsBtn && manualBattleBtn) {\n      stackingBtn.classList.toggle('active', mode === 'stacking');\n      damageBtn.classList.toggle('active', mode === 'damage');\n      enemyUnitsBtn.classList.toggle('active', mode === 'enemy-units');\n      manualBattleBtn.classList.toggle('active', mode === 'manual-battle');\n    }\n\n    // Update mode descriptions\n    const stackingDesc = document.getElementById('stacking-description');\n    const damageDesc = document.getElementById('damage-description');\n\n    if (stackingDesc && damageDesc) {\n      stackingDesc.classList.toggle('hidden', mode !== 'stacking');\n      damageDesc.classList.toggle('hidden', mode !== 'damage');\n    }\n\n    // Update damage optimization controls\n    const damageControls = document.getElementById('damage-controls');\n    if (damageControls) {\n      damageControls.classList.toggle('hidden', mode !== 'damage');\n    }\n\n    // Update optimize button text\n    const optimizeBtnText = document.getElementById('optimize-btn-text');\n    if (optimizeBtnText) {\n      if (mode === 'stacking') {\n        optimizeBtnText.textContent = '🚀 Optimize Army';\n      } else if (mode === 'damage') {\n        optimizeBtnText.textContent = '⚔️ Optimize for Damage';\n      } else if (mode === 'enemy-units') {\n        optimizeBtnText.textContent = '👹 Manage Enemy Units';\n      } else if (mode === 'manual-battle') {\n        optimizeBtnText.textContent = '⚔️ Configure Battle';\n      }\n    }\n\n    // Update results title\n    const resultsTitle = document.getElementById('results-title');\n    if (resultsTitle) {\n      if (mode === 'stacking') {\n        resultsTitle.textContent = '🎯 Stacking Results';\n      } else if (mode === 'damage') {\n        resultsTitle.textContent = '⚔️ Damage Optimization Results';\n      } else if (mode === 'enemy-units') {\n        resultsTitle.textContent = '👹 Enemy Units Management';\n      } else if (mode === 'manual-battle') {\n        resultsTitle.textContent = '⚔️ Manual Battle Results';\n      }\n    }\n\n    // Show/hide sections based on mode\n    const configSection = document.getElementById('config-section');\n    const resultsSection = document.getElementById('results-section');\n    const enemyUnitsSection = document.getElementById('enemy-units-section');\n    const manualBattleSection = document.getElementById('manual-battle-section');\n    const battleContainer = document.getElementById('battle-simulation-container');\n\n    if (mode === 'enemy-units') {\n      // Show enemy units section, hide others\n      if (configSection) configSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.remove('hidden');\n      if (manualBattleSection) manualBattleSection.classList.add('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      // Initialize enemy units manager\n      this.initializeEnemyUnitsManager();\n      \n      responsiveNavigation.hideSection('config-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.showSection('enemy-units-section');\n      responsiveNavigation.hideSection('manual-battle-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    } else if (mode === 'manual-battle') {\n      // Show manual battle section, hide others\n      if (configSection) configSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.add('hidden');\n      if (manualBattleSection) manualBattleSection.classList.remove('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      // Initialize manual battle simulation\n      this.initializeManualBattleSimulation();\n      \n      responsiveNavigation.hideSection('config-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.hideSection('enemy-units-section');\n      responsiveNavigation.showSection('manual-battle-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    } else {\n      // Show config section, hide other sections\n      if (configSection) configSection.classList.remove('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.add('hidden');\n      if (manualBattleSection) manualBattleSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      responsiveNavigation.showSection('config-section');\n      responsiveNavigation.hideSection('enemy-units-section');\n      responsiveNavigation.hideSection('manual-battle-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n  }\n\n  /**\n   * Show loading modal\n   */\n  private showLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Hide loading modal\n   */\n  private hideLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.add('hidden');\n    }\n  }\n\n  private optimizationAbortController: AbortController | null = null;\n  private optimizationStartTime: number = 0;\n  private progressUpdateInterval: number | null = null;\n\n  /**\n   * Show progress modal with progress bar, timer, and cancel button\n   */\n  private showProgressModal(): void {\n    // Create progress modal if it doesn't exist\n    let progressModal = document.getElementById('progress-modal');\n    if (!progressModal) {\n      progressModal = document.createElement('div');\n      progressModal.id = 'progress-modal';\n      progressModal.className = 'modal';\n      progressModal.innerHTML = `\n        <div class=\"modal-content progress-modal-content\">\n          <h3>⚔️ Optimizing for Damage</h3>\n          <div class=\"progress-container\">\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" id=\"progress-fill\"></div>\n            </div>\n            <div class=\"progress-text\" id=\"progress-text\">Initializing...</div>\n            <div class=\"progress-percentage\" id=\"progress-percentage\">0%</div>\n          </div>\n          <div class=\"progress-details\">\n            <div class=\"progress-stats\">\n              <span id=\"progress-combinations\">0 / 0 combinations</span>\n              <span id=\"progress-phase\">Initializing</span>\n            </div>\n            <div class=\"progress-timing\">\n              <span id=\"progress-elapsed\">00:00</span>\n              <span class=\"timer-separator\">/</span>\n              <span id=\"progress-timeout\">02:00</span>\n              <span id=\"progress-remaining\"></span>\n            </div>\n          </div>\n          <div class=\"progress-actions\">\n            <button id=\"cancel-optimization-btn\" class=\"btn btn-secondary\">\n              <span class=\"btn-icon\">❌</span>\n              Cancel Optimization\n            </button>\n          </div>\n          <p class=\"progress-note\">Large army pools may take longer to process...</p>\n        </div>\n      `;\n      document.body.appendChild(progressModal);\n\n      // Add cancel button event listener\n      const cancelBtn = document.getElementById('cancel-optimization-btn');\n      if (cancelBtn) {\n        cancelBtn.addEventListener('click', () => {\n          this.cancelOptimization();\n        });\n      }\n    }\n\n    progressModal.classList.remove('hidden');\n    this.optimizationStartTime = performance.now();\n    this.updateProgressModal(0, 'Initializing...');\n    this.startProgressTimer();\n  }\n\n  /**\n   * Update progress modal with detailed information\n   */\n  private updateProgressModal(progress: number, message: string, details?: {\n    combinationsEvaluated?: number;\n    totalToEvaluate?: number;\n    phase?: string;\n    estimatedRemainingMs?: number;\n  }): void {\n    const progressFill = document.getElementById('progress-fill');\n    const progressText = document.getElementById('progress-text');\n    const progressPercentage = document.getElementById('progress-percentage');\n    const progressCombinations = document.getElementById('progress-combinations');\n    const progressPhase = document.getElementById('progress-phase');\n    const progressRemaining = document.getElementById('progress-remaining');\n\n    if (progressFill) {\n      progressFill.style.width = `${progress}%`;\n    }\n    if (progressText) {\n      progressText.textContent = message;\n    }\n    if (progressPercentage) {\n      progressPercentage.textContent = `${Math.round(progress)}%`;\n    }\n    if (progressCombinations && details) {\n      const evaluated = details.combinationsEvaluated || 0;\n      const total = details.totalToEvaluate || 0;\n      progressCombinations.textContent = `${evaluated.toLocaleString()} / ${total.toLocaleString()} combinations`;\n    }\n    if (progressPhase && details?.phase) {\n      progressPhase.textContent = details.phase.charAt(0).toUpperCase() + details.phase.slice(1);\n    }\n    if (progressRemaining && details?.estimatedRemainingMs) {\n      const remainingSeconds = Math.ceil(details.estimatedRemainingMs / 1000);\n      const minutes = Math.floor(remainingSeconds / 60);\n      const seconds = remainingSeconds % 60;\n      progressRemaining.textContent = `(~${minutes}:${seconds.toString().padStart(2, '0')} remaining)`;\n    } else if (progressRemaining) {\n      progressRemaining.textContent = '';\n    }\n  }\n\n  /**\n   * Start the progress timer\n   */\n  private startProgressTimer(): void {\n    this.progressUpdateInterval = window.setInterval(() => {\n      const elapsedMs = performance.now() - this.optimizationStartTime;\n      const elapsedSeconds = Math.floor(elapsedMs / 1000);\n      const minutes = Math.floor(elapsedSeconds / 60);\n      const seconds = elapsedSeconds % 60;\n\n      const progressElapsed = document.getElementById('progress-elapsed');\n      if (progressElapsed) {\n        progressElapsed.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n      }\n    }, 1000);\n  }\n\n  /**\n   * Stop the progress timer\n   */\n  private stopProgressTimer(): void {\n    if (this.progressUpdateInterval) {\n      clearInterval(this.progressUpdateInterval);\n      this.progressUpdateInterval = null;\n    }\n  }\n\n  /**\n   * Cancel the current optimization\n   */\n  private cancelOptimization(): void {\n    if (this.optimizationAbortController) {\n      this.optimizationAbortController.abort();\n      this.hideProgressModal();\n      alert('Optimization cancelled by user.');\n    }\n  }\n\n  /**\n   * Hide progress modal\n   */\n  private hideProgressModal(): void {\n    const progressModal = document.getElementById('progress-modal');\n    if (progressModal) {\n      progressModal.classList.add('hidden');\n    }\n    this.stopProgressTimer();\n    this.optimizationAbortController = null;\n  }\n\n  /**\n   * Initialize mobile optimizations\n   */\n  private initializeMobileOptimizations(): void {\n    // Apply mobile CSS optimizations\n    MobileCSSManager.optimizeCombatLogs();\n    MobileCSSManager.optimizeUnitCards();\n\n    // Add touch support to unit cards\n    this.addTouchSupportToUnitCards();\n\n    // Listen for layout changes\n    mobileLayoutManager.addLayoutChangeListener((mode) => {\n      this.handleLayoutModeChange(mode);\n    });\n  }\n\n  /**\n   * Add touch support to unit cards\n   */\n  private addTouchSupportToUnitCards(): void {\n    const unitCards = document.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      if (card instanceof HTMLElement) {\n        // Add haptic feedback for touch interactions\n        TouchInteractionManager.addHapticFeedback(card);\n      }\n    });\n  }\n\n  /**\n   * Handle layout mode changes\n   */\n  private handleLayoutModeChange(mode: 'mobile' | 'tablet' | 'desktop'): void {\n    // Re-apply mobile optimizations when layout changes\n    setTimeout(() => {\n      MobileCSSManager.optimizeCombatLogs();\n      MobileCSSManager.optimizeUnitCards();\n      this.addTouchSupportToUnitCards();\n\n      // Re-initialize advanced features for new layout\n      if (mode === 'mobile') {\n        this.initializeAdvancedMobileFeatures();\n      }\n    }, 100);\n  }\n\n  /**\n   * Initialize Phase 3 advanced mobile features\n   */\n  private initializeAdvancedMobileFeatures(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    // Initialize performance monitoring\n    MobilePerformanceManager.initialize();\n\n    // Initialize accessibility enhancements\n    MobileAccessibilityManager.initialize();\n\n    // Add pull-to-refresh to main content\n    this.addPullToRefresh();\n\n    // Add floating action button for quick optimization\n    this.addFloatingActionButton();\n\n    // Enhance forms for mobile accessibility\n    MobileAccessibilityManager.enhanceFormAccessibility();\n\n    // Add dynamic ARIA labels\n    setTimeout(() => {\n      MobileAccessibilityManager.addDynamicLabels();\n    }, 500);\n  }\n\n  /**\n   * Add pull-to-refresh functionality\n   */\n  private addPullToRefresh(): void {\n    const mainContent = document.querySelector('.main-content') as HTMLElement;\n    if (!mainContent) return;\n\n    TouchInteractionManager.addPullToRefresh(\n      mainContent,\n      async () => {\n        // Refresh current data\n        MobileAccessibilityManager.announce('Refreshing data...');\n\n        // Simulate refresh delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Re-apply optimizations\n        MobileCSSManager.optimizeCombatLogs();\n        MobileCSSManager.optimizeUnitCards();\n        MobileAccessibilityManager.addDynamicLabels();\n\n        MobileAccessibilityManager.announce('Data refreshed');\n      }\n    );\n  }\n\n  /**\n   * Add floating action button for quick access\n   */\n  private addFloatingActionButton(): void {\n    // Only show FAB when there are selected units\n    if (this.selectedUnits.size > 0) {\n      MobileUIPatterns.showFloatingActionButton({\n        icon: '⚡',\n        label: 'Quick Optimize',\n        onClick: () => {\n          MobileAccessibilityManager.announce('Starting quick optimization');\n          this.optimizeArmy();\n        },\n        position: 'bottom-right',\n        color: 'primary'\n      });\n    } else {\n      MobileUIPatterns.hideFloatingActionButton();\n    }\n  }\n\n  /**\n   * Initialize enemy units manager component\n   */\n  private initializeEnemyUnitsManager(): void {\n    const enemyUnitsContainer = document.getElementById('enemy-units-container');\n    if (!enemyUnitsContainer) return;\n\n    // Initialize enemy unit manager if not already done\n    if (!this.enemyUnitManager) {\n      this.enemyUnitManager = new EnemyUnitManager({\n        mode: 'embedded'\n      });\n    }\n\n    // Mount the enemy unit manager component\n    this.enemyUnitManager.mount(enemyUnitsContainer);\n  }\n\n  /**\n   * Initialize manual battle simulation component\n   */\n  private async initializeManualBattleSimulation(): Promise<void> {\n    const manualBattleContainer = document.getElementById('manual-battle-container');\n    if (!manualBattleContainer) return;\n\n    // Initialize manual battle simulation if not already done\n    if (!this.manualBattleSimulation) {\n      this.manualBattleSimulation = new ManualBattleSimulationComponent({\n        unitLoader: this.unitLoader,\n        onBattleComplete: (analysis) => {\n          console.log('Manual battle completed:', analysis);\n          // Could add additional handling here if needed\n        }\n      });\n    }\n\n    // Mount the manual battle simulation component\n    await this.manualBattleSimulation.mount(manualBattleContainer);\n  }\n\n  /**\n   * Open enemy unit selector for battle optimization\n   */\n  private openEnemyUnitSelector(): void {\n    // Get the current enemy groups count to determine max selections\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxSelections = parseInt(enemyCountInput?.value || '5');\n    \n    // Import the EnemyUnitSelector dynamically to avoid circular dependencies\n    import('../EnemyUnits/EnemyUnitSelector').then(({ EnemyUnitSelector }) => {\n      // Create a modal container for the enemy unit selector\n      const modalContainer = document.createElement('div');\n      modalContainer.id = 'enemy-unit-selector-modal';\n      modalContainer.style.position = 'fixed';\n      modalContainer.style.top = '0';\n      modalContainer.style.left = '0';\n      modalContainer.style.right = '0';\n      modalContainer.style.bottom = '0';\n      modalContainer.style.zIndex = '2000';\n      document.body.appendChild(modalContainer);\n\n      // Create the enemy unit selector with multiple selection mode\n      const selector = new EnemyUnitSelector({\n        onSelect: (enemyUnit) => {\n          this.handleEnemyUnitSelected(enemyUnit);\n          // Don't close the selector immediately in multiple mode - let user continue selecting\n          // The selector will handle the UI updates and user can close when done\n        },\n        onCancel: () => {\n          this.closeEnemyUnitSelector(modalContainer, selector);\n        },\n        mode: 'multiple',\n        title: `Select Enemy Units for Battle Optimization (${this.selectedEnemyUnits.length}/${maxSelections} selected)`,\n        maxSelections: maxSelections,\n        selectedUnits: [...this.selectedEnemyUnits]\n      });\n\n      // Store reference to the selector for updates\n      this.currentEnemyUnitSelector = selector;\n      this.currentEnemyUnitSelectorContainer = modalContainer;\n\n      // Mount the selector\n      selector.mount(modalContainer);\n    }).catch(error => {\n      console.error('Failed to load EnemyUnitSelector:', error);\n      alert('Failed to open enemy unit selector. Please try again.');\n    });\n  }\n\n  /**\n   * Handle enemy unit selection for damage optimization\n   */\n  private handleEnemyUnitSelected(enemyUnit: any): void {\n    // Get the current enemy groups count to determine max selections\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxSelections = parseInt(enemyCountInput?.value || '5');\n    \n    // Check if this enemy unit is already selected\n    const existingIndex = this.selectedEnemyUnits.findIndex(unit => unit.name === enemyUnit.name);\n    \n    if (existingIndex >= 0) {\n      // Remove if already selected\n      this.selectedEnemyUnits.splice(existingIndex, 1);\n    } else if (this.selectedEnemyUnits.length < maxSelections) {\n      // Add if under the limit\n      this.selectedEnemyUnits.push(enemyUnit);\n    } else {\n      // At limit, replace the first selected unit\n      this.selectedEnemyUnits.shift(); // Remove first\n      this.selectedEnemyUnits.push(enemyUnit); // Add new\n    }\n    \n    // Update the UI to show the selected enemy units\n    this.updateEnemyUnitDisplay();\n    \n    // Update the modal title if the selector is open\n    this.updateEnemyUnitSelectorTitle();\n  }\n\n  /**\n   * Close the enemy unit selector modal\n   */\n  private closeEnemyUnitSelector(modalContainer: HTMLElement, selector: any): void {\n    try {\n      // Unmount the selector\n      if (selector && typeof selector.unmount === 'function') {\n        selector.unmount();\n      }\n      \n      // Remove the modal container\n      if (modalContainer && modalContainer.parentNode) {\n        modalContainer.parentNode.removeChild(modalContainer);\n      }\n      \n      // Clear references\n      this.currentEnemyUnitSelector = null;\n      this.currentEnemyUnitSelectorContainer = null;\n    } catch (error) {\n      console.error('Error closing enemy unit selector:', error);\n    }\n  }\n\n  /**\n   * Update the enemy unit selector title when selections change\n   */\n  private updateEnemyUnitSelectorTitle(): void {\n    if (this.currentEnemyUnitSelector && typeof this.currentEnemyUnitSelector.updateTitle === 'function') {\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const maxSelections = parseInt(enemyCountInput?.value || '5');\n      const newTitle = `Select Enemy Units for Battle Optimization (${this.selectedEnemyUnits.length}/${maxSelections} selected)`;\n      \n      this.currentEnemyUnitSelector.updateTitle(newTitle);\n      \n      // Also update the selected units in the selector to reflect any changes\n      if (typeof this.currentEnemyUnitSelector.updateSelectedUnits === 'function') {\n        this.currentEnemyUnitSelector.updateSelectedUnits(this.selectedEnemyUnits);\n      }\n    }\n  }\n\n  /**\n   * Handle changes to enemy groups count\n   */\n  private handleEnemyGroupsChange(): void {\n    if (this.currentMode === 'damage') {\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const enemyGroupsCount = enemyCountInput ? parseInt(enemyCountInput.value) || 1 : 1;\n      \n      // Trim selected units if we now have too many\n      if (this.selectedEnemyUnits.length > enemyGroupsCount) {\n        this.selectedEnemyUnits = this.selectedEnemyUnits.slice(0, enemyGroupsCount);\n      }\n      \n      // Always update the enemy unit display to reflect the new max selections count\n      this.updateEnemyUnitDisplay();\n      \n      // Update the selector if it's open\n      this.updateEnemyUnitSelectorTitle();\n    }\n  }\n\n  /**\n   * Update the enemy unit display in the damage optimization controls\n   */\n  private updateEnemyUnitDisplay(): void {\n    const selectEnemyBtn = document.getElementById('select-enemy-units-btn');\n    \n    if (selectEnemyBtn) {\n      // Always get the current enemy groups count\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const maxSelections = parseInt(enemyCountInput?.value || '5');\n      \n      if (this.selectedEnemyUnits.length === 0) {\n        // No enemy units selected\n        selectEnemyBtn.innerHTML = `\n          👹 Select Enemy Units\n        `;\n        selectEnemyBtn.classList.remove('enemy-selected');\n      } else if (this.selectedEnemyUnits.length === 1) {\n        // Single enemy unit selected\n        const enemyUnit = this.selectedEnemyUnits[0];\n        selectEnemyBtn.innerHTML = `\n          <span class=\"selected-enemy-indicator\">✅</span>\n          ${enemyUnit.name}\n          <small class=\"enemy-stats\">(STR: ${enemyUnit.strength.toLocaleString()}, HP: ${enemyUnit.health.toLocaleString()})</small>\n        `;\n        selectEnemyBtn.classList.add('enemy-selected');\n      } else {\n        // Multiple enemy units selected\n        selectEnemyBtn.innerHTML = `\n          <span class=\"selected-enemy-indicator\">✅</span>\n          ${this.selectedEnemyUnits.length} Enemy Units Selected\n          <small class=\"enemy-stats\">(${this.selectedEnemyUnits.length}/${maxSelections} selected)</small>\n        `;\n        selectEnemyBtn.classList.add('enemy-selected');\n      }\n    }\n  }\n\n\n}\n","/**\n * Main entry point for the TotalBattle Army Calculator\n */\n\nimport './style.css';\nimport { ArmyCalculatorApp } from './components/ArmyCalculator/ArmyCalculatorApp';\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n  const appContainer = document.getElementById('app');\n  \n  if (!appContainer) {\n    throw new Error('App container not found');\n  }\n\n  // Create and mount the main application\n  const app = new ArmyCalculatorApp();\n  app.mount(appContainer);\n\n  // Add global error handling\n  window.addEventListener('error', (event) => {\n    console.error('Global error:', event.error);\n    // You could add error reporting here\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason);\n    // You could add error reporting here\n  });\n\n  // Add service worker registration for PWA (future enhancement)\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      // Service worker registration would go here\n      console.log('Service worker support detected');\n    });\n  }\n\n  console.log('TotalBattle Army Calculator initialized');\n});\n"],"file":"assets/main-BTcpftIa.js"}