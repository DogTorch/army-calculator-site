var p=Object.defineProperty;var v=(m,t,e)=>t in m?p(m,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):m[t]=e;var f=(m,t,e)=>v(m,typeof t!="symbol"?t+"":t,e);import{E as g,M as h}from"./main-DzGpN4Zf.js";class S{constructor(t){f(this,"battleService");this.battleService=new g,t&&this.battleService.initialize(t)}async simulateBattle(t){const e=h.validateArmyConfiguration(t.playerArmy),a=h.validateArmyConfiguration(t.enemyArmy);if(!e.isValid||!a.isValid){const i=[...e.errors,...a.errors];throw new Error(`Invalid battle configuration: ${i.join(", ")}`)}const n=this.convertToEnemyUnitBattleConfig(t),s=this.battleService.simulateBattleWithEnemyUnits(n);return this.convertToManualBattleResult(s,t)}async simulateBothScenarios(t){var l,o,u;const e=h.validateArmyConfiguration(t.playerArmy),a=h.validateArmyConfiguration(t.enemyArmy);if(!e.isValid||!a.isValid){const r=[...e.errors,...a.errors];throw new Error(`Invalid battle configuration: ${r.join(", ")}`)}const n=this.convertToArmyComposition(t.playerArmy,"player"),s=this.convertToEnemyUnits(t.enemyArmy);console.log("üìä Manual Battle Debug - Player Army:",{units:((l=t.playerArmy.units)==null?void 0:l.length)||0,stackingGroups:((o=n.stackingOrder)==null?void 0:o.length)||0,stackingDetails:(u=n.stackingOrder)==null?void 0:u.map(r=>`${r.unitName}: ${r.count} units, ${r.totalHealth} HP`)}),console.log("üìä Manual Battle Debug - Enemy Units:",{enemyUnitsCount:s.length,enemyDetails:s.slice(0,3).map(r=>`${r.name}: ${r.health} HP, ${r.strength} STR`)});const i=this.battleService.simulateBothScenariosWithEnemyUnits(n,s),c=this.convertToManualBattleResult(i.bestCase,{...t,playerGoesFirst:!0}),y=this.convertToManualBattleResult(i.worstCase,{...t,playerGoesFirst:!1});return{bestCase:c,worstCase:y,comparison:i.comparison,manualConfiguration:t}}convertToEnemyUnitBattleConfig(t){const e=this.convertToArmyComposition(t.playerArmy,"player"),a=this.convertToEnemyUnits(t.enemyArmy);return{playerArmy:e,enemyUnits:a,playerGoesFirst:t.playerGoesFirst,useEnemyModifiers:!0}}convertToEnemyUnits(t){var a,n;const e=[];if(console.log("üîç convertToEnemyUnits - Input enemyArmy:",{hasUnits:!!(t!=null&&t.units),unitsLength:((a=t==null?void 0:t.units)==null?void 0:a.length)||0,unitsData:(n=t==null?void 0:t.units)==null?void 0:n.slice(0,2)}),!(t!=null&&t.units)||!Array.isArray(t.units))return console.warn("‚ö†Ô∏è convertToEnemyUnits - No valid units array in enemyArmy"),e;for(const s of t.units){const i=s.unit;s.isInfinite?e.push({name:i.name,unit_types:i.unit_types,health:i.health,strength:i.strength,attack_modifiers:i.attack_modifiers||[],isMortal:!1}):e.push({name:i.name,unit_types:i.unit_types,health:i.health,strength:i.strength,attack_modifiers:i.attack_modifiers||[],count:s.quantity,isMortal:!0})}return e}convertToArmyComposition(t,e){const a=h.convertToStackingGroups(t);let n=0,s=0,i=0,c=0,y=0;const l={};for(const o of t.units){const u=o.isInfinite?999999:o.quantity,r=o.unit;l[r.name]=u,n+=u*r.strength,s+=u*r.health,i+=u*(r.leadership_cost||r.leadershipCost||0),c+=u*(r.dominance_cost||r.dominanceCost||0),(r.cost_type==="Mercenary"||r.class==="Mercenary")&&(y+=u)}return{units:l,totalStrength:n,totalHealth:s,totalLeadershipCost:i,totalDominanceCost:c,totalMercenaryCount:y,stackingOrder:a,isValidStacking:this.validateStacking(a),efficiencyScore:n/Math.max(i+c,1)}}validateStacking(t){if(t.length<=1)return!0;for(let e=1;e<t.length;e++)if(t[e-1].totalHealth>t[e].totalHealth)return!1;return!0}convertToManualBattleResult(t,e){return{...t,manualConfiguration:e,enemySurvivors:this.calculateEnemySurvivors(e.enemyArmy,t)}}calculateEnemySurvivors(t,e){return t.units.map(a=>({...a,quantity:(a.isInfinite,a.quantity),survived:!0}))}getBattleMetrics(t){const{bestCase:e,worstCase:a,comparison:n}=t;return{efficiency:{bestCaseEfficiency:e.totalDamageDealtToEnemies/e.battleDuration,worstCaseEfficiency:a.totalDamageDealtToEnemies/a.battleDuration,averageEfficiency:n.averageDamage/((e.battleDuration+a.battleDuration)/2)},consistency:{damageVariability:Math.abs(n.damageDifference)/n.averageDamage,survivalVariability:Math.abs(n.survivalDifference)/n.averageSurvival,overallConsistency:1-(Math.abs(n.damageDifference)+Math.abs(n.survivalDifference))/(n.averageDamage+n.averageSurvival)},playerArmyStats:this.getArmyStats(t.manualConfiguration.playerArmy),enemyArmyStats:this.getArmyStats(t.manualConfiguration.enemyArmy)}}getArmyStats(t){let e=0,a=0,n=0,s=0,i=t.units.length;const c={};for(const y of t.units){const l=y.unit,o=y.isInfinite?999999:y.quantity;y.isInfinite&&s++,e+=o,a+=o*l.strength,n+=o*l.health;for(const u of l.unit_types)c[u]||(c[u]={count:0,strength:0,health:0}),c[u].count+=o,c[u].strength+=o*l.strength,c[u].health+=o*l.health}return{totalUnits:e,totalStrength:a,totalHealth:n,averageStrengthPerUnit:e>0?a/e:0,averageHealthPerUnit:e>0?n/e:0,unitTypeCount:i,infiniteUnitTypes:s,hasInfiniteUnits:s>0,unitTypeBreakdown:c,strengthToHealthRatio:n>0?a/n:0}}validateConfiguration(t){const e=[],a=[],n=h.validateArmyConfiguration(t.playerArmy);e.push(...n.errors),a.push(...n.warnings);const s=h.validateArmyConfiguration(t.enemyArmy);e.push(...s.errors),a.push(...s.warnings);const i=this.calculateEnemyGroupCount(t.enemyArmy),c=t.playerArmy.units.reduce((l,o)=>l+(o.isInfinite?0:o.quantity),0);return i>50&&c<10&&a.push("Large enemy army vs small player army may result in very short battle"),i>80&&a.push("Very large enemy army may affect simulation performance"),t.enemyArmy.units.filter(l=>l.isInfinite).length>5&&a.push("Many infinite enemy unit types may make battle analysis less meaningful"),{isValid:e.length===0,errors:e,warnings:a}}}export{S as ManualBattleSimulationService};
//# sourceMappingURL=manualBattleSimulation-BgTIYAtC.js.map
