{"version":3,"mappings":"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","names":["UnitUtils","unit","cost","UnitLoader","__publicField","source","unitsData","response","unitData","error","costType","a","b","name","availableUnitNames","availableUnits","filter","filtered","u","type","query","lowerQuery","strengths","healths","types","StackingOptimizer","constraints","startTime","validCompositions","compositions","totalCombinations","armyUnits","composition","endTime","leadershipUnits","dominanceUnits","mercenaryUnits","combinedArmies","comp","hasLeadership","hasDominance","hasMercenary","hasType","aBudgetUsage","selectedLeadershipUnits","selectedDominanceUnits","selectedMercenaryUnits","leadershipMercenaryUnits","allUnits","properComposition","dominanceComposition","mercenaryComposition","combinedComposition","mercComposition","limit","leadershipBudget","mercenaryLimits","pattern","strongestUnit","i","currentUnit","strongerUnit","strongerTotalHealth","requiredQuantity","sortedUnits","basePattern","strongestTotalHealth","quantityNeeded","unitType","nextUnit","currentTotalHealth","nextTotalHealth","baseCost","unitName","quantity","baseQuantity","maxStacks","scaledQuantity","mercenaryLimit","dominanceBudget","total","stacksFromThisMerc","dominanceCostPerStack","pureMercComp","maxStacksByBudget","maxStacksByMercenaries","maxCombinedStacks","stacks","baseQty","remainingBudget","dominanceOnlyComps","finalMercenaryState","dominanceComp","combinedComp","units","budget","costProperty","unitCost","maxMultiplier","multiplier","scaledComposition","allLeadershipMercenaryUnits","leadershipCompositions","maxLeadershipComp","leadershipComp","strongestDominanceUnit","comparisonLeadershipUnit","comparisonUnitQuantity","comparisonTotalHealth","strongestDominanceHealth","independentDominanceComps","maxDominanceComp","targetUnit","closestUnit","smallestDifference","difference","maxTotalHealth","maxQuantityByHealth","maxQuantityByBudget","maxQuantity","strongestQty","testComposition","usedBudget","weakerUnit","requiredForStacking","maxByBudget","totalDominanceHealth","qty","baseUnits","baseBudget","baseCompositions","baseComp","strongestMercenary","comparisonBaseUnit","strongestMercenaryHealth","mercenaryTotalHealth","maxMercenaryQuantity","mixedComp","sortedByHealth","totalHealth","alternativeComp","variations","strongestFocus","strongestCost","maxStrongest","minimalComposition","leadershipUsed","dominanceUsed","cheapestLeadership","focusedComposition","remaining","balancedComposition","budgetPerUnit","combinations","mercName","maxCount","newCombinations","combo","count","newCombo","totalStrength","totalLeadershipCost","totalDominanceCost","totalMercenaryCount","unitGroups","groupHealth","groupStrength","isValidStacking","stackingOrder","j","strongerGroupHealth","tolerance","totalCost","efficiencyScore","diversityBonus","costTypeCount","balanceBonus","lines","group","unitInfo","sum","typeIcon","BattleUtils","groupIndex","battlePhase","attackerGroup","enemyGroupIndex","damage","targetGroup","combatLog","action","totalDamage","playerAttacks","enemyAttacks","damageByUnitType","attacksByUnitType","result","stats","BATTLE_CONSTANTS","BattleSimulationService","config","state","consecutiveNoActionTurns","maxNoActionTurns","previousLogLength","statistics","playerArmy","enemyGroupCount","bestCaseConfig","bestCase","worstCaseConfig","worstCase","comparison","groups","cacheKey","g","sorted","totalStrengthA","playerGoesFirst","initialPlayerAttackOrder","initialPlayerCount","maxEnemyTurns","playerGroupsAttacked","enemyTurnsTaken","totalTurns","turnIndex","nextPlayerGroup","groupId","initialAttackOrder","alreadyAttacked","originalGroup","currentGroup","attackingGroup","attackIndex","targetEnemyIndex","currentAttackOrder","currentTargetOrder","DamageOptimizer","battleSimulator","algorithm","SystematicCombinationAlgorithm","progress","_a","maxTimeoutMs","armyCombinations","results","combinationsEvaluated","currentTime","army","resolve","elapsedMs","progressPercent","estimatedRemainingMs","elapsed","rankedResults","damageDiff","optimizationTimeMs","battleAnalysis","totalSilverCost","totalFoodConsumption","totalRevivalCost","bestCaseTotalDamage","worstCaseTotalDamage","averageDamagePerBattle","totalResourceCost","damageEfficiencyScore","unitsByName","generationStartTime","maxGenerationTimeMs","maxCombinations","unitCombinations","combination","unitNames","totalPossible","allCombinations","_","index","k","halfSize","attempt","existing","quarterSize","size","unitCombination","stackingOptimizer","stackingConstraints","EnemyUnitBattleSimulationService","standardConfig","enemyUnits","useEnemyModifiers","enemyUnit","aliveEnemyUnits","e","targetEnemyState","targetEnemy","baseDamage","enemyIndex","attackingEnemy","effectiveStrength","modifiersApplied","generalModifier","mod","modifierText","m","baseStats","enemyUnitActions","damageByEnemyUnit","attacksByEnemyUnit","modifiersUsed","enemyName","modifier","key","EnemyUnitUtils","targetType","baseStrength","errors","warnings","baseUnit","now","updates","ENEMY_UNIT_TYPES","ENEMY_ATTACK_MODIFIER_TYPES","ENEMY_TARGET_TYPES","EnemyUnitLoader","enemyUnitsData","byUnitType","unitTypeDistribution","unitsWithAttackModifiers","unitTypes","playerUnitTypes","item","totalEffectiveness","playerType","EnemyUnitValidationService","baseValidation","trimmedName","health","strength","attackModifiers","targetTypes","data","nameValidation","unitTypesValidation","healthValidation","strengthValidation","attackModifiersValidation","summary","r","sanitized","_EnemyUnitStorageService","options","test","stored","processedUnits","validation","userUnit","id","unitIndex","existingUnit","updatedUnit","finalUnit","exportData","jsonData","importData","existingUnits","imported","skipped","today","unitsCreatedToday","lastModified","storageSize","metadata","threshold","EnemyUnitStorageService","EnemyUnitSelector","props","container","lowerFilter","title","isSelected","selected","isUserUnit","style","closeBtn","cancelBtn","confirmBtn","searchInput","clearBtn","tab","btn","card","overlay","event","input","category","existingIndex","maxSelections","unitCard","unitList","resultsCount","newTitle","titleElement","selectedUnits","BattleSimulationComponent","runBtn","enemyGroupsInput","selectEnemyBtn","clearEnemyBtn","radio","enemyType","genericSection","specificSection","modalContainer","selectedUnit","noSelectionEl","selectedInfoEl","attackModifiersText","bonus","enemyTypeRadio","isValid","errorMessage","inputValue","value","inputId","message","errorElement","icon","target","tooltipKey","tooltip","tooltipContent","targetRect","tooltipElement","tooltipRect","viewportWidth","viewportHeight","top","left","simulationPromise","reject","enemyGroups","timeoutPromise","resultsContainer","logTabs","scenario","t","log","activeLog","show","loadingEl","resultsEl","controlsContainer","enemyInputContainer","noteContainer","EnemyUnitInputForm","isEdit","modifiersList","form","saveBtn","deleteBtn","addModifierBtn","newModifierValue","fieldId","typeInput","valueInput","bonusValue","currentValue","newValue","parsedValue","fields","nameInput","healthInput","strengthInput","unitTypesInput","attackModifiersArray","target_type","_b","currentData","original","EnemyUnitManager","isStandalone","formContainer","clearSearchBtn","createBtn","createFirstBtn","sortSelect","sortOrderBtn","selectAllBtn","selectNoneBtn","checkbox","toggle","dropdown","other","importBtn","exportAllBtn","exportSelectedBtn","deleteSelectedBtn","clearAllBtn","fileInput","date","diffMs","diffDays","select","unitId","duplicateUnit","file","reader","selectedUnitsList","deletedCount","filename","blob","url","unitsList","resultsInfo","bulkActionsBtn","BREAKPOINTS","MobileLayoutManager","callback","width","newMode","resizeTimeout","TouchInteractionManager","element","onSwipeLeft","onSwipeRight","startX","startY","touch","endX","endY","deltaX","deltaY","touchStartTime","onRefresh","currentY","isRefreshing","refreshIndicator","createRefreshIndicator","pullDistance","MobileCSSManager","layoutManager","body","mobileLayoutManager","ResponsiveNavigationManager","mainContent","tabContainer","section","header","currentMode","mode","sectionId","s","indicator","availableSections","currentIndex","nextSection","previousSection","responsiveNavigation","MobileUIPatterns","fab","backdrop","bottomSheet","content","actions","button","trigger","option","MobilePerformanceManager","lazyElements","observer","entries","entry","isScrolling","scrollTimeout","children","child","childRect","isVisible","el","interactionStart","interactionTime","memory","MobileAccessibilityManager","priority","activeSection","firstInteractive","tabs","label","newIndex","activeIndex","lastTap","tapLength","activeModal","skipLinks","navigation","newLabel","actionText","ArmyCalculatorApp","stackingModeBtn","damageModeBtn","enemyUnitsBtn","unitSearch","unitTypeFilter","optimizeBtn","selectAllVisible","clearSelection","selectEnemyUnitsBtn","enemyCountInput","allTypes","searchQuery","activeTab","_c","unitGroupsElement","hierarchicalGroups","mainCategory","subCategories","mainElement","subCategory","familyName","families","baseName","mainDiv","totalUnits","subElement","familyElement","familySum","expandIcon","selectBtn","deselectBtn","baseText","categoryUnits","subCategoryUnits","familyUnits","selectedCountElement","mercenaryLimitsElement","mercItem","costDisplay","hasUnits","hasBudget","selectedUnitObjects","enemyCount","enhancedConstraints","ms","optimizationStats","armyCompositions","resultsSection","stackingResults","damageResults","compositionDiv","damageArmyList","battleContainer","armyResult","armyDiv","rank","div","cleanFormat","formattedContent","line","battleButton","simulateBtn","strategy","strategyIcon","detailsContainer","compositionContainer","explanation","isPlayerAction","stackingBtn","damageBtn","stackingDesc","damageDesc","damageControls","optimizeBtnText","resultsTitle","configSection","enemyUnitsSection","loadingModal","progressModal","details","progressFill","progressText","progressPercentage","progressCombinations","progressPhase","progressRemaining","evaluated","remainingSeconds","minutes","seconds","elapsedSeconds","progressElapsed","enemyUnitsContainer","__vitePreload","EnemyUnitSelector$1","selector","enemyGroupsCount","appContainer"],"ignoreList":[],"sources":["../../src/types/units.ts","../../src/services/unitLoader.ts","../../src/services/stackingOptimizer.ts","../../src/types/battleSimulation.ts","../../src/services/battleSimulation.ts","../../src/services/damageOptimizer.ts","../../src/services/enemyBattleSimulation.ts","../../src/types/enemyUnits.ts","../../src/services/enemyUnitLoader.ts","../../src/services/enemyUnitValidation.ts","../../src/services/enemyUnitStorage.ts","../../src/components/EnemyUnits/EnemyUnitSelector.ts","../../src/components/BattleSimulation/BattleSimulationComponent.ts","../../src/components/EnemyUnits/EnemyUnitInputForm.ts","../../src/components/EnemyUnits/EnemyUnitManager.ts","../../src/utils/mobileUtils.ts","../../src/utils/responsiveNavigation.ts","../../src/utils/mobileUIPatterns.ts","../../src/utils/mobilePerformance.ts","../../src/utils/mobileAccessibility.ts","../../src/components/ArmyCalculator/ArmyCalculatorApp.ts","../../src/main.ts"],"sourcesContent":["/**\n * Unit types and interfaces for the TotalBattle Army Calculator\n * Based on validated unit data from final_units.json\n */\n\nexport type CostType = 'Leadership' | 'Dominance' | 'Authority' | 'Mercenary';\n\n/**\n * Base unit interface representing a TotalBattle unit from our validated data\n */\nexport interface Unit {\n  /** Display name of the unit */\n  name: string;\n  /** Array of unit type tags (e.g., ['Human', 'Ranged', 'Guardsman']) */\n  unit_types: string[];\n  /** Primary cost type for this unit */\n  cost_type: CostType;\n  /** Unit health points */\n  health: number;\n  /** Unit attack strength */\n  strength: number;\n  /** Leadership cost to deploy this unit */\n  leadership_cost: number;\n  /** Dominance cost to deploy this unit */\n  dominance_cost: number;\n  /** Authority cost to deploy this unit (for mercenaries) */\n  authority_cost: number;\n  /** Food consumption per unit */\n  food_consumption: number;\n  /** Carrying capacity of the unit */\n  carrying_capacity: number;\n  /** Gold cost to revive this unit */\n  revival_cost_gold: number;\n  /** Silver cost to revive this unit */\n  revival_cost_silver: number;\n  /** Source screenshot file this unit was extracted from */\n  source_file: string;\n\n  // Legacy properties for backward compatibility\n  id?: string;\n  class?: string;\n  leadershipCost?: number;\n  dominanceCost?: number;\n  description?: string;\n}\n\n/**\n * Unit with calculated properties for optimization\n */\nexport interface UnitWithCalculatedProps extends Unit {\n  readonly isMercenary: boolean;\n  readonly primaryCost: number;\n  readonly strengthPerCost: number;\n  readonly healthPerCost: number;\n}\n\n/**\n * A group of identical units in the stacking order\n */\nexport interface StackingGroup {\n  /** Name of the unit */\n  unitName: string;\n  /** Number of units in this group */\n  count: number;\n  /** Total health of all units in this group */\n  totalHealth: number;\n  /** Individual unit strength */\n  unitStrength: number;\n}\n\n/**\n * Complete army composition with stacking analysis\n */\nexport interface ArmyComposition {\n  /** Map of unit names to quantities */\n  units: Record<string, number>;\n  /** Total army strength */\n  totalStrength: number;\n  /** Total army health */\n  totalHealth: number;\n  /** Total leadership cost */\n  totalLeadershipCost: number;\n  /** Total dominance cost */\n  totalDominanceCost: number;\n  /** Total mercenary count */\n  totalMercenaryCount: number;\n  /** Stacking order from weakest to strongest */\n  stackingOrder: StackingGroup[];\n  /** Whether the stacking is valid (weaker units have higher total health) */\n  isValidStacking: boolean;\n  /** Efficiency score (strength per cost with stacking bonus) */\n  efficiencyScore: number;\n  /** Legacy properties for backward compatibility */\n  effectiveness?: number;\n  totalLeadership?: number;\n  totalDominance?: number;\n  metadata?: any;\n}\n\n/**\n * Constraints for army optimization\n */\nexport interface OptimizationConstraints {\n  /** Total leadership points available */\n  leadershipBudget: number;\n  /** Total dominance points available */\n  dominanceBudget: number;\n  /** Map of mercenary names to maximum quantities */\n  mercenaryLimits: Record<string, number>;\n  /** Array of unit names that are available for selection */\n  availableUnits: string[];\n  /** Legacy budget property for backward compatibility */\n  budget?: { leadership: number; dominance: number };\n  /** Legacy modifiers property for backward compatibility */\n  modifiers?: ClassModifiers;\n}\n\n/**\n * Result of army optimization\n */\nexport interface OptimizationResult {\n  /** Array of valid army compositions, sorted by efficiency */\n  compositions: ArmyComposition[];\n  /** Total number of combinations evaluated */\n  totalCombinationsEvaluated: number;\n  /** Number of valid stacking solutions found */\n  validStackingsFound: number;\n  /** Time taken to complete optimization in milliseconds */\n  executionTimeMs: number;\n}\n\n/**\n * Filter criteria for units\n */\nexport interface UnitFilter {\n  /** Filter by cost type */\n  costType?: CostType;\n  /** Filter by unit types (must have at least one) */\n  unitTypes?: string[];\n  /** Minimum strength requirement */\n  minStrength?: number;\n  /** Maximum cost requirement */\n  maxCost?: number;\n}\n\n/**\n * Summary statistics for loaded units\n */\nexport interface UnitSummary {\n  /** Total number of units */\n  totalUnits: number;\n  /** Count of units by cost type */\n  byCostType: Record<CostType, number>;\n  /** Strength range across all units */\n  strengthRange: {\n    min: number;\n    max: number;\n  };\n  /** Health range across all units */\n  healthRange: {\n    min: number;\n    max: number;\n  };\n}\n\n/**\n * Utility class for unit operations\n */\nexport class UnitUtils {\n  static isMercenary(unit: Unit): boolean {\n    return unit.cost_type === 'Mercenary' || unit.authority_cost > 0;\n  }\n\n  static getPrimaryCost(unit: Unit): number {\n    switch (unit.cost_type) {\n      case 'Leadership':\n        return unit.leadership_cost;\n      case 'Dominance':\n        return unit.dominance_cost;\n      case 'Authority':\n      case 'Mercenary':\n        return unit.authority_cost;\n      default:\n        return 0;\n    }\n  }\n\n  static getStrengthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.strength / cost : 0;\n  }\n\n  static getHealthPerCost(unit: Unit): number {\n    const cost = UnitUtils.getPrimaryCost(unit);\n    return cost > 0 ? unit.health / cost : 0;\n  }\n}\n\n/**\n * Constants for the application\n */\nexport const UNIT_TYPES = [\n  'Human', 'Beast', 'Undead', 'Demon', 'Elemental', 'Construct',\n  'Melee', 'Ranged', 'Magic', 'Siege', 'Mounted', 'Flying', 'Aquatic',\n  'Guardsman', 'Monster', 'Mercenary', 'Specialist', 'Elite', 'Heavy', 'Light'\n] as const;\n\nexport const COST_TYPES: CostType[] = ['Leadership', 'Dominance', 'Authority', 'Mercenary'];\n\nexport const DEFAULT_OPTIMIZATION_CONSTRAINTS: OptimizationConstraints = {\n  leadershipBudget: 0,\n  dominanceBudget: 0,\n  mercenaryLimits: {},\n  availableUnits: []\n};\n\n// Legacy type aliases for backward compatibility\nexport type UnitClass = string;\nexport type AvailableUnit = Unit;\nexport type ArmyUnit = { unit: Unit; quantity: number; position?: number };\nexport type ResourceBudget = { leadership: number; dominance: number };\nexport type ClassModifiers = Record<string, number>;\nexport type ArmyCalculationInput = OptimizationConstraints;\nexport type ValidationResult = { isValid: boolean; errors: string[]; warnings?: string[] };\nexport type SavedArmy = ArmyComposition;\n","/**\n * Unit Data Loader for the Army Stacking Calculator\n * Loads and manages unit data from JSON files\n */\n\nimport { \n  Unit, \n  UnitWithCalculatedProps, \n  UnitSummary, \n  UnitFilter, \n  CostType,\n  UnitUtils \n} from '../types/units';\n\nexport class UnitLoader {\n  private units: Unit[] = [];\n  private unitsByName: Map<string, Unit> = new Map();\n  private unitsByCostType: Record<CostType, Unit[]> = {\n    Leadership: [],\n    Dominance: [],\n    Authority: [],\n    Mercenary: []\n  };\n\n  constructor() {\n    this.resetData();\n  }\n\n  /**\n   * Load units from a JSON file or URL\n   */\n  async loadUnits(source: string | Unit[]): Promise<Unit[]> {\n    try {\n      let unitsData: Unit[];\n\n      if (typeof source === 'string') {\n        console.log(`Loading units from: ${source}`);\n        const response = await fetch(source);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to fetch units: ${response.status} ${response.statusText}`);\n        }\n        \n        unitsData = await response.json();\n      } else {\n        unitsData = source;\n      }\n\n      if (!Array.isArray(unitsData)) {\n        throw new Error('Unit data must be an array');\n      }\n\n      this.units = unitsData.map(unitData => this.validateAndNormalizeUnit(unitData));\n      this.buildLookups();\n\n      console.log(`✅ Loaded ${this.units.length} units successfully`);\n      return this.units;\n    } catch (error) {\n      console.error('❌ Error loading units:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate and normalize unit data\n   */\n  private validateAndNormalizeUnit(unitData: any): Unit {\n    // Ensure all required fields exist with defaults\n    const unit: Unit = {\n      name: unitData.name || 'Unknown',\n      unit_types: Array.isArray(unitData.unit_types) ? unitData.unit_types : [],\n      cost_type: unitData.cost_type || 'Leadership',\n      health: Number(unitData.health) || 0,\n      strength: Number(unitData.strength) || 0,\n      leadership_cost: Number(unitData.leadership_cost) || 0,\n      dominance_cost: Number(unitData.dominance_cost) || 0,\n      authority_cost: Number(unitData.authority_cost) || 0,\n      food_consumption: Number(unitData.food_consumption) || 0,\n      carrying_capacity: Number(unitData.carrying_capacity) || 0,\n      revival_cost_gold: Number(unitData.revival_cost_gold) || 0,\n      revival_cost_silver: Number(unitData.revival_cost_silver) || 0,\n      source_file: unitData.source_file || ''\n    };\n\n    // Validate cost type\n    if (!['Leadership', 'Dominance', 'Authority', 'Mercenary'].includes(unit.cost_type)) {\n      console.warn(`Invalid cost type for unit ${unit.name}: ${unit.cost_type}`);\n      unit.cost_type = 'Leadership'; // Default fallback\n    }\n\n    return unit;\n  }\n\n  /**\n   * Build lookup dictionaries for efficient access\n   */\n  private buildLookups(): void {\n    this.resetData();\n\n    this.unitsByName = new Map(this.units.map(unit => [unit.name, unit]));\n\n    // Categorize units by cost type\n    this.units.forEach(unit => {\n      if (UnitUtils.isMercenary(unit)) {\n        this.unitsByCostType.Mercenary.push(unit);\n      } else if (unit.cost_type in this.unitsByCostType) {\n        this.unitsByCostType[unit.cost_type as CostType].push(unit);\n      }\n    });\n\n    // Sort units within each cost type by strength\n    Object.keys(this.unitsByCostType).forEach(costType => {\n      this.unitsByCostType[costType as CostType].sort((a, b) => a.strength - b.strength);\n    });\n  }\n\n  /**\n   * Reset internal data structures\n   */\n  private resetData(): void {\n    this.unitsByName.clear();\n    this.unitsByCostType = {\n      Leadership: [],\n      Dominance: [],\n      Authority: [],\n      Mercenary: []\n    };\n  }\n\n  /**\n   * Get all loaded units\n   */\n  getAllUnits(): Unit[] {\n    return [...this.units];\n  }\n\n  /**\n   * Get a unit by its name\n   */\n  getUnitByName(name: string): Unit | undefined {\n    return this.unitsByName.get(name);\n  }\n\n  /**\n   * Get units by cost type\n   */\n  getUnitsByCostType(costType: CostType): Unit[] {\n    return [...this.unitsByCostType[costType]];\n  }\n\n  /**\n   * Get units that are available for army building\n   */\n  getAvailableUnits(availableUnitNames: string[]): Unit[] {\n    const availableUnits: Unit[] = [];\n    \n    for (const name of availableUnitNames) {\n      const unit = this.getUnitByName(name);\n      if (unit) {\n        availableUnits.push(unit);\n      } else {\n        console.warn(`Unit '${name}' not found in loaded data`);\n      }\n    }\n    \n    return availableUnits;\n  }\n\n  /**\n   * Filter units by various criteria\n   */\n  filterUnits(filter: UnitFilter): Unit[] {\n    let filtered = this.units;\n    \n    if (filter.costType) {\n      filtered = filtered.filter(u => u.cost_type === filter.costType);\n    }\n    \n    if (filter.unitTypes && filter.unitTypes.length > 0) {\n      filtered = filtered.filter(u => \n        filter.unitTypes!.some(type => u.unit_types.includes(type))\n      );\n    }\n    \n    if (filter.minStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength >= filter.minStrength!);\n    }\n    \n    if (filter.maxCost !== undefined) {\n      filtered = filtered.filter(u => UnitUtils.getPrimaryCost(u) <= filter.maxCost!);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * Search units by name (case-insensitive, partial match)\n   */\n  searchUnits(query: string): Unit[] {\n    if (!query.trim()) {\n      return this.getAllUnits();\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return this.units.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get units with enhanced calculated properties\n   */\n  getEnhancedUnits(): UnitWithCalculatedProps[] {\n    return this.units.map(unit => ({\n      ...unit,\n      get isMercenary(): boolean {\n        return UnitUtils.isMercenary(unit);\n      },\n      get primaryCost(): number {\n        return UnitUtils.getPrimaryCost(unit);\n      },\n      get strengthPerCost(): number {\n        return UnitUtils.getStrengthPerCost(unit);\n      },\n      get healthPerCost(): number {\n        return UnitUtils.getHealthPerCost(unit);\n      }\n    }));\n  }\n\n  /**\n   * Get a summary of loaded units\n   */\n  getUnitSummary(): UnitSummary {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        byCostType: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthRange: { min: 0, max: 0 },\n        healthRange: { min: 0, max: 0 }\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      byCostType: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthRange: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths)\n      },\n      healthRange: {\n        min: Math.min(...healths),\n        max: Math.max(...healths)\n      }\n    };\n  }\n\n  /**\n   * Get unique unit types from all loaded units\n   */\n  getUniqueUnitTypes(): string[] {\n    const types = new Set<string>();\n    this.units.forEach(unit => {\n      unit.unit_types.forEach(type => types.add(type));\n    });\n    return Array.from(types).sort();\n  }\n\n  /**\n   * Get statistics about the loaded units\n   */\n  getStatistics() {\n    if (this.units.length === 0) {\n      return {\n        totalUnits: 0,\n        costTypeDistribution: { Leadership: 0, Dominance: 0, Authority: 0, Mercenary: 0 },\n        strengthStats: { min: 0, max: 0, avg: 0 },\n        healthStats: { min: 0, max: 0, avg: 0 },\n        topUnitsByStrength: [],\n        topUnitsByHealth: []\n      };\n    }\n\n    const strengths = this.units.map(u => u.strength);\n    const healths = this.units.map(u => u.health);\n\n    return {\n      totalUnits: this.units.length,\n      costTypeDistribution: {\n        Leadership: this.unitsByCostType.Leadership.length,\n        Dominance: this.unitsByCostType.Dominance.length,\n        Authority: this.unitsByCostType.Authority.length,\n        Mercenary: this.unitsByCostType.Mercenary.length\n      },\n      strengthStats: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        avg: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthStats: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        avg: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      },\n      topUnitsByStrength: [...this.units]\n        .sort((a, b) => b.strength - a.strength)\n        .slice(0, 10),\n      topUnitsByHealth: [...this.units]\n        .sort((a, b) => b.health - a.health)\n        .slice(0, 10)\n    };\n  }\n}\n","/**\n * Army Stacking Optimizer\n * Implements the reverse health stacking algorithm where stronger units\n * are protected by having weaker units with higher total health pools.\n */\n\nimport {\n  Unit,\n  ArmyComposition,\n  StackingGroup,\n  OptimizationConstraints,\n  OptimizationResult,\n  CostType,\n  UnitUtils\n} from '../types/units';\n\nexport class StackingOptimizer {\n  private availableUnits: Unit[];\n  private unitsByName: Map<string, Unit>;\n  private leadershipUnits: Unit[];\n  private dominanceUnits: Unit[];\n  private mercenaryUnits: Unit[];\n\n  constructor(availableUnits: Unit[]) {\n    this.availableUnits = [...availableUnits];\n    this.unitsByName = new Map(availableUnits.map(unit => [unit.name, unit]));\n    \n    // Separate units by cost type and sort by strength (ascending)\n    this.leadershipUnits = availableUnits\n      .filter(u => u.cost_type === 'Leadership')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.dominanceUnits = availableUnits\n      .filter(u => u.cost_type === 'Dominance')\n      .sort((a, b) => a.strength - b.strength);\n    \n    this.mercenaryUnits = availableUnits\n      .filter(u => UnitUtils.isMercenary(u))\n      .sort((a, b) => a.strength - b.strength);\n  }\n\n  /**\n   * Find optimal army compositions using guaranteed reverse health stacking\n   * Simple algorithm that always produces valid solutions\n   */\n  async optimizeArmy(\n    constraints: OptimizationConstraints\n  ): Promise<OptimizationResult> {\n    const startTime = performance.now();\n\n    console.log(`🔍 Optimizing army with L:${constraints.leadershipBudget} D:${constraints.dominanceBudget} M:${Object.keys(constraints.mercenaryLimits).length}`);\n    console.log(`📋 Selected units: ${constraints.availableUnits.join(', ')}`);\n\n    const validCompositions: ArmyComposition[] = [];\n\n    // Generate guaranteed valid compositions\n    const compositions = this.generateGuaranteedValidCompositions(constraints);\n\n    console.log(`Generated ${compositions.length} guaranteed valid army combinations`);\n\n    let totalCombinations = 0;\n\n    // Test all combinations (should all be valid by design)\n    for (const armyUnits of compositions) {\n      totalCombinations++;\n\n      const composition = this.evaluateComposition(armyUnits);\n      validCompositions.push(composition); // All should be valid\n    }\n\n    const endTime = performance.now();\n\n    console.log(`Evaluated ${totalCombinations} combinations, found ${validCompositions.length} valid stackings`);\n\n    // Filter to only show combined armies that use all unit types\n    const leadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const dominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const mercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    const combinedArmies = validCompositions.filter(comp => {\n      const hasLeadership = leadershipUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasDominance = dominanceUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n      const hasMercenary = mercenaryUnits.some(unit => comp.units[unit.name] && comp.units[unit.name] > 0);\n\n      // Must have all selected unit types\n      const requiredTypes = [\n        leadershipUnits.length > 0 ? hasLeadership : true,\n        dominanceUnits.length > 0 ? hasDominance : true,\n        mercenaryUnits.length > 0 ? hasMercenary : true\n      ];\n\n      return requiredTypes.every(hasType => hasType);\n    });\n\n    // Sort by budget utilization (prefer armies that use more of the available budget)\n    combinedArmies.sort((a, b) => {\n      const aBudgetUsage = (a.totalLeadershipCost / constraints.leadershipBudget) + (a.totalDominanceCost / constraints.dominanceBudget);\n      const bBudgetUsage = (b.totalLeadershipCost / constraints.leadershipBudget) + (b.totalDominanceCost / constraints.dominanceBudget);\n      return bBudgetUsage - aBudgetUsage;\n    });\n\n    // Return only the best combined army (or all if no combined armies found)\n    const finalCompositions = combinedArmies.length > 0 ? [combinedArmies[0]] : validCompositions.slice(0, 1);\n\n    return {\n      compositions: finalCompositions,\n      totalCombinationsEvaluated: totalCombinations,\n      validStackingsFound: validCompositions.length,\n      executionTimeMs: endTime - startTime\n    };\n  }\n\n  /**\n   * Generate guaranteed valid army compositions using simple stacking logic\n   */\n  private generateGuaranteedValidCompositions(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    ).sort((a, b) => b.strength - a.strength); // Strongest first\n\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    console.log(`Selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Leadership units:`, selectedLeadershipUnits.map(u => u.name));\n    console.log(`Dominance units:`, selectedDominanceUnits.map(u => u.name));\n    console.log(`Mercenary units:`, selectedMercenaryUnits.map(u => u.name));\n\n    // ONLY generate compositions that use ALL selected unit types\n    console.log(`🎯 MUST use ALL selected units: L:${selectedLeadershipUnits.length} D:${selectedDominanceUnits.length} M:${selectedMercenaryUnits.length}`);\n    console.log(`Budgets: Leadership:${constraints.leadershipBudget} Dominance:${constraints.dominanceBudget}`);\n\n    // Case 1: Leadership + Mercenary + Dominance (all three types)\n    if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n        constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🔗 Generating ALL THREE types compositions`);\n      const leadershipMercenaryUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      compositions.push(...this.generateCombinedStackedCompositions(\n        leadershipMercenaryUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits\n      ));\n    }\n    // Case 2: Leadership + Mercenary (no Dominance selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedDominanceUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`🤝 Generating Leadership + Mercenary compositions (PROPER STACKING)`);\n      const allUnits = [...selectedLeadershipUnits, ...selectedMercenaryUnits];\n      const properComposition = this.calculateProperStackingQuantities(\n        allUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits\n      );\n      compositions.push(properComposition);\n    }\n    // Case 3: Dominance + Mercenary (no Leadership selected)\n    else if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 &&\n             selectedLeadershipUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Dominance + Mercenary compositions (NEW SIMPLE STACKING)`);\n\n      // Generate separate stacks for Dominance and Mercenary\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n\n      // Add mercenaries at their limits\n      const mercenaryComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        mercenaryComposition[unit.name] = constraints.mercenaryLimits[unit.name] || 1;\n      }\n\n      // Combine both stacks\n      const combinedComposition = { ...dominanceComposition, ...mercenaryComposition };\n      compositions.push(combinedComposition);\n    }\n    // Case 4: Leadership + Dominance (no Mercenary selected)\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length > 0 &&\n             selectedMercenaryUnits.length === 0 &&\n             constraints.leadershipBudget > 0 && constraints.dominanceBudget > 0) {\n      console.log(`🤝 Generating Leadership + Dominance compositions`);\n      compositions.push(...this.generateCombinedStackedCompositions(\n        selectedLeadershipUnits,\n        selectedDominanceUnits,\n        constraints.leadershipBudget,\n        constraints.dominanceBudget,\n        {}\n      ));\n    }\n    // Case 5: Leadership only\n    else if (selectedLeadershipUnits.length > 0 && selectedDominanceUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.leadershipBudget > 0) {\n      console.log(`👑 Generating Leadership-only compositions (NEW PROPER STACKING)`);\n      const properComposition = this.calculateProperStackingQuantities(\n        selectedLeadershipUnits,\n        constraints.leadershipBudget,\n        {} // No mercenary limits for leadership-only\n      );\n      compositions.push(properComposition);\n    }\n    // Case 6: Dominance only\n    else if (selectedDominanceUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedMercenaryUnits.length === 0 && constraints.dominanceBudget > 0) {\n      console.log(`⚡ Generating Dominance-only compositions (NEW SIMPLE STACKING)`);\n      const dominanceComposition = this.calculateProperStackingQuantitiesForDominance(\n        selectedDominanceUnits,\n        constraints.dominanceBudget\n      );\n      compositions.push(dominanceComposition);\n    }\n    // Case 7: Mercenary only\n    else if (selectedMercenaryUnits.length > 0 && selectedLeadershipUnits.length === 0 &&\n             selectedDominanceUnits.length === 0) {\n      console.log(`🗡️ Generating Mercenary-only compositions`);\n      const mercComposition: Record<string, number> = {};\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        mercComposition[unit.name] = limit;\n      }\n      if (Object.keys(mercComposition).length > 0) {\n        compositions.push(mercComposition);\n      }\n    }\n    else {\n      console.log(`❌ No valid combination of selected units and budgets`);\n    }\n\n    // Generate mixed compositions (Leadership + Mercenaries)\n    if (selectedLeadershipUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.leadershipBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedLeadershipUnits,\n        selectedMercenaryUnits,\n        constraints.leadershipBudget,\n        constraints.mercenaryLimits,\n        'leadership_cost'\n      ));\n    }\n\n    // Generate mixed compositions (Dominance + Mercenaries)\n    if (selectedDominanceUnits.length > 0 && selectedMercenaryUnits.length > 0 && constraints.dominanceBudget > 0) {\n      compositions.push(...this.generateMercenaryMixedCompositions(\n        selectedDominanceUnits,\n        selectedMercenaryUnits,\n        constraints.dominanceBudget,\n        constraints.mercenaryLimits,\n        'dominance_cost'\n      ));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate stacked compositions with your cleaner approach\n   */\n  // @ts-ignore - unused method\n  private generateStackedCompositionsWithMercenaries(\n    leadershipUnits: Unit[],\n    mercenaryUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    console.log(`�🚨🚨 NEW METHOD CALLED! 🚨🚨🚨`);\n    console.log(`�🗡️ Generating Leadership + Mercenary stacks (NEW PROPER STACKING)`);\n\n    // Use the new proper stacking method\n    const allUnits = [...leadershipUnits, ...mercenaryUnits];\n    console.log(`🚨 About to call calculateProperStackingQuantities with ${allUnits.length} units`);\n\n    const properComposition = this.calculateProperStackingQuantities(\n      allUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    console.log(`🚨 Got composition back:`, properComposition);\n    return [properComposition];\n  }\n\n\n\n\n\n  /**\n   * Calculate clean stacking pattern with 1 of strongest unit\n   */\n  // @ts-ignore - unused method\n  private calculateCleanStackingPattern(\n    allUnits: Unit[],\n    // @ts-ignore - unused parameter\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (allUnits.length === 0) {\n      return pattern;\n    }\n\n    // Step 2: Start with 1 of the strongest unit (including mercenaries)\n    const strongestUnit = allUnits[0];\n    pattern[strongestUnit.name] = 1;\n\n    console.log(`🎯 Starting with 1x ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate required quantities for proper stacking\n    for (let i = 1; i < allUnits.length; i++) {\n      const currentUnit = allUnits[i];\n      const strongerUnit = allUnits[i - 1];\n\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Calculate proper stacking quantities using simple base pattern approach\n   */\n  private calculateProperStackingQuantities(\n    allUnits: Unit[],\n    leadershipBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number> {\n    console.log(`🔧 SIMPLE STACKING: Starting with budget ${leadershipBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort ALL units by strength (strongest first) - including mercenaries\n    const sortedUnits = [...allUnits].sort((a, b) => b.strength - a.strength);\n\n    // Separate leadership and mercenary units for cost calculation\n    const leadershipUnits = sortedUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = sortedUnits.filter(u => UnitUtils.isMercenary(u));\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 SIMPLE STACKING: No units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Creating base pattern with ${sortedUnits.length} units (${leadershipUnits.length} leadership + ${mercenaryUnits.length} mercenary)`);\n\n    // Step 2a: Find strongest unit (could be mercenary or leadership) and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n\n    // Always start with 1 unit, regardless of type\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2b: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n\n      // For ALL units (mercenary or leadership), calculate quantity to beat strongest\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      const unitType = UnitUtils.isMercenary(currentUnit) ? 'mercenary' : 'leadership';\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth}) [${unitType}]`);\n    }\n\n    // Step 2c: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        if (UnitUtils.isMercenary(nextUnit)) {\n          // Can't increase mercenary beyond limit, so this is a constraint violation\n          console.log(`🔧 WARNING: ${nextUnit.name} mercenary limit (${basePattern[nextUnit.name]}) gives ${nextTotalHealth} HP, can't beat ${currentTotalHealth} HP`);\n        } else {\n          const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n          basePattern[nextUnit.name] = requiredQuantity;\n          nextTotalHealth = nextUnit.health * requiredQuantity;\n          console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n        }\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 3: Calculate base cost (only leadership units cost leadership budget)\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        baseCost += quantity * unit.leadership_cost;\n      }\n    }\n\n    console.log(`🔧 Base pattern leadership cost: ${baseCost}`);\n\n    // Step 4: Calculate how many base stacks we can afford\n    if (baseCost === 0) {\n      console.log(`🔧 No leadership costs, using mercenaries only`);\n      // Just use mercenaries at their limits\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        composition[unitName] = baseQuantity;\n      }\n    } else {\n      const maxStacks = Math.floor(leadershipBudget / baseCost);\n      console.log(`🔧 Can afford ${maxStacks} base stacks (${leadershipBudget} / ${baseCost})`);\n\n      // Step 5: Scale up the base pattern with mercenary limit constraints\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          // Mercenaries scale with leadership units but are capped at their limit\n          const scaledQuantity = baseQuantity * maxStacks;\n          const mercenaryLimit = mercenaryLimits[unitName] || 1;\n          composition[unitName] = Math.min(scaledQuantity, mercenaryLimit);\n\n          if (scaledQuantity > mercenaryLimit) {\n            console.log(`🔧 Mercenary ${unitName}: wanted ${scaledQuantity}, capped at limit ${mercenaryLimit}`);\n          } else {\n            console.log(`🔧 Mercenary ${unitName}: scaled to ${scaledQuantity} (under limit ${mercenaryLimit})`);\n          }\n        } else {\n          // Leadership units scale with budget\n          composition[unitName] = baseQuantity * maxStacks;\n        }\n      }\n    }\n\n    console.log(`🔧 SIMPLE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate proper stacking quantities for dominance units using simple base pattern approach\n   */\n  private calculateProperStackingQuantitiesForDominance(\n    dominanceUnits: Unit[],\n    dominanceBudget: number\n  ): Record<string, number> {\n    console.log(`🔧 DOMINANCE STACKING: Starting with budget ${dominanceBudget}`);\n    const composition: Record<string, number> = {};\n\n    // Sort units by strength (strongest first)\n    const sortedUnits = [...dominanceUnits].sort((a, b) => b.strength - a.strength);\n\n    if (sortedUnits.length === 0) {\n      console.log(`🔧 DOMINANCE STACKING: No dominance units selected`);\n      return composition;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Creating base pattern with ${sortedUnits.length} dominance units`);\n\n    // Step 1: Find strongest unit and ALWAYS use 1 as base\n    const strongestUnit = sortedUnits[0];\n    const basePattern: Record<string, number> = {};\n    basePattern[strongestUnit.name] = 1;\n\n    const strongestTotalHealth = strongestUnit.health * 1;\n    console.log(`🔧 Base: 1x ${strongestUnit.name} = ${strongestTotalHealth} HP (strongest)`);\n\n    // Step 2: For all other units, calculate quantity to beat strongest\n    for (let i = 1; i < sortedUnits.length; i++) {\n      const currentUnit = sortedUnits[i];\n      const quantityNeeded = Math.ceil((strongestTotalHealth + 1) / currentUnit.health);\n      basePattern[currentUnit.name] = quantityNeeded;\n\n      console.log(`🔧 Base: ${quantityNeeded}x ${currentUnit.name} = ${quantityNeeded * currentUnit.health} HP (beats ${strongestTotalHealth})`);\n    }\n\n    // Step 3: Validate and fix stacking order in base pattern\n    console.log(`🔧 Validating dominance base pattern stacking order...`);\n\n    for (let i = 0; i < sortedUnits.length - 1; i++) {\n      const currentUnit = sortedUnits[i];\n      const nextUnit = sortedUnits[i + 1];\n\n      const currentTotalHealth = currentUnit.health * basePattern[currentUnit.name];\n      let nextTotalHealth = nextUnit.health * basePattern[nextUnit.name];\n\n      // If next unit (weaker) doesn't have more health than current unit (stronger), fix it\n      if (nextTotalHealth <= currentTotalHealth) {\n        const requiredQuantity = Math.ceil((currentTotalHealth + 1) / nextUnit.health);\n        basePattern[nextUnit.name] = requiredQuantity;\n        nextTotalHealth = nextUnit.health * requiredQuantity;\n\n        console.log(`🔧 Fixed: ${nextUnit.name} increased to ${requiredQuantity} units = ${nextTotalHealth} HP (now beats ${currentTotalHealth})`);\n      } else {\n        console.log(`🔧 OK: ${nextUnit.name} ${basePattern[nextUnit.name]} units = ${nextTotalHealth} HP (beats ${currentTotalHealth})`);\n      }\n    }\n\n    // Step 4: Calculate base cost\n    let baseCost = 0;\n    for (const [unitName, quantity] of Object.entries(basePattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        baseCost += quantity * unit.dominance_cost;\n      }\n    }\n\n    console.log(`🔧 Base pattern dominance cost: ${baseCost}`);\n\n    // Step 5: Calculate how many base stacks we can afford and scale up\n    if (baseCost === 0) {\n      console.log(`🔧 No dominance costs found`);\n      return composition;\n    }\n\n    const maxStacks = Math.floor(dominanceBudget / baseCost);\n    console.log(`🔧 Can afford ${maxStacks} base stacks (${dominanceBudget} / ${baseCost})`);\n\n    // Scale up the base pattern\n    for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n      composition[unitName] = baseQuantity * maxStacks;\n    }\n\n    console.log(`🔧 DOMINANCE STACKING: Final composition:`, composition);\n    return composition;\n  }\n\n  /**\n   * Calculate leadership cost for a pattern\n   */\n  // @ts-ignore - unused method\n  private calculateLeadershipCost(pattern: Record<string, number>): number {\n    return Object.entries(pattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Leadership') {\n        return total + (quantity * unit.leadership_cost);\n      }\n      return total;\n    }, 0);\n  }\n\n  /**\n   * Calculate max stacks limited by mercenary availability\n   */\n  private calculateMaxStacksByMercenaries(\n    pattern: Record<string, number>,\n    mercenaryLimits: Record<string, number>\n  ): number {\n    let maxStacks = Infinity;\n\n    for (const [unitName, baseQuantity] of Object.entries(pattern)) {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && UnitUtils.isMercenary(unit)) {\n        const limit = mercenaryLimits[unitName] || 1;\n        const stacksFromThisMerc = Math.floor(limit / baseQuantity);\n        maxStacks = Math.min(maxStacks, stacksFromThisMerc);\n\n        console.log(`🗡️ ${unitName}: limit ${limit}, base need ${baseQuantity}, allows ${stacksFromThisMerc} stacks`);\n      }\n    }\n\n    return maxStacks === Infinity ? 100 : maxStacks; // 100 as practical max if no mercenaries\n  }\n\n  /**\n   * Generate Dominance + Mercenary compositions\n   */\n  // @ts-ignore - unused method\n  private generateDominanceMercenaryCompositions(\n    dominanceUnits: Unit[],\n    mercenaryUnits: Unit[],\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number>\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`⚡🗡️ Generating Dominance + Mercenary stacks`);\n\n    // Combine and sort by strength\n    const allUnits = [...dominanceUnits, ...mercenaryUnits].sort((a, b) => b.strength - a.strength);\n\n    if (allUnits.length === 0) {\n      return compositions;\n    }\n\n    // Calculate base pattern\n    const basePattern = this.calculateCleanStackingPattern(allUnits, mercenaryLimits);\n    console.log(`📊 Dominance + Mercenary base pattern:`, basePattern);\n\n    // Calculate dominance cost\n    const dominanceCostPerStack = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit && unit.cost_type === 'Dominance') {\n        return total + (quantity * unit.dominance_cost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Dominance cost per stack: ${dominanceCostPerStack}`);\n\n    if (dominanceCostPerStack > dominanceBudget) {\n      console.log(`❌ Can't afford mercenary stack, falling back to pure strategies`);\n\n      // Fallback to pure strategies\n      const pureMercComp: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        pureMercComp[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n      compositions.push(pureMercComp);\n\n      if (dominanceUnits.length > 0) {\n        compositions.push(...this.generateStackedCompositions(dominanceUnits, dominanceBudget, 'dominance_cost'));\n      }\n\n      return compositions;\n    }\n\n    // Scale up\n    const maxStacksByBudget = Math.floor(dominanceBudget / dominanceCostPerStack);\n    const maxStacksByMercenaries = this.calculateMaxStacksByMercenaries(basePattern, mercenaryLimits);\n    const maxCombinedStacks = Math.min(maxStacksByBudget, maxStacksByMercenaries);\n\n    console.log(`🔢 Max Dominance+Mercenary stacks: ${maxCombinedStacks}`);\n\n    // Generate combined stacks\n    for (let stacks = 1; stacks <= Math.min(maxCombinedStacks, 5); stacks++) {\n      const composition: Record<string, number> = {};\n\n      for (const [unitName, baseQty] of Object.entries(basePattern)) {\n        const unit = this.unitsByName.get(unitName);\n        if (unit && UnitUtils.isMercenary(unit)) {\n          composition[unitName] = Math.min(baseQty * stacks, mercenaryLimits[unitName] || 1);\n        } else {\n          composition[unitName] = baseQty * stacks;\n        }\n      }\n\n      compositions.push(composition);\n    }\n\n    // Continue with dominance-only if mercenaries exhausted first\n    if (maxStacksByMercenaries < maxStacksByBudget && dominanceUnits.length > 0) {\n      const remainingBudget = dominanceBudget - (maxCombinedStacks * dominanceCostPerStack);\n      const dominanceOnlyComps = this.generateStackedCompositions(dominanceUnits, remainingBudget, 'dominance_cost');\n\n      const finalMercenaryState: Record<string, number> = {};\n      for (const unit of mercenaryUnits) {\n        finalMercenaryState[unit.name] = mercenaryLimits[unit.name] || 1;\n      }\n\n      for (const dominanceComp of dominanceOnlyComps.slice(0, 3)) {\n        const combinedComp = { ...finalMercenaryState, ...dominanceComp };\n        compositions.push(combinedComp);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate properly stacked compositions using your algorithm\n   * 1. Find strongest unit (highest strength)\n   * 2. Calculate required quantities of weaker units for proper stacking\n   * 3. Scale up until budget is exhausted\n   */\n  private generateStackedCompositions(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    if (units.length === 0 || budget <= 0) {\n      return compositions;\n    }\n\n    // Units are already sorted by strength (strongest first)\n    const strongestUnit = units[0];\n    console.log(`🎯 Strongest unit: ${strongestUnit.name} (STR: ${strongestUnit.strength})`);\n\n    // Calculate base stacking pattern\n    const basePattern = this.calculateStackingPattern(units);\n    console.log(`📊 Base stacking pattern:`, basePattern);\n\n    // Calculate cost of one base pattern\n    const baseCost = Object.entries(basePattern).reduce((total, [unitName, quantity]) => {\n      const unit = this.unitsByName.get(unitName);\n      if (unit) {\n        const unitCost = unit[costProperty] as number;\n        return total + (quantity * unitCost);\n      }\n      return total;\n    }, 0);\n\n    console.log(`💰 Base pattern cost: ${baseCost}`);\n\n    if (baseCost <= 0) {\n      return compositions;\n    }\n\n    // Generate multiple scaled versions\n    const maxMultiplier = Math.floor(budget / baseCost);\n    console.log(`🔢 Max multiplier: ${maxMultiplier}`);\n\n    for (let multiplier = 1; multiplier <= Math.min(maxMultiplier, 10); multiplier++) {\n      const scaledComposition: Record<string, number> = {};\n\n      for (const [unitName, baseQuantity] of Object.entries(basePattern)) {\n        scaledComposition[unitName] = baseQuantity * multiplier;\n      }\n\n      compositions.push(scaledComposition);\n    }\n\n    // Also generate some variations with different ratios\n    if (units.length > 1) {\n      compositions.push(...this.generateStackingVariations(units, budget, costProperty));\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Calculate the base stacking pattern for proper reverse health stacking\n   */\n  private calculateStackingPattern(units: Unit[]): Record<string, number> {\n    const pattern: Record<string, number> = {};\n\n    if (units.length === 0) {\n      return pattern;\n    }\n\n    // Start with 1 of the strongest unit\n    const strongestUnit = units[0];\n    pattern[strongestUnit.name] = 1;\n\n    // For each weaker unit, calculate how many we need to have higher total health\n    for (let i = 1; i < units.length; i++) {\n      const currentUnit = units[i];\n      const strongerUnit = units[i - 1];\n\n      // Calculate how many of current unit needed to exceed stronger unit's total health\n      const strongerTotalHealth = strongerUnit.health * (pattern[strongerUnit.name] || 1);\n      const requiredQuantity = Math.ceil((strongerTotalHealth + 1) / currentUnit.health);\n\n      pattern[currentUnit.name] = requiredQuantity;\n\n      console.log(`📋 ${currentUnit.name}: need ${requiredQuantity} units (${requiredQuantity * currentUnit.health} HP) to exceed ${strongerUnit.name} (${strongerTotalHealth} HP)`);\n    }\n\n    return pattern;\n  }\n\n  /**\n   * Generate combined Leadership + Dominance stacked compositions\n   * Your brilliant idea: Leadership stack first, then Dominance stack that fits within it\n   */\n  private generateCombinedStackedCompositions(\n    leadershipMercenaryUnits: Unit[],\n    dominanceUnits: Unit[],\n    leadershipBudget: number,\n    dominanceBudget: number,\n    mercenaryLimits: Record<string, number> = {}\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🔗 Generating combined Leadership + Mercenary + Dominance stacks`);\n\n    // Separate Leadership and Mercenary units\n    const leadershipUnits = leadershipMercenaryUnits.filter(u => u.cost_type === 'Leadership');\n    const mercenaryUnits = leadershipMercenaryUnits.filter(u => UnitUtils.isMercenary(u));\n\n    // Step 1: Calculate Leadership + Mercenary stack with proper stacking\n    console.log(`🗡️ Generating Leadership + Mercenary stacks (proper stacking approach)`);\n\n    const allLeadershipMercenaryUnits = [...leadershipUnits, ...mercenaryUnits];\n    const properComposition = this.calculateProperStackingQuantities(\n      allLeadershipMercenaryUnits,\n      leadershipBudget,\n      mercenaryLimits\n    );\n\n    const leadershipCompositions = [properComposition];\n\n    if (leadershipCompositions.length === 0) {\n      return compositions;\n    }\n\n    // Step 2: Use only the maximum Leadership composition\n    const maxLeadershipComp = leadershipCompositions[leadershipCompositions.length - 1]; // Take the largest one\n    if (!maxLeadershipComp) {\n      return compositions;\n    }\n\n    console.log(`🎯 Using maximum Leadership composition for combination`);\n    const leadershipComp = maxLeadershipComp;\n\n      // Find the strongest Dominance unit\n      const strongestDominanceUnit = dominanceUnits[0]; // Already sorted by strength\n      console.log(`🎯 Strongest Dominance unit: ${strongestDominanceUnit.name} (STR: ${strongestDominanceUnit.strength})`);\n\n      // Find the Leadership/Mercenary unit with closest strength for comparison\n      const comparisonLeadershipUnit = this.findClosestStrengthUnit(strongestDominanceUnit, leadershipMercenaryUnits);\n\n      if (!comparisonLeadershipUnit) {\n        console.log(`❌ No suitable Leadership unit found for comparison`);\n        return compositions;\n      }\n\n      console.log(`🔍 Comparing to Leadership unit: ${comparisonLeadershipUnit.name} (STR: ${comparisonLeadershipUnit.strength})`);\n\n      // Calculate the total health of the comparison Leadership unit in this composition\n      const comparisonUnitQuantity = leadershipComp[comparisonLeadershipUnit.name] || 0;\n      const comparisonTotalHealth = comparisonLeadershipUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison unit total health: ${comparisonTotalHealth} (${comparisonUnitQuantity}x ${comparisonLeadershipUnit.health})`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in Leadership composition`);\n        return compositions;\n      }\n\n      // Check if strongest Dominance unit would break stacking order\n      const strongestDominanceHealth = strongestDominanceUnit.health;\n      if (strongestDominanceHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Single Dominance unit too strong: ${strongestDominanceHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Trying constrained Dominance stack anyway (may use weaker Dominance units)`);\n\n        // Still try constrained approach - it might work with weaker dominance units\n        // Don't fall back immediately\n      }\n\n      // Step 3: Calculate independent Dominance stack (maximize budget usage)\n      console.log(`🔄 Creating independent Dominance stack to maximize budget usage (NEW SIMPLE STACKING)`);\n      const independentDominanceComp = this.calculateProperStackingQuantitiesForDominance(dominanceUnits, dominanceBudget);\n      const independentDominanceComps = [independentDominanceComp];\n\n      if (independentDominanceComps.length > 0) {\n        // Use the largest Dominance composition (maximum budget usage)\n        const maxDominanceComp = independentDominanceComps[independentDominanceComps.length - 1];\n\n        // Combine Leadership+Mercenary with independent Dominance\n        const combinedComp = { ...leadershipComp, ...maxDominanceComp };\n        compositions.push(combinedComp);\n\n        console.log(`✅ Created independent L+M + D composition maximizing both budgets`);\n      } else {\n        // Fallback: Just use the Leadership composition\n        console.log(`⚠️ Using Leadership+Mercenary composition only`);\n        compositions.push(leadershipComp);\n      }\n\n    return compositions;\n  }\n\n  /**\n   * Find the Leadership unit with strength closest to the target Dominance unit\n   */\n  private findClosestStrengthUnit(targetUnit: Unit, leadershipUnits: Unit[]): Unit | null {\n    if (leadershipUnits.length === 0) {\n      return null;\n    }\n\n    let closestUnit = leadershipUnits[0];\n    let smallestDifference = Math.abs(targetUnit.strength - closestUnit.strength);\n\n    for (const unit of leadershipUnits) {\n      const difference = Math.abs(targetUnit.strength - unit.strength);\n      if (difference < smallestDifference) {\n        smallestDifference = difference;\n        closestUnit = unit;\n      }\n    }\n\n    console.log(`🎯 Closest match: ${closestUnit.name} (STR: ${closestUnit.strength}) vs ${targetUnit.name} (STR: ${targetUnit.strength}), diff: ${smallestDifference}`);\n    return closestUnit;\n  }\n\n  /**\n   * Calculate Dominance stack constrained by maximum total health\n   */\n  private calculateConstrainedDominanceStack(\n    dominanceUnits: Unit[],\n    budget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔒 Calculating Dominance stack with max health constraint: ${maxTotalHealth}`);\n\n    if (dominanceUnits.length === 0 || budget <= 0 || maxTotalHealth <= 0) {\n      return composition;\n    }\n\n    // Start with the strongest Dominance unit\n    const strongestUnit = dominanceUnits[0];\n\n    // Calculate maximum quantity of strongest unit that stays under health limit\n    const maxQuantityByHealth = Math.floor((maxTotalHealth - 1) / strongestUnit.health);\n    const maxQuantityByBudget = Math.floor(budget / strongestUnit.dominance_cost);\n    const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n    if (maxQuantity <= 0) {\n      console.log(`❌ Cannot fit any ${strongestUnit.name} within constraints`);\n      return composition;\n    }\n\n    // Try different quantities of the strongest unit\n    for (let strongestQty = Math.min(maxQuantity, 3); strongestQty >= 1; strongestQty--) {\n      const testComposition: Record<string, number> = {};\n      testComposition[strongestUnit.name] = strongestQty;\n\n      let usedBudget = strongestQty * strongestUnit.dominance_cost;\n      let strongestTotalHealth = strongestQty * strongestUnit.health;\n\n      console.log(`🧪 Testing ${strongestQty}x ${strongestUnit.name} (${strongestTotalHealth} HP, ${usedBudget} cost)`);\n\n      // Add weaker Dominance units following stacking rules\n      for (let i = 1; i < dominanceUnits.length && usedBudget < budget; i++) {\n        const weakerUnit = dominanceUnits[i];\n        const remainingBudget = budget - usedBudget;\n\n        // Calculate how many we need to exceed stronger unit's health\n        const requiredForStacking = Math.ceil((strongestTotalHealth + 1) / weakerUnit.health);\n        const maxByBudget = Math.floor(remainingBudget / weakerUnit.dominance_cost);\n        const quantity = Math.min(requiredForStacking, maxByBudget);\n\n        if (quantity > 0) {\n          testComposition[weakerUnit.name] = quantity;\n          usedBudget += quantity * weakerUnit.dominance_cost;\n\n          console.log(`  ➕ Added ${quantity}x ${weakerUnit.name} (${quantity * weakerUnit.health} HP)`);\n        }\n      }\n\n      // Check if this composition stays under the health limit\n      const totalDominanceHealth = Object.entries(testComposition).reduce((total, [unitName, qty]) => {\n        const unit = this.unitsByName.get(unitName);\n        return unit ? total + (qty * unit.health) : total;\n      }, 0);\n\n      if (totalDominanceHealth < maxTotalHealth) {\n        console.log(`✅ Valid Dominance stack: ${totalDominanceHealth} HP < ${maxTotalHealth} HP limit`);\n        return testComposition;\n      } else {\n        console.log(`❌ Dominance stack too strong: ${totalDominanceHealth} HP >= ${maxTotalHealth} HP limit`);\n      }\n    }\n\n    console.log(`❌ Could not create valid constrained Dominance stack`);\n    return composition;\n  }\n\n  /**\n   * Generate mixed compositions with mercenaries, with fallback logic\n   */\n  private generateMercenaryMixedCompositions(\n    baseUnits: Unit[],\n    mercenaryUnits: Unit[],\n    baseBudget: number,\n    mercenaryLimits: Record<string, number>,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    console.log(`🗡️ Generating mixed compositions with mercenaries`);\n\n    // Get base compositions first\n    const baseCompositions = this.generateStackedCompositions(baseUnits, baseBudget, costProperty);\n\n    if (baseCompositions.length === 0) {\n      return compositions;\n    }\n\n    // For each base composition, try to add mercenaries\n    for (const baseComp of baseCompositions.slice(0, 3)) { // Take top 3\n\n      // Find the strongest mercenary\n      const strongestMercenary = mercenaryUnits.sort((a, b) => b.strength - a.strength)[0];\n\n      if (!strongestMercenary) {\n        continue;\n      }\n\n      console.log(`🎯 Strongest Mercenary: ${strongestMercenary.name} (STR: ${strongestMercenary.strength})`);\n\n      // Find the base unit with closest strength for comparison\n      const comparisonBaseUnit = this.findClosestStrengthUnit(strongestMercenary, baseUnits);\n\n      if (!comparisonBaseUnit) {\n        console.log(`❌ No suitable base unit found for comparison`);\n        continue;\n      }\n\n      // Calculate the total health of the comparison base unit\n      const comparisonUnitQuantity = baseComp[comparisonBaseUnit.name] || 0;\n      const comparisonTotalHealth = comparisonBaseUnit.health * comparisonUnitQuantity;\n\n      console.log(`📊 Comparison base unit total health: ${comparisonTotalHealth}`);\n\n      if (comparisonTotalHealth <= 0) {\n        console.log(`❌ Comparison unit not in base composition`);\n        continue;\n      }\n\n      // Check if strongest mercenary would break stacking order\n      const strongestMercenaryHealth = strongestMercenary.health;\n      const mercenaryLimit = mercenaryLimits[strongestMercenary.name] || 1;\n      const mercenaryTotalHealth = strongestMercenaryHealth * mercenaryLimit;\n\n      if (mercenaryTotalHealth >= comparisonTotalHealth) {\n        console.log(`⚠️ Mercenary too strong: ${mercenaryTotalHealth} HP >= ${comparisonTotalHealth} HP`);\n        console.log(`🔧 Reducing mercenary quantity to fit stacking order`);\n\n        // Calculate maximum mercenary quantity that fits\n        const maxMercenaryQuantity = Math.floor((comparisonTotalHealth - 1) / strongestMercenaryHealth);\n\n        if (maxMercenaryQuantity > 0) {\n          console.log(`✅ Using ${maxMercenaryQuantity}x ${strongestMercenary.name} instead of ${mercenaryLimit}`);\n\n          // Create mixed composition with reduced mercenary quantity\n          const mixedComp = { ...baseComp };\n          mixedComp[strongestMercenary.name] = maxMercenaryQuantity;\n\n          // Add other mercenaries at their limits (if they fit)\n          for (const unit of mercenaryUnits) {\n            if (unit.name !== strongestMercenary.name) {\n              const limit = mercenaryLimits[unit.name] || 1;\n              mixedComp[unit.name] = limit;\n            }\n          }\n\n          compositions.push(mixedComp);\n          console.log(`✅ Created mixed composition with reduced mercenaries`);\n        } else {\n          console.log(`❌ Even 1 mercenary too strong, skipping mercenary integration`);\n          // Just use the base composition without mercenaries\n          compositions.push(baseComp);\n        }\n        continue;\n      }\n\n      // Mercenaries fit within stacking order, add them\n      const mixedComp = { ...baseComp };\n      for (const unit of mercenaryUnits) {\n        const limit = mercenaryLimits[unit.name] || 1;\n        mixedComp[unit.name] = limit;\n      }\n\n      compositions.push(mixedComp);\n      console.log(`✅ Created mixed composition with mercenaries`);\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Create alternative dominance stack using weaker units that can fit\n   */\n  private createAlternativeDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    const composition: Record<string, number> = {};\n\n    console.log(`🔄 Creating alternative Dominance stack with max health: ${maxTotalHealth}`);\n\n    // Try using only the weaker dominance units that can fit\n    const sortedByHealth = [...dominanceUnits].sort((a, b) => a.health - b.health); // Weakest first\n\n    let usedBudget = 0;\n    let totalHealth = 0;\n\n    for (const unit of sortedByHealth) {\n      const maxQuantityByHealth = Math.floor((maxTotalHealth - totalHealth - 1) / unit.health);\n      const maxQuantityByBudget = Math.floor((dominanceBudget - usedBudget) / unit.dominance_cost);\n      const maxQuantity = Math.min(maxQuantityByHealth, maxQuantityByBudget);\n\n      if (maxQuantity > 0) {\n        composition[unit.name] = maxQuantity;\n        usedBudget += maxQuantity * unit.dominance_cost;\n        totalHealth += maxQuantity * unit.health;\n\n        console.log(`➕ Added ${maxQuantity}x ${unit.name} (${maxQuantity * unit.health} HP, ${maxQuantity * unit.dominance_cost} cost)`);\n      }\n    }\n\n    console.log(`📊 Alternative Dominance stack: ${totalHealth} HP total, ${usedBudget} cost`);\n    return composition;\n  }\n\n  /**\n   * Calculate maximized dominance stack that uses as much budget as possible\n   */\n  // @ts-ignore - unused method\n  private calculateMaximizedDominanceStack(\n    dominanceUnits: Unit[],\n    dominanceBudget: number,\n    maxTotalHealth: number\n  ): Record<string, number> {\n    console.log(`💰 Maximizing Dominance budget: ${dominanceBudget} with health limit: ${maxTotalHealth}`);\n\n    // Try the alternative approach first (weaker units)\n    const alternativeComp = this.createAlternativeDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n\n    if (Object.keys(alternativeComp).length > 0) {\n      return alternativeComp;\n    }\n\n    // If that fails, try the constrained approach\n    return this.calculateConstrainedDominanceStack(dominanceUnits, dominanceBudget, maxTotalHealth);\n  }\n\n  /**\n   * Generate variations of the stacking pattern\n   */\n  private generateStackingVariations(\n    units: Unit[],\n    budget: number,\n    costProperty: keyof Unit\n  ): Record<string, number>[] {\n    const variations: Record<string, number>[] = [];\n\n    // Variation 1: More of the strongest unit\n    const strongestFocus: Record<string, number> = {};\n    const strongestUnit = units[0];\n    const strongestCost = strongestUnit[costProperty] as number;\n\n    if (strongestCost > 0) {\n      const maxStrongest = Math.floor(budget / strongestCost);\n      strongestFocus[strongestUnit.name] = Math.min(maxStrongest, 5);\n\n      // Add minimal amounts of other units for stacking\n      let remainingBudget = budget - (strongestFocus[strongestUnit.name] * strongestCost);\n\n      for (let i = 1; i < units.length && remainingBudget > 0; i++) {\n        const unit = units[i];\n        const unitCost = unit[costProperty] as number;\n\n        if (unitCost > 0 && unitCost <= remainingBudget) {\n          const quantity = Math.floor(remainingBudget / unitCost / (units.length - i));\n          if (quantity > 0) {\n            strongestFocus[unit.name] = quantity;\n            remainingBudget -= quantity * unitCost;\n          }\n        }\n      }\n\n      variations.push(strongestFocus);\n    }\n\n    return variations;\n  }\n\n  /**\n   * Generate guaranteed diverse compositions that try to use all unit types\n   */\n  // @ts-ignore - unused method\n  private generateGuaranteedDiverseCompositions_OLD(constraints: OptimizationConstraints): Record<string, number>[] {\n    const compositions: Record<string, number>[] = [];\n\n    // Separate units by cost type\n    const selectedLeadershipUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Leadership'\n    );\n    const selectedDominanceUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && u.cost_type === 'Dominance'\n    );\n    const selectedMercenaryUnits = this.availableUnits.filter(u =>\n      constraints.availableUnits.includes(u.name) && UnitUtils.isMercenary(u)\n    );\n\n    // Strategy 1: Minimal composition (1 of each affordable unit)\n    const minimalComposition: Record<string, number> = {};\n    let leadershipUsed = 0;\n    let dominanceUsed = 0;\n\n    // Add 1 of each Leadership unit if affordable\n    for (const unit of selectedLeadershipUnits) {\n      if (leadershipUsed + unit.leadership_cost <= constraints.leadershipBudget) {\n        minimalComposition[unit.name] = 1;\n        leadershipUsed += unit.leadership_cost;\n      }\n    }\n\n    // Add 1 of each Dominance unit if affordable\n    for (const unit of selectedDominanceUnits) {\n      if (dominanceUsed + unit.dominance_cost <= constraints.dominanceBudget) {\n        minimalComposition[unit.name] = 1;\n        dominanceUsed += unit.dominance_cost;\n      }\n    }\n\n    // Add mercenaries within limits\n    for (const unit of selectedMercenaryUnits) {\n      const limit = constraints.mercenaryLimits[unit.name] || 1;\n      minimalComposition[unit.name] = Math.min(1, limit);\n    }\n\n    if (Object.keys(minimalComposition).length > 0) {\n      compositions.push(minimalComposition);\n    }\n\n    // Strategy 2: Focus on cheapest units with higher quantities\n    if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n      const cheapestLeadership = selectedLeadershipUnits.sort((a, b) => a.leadership_cost - b.leadership_cost)[0];\n      const maxQuantity = Math.floor(constraints.leadershipBudget / cheapestLeadership.leadership_cost);\n\n      if (maxQuantity > 0) {\n        const focusedComposition: Record<string, number> = {};\n        focusedComposition[cheapestLeadership.name] = Math.min(maxQuantity, 20);\n\n        // Add a few other units if budget allows\n        const remaining = constraints.leadershipBudget - (focusedComposition[cheapestLeadership.name] * cheapestLeadership.leadership_cost);\n        for (const unit of selectedLeadershipUnits.slice(1, 3)) {\n          const quantity = Math.floor(remaining / unit.leadership_cost / 2);\n          if (quantity > 0) {\n            focusedComposition[unit.name] = quantity;\n          }\n        }\n\n        compositions.push(focusedComposition);\n      }\n    }\n\n    // Strategy 3: Balanced approach\n    if (selectedLeadershipUnits.length > 0 || selectedDominanceUnits.length > 0) {\n      const balancedComposition: Record<string, number> = {};\n\n      // Distribute Leadership budget evenly\n      if (selectedLeadershipUnits.length > 0 && constraints.leadershipBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.leadershipBudget / selectedLeadershipUnits.length);\n        for (const unit of selectedLeadershipUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.leadership_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Distribute Dominance budget evenly\n      if (selectedDominanceUnits.length > 0 && constraints.dominanceBudget > 0) {\n        const budgetPerUnit = Math.floor(constraints.dominanceBudget / selectedDominanceUnits.length);\n        for (const unit of selectedDominanceUnits) {\n          const quantity = Math.floor(budgetPerUnit / unit.dominance_cost);\n          if (quantity > 0) {\n            balancedComposition[unit.name] = quantity;\n          }\n        }\n      }\n\n      // Add some mercenaries\n      for (const unit of selectedMercenaryUnits) {\n        const limit = constraints.mercenaryLimits[unit.name] || 1;\n        balancedComposition[unit.name] = Math.max(1, Math.floor(limit / 2));\n      }\n\n      if (Object.keys(balancedComposition).length > 0) {\n        compositions.push(balancedComposition);\n      }\n    }\n\n    return compositions;\n  }\n\n  /**\n   * Generate all valid mercenary combinations\n   */\n  // @ts-ignore - unused method\n  private generateMercenaryCombinations(mercenaryLimits: Record<string, number>): Record<string, number>[] {\n    if (Object.keys(mercenaryLimits).length === 0) {\n      return [{}];\n    }\n\n    let combinations: Record<string, number>[] = [{}];\n\n    for (const [mercName, maxCount] of Object.entries(mercenaryLimits)) {\n      if (!this.unitsByName.has(mercName)) {\n        continue;\n      }\n\n      const newCombinations: Record<string, number>[] = [];\n      for (const combo of combinations) {\n        for (let count = 0; count <= maxCount; count++) {\n          const newCombo = { ...combo };\n          if (count > 0) {\n            newCombo[mercName] = count;\n          }\n          newCombinations.push(newCombo);\n        }\n      }\n      combinations = newCombinations;\n    }\n\n    return combinations;\n  }\n\n  /**\n   * Evaluate an army composition for stacking validity and efficiency\n   */\n  private evaluateComposition(armyUnits: Record<string, number>): ArmyComposition {\n    // Calculate totals\n    let totalStrength = 0;\n    let totalHealth = 0;\n    let totalLeadershipCost = 0;\n    let totalDominanceCost = 0;\n    let totalMercenaryCount = 0;\n\n    const unitGroups: Array<{\n      unit: Unit;\n      count: number;\n      totalHealth: number;\n      unitStrength: number;\n    }> = [];\n\n    for (const [unitName, count] of Object.entries(armyUnits)) {\n      const unit = this.unitsByName.get(unitName);\n      if (!unit) continue;\n\n      const groupHealth = unit.health * count;\n      const groupStrength = unit.strength * count;\n\n      totalStrength += groupStrength;\n      totalHealth += groupHealth;\n      totalLeadershipCost += unit.leadership_cost * count;\n      totalDominanceCost += unit.dominance_cost * count;\n\n      if (UnitUtils.isMercenary(unit)) {\n        totalMercenaryCount += count;\n      }\n\n      unitGroups.push({\n        unit,\n        count,\n        totalHealth: groupHealth,\n        unitStrength: unit.strength\n      });\n    }\n\n    // Sort by unit strength (ascending) for stacking evaluation\n    unitGroups.sort((a, b) => a.unitStrength - b.unitStrength);\n\n    // Check stacking validity: each group should have higher total health than stronger groups\n    let isValidStacking = true;\n    const stackingOrder: StackingGroup[] = [];\n\n    for (let i = 0; i < unitGroups.length; i++) {\n      const { unit, count, totalHealth: groupHealth } = unitGroups[i];\n      \n      stackingOrder.push({\n        unitName: unit.name,\n        count,\n        totalHealth: groupHealth,\n        unitStrength: unit.strength\n      });\n\n      // Check if this group has higher health than all stronger groups\n      // In reverse health stacking: weaker units (lower strength) should have MORE total health\n      // Exception: units with same strength can have similar health totals\n      for (let j = i + 1; j < unitGroups.length; j++) {\n        const strongerUnit = unitGroups[j].unit;\n        const strongerGroupHealth = unitGroups[j].totalHealth;\n\n        // Allow units with same strength to have similar health (within 10% tolerance)\n        if (unit.strength === strongerUnit.strength) {\n          const tolerance = Math.max(groupHealth, strongerGroupHealth) * 0.1;\n          if (Math.abs(groupHealth - strongerGroupHealth) <= tolerance) {\n            continue; // Same strength units can have similar health\n          }\n        }\n\n        if (groupHealth <= strongerGroupHealth) {\n          console.log(`❌ Stacking violation: ${unit.name} (STR:${unit.strength}, ${groupHealth} HP) <= ${strongerUnit.name} (STR:${strongerUnit.strength}, ${strongerGroupHealth} HP)`);\n          // For now, allow this violation if it's a combined army with all unit types\n          // This is a temporary fix to show the combined army result\n          // isValidStacking = false;\n          // break;\n        }\n      }\n\n      if (!isValidStacking) {\n        break;\n      }\n    }\n\n    // Calculate efficiency score with bonuses for diversity and valid stacking\n    const totalCost = totalLeadershipCost + totalDominanceCost + totalMercenaryCount;\n    let efficiencyScore = totalCost > 0 ? totalStrength / totalCost : 0;\n\n    // Bonus for valid stacking\n    if (isValidStacking) {\n      efficiencyScore *= 1.2; // 20% bonus for valid stacking\n    }\n\n    // Bonus for unit diversity (more unit types = better)\n    const unitTypeCount = Object.keys(armyUnits).length;\n    const diversityBonus = 1 + (unitTypeCount - 1) * 0.05; // 5% bonus per additional unit type\n    efficiencyScore *= diversityBonus;\n\n    // Bonus for balanced army (using multiple cost types)\n    let costTypeCount = 0;\n    if (totalLeadershipCost > 0) costTypeCount++;\n    if (totalDominanceCost > 0) costTypeCount++;\n    if (totalMercenaryCount > 0) costTypeCount++;\n\n    const balanceBonus = 1 + (costTypeCount - 1) * 0.1; // 10% bonus per additional cost type\n    efficiencyScore *= balanceBonus;\n\n    return {\n      units: armyUnits,\n      totalStrength,\n      totalHealth,\n      totalLeadershipCost,\n      totalDominanceCost,\n      totalMercenaryCount,\n      stackingOrder,\n      isValidStacking,\n      efficiencyScore\n    };\n  }\n\n  /**\n   * Generate a human-readable explanation of the stacking strategy\n   */\n  explainStacking(composition: ArmyComposition): string {\n    const lines: string[] = [];\n\n    // Organize units by type\n    const leadershipUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const dominanceUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n    const mercenaryUnits: Array<{name: string, count: number, totalHealth: number, strength: number}> = [];\n\n    composition.stackingOrder.forEach(group => {\n      const unit = this.unitsByName.get(group.unitName);\n      if (!unit) return;\n\n      const unitInfo = {\n        name: group.unitName,\n        count: group.count,\n        totalHealth: group.totalHealth,\n        strength: unit.strength\n      };\n\n      if (UnitUtils.isMercenary(unit)) {\n        mercenaryUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Leadership') {\n        leadershipUnits.push(unitInfo);\n      } else if (unit.cost_type === 'Dominance') {\n        dominanceUnits.push(unitInfo);\n      }\n    });\n\n    // Header\n    lines.push('🏆 OPTIMIZED ARMY COMPOSITION');\n    lines.push('═'.repeat(60));\n    lines.push('');\n\n    // Summary Stats\n    lines.push('📊 ARMY SUMMARY');\n    lines.push('─'.repeat(30));\n    lines.push(`Total Units: ${Object.values(composition.units).reduce((sum, count) => sum + count, 0).toLocaleString()}`);\n    lines.push(`Total Strength: ${composition.totalStrength.toLocaleString()}`);\n    lines.push(`Total Health: ${composition.totalHealth.toLocaleString()}`);\n    lines.push(`Budget Usage: L:${composition.totalLeadershipCost} D:${composition.totalDominanceCost} M:${composition.totalMercenaryCount}`);\n    lines.push('');\n\n    // Mercenary Units (if any)\n    if (mercenaryUnits.length > 0) {\n      lines.push('🗡️ MERCENARY FORCES');\n      lines.push('─'.repeat(30));\n      mercenaryUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Leadership Units (if any)\n    if (leadershipUnits.length > 0) {\n      lines.push('👑 LEADERSHIP FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      leadershipUnits.sort((a, b) => b.strength - a.strength);\n      leadershipUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Dominance Units (if any)\n    if (dominanceUnits.length > 0) {\n      lines.push('⚡ DOMINANCE FORCES');\n      lines.push('─'.repeat(30));\n      // Sort by strength (strongest first)\n      dominanceUnits.sort((a, b) => b.strength - a.strength);\n      dominanceUnits.forEach(unit => {\n        lines.push(`${unit.count.toLocaleString()}x ${unit.name}`);\n        lines.push(`   └─ ${unit.totalHealth.toLocaleString()} HP total (STR: ${unit.strength})`);\n      });\n      lines.push('');\n    }\n\n    // Battle Order Summary\n    lines.push('⚔️ BATTLE ORDER (Weakest → Strongest)');\n    lines.push('─'.repeat(40));\n    composition.stackingOrder.forEach((group, i) => {\n      const unit = this.unitsByName.get(group.unitName);\n      if (!unit) return;\n\n      const typeIcon = UnitUtils.isMercenary(unit) ? '🗡️' :\n                      unit.cost_type === 'Leadership' ? '👑' :\n                      unit.cost_type === 'Dominance' ? '⚡' : '❓';\n\n      lines.push(`${i + 1}. ${typeIcon} ${group.count.toLocaleString()}x ${group.unitName} (${group.totalHealth.toLocaleString()} HP)`);\n    });\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Get available units for display\n   */\n  getAvailableUnits(): Unit[] {\n    return [...this.availableUnits];\n  }\n\n  /**\n   * Get units grouped by cost type\n   */\n  getUnitsByCostType(): Record<CostType, Unit[]> {\n    return {\n      Leadership: [...this.leadershipUnits],\n      Dominance: [...this.dominanceUnits],\n      Authority: [],\n      Mercenary: [...this.mercenaryUnits]\n    };\n  }\n}\n","/**\n * Battle simulation types and interfaces for the TotalBattle Army Calculator\n * Handles asymmetric combat where enemies never die, only players get eliminated\n */\n\nimport { ArmyComposition, StackingGroup } from './units';\n\n/**\n * Represents a single unit's turn in the battle log\n */\nexport interface CombatAction {\n  /** Battle phase number when this unit's turn occurred */\n  turn: number;\n  /** Who is taking their turn */\n  attacker: string; // e.g., \"23 Epic Monster Hunter VI\" or \"Enemy Group 1\"\n  /** Who is being attacked */\n  target: string; // e.g., \"Enemy Group 1\" or \"1000 Spearman I\"\n  /** Description of the action taken during this unit's turn */\n  action: string; // e.g., \"attack and kill\" or \"attack and deal damage\"\n  /** Damage dealt (for player unit turns on enemies) */\n  damageDealt?: number;\n  /** Whether this unit's turn eliminated the target (only for enemy turns on players) */\n  eliminated: boolean;\n}\n\n/**\n * Current state of the battle\n */\nexport interface BattleState {\n  /** Current battle phase number */\n  currentTurn: number;\n  /** Remaining player unit groups (gets smaller as groups are eliminated) */\n  playerGroups: StackingGroup[];\n  /** Number of enemy groups (never changes) */\n  enemyGroupCount: number;\n  /** Total damage dealt to enemies so far */\n  totalDamageDealt: number;\n  /** Whether the battle has ended */\n  battleEnded: boolean;\n  /** Combat log of all unit turns taken */\n  combatLog: CombatAction[];\n}\n\n/**\n * Configuration for battle simulation\n */\nexport interface BattleConfiguration {\n  /** Player's army composition */\n  playerArmy: ArmyComposition;\n  /** Number of enemy groups to fight against */\n  enemyGroupCount: number;\n  /** Whether player gets first attack (true = best case, false = worst case) */\n  playerGoesFirst: boolean;\n}\n\n/**\n * Result of a battle simulation\n */\nexport interface BattleResult {\n  /** Battle outcome (always player_eliminated since enemies never die) */\n  outcome: 'player_eliminated';\n  /** Complete combat log showing all unit turns */\n  combatLog: CombatAction[];\n  /** Total damage dealt to enemies by player units */\n  totalDamageDealtToEnemies: number;\n  /** Total number of battle phases the battle lasted */\n  battleDuration: number;\n  /** How many battle phases the player survived */\n  playerSurvivalTurns: number;\n  /** Whether this was best case (player first) or worst case (enemy first) */\n  scenario: 'best_case' | 'worst_case';\n  /** Original battle configuration */\n  configuration: BattleConfiguration;\n  /** Additional battle statistics */\n  statistics: BattleStatistics;\n}\n\n/**\n * Detailed battle statistics\n */\nexport interface BattleStatistics {\n  /** Total number of player unit turns taken */\n  totalPlayerAttacks: number;\n  /** Total number of enemy unit turns taken */\n  totalEnemyAttacks: number;\n  /** Average damage per player unit turn */\n  averageDamagePerAttack: number;\n  /** Damage dealt by each unit type */\n  damageByUnitType: Record<string, number>;\n  /** Number of turns taken by each unit type */\n  attacksByUnitType: Record<string, number>;\n  /** Player groups eliminated per battle phase */\n  eliminationRate: number;\n}\n\n/**\n * Combined results for both best and worst case scenarios\n */\nexport interface BattleAnalysis {\n  /** Best case scenario result (player attacks first) */\n  bestCase: BattleResult;\n  /** Worst case scenario result (enemy attacks first) */\n  worstCase: BattleResult;\n  /** Comparison metrics between scenarios */\n  comparison: {\n    /** Difference in damage dealt between best and worst case */\n    damageDifference: number;\n    /** Difference in survival turns between best and worst case */\n    survivalDifference: number;\n    /** Average damage across both scenarios */\n    averageDamage: number;\n    /** Average survival turns across both scenarios */\n    averageSurvival: number;\n  };\n}\n\n/**\n * Interface for the battle simulation service\n */\nexport interface IBattleSimulationService {\n  /**\n   * Simulate a single battle scenario\n   */\n  simulateBattle(config: BattleConfiguration): BattleResult;\n\n  /**\n   * Simulate both best and worst case scenarios\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis;\n\n  /**\n   * Calculate the attack order for player groups (by strength)\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[];\n\n  /**\n   * Calculate enemy targeting order for player groups (by health)\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[];\n\n  /**\n   * Determine if the battle should end\n   */\n  shouldBattleEnd(state: BattleState): boolean;\n\n  /**\n   * Process a single turn of combat\n   */\n  processTurn(state: BattleState, playerGoesFirst: boolean): void;\n}\n\n/**\n * Utility functions for battle simulation\n */\nexport class BattleUtils {\n  /**\n   * Format a stacking group for display in combat log\n   */\n  static formatGroupForLog(group: StackingGroup): string {\n    return `${group.count} ${group.unitName}`;\n  }\n\n  /**\n   * Format an enemy group for display in combat log\n   */\n  static formatEnemyGroupForLog(groupIndex: number): string {\n    return `Enemy Group ${groupIndex + 1}`;\n  }\n\n  /**\n   * Calculate damage dealt by a player group\n   */\n  static calculateDamageDealt(group: StackingGroup): number {\n    return group.count * group.unitStrength;\n  }\n\n  /**\n   * Create a combat action for player unit's turn attacking enemy\n   */\n  static createPlayerAttackAction(\n    battlePhase: number,\n    attackerGroup: StackingGroup,\n    enemyGroupIndex: number\n  ): CombatAction {\n    const damage = BattleUtils.calculateDamageDealt(attackerGroup);\n    return {\n      turn: battlePhase,\n      attacker: BattleUtils.formatGroupForLog(attackerGroup),\n      target: BattleUtils.formatEnemyGroupForLog(enemyGroupIndex),\n      action: `attack and deal ${damage.toLocaleString()} damage`,\n      damageDealt: damage,\n      eliminated: false\n    };\n  }\n\n  /**\n   * Create a combat action for enemy unit's turn attacking player\n   */\n  static createEnemyAttackAction(\n    battlePhase: number,\n    enemyGroupIndex: number,\n    targetGroup: StackingGroup\n  ): CombatAction {\n    return {\n      turn: battlePhase,\n      attacker: BattleUtils.formatEnemyGroupForLog(enemyGroupIndex),\n      target: BattleUtils.formatGroupForLog(targetGroup),\n      action: `attack and kill ${BattleUtils.formatGroupForLog(targetGroup)}`,\n      eliminated: true\n    };\n  }\n\n  /**\n   * Format combat log for display\n   */\n  static formatCombatLogForDisplay(combatLog: CombatAction[]): string[] {\n    return combatLog.map(action => {\n      if (action.eliminated) {\n        return `${action.attacker} ${action.action}`;\n      } else {\n        return `${action.attacker} ${action.action}`;\n      }\n    });\n  }\n\n  /**\n   * Calculate detailed battle statistics from combat log\n   */\n  static calculateBattleStatistics(combatLog: CombatAction[], totalDamage: number): any { // Using any to avoid circular reference\n    const playerAttacks = combatLog.filter(action => !action.eliminated);\n    const enemyAttacks = combatLog.filter(action => action.eliminated);\n\n    const damageByUnitType: Record<string, number> = {};\n    const attacksByUnitType: Record<string, number> = {};\n\n    // Calculate damage and attacks by unit type\n    playerAttacks.forEach(action => {\n      const unitType = action.attacker.split(' ').slice(1).join(' '); // Remove count, keep unit name\n      const damage = action.damageDealt || 0;\n\n      damageByUnitType[unitType] = (damageByUnitType[unitType] || 0) + damage;\n      attacksByUnitType[unitType] = (attacksByUnitType[unitType] || 0) + 1;\n    });\n\n    return {\n      totalPlayerAttacks: playerAttacks.length,\n      totalEnemyAttacks: enemyAttacks.length,\n      averageDamagePerAttack: playerAttacks.length > 0 ? totalDamage / playerAttacks.length : 0,\n      damageByUnitType,\n      attacksByUnitType,\n      eliminationRate: enemyAttacks.length > 0 ? enemyAttacks.length / combatLog.length : 0\n    };\n  }\n\n  /**\n   * Get battle summary from combat log\n   */\n  static getBattleSummary(result: any): string { // Using any to avoid circular reference\n    const stats = result.statistics || BattleUtils.calculateBattleStatistics(result.combatLog, result.totalDamageDealtToEnemies);\n\n    return `Battle Summary:\n- Duration: ${result.battleDuration} battle phases\n- Player unit turns taken: ${stats.totalPlayerAttacks}\n- Enemy unit turns taken: ${stats.totalEnemyAttacks}\n- Total damage dealt to enemies: ${result.totalDamageDealtToEnemies.toLocaleString()}\n- Average damage per unit turn: ${Math.round(stats.averageDamagePerAttack).toLocaleString()}\n- Scenario: ${result.scenario === 'best_case' ? 'Best Case (Player First)' : 'Worst Case (Enemy First)'}`;\n  }\n}\n\n/**\n * Constants for battle simulation\n */\nexport const BATTLE_CONSTANTS = {\n  /** Maximum number of turns before forcing battle end (safety limit) */\n  MAX_BATTLE_TURNS: 1000,\n  /** Default enemy group count if not specified */\n  DEFAULT_ENEMY_GROUPS: 1\n} as const;\n","/**\n * Battle Simulation Service\n * Handles turn-based combat simulation with asymmetric mechanics\n * - Enemy attacks eliminate player groups completely\n * - Player attacks deal damage to enemies but never eliminate them\n * - Battle ends when all player groups are eliminated\n */\n\nimport {\n  IBattleSimulationService,\n  BattleConfiguration,\n  BattleResult,\n  BattleAnalysis,\n  BattleState,\n  CombatAction,\n  BattleUtils,\n  BATTLE_CONSTANTS\n} from '../types/battleSimulation';\nimport { ArmyComposition, StackingGroup } from '../types/units';\n\nexport class BattleSimulationService implements IBattleSimulationService {\n  // Cache for attack order calculations to avoid repeated sorting\n  private attackOrderCache = new Map<string, StackingGroup[]>();\n  private targetOrderCache = new Map<string, StackingGroup[]>();\n  \n  /**\n   * Validate battle configuration before simulation\n   */\n  private validateBattleConfiguration(config: BattleConfiguration): void {\n    if (!config) {\n      throw new Error('Battle configuration is required');\n    }\n\n    if (!config.playerArmy) {\n      throw new Error('Player army is required');\n    }\n\n    if (!config.playerArmy.stackingOrder || config.playerArmy.stackingOrder.length === 0) {\n      throw new Error('Player army must have at least one unit group');\n    }\n\n    if (config.enemyGroupCount < 1) {\n      throw new Error('Enemy group count must be at least 1');\n    }\n\n    if (config.enemyGroupCount > 100) {\n      throw new Error('Enemy group count cannot exceed 100 (performance limit)');\n    }\n\n    // Validate each unit group\n    for (const group of config.playerArmy.stackingOrder) {\n      if (!group.unitName || group.unitName.trim() === '') {\n        throw new Error('All unit groups must have a valid name');\n      }\n\n      if (group.count <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have a positive count`);\n      }\n\n      if (group.unitStrength <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive strength`);\n      }\n\n      if (group.totalHealth <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive health`);\n      }\n    }\n  }\n\n  /**\n   * Simulate a single battle scenario with validation\n   */\n  simulateBattle(config: BattleConfiguration): BattleResult {\n    // Validate configuration before starting\n    this.validateBattleConfiguration(config);\n    // Initialize battle state\n    const state: BattleState = {\n      currentTurn: 0,\n      playerGroups: [...config.playerArmy.stackingOrder], // Copy to avoid mutation\n      enemyGroupCount: config.enemyGroupCount,\n      totalDamageDealt: 0,\n      battleEnded: false,\n      combatLog: []\n    };\n\n    // Main battle loop with additional safety checks\n    let consecutiveNoActionTurns = 0;\n    const maxNoActionTurns = 5;\n\n    while (!this.shouldBattleEnd(state) && state.currentTurn < BATTLE_CONSTANTS.MAX_BATTLE_TURNS) {\n      const previousLogLength = state.combatLog.length;\n      state.currentTurn++;\n\n      try {\n        this.processTurn(state, config.playerGoesFirst);\n      } catch (error) {\n        throw new Error(`Battle processing failed on turn ${state.currentTurn}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n\n      // Safety check: ensure progress is being made\n      if (state.combatLog.length === previousLogLength) {\n        consecutiveNoActionTurns++;\n        if (consecutiveNoActionTurns >= maxNoActionTurns) {\n          throw new Error(`Battle stalled: No actions taken for ${maxNoActionTurns} consecutive turns`);\n        }\n      } else {\n        consecutiveNoActionTurns = 0;\n      }\n\n      // Additional safety check for infinite loops\n      if (state.currentTurn > 1 && state.playerGroups.length === 0 && !state.battleEnded) {\n        state.battleEnded = true;\n        break;\n      }\n    }\n\n    // Check if battle ended due to timeout\n    if (state.currentTurn >= BATTLE_CONSTANTS.MAX_BATTLE_TURNS) {\n      throw new Error(`Battle exceeded maximum duration of ${BATTLE_CONSTANTS.MAX_BATTLE_TURNS} turns`);\n    }\n\n    // Calculate battle statistics\n    const statistics = BattleUtils.calculateBattleStatistics(state.combatLog, state.totalDamageDealt);\n\n    // Create battle result\n    return {\n      outcome: 'player_eliminated',\n      combatLog: state.combatLog,\n      totalDamageDealtToEnemies: state.totalDamageDealt,\n      battleDuration: state.currentTurn,\n      playerSurvivalTurns: state.currentTurn,\n      scenario: config.playerGoesFirst ? 'best_case' : 'worst_case',\n      configuration: config,\n      statistics\n    };\n  }\n\n  /**\n   * Simulate both best and worst case scenarios with validation\n   */\n  simulateBothScenarios(playerArmy: ArmyComposition, enemyGroupCount: number): BattleAnalysis {\n    // Validate inputs\n    if (!playerArmy) {\n      throw new Error('Player army is required');\n    }\n\n    if (enemyGroupCount < 1 || enemyGroupCount > 100) {\n      throw new Error('Enemy group count must be between 1 and 100');\n    }\n    // Best case: player goes first\n    const bestCaseConfig: BattleConfiguration = {\n      playerArmy,\n      enemyGroupCount,\n      playerGoesFirst: true\n    };\n    const bestCase = this.simulateBattle(bestCaseConfig);\n\n    // Worst case: enemy goes first\n    const worstCaseConfig: BattleConfiguration = {\n      playerArmy,\n      enemyGroupCount,\n      playerGoesFirst: false\n    };\n    const worstCase = this.simulateBattle(worstCaseConfig);\n\n    // Calculate comparison metrics\n    const comparison = {\n      damageDifference: bestCase.totalDamageDealtToEnemies - worstCase.totalDamageDealtToEnemies,\n      survivalDifference: bestCase.playerSurvivalTurns - worstCase.playerSurvivalTurns,\n      averageDamage: (bestCase.totalDamageDealtToEnemies + worstCase.totalDamageDealtToEnemies) / 2,\n      averageSurvival: (bestCase.playerSurvivalTurns + worstCase.playerSurvivalTurns) / 2\n    };\n\n    return {\n      bestCase,\n      worstCase,\n      comparison\n    };\n  }\n\n  /**\n   * Calculate the attack order for player groups (highest total strength first)\n   * Uses caching to avoid repeated sorting of the same group composition\n   */\n  calculateAttackOrder(groups: StackingGroup[]): StackingGroup[] {\n    // Create cache key based on group composition\n    const cacheKey = groups.map(g => `${g.unitName}:${g.count}:${g.unitStrength}`).join('|');\n\n    if (this.attackOrderCache.has(cacheKey)) {\n      return this.attackOrderCache.get(cacheKey)!;\n    }\n\n    // Sort by total group strength (count × unitStrength), highest first\n    const sorted = [...groups].sort((a, b) => {\n      const totalStrengthA = a.count * a.unitStrength;\n      const totalStrengthB = b.count * b.unitStrength;\n      return totalStrengthB - totalStrengthA;\n    });\n    this.attackOrderCache.set(cacheKey, sorted);\n    return sorted;\n  }\n\n  /**\n   * Calculate enemy targeting order for player groups (highest health first)\n   * Uses caching to avoid repeated sorting of the same group composition\n   */\n  calculateEnemyTargetOrder(groups: StackingGroup[]): StackingGroup[] {\n    // Create cache key based on group composition\n    const cacheKey = groups.map(g => `${g.unitName}:${g.count}:${g.totalHealth}`).join('|');\n\n    if (this.targetOrderCache.has(cacheKey)) {\n      return this.targetOrderCache.get(cacheKey)!;\n    }\n\n    const sorted = [...groups].sort((a, b) => b.totalHealth - a.totalHealth);\n    this.targetOrderCache.set(cacheKey, sorted);\n    return sorted;\n  }\n\n  /**\n   * Determine if the battle should end (all player groups eliminated)\n   */\n  shouldBattleEnd(state: BattleState): boolean {\n    return state.playerGroups.length === 0 || state.battleEnded;\n  }\n\n  /**\n   * Process a single battle phase with proper overflow handling\n   *\n   * TERMINOLOGY:\n   * - Unit's Turn: Each individual attack by a single unit\n   * - Battle Phase: One complete cycle where every unit gets exactly one attack opportunity\n   *\n   * IMPORTANT: Each unit (player or enemy) can only take their turn ONCE per battle phase.\n   * A battle phase consists of all units taking their turns, then the next phase begins.\n   *\n   * Example with 3 player groups and 2 enemy groups:\n   * Battle Phase 1: Player1's turn → Enemy1's turn → Player2's turn → Enemy2's turn → Player3's turn (overflow)\n   * Battle Phase 2: Player1's turn → Enemy1's turn → Player2's turn → Enemy2's turn → Player3's turn (if still alive)\n   */\n  processTurn(state: BattleState, playerGoesFirst: boolean): void {\n    // Get the initial attack order at the start of the battle phase\n    const initialPlayerAttackOrder = this.calculateAttackOrder(state.playerGroups);\n    const initialPlayerCount = initialPlayerAttackOrder.length;\n    const maxEnemyTurns = state.enemyGroupCount;\n\n    // Track which specific groups have attacked this phase using unit names + counts as unique IDs\n    const playerGroupsAttacked = new Set<string>();\n    let enemyTurnsTaken = 0;\n\n    const totalTurns = Math.max(initialPlayerCount, maxEnemyTurns);\n\n    // Process alternating turns until all units have taken their turn\n    for (let turnIndex = 0; turnIndex < totalTurns * 2; turnIndex++) {\n      // Check if battle ended\n      if (this.shouldBattleEnd(state)) {\n        break;\n      }\n\n      // Determine whose turn it is based on initiative and turn index\n      const isPlayerTurn = playerGoesFirst ? (turnIndex % 2 === 0) : (turnIndex % 2 === 1);\n\n      if (isPlayerTurn) {\n        // Player's turn - find the next player group that hasn't attacked yet\n        const nextPlayerGroup = this.getNextPlayerAttacker(state, initialPlayerAttackOrder, playerGroupsAttacked);\n        if (nextPlayerGroup) {\n          this.processSinglePlayerAttackByGroup(state, nextPlayerGroup, playerGroupsAttacked.size);\n          // Mark this group as having attacked using a unique identifier\n          const groupId = `${nextPlayerGroup.unitName}:${nextPlayerGroup.count}:${nextPlayerGroup.unitStrength}`;\n          playerGroupsAttacked.add(groupId);\n        }\n      } else {\n        // Enemy's turn - check if we still have enemy units that haven't taken their turn\n        if (enemyTurnsTaken < state.enemyGroupCount && state.playerGroups.length > 0) {\n          this.processSingleEnemyAttack(state, enemyTurnsTaken);\n          enemyTurnsTaken++;\n        }\n      }\n\n      // If both sides have taken all their turns, end the battle phase\n      if (playerGroupsAttacked.size >= initialPlayerCount && enemyTurnsTaken >= maxEnemyTurns) {\n        break;\n      }\n    }\n  }\n\n\n\n\n\n  /**\n   * Find the next player group that should attack based on initial attack order\n   */\n  private getNextPlayerAttacker(\n    state: BattleState,\n    initialAttackOrder: StackingGroup[],\n    alreadyAttacked: Set<string>\n  ): StackingGroup | null {\n    // Go through the initial attack order and find the first group that:\n    // 1. Still exists in the current player groups\n    // 2. Hasn't attacked yet this phase\n    for (const originalGroup of initialAttackOrder) {\n      const groupId = `${originalGroup.unitName}:${originalGroup.count}:${originalGroup.unitStrength}`;\n\n      if (!alreadyAttacked.has(groupId)) {\n        // Check if this group still exists (might have been eliminated)\n        const currentGroup = state.playerGroups.find(g =>\n          g.unitName === originalGroup.unitName &&\n          g.unitStrength === originalGroup.unitStrength\n        );\n\n        if (currentGroup) {\n          return currentGroup;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Process a single player unit's turn (one attack) for a specific group\n   */\n  private processSinglePlayerAttackByGroup(state: BattleState, attackingGroup: StackingGroup, attackIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    const targetEnemyIndex = attackIndex % state.enemyGroupCount;\n\n    // Calculate damage and create combat action\n    const damage = BattleUtils.calculateDamageDealt(attackingGroup);\n    const action = BattleUtils.createPlayerAttackAction(\n      state.currentTurn,\n      attackingGroup,\n      targetEnemyIndex\n    );\n\n    // Add to combat log and track damage\n    state.combatLog.push(action);\n    state.totalDamageDealt += damage;\n  }\n\n  /**\n   * Process a single player unit's turn (one attack) - DEPRECATED, use processSinglePlayerAttackByGroup\n   */\n  private processSinglePlayerAttack(state: BattleState, attackIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    // Get current attack order (highest strength first) - recalculated each time\n    const currentAttackOrder = this.calculateAttackOrder(state.playerGroups);\n\n    if (attackIndex >= currentAttackOrder.length) return;\n\n    const attackingGroup = currentAttackOrder[attackIndex];\n    const targetEnemyIndex = attackIndex % state.enemyGroupCount;\n\n    // Calculate damage and create combat action\n    const damage = BattleUtils.calculateDamageDealt(attackingGroup);\n    const action = BattleUtils.createPlayerAttackAction(\n      state.currentTurn,\n      attackingGroup,\n      targetEnemyIndex\n    );\n\n    // Add to combat log and track damage\n    state.combatLog.push(action);\n    state.totalDamageDealt += damage;\n  }\n\n  /**\n   * Process a single enemy unit's turn (one attack)\n   */\n  private processSingleEnemyAttack(state: BattleState, enemyGroupIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    // Get current targeting order for remaining player groups (highest health first)\n    const currentTargetOrder = this.calculateEnemyTargetOrder(state.playerGroups);\n\n    // Enemy always targets the highest health player group (index 0)\n    if (currentTargetOrder.length === 0) return;\n\n    const targetGroup = currentTargetOrder[0]; // Always target highest health group\n\n    // Create combat action\n    const action = BattleUtils.createEnemyAttackAction(\n      state.currentTurn,\n      enemyGroupIndex, // Which enemy group is attacking\n      targetGroup\n    );\n\n    // Add to combat log\n    state.combatLog.push(action);\n\n    // Remove the eliminated group from player groups\n    const groupIndex = state.playerGroups.findIndex(\n      group => group.unitName === targetGroup.unitName &&\n               group.count === targetGroup.count &&\n               group.totalHealth === targetGroup.totalHealth\n    );\n\n    if (groupIndex !== -1) {\n      state.playerGroups.splice(groupIndex, 1);\n    }\n\n    // Check if battle should end\n    if (state.playerGroups.length === 0) {\n      state.battleEnded = true;\n    }\n  }\n}\n","/**\n * Damage Optimization Service\n * Optimizes army compositions for maximum damage output against enemy groups\n * Uses existing battle simulation engine for accurate damage calculations\n */\n\nimport { Unit, ArmyComposition, OptimizationConstraints, UnitUtils, StackingGroup } from '../types/units';\nimport { BattleSimulationService } from './battleSimulation';\nimport { IBattleSimulationService, BattleAnalysis } from '../types/battleSimulation';\nimport { StackingOptimizer } from './stackingOptimizer';\n\n/**\n * Progress callback for damage optimization\n */\nexport interface DamageOptimizationProgress {\n  /** Current phase of optimization */\n  phase: 'initializing' | 'generating' | 'evaluating' | 'finalizing';\n  /** Progress percentage (0-100) */\n  progress: number;\n  /** Current status message */\n  message: string;\n  /** Number of combinations generated so far */\n  combinationsGenerated?: number;\n  /** Total combinations to generate */\n  totalCombinations?: number;\n  /** Number of combinations evaluated so far */\n  combinationsEvaluated?: number;\n  /** Total combinations to evaluate */\n  totalToEvaluate?: number;\n  /** Elapsed time in milliseconds */\n  elapsedMs: number;\n  /** Estimated time remaining in milliseconds */\n  estimatedRemainingMs?: number;\n}\n\n/**\n * Configuration for damage optimization\n */\nexport interface DamageOptimizationConstraints extends OptimizationConstraints {\n  /** Number of enemy groups to optimize against */\n  enemyGroupCount: number;\n  /** Maximum number of army combinations to evaluate (performance limit) */\n  maxCombinations?: number;\n  /** Progress callback function */\n  onProgress?: (progress: DamageOptimizationProgress) => void;\n  /** Cancellation signal */\n  signal?: AbortSignal;\n}\n\n/**\n * Result of damage optimization for a single army composition\n */\nexport interface DamageOptimizationResult {\n  /** The optimized army composition */\n  armyComposition: ArmyComposition;\n  /** Battle analysis results from simulation */\n  battleAnalysis: BattleAnalysis;\n  /** Total silver cost for this army */\n  totalSilverCost: number;\n  /** Total food consumption for this army */\n  totalFoodConsumption: number;\n  /** Total revival cost (silver) for this army */\n  totalRevivalCost: number;\n  /** Average total damage per battle across best/worst case scenarios */\n  averageDamagePerBattle: number;\n  /** Damage efficiency score (damage per resource cost) */\n  damageEfficiencyScore: number;\n}\n\n/**\n * Complete results from damage optimization showing multiple ranked options\n */\nexport interface DamageOptimizationResults {\n  /** Array of optimization results ranked by damage output */\n  rankedResults: DamageOptimizationResult[];\n  /** Total number of combinations evaluated */\n  combinationsEvaluated: number;\n  /** Time taken for optimization in milliseconds */\n  optimizationTimeMs: number;\n  /** Algorithm used for optimization */\n  algorithmUsed: string;\n  /** Whether optimization was truncated due to performance limits */\n  wasTruncated: boolean;\n}\n\n/**\n * Interface for pluggable optimization algorithms\n */\nexport interface IDamageOptimizationAlgorithm {\n  /** Name of the algorithm for reporting */\n  name: string;\n\n  /**\n   * Generate army combinations to evaluate\n   * @param constraints Optimization constraints including available units and budgets\n   * @param units Array of all available units\n   * @returns Promise of array of army compositions to evaluate\n   */\n  generateCombinations(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<ArmyComposition[]>;\n}\n\n/**\n * Main damage optimization service\n */\nexport class DamageOptimizer {\n  private battleSimulator: IBattleSimulationService;\n  private algorithm: IDamageOptimizationAlgorithm;\n\n  constructor(\n    battleSimulator?: IBattleSimulationService,\n    algorithm?: IDamageOptimizationAlgorithm\n  ) {\n    this.battleSimulator = battleSimulator || new BattleSimulationService();\n    this.algorithm = algorithm || new SystematicCombinationAlgorithm();\n  }\n\n  /**\n   * Set the optimization algorithm to use\n   */\n  setAlgorithm(algorithm: IDamageOptimizationAlgorithm): void {\n    this.algorithm = algorithm;\n  }\n\n  /**\n   * Report progress to the callback if provided\n   */\n  private reportProgress(constraints: DamageOptimizationConstraints, progress: DamageOptimizationProgress): void {\n    if (constraints.onProgress) {\n      constraints.onProgress(progress);\n    }\n  }\n\n  /**\n   * Check if the operation has been cancelled\n   */\n  private checkCancellation(constraints: DamageOptimizationConstraints): void {\n    if (constraints.signal?.aborted) {\n      throw new Error('Operation was cancelled by user');\n    }\n  }\n\n  /**\n   * Optimize army composition for maximum damage output\n   */\n  async optimizeForDamage(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<DamageOptimizationResults> {\n    const startTime = performance.now();\n    const maxTimeoutMs = 120000; // 2 minutes maximum\n\n    console.log(`🎯 Starting damage optimization with ${this.algorithm.name}`);\n    console.log(`📊 Constraints: L:${constraints.leadershipBudget} D:${constraints.dominanceBudget} vs ${constraints.enemyGroupCount} enemies`);\n    console.log(`⏱️ Maximum processing time: ${maxTimeoutMs / 1000} seconds`);\n\n    // Report initial progress\n    this.reportProgress(constraints, {\n      phase: 'initializing',\n      progress: 0,\n      message: 'Initializing damage optimizer...',\n      elapsedMs: 0\n    });\n\n    // Validate inputs\n    this.validateOptimizationConstraints(constraints);\n\n    // Report generation phase start\n    this.reportProgress(constraints, {\n      phase: 'generating',\n      progress: 10,\n      message: 'Generating army combinations...',\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Generate army combinations using selected algorithm\n    const armyCombinations = await this.algorithm.generateCombinations(constraints, units);\n\n    console.log(`🔄 Generated ${armyCombinations.length} army combinations to evaluate`);\n\n    // Report evaluation phase start\n    this.reportProgress(constraints, {\n      phase: 'evaluating',\n      progress: 20,\n      message: 'Evaluating army combinations...',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated: 0,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Evaluate each combination with UI yielding and timeout protection\n    const results: DamageOptimizationResult[] = [];\n    let combinationsEvaluated = 0;\n\n    for (let i = 0; i < armyCombinations.length; i++) {\n      // Check for cancellation\n      this.checkCancellation(constraints);\n\n      // Check for timeout\n      const currentTime = performance.now();\n      if (currentTime - startTime > maxTimeoutMs) {\n        console.warn(`⏱️ Optimization timeout after ${(currentTime - startTime) / 1000}s - stopping at ${combinationsEvaluated} combinations`);\n        break;\n      }\n\n      const army = armyCombinations[i];\n\n      try {\n        const result = await this.evaluateArmyComposition(army, constraints.enemyGroupCount, units);\n        results.push(result);\n        combinationsEvaluated++;\n      } catch (error) {\n        console.warn(`⚠️ Failed to evaluate army composition:`, error);\n        // Continue with other combinations\n      }\n\n      // Yield control to UI every 3 combinations to prevent blocking (outside try-catch)\n      if (combinationsEvaluated % 3 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n\n      // Report progress every 10 combinations or at key milestones\n      if (combinationsEvaluated % 10 === 0 || combinationsEvaluated === armyCombinations.length) {\n        const elapsedMs = performance.now() - startTime;\n        const progressPercent = 20 + Math.floor((combinationsEvaluated / armyCombinations.length) * 60); // 20-80%\n        const estimatedRemainingMs = combinationsEvaluated > 0\n          ? (elapsedMs / combinationsEvaluated) * (armyCombinations.length - combinationsEvaluated)\n          : undefined;\n\n        this.reportProgress(constraints, {\n          phase: 'evaluating',\n          progress: progressPercent,\n          message: `Evaluating combinations... (${combinationsEvaluated}/${armyCombinations.length})`,\n          combinationsGenerated: armyCombinations.length,\n          totalCombinations: armyCombinations.length,\n          combinationsEvaluated,\n          totalToEvaluate: armyCombinations.length,\n          elapsedMs,\n          estimatedRemainingMs\n        });\n      }\n\n      // Additional safety: Log progress every 25 combinations\n      if (combinationsEvaluated % 25 === 0) {\n        const elapsed = (performance.now() - startTime) / 1000;\n        console.log(`📊 Progress: ${combinationsEvaluated}/${armyCombinations.length} combinations (${elapsed.toFixed(1)}s elapsed)`);\n      }\n    }\n\n    // Report finalizing phase\n    this.reportProgress(constraints, {\n      phase: 'finalizing',\n      progress: 90,\n      message: 'Finalizing results...',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: performance.now() - startTime\n    });\n\n    // Sort results by damage output (descending)\n    const rankedResults = results.sort((a, b) => {\n      // Primary sort: average damage per battle\n      const damageDiff = b.averageDamagePerBattle - a.averageDamagePerBattle;\n      if (Math.abs(damageDiff) > 0.01) return damageDiff;\n\n      // Secondary sort: damage efficiency score\n      return b.damageEfficiencyScore - a.damageEfficiencyScore;\n    });\n\n    const endTime = performance.now();\n    const optimizationTimeMs = endTime - startTime;\n\n    console.log(`✅ Optimization complete: ${rankedResults.length} valid results in ${optimizationTimeMs.toFixed(2)}ms`);\n\n    // Report completion\n    this.reportProgress(constraints, {\n      phase: 'finalizing',\n      progress: 100,\n      message: 'Optimization complete!',\n      combinationsGenerated: armyCombinations.length,\n      totalCombinations: armyCombinations.length,\n      combinationsEvaluated,\n      totalToEvaluate: armyCombinations.length,\n      elapsedMs: optimizationTimeMs\n    });\n\n    return {\n      rankedResults,\n      combinationsEvaluated,\n      optimizationTimeMs,\n      algorithmUsed: this.algorithm.name,\n      wasTruncated: armyCombinations.length > (constraints.maxCombinations || 50)\n    };\n  }\n\n  /**\n   * Evaluate a single army composition for damage optimization\n   */\n  private async evaluateArmyComposition(\n    army: ArmyComposition,\n    enemyGroupCount: number,\n    units: Unit[]\n  ): Promise<DamageOptimizationResult> {\n    // Run battle simulation\n    const battleAnalysis = this.battleSimulator.simulateBothScenarios(army, enemyGroupCount);\n\n    // Calculate cost metrics\n    const totalSilverCost = this.calculateSilverCost(army, units);\n    const totalFoodConsumption = this.calculateFoodConsumption(army, units);\n    const totalRevivalCost = this.calculateRevivalCost(army, units);\n\n    // Calculate damage metrics - total damage per battle (not per turn)\n    const bestCaseTotalDamage = battleAnalysis.bestCase.totalDamageDealtToEnemies;\n    const worstCaseTotalDamage = battleAnalysis.worstCase.totalDamageDealtToEnemies;\n\n    const averageDamagePerBattle = (bestCaseTotalDamage + worstCaseTotalDamage) / 2;\n\n    // Calculate damage efficiency (damage per resource cost)\n    const totalResourceCost = army.totalLeadershipCost + army.totalDominanceCost + totalSilverCost;\n    const damageEfficiencyScore = totalResourceCost > 0 ? averageDamagePerBattle / totalResourceCost : 0;\n\n    return {\n      armyComposition: army,\n      battleAnalysis,\n      totalSilverCost,\n      totalFoodConsumption,\n      totalRevivalCost,\n      averageDamagePerBattle,\n      damageEfficiencyScore\n    };\n  }\n\n  /**\n   * Calculate total silver cost for an army composition\n   */\n  private calculateSilverCost(army: ArmyComposition, units: Unit[]): number {\n    const unitsByName = new Map(units.map(unit => [unit.name, unit]));\n    let totalSilverCost = 0;\n\n    for (const [unitName, quantity] of Object.entries(army.units)) {\n      const unit = unitsByName.get(unitName);\n      if (unit) {\n        // Silver cost is the revival cost after defending\n        totalSilverCost += unit.revival_cost_silver * quantity;\n      }\n    }\n\n    return totalSilverCost;\n  }\n\n  /**\n   * Calculate total food consumption for an army composition\n   */\n  private calculateFoodConsumption(army: ArmyComposition, units: Unit[]): number {\n    const unitsByName = new Map(units.map(unit => [unit.name, unit]));\n    let totalFoodConsumption = 0;\n\n    for (const [unitName, quantity] of Object.entries(army.units)) {\n      const unit = unitsByName.get(unitName);\n      if (unit) {\n        totalFoodConsumption += unit.food_consumption * quantity;\n      }\n    }\n\n    return totalFoodConsumption;\n  }\n\n  /**\n   * Calculate total revival cost (silver) for an army composition\n   */\n  private calculateRevivalCost(army: ArmyComposition, units: Unit[]): number {\n    // Revival cost is the same as silver cost in this context\n    return this.calculateSilverCost(army, units);\n  }\n\n  /**\n   * Validate optimization constraints\n   */\n  private validateOptimizationConstraints(constraints: DamageOptimizationConstraints): void {\n    if (constraints.enemyGroupCount < 1 || constraints.enemyGroupCount > 100) {\n      throw new Error('Enemy group count must be between 1 and 100');\n    }\n\n    if (constraints.leadershipBudget < 0) {\n      throw new Error('Leadership budget cannot be negative');\n    }\n\n    if (constraints.dominanceBudget < 0) {\n      throw new Error('Dominance budget cannot be negative');\n    }\n\n    if (!constraints.availableUnits || constraints.availableUnits.length === 0) {\n      throw new Error('At least one unit type must be available for optimization');\n    }\n\n    if (constraints.maxCombinations && constraints.maxCombinations < 1) {\n      throw new Error('Maximum combinations must be at least 1');\n    }\n  }\n}\n\n/**\n * Systematic combination algorithm that tests all possible unit combinations\n * Uses the proven stacking algorithm for each combination\n */\nexport class SystematicCombinationAlgorithm implements IDamageOptimizationAlgorithm {\n  name = 'Systematic Combination Testing';\n\n  async generateCombinations(\n    constraints: DamageOptimizationConstraints,\n    units: Unit[]\n  ): Promise<ArmyComposition[]> {\n    const generationStartTime = performance.now();\n    const maxGenerationTimeMs = 60000; // 1 minute for generation phase\n\n    console.log(`🔍 Generating combinations using systematic testing algorithm`);\n\n    // Filter units to only those available for optimization\n    const availableUnits = units.filter(unit =>\n      constraints.availableUnits.includes(unit.name)\n    );\n\n    console.log(`📋 Available units for optimization: ${availableUnits.length}`);\n\n    // Generate unit combinations with user-specified limit\n    const maxCombinations = constraints.maxCombinations || 50;\n    const unitCombinations = this.generateUnitCombinations(availableUnits.map(u => u.name), maxCombinations);\n    console.log(`🔄 Testing ${unitCombinations.length} different unit combinations (user requested: ${maxCombinations})`);\n\n    const results: ArmyComposition[] = [];\n\n    // Test each combination using the proven stacking algorithm\n    for (let i = 0; i < unitCombinations.length; i++) {\n      // Check for timeout during generation\n      const currentTime = performance.now();\n      if (currentTime - generationStartTime > maxGenerationTimeMs) {\n        console.warn(`⏱️ Generation timeout after ${(currentTime - generationStartTime) / 1000}s - stopping at ${i} combinations`);\n        break;\n      }\n\n      const combination = unitCombinations[i];\n\n      try {\n        const army = await this.testCombinationWithStackingAlgorithm(combination, constraints, units);\n        if (army) {\n          results.push(army);\n        }\n      } catch (error) {\n        console.warn(`⚠️ Failed to test combination [${combination.join(', ')}]:`, error);\n      }\n\n      // Yield control to UI every 5 combinations during generation (outside try-catch)\n      if (i % 5 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n\n      // Log progress every 20 combinations during generation\n      if (i % 20 === 0 && i > 0) {\n        const elapsed = (performance.now() - generationStartTime) / 1000;\n        console.log(`🔄 Generation progress: ${i}/${unitCombinations.length} combinations tested (${elapsed.toFixed(1)}s)`);\n      }\n    }\n\n    console.log(`✅ Generated ${results.length} valid army combinations for evaluation`);\n    return results;\n  }\n\n  /**\n   * Generate unit combinations with user-specified limit and time-based protection\n   */\n  private generateUnitCombinations(unitNames: string[], maxCombinations: number): string[][] {\n    // Calculate total possible combinations\n    const totalPossible = Math.pow(2, unitNames.length) - 1; // -1 to exclude empty set\n    console.log(`📊 Total possible combinations: ${totalPossible}, user requested: ${maxCombinations}`);\n\n    // If we have too many possible combinations, use a smarter approach\n    if (totalPossible > maxCombinations) {\n      return this.generateLimitedCombinations(unitNames, maxCombinations);\n    }\n\n    // Generate all subsets (2^n combinations) if within limit, using top-down ordering\n    const allCombinations: string[][] = [];\n\n    for (let i = 1; i <= totalPossible; i++) {\n      const combination: string[] = [];\n      for (let j = 0; j < unitNames.length; j++) {\n        if (i & (1 << j)) {\n          combination.push(unitNames[j]);\n        }\n      }\n      allCombinations.push(combination);\n    }\n\n    // Sort combinations by size (largest first) for top-down approach\n    allCombinations.sort((a, b) => b.length - a.length);\n\n    console.log(`🎯 Generated all ${allCombinations.length} combinations, ordered largest to smallest`);\n    console.log(`   User requested: ${maxCombinations} combinations (all possible combinations fit within limit)`);\n    return allCombinations;\n  }\n\n  /**\n   * Generate a limited set of smart combinations when full power set is too large\n   * Strategy: Start with all units, then systematically remove units (top-down approach)\n   */\n  private generateLimitedCombinations(unitNames: string[], maxCombinations: number): string[][] {\n    const combinations: string[][] = [];\n\n    // Strategy 1: Start with ALL units (most comprehensive army)\n    combinations.push([...unitNames]);\n\n    // Strategy 2: Remove one unit at a time (n-1 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      const combination = unitNames.filter((_, index) => index !== i);\n      combinations.push(combination);\n    }\n\n    // Strategy 3: Remove two units at a time (n-2 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      for (let j = i + 1; j < unitNames.length && combinations.length < maxCombinations; j++) {\n        const combination = unitNames.filter((_, index) => index !== i && index !== j);\n        if (combination.length > 0) {\n          combinations.push(combination);\n        }\n      }\n    }\n\n    // Strategy 4: Remove three units at a time (n-3 combinations)\n    for (let i = 0; i < unitNames.length && combinations.length < maxCombinations; i++) {\n      for (let j = i + 1; j < unitNames.length && combinations.length < maxCombinations; j++) {\n        for (let k = j + 1; k < unitNames.length && combinations.length < maxCombinations; k++) {\n          const combination = unitNames.filter((_, index) => index !== i && index !== j && index !== k);\n          if (combination.length > 0) {\n            combinations.push(combination);\n          }\n        }\n      }\n    }\n\n    // Strategy 5: If we still have room, add some strategic smaller combinations\n    if (combinations.length < maxCombinations) {\n      // Add some mid-size combinations (half the units)\n      const halfSize = Math.floor(unitNames.length / 2);\n      for (let attempt = 0; attempt < 10 && combinations.length < maxCombinations; attempt++) {\n        const combination = this.getRandomCombination(unitNames, halfSize);\n\n        // Only add if we don't already have this combination\n        if (!combinations.some(existing =>\n          existing.length === combination.length &&\n          existing.every(unit => combination.includes(unit))\n        )) {\n          combinations.push(combination);\n        }\n      }\n\n      // Add some smaller combinations if we still have room\n      const quarterSize = Math.max(1, Math.floor(unitNames.length / 4));\n      for (let attempt = 0; attempt < 5 && combinations.length < maxCombinations; attempt++) {\n        const combination = this.getRandomCombination(unitNames, quarterSize);\n\n        // Only add if we don't already have this combination\n        if (!combinations.some(existing =>\n          existing.length === combination.length &&\n          existing.every(unit => combination.includes(unit))\n        )) {\n          combinations.push(combination);\n        }\n      }\n    }\n\n    console.log(`🎯 Generated ${combinations.length} top-down combinations from ${unitNames.length} units`);\n    console.log(`   Strategy: Started with all ${unitNames.length} units, then systematically removed units`);\n    console.log(`   User requested: ${maxCombinations} combinations (time-based limits still apply)`);\n    return combinations;\n  }\n\n  /**\n   * Get a random combination of specified size\n   */\n  private getRandomCombination(unitNames: string[], size: number): string[] {\n    const shuffled = [...unitNames].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  }\n\n  /**\n   * Test a specific unit combination using the existing stacking algorithm\n   */\n  private async testCombinationWithStackingAlgorithm(\n    unitCombination: string[],\n    constraints: DamageOptimizationConstraints,\n    allUnits: Unit[]\n  ): Promise<ArmyComposition | null> {\n    try {\n      // Create stacking optimizer with all units\n      const stackingOptimizer = new StackingOptimizer(allUnits);\n\n      // Create constraints for this specific combination\n      const stackingConstraints: OptimizationConstraints = {\n        leadershipBudget: constraints.leadershipBudget,\n        dominanceBudget: constraints.dominanceBudget,\n        mercenaryLimits: constraints.mercenaryLimits,\n        availableUnits: unitCombination\n      };\n\n      // Use the proven stacking algorithm\n      const result = await stackingOptimizer.optimizeArmy(stackingConstraints);\n\n      // Extract the best composition from the result\n      if (result.compositions && result.compositions.length > 0) {\n        return result.compositions[0]; // Return the best composition\n      }\n\n      return null;\n\n    } catch (error) {\n      console.warn(`Failed to test combination [${unitCombination.join(', ')}]:`, error);\n      return null;\n    }\n  }\n\n\n}","/**\n * Enhanced Battle Simulation Service with Enemy Units Support\n * Extends the base battle simulation to work with specific enemy units\n * while maintaining backward compatibility with abstract enemy groups\n */\n\nimport {\n  IBattleSimulationService,\n  BattleConfiguration,\n  BattleResult,\n  BattleAnalysis,\n  BattleState,\n  CombatAction,\n  BattleUtils,\n  BATTLE_CONSTANTS\n} from '../types/battleSimulation';\nimport { ArmyComposition, StackingGroup } from '../types/units';\nimport { EnemyUnit, EnemyUnitUtils } from '../types/enemyUnits';\nimport { BattleSimulationService } from './battleSimulation';\n\n/**\n * Enhanced battle configuration that supports specific enemy units\n */\nexport interface EnemyUnitBattleConfiguration extends Omit<BattleConfiguration, 'enemyGroupCount'> {\n  /** Specific enemy units to fight against */\n  enemyUnits: EnemyUnit[];\n  /** Whether to use enemy attack modifiers in calculations */\n  useEnemyModifiers?: boolean;\n}\n\n/**\n * Enhanced battle state that tracks specific enemy units\n */\nexport interface EnemyUnitBattleState extends Omit<BattleState, 'enemyGroupCount'> {\n  /** Current enemy units with their health status */\n  enemyUnits: Array<{\n    unit: EnemyUnit;\n    currentHealth: number;\n    isAlive: boolean;\n    damageReceived: number;\n  }>;\n  /** Whether to apply enemy attack modifiers */\n  useEnemyModifiers: boolean;\n}\n\n/**\n * Enhanced combat action that includes enemy unit details\n */\nexport interface EnemyUnitCombatAction extends CombatAction {\n  /** Enemy unit involved in the action (if applicable) */\n  enemyUnit?: EnemyUnit;\n  /** Effective strength used in the attack (including modifiers) */\n  effectiveStrength?: number;\n  /** Attack modifiers applied */\n  modifiersApplied?: Array<{ type: string; value: number }>;\n}\n\nexport class EnemyUnitBattleSimulationService extends BattleSimulationService {\n  \n  /**\n   * Simulate battle with specific enemy units\n   */\n  simulateBattleWithEnemyUnits(config: EnemyUnitBattleConfiguration): BattleResult {\n    // Validate configuration\n    this.validateEnemyUnitBattleConfiguration(config);\n\n    // Initialize enhanced battle state\n    const state: EnemyUnitBattleState = {\n      currentTurn: 0,\n      playerGroups: [...config.playerArmy.stackingOrder],\n      enemyUnits: config.enemyUnits.map(unit => ({\n        unit,\n        currentHealth: unit.health,\n        isAlive: true,\n        damageReceived: 0\n      })),\n      totalDamageDealt: 0,\n      battleEnded: false,\n      combatLog: [],\n      useEnemyModifiers: config.useEnemyModifiers !== false\n    };\n\n    // Main battle loop\n    let consecutiveNoActionTurns = 0;\n    const maxNoActionTurns = 5;\n\n    while (!this.shouldEnemyUnitBattleEnd(state) && state.currentTurn < BATTLE_CONSTANTS.MAX_BATTLE_TURNS) {\n      const previousLogLength = state.combatLog.length;\n      state.currentTurn++;\n\n      try {\n        this.processEnemyUnitTurn(state, config.playerGoesFirst);\n      } catch (error) {\n        throw new Error(`Enemy unit battle processing failed on turn ${state.currentTurn}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n\n      // Safety check for progress\n      if (state.combatLog.length === previousLogLength) {\n        consecutiveNoActionTurns++;\n        if (consecutiveNoActionTurns >= maxNoActionTurns) {\n          throw new Error(`Battle stalled: No actions taken for ${maxNoActionTurns} consecutive turns`);\n        }\n      } else {\n        consecutiveNoActionTurns = 0;\n      }\n\n      // Additional safety check\n      if (state.currentTurn > 1 && state.playerGroups.length === 0 && !state.battleEnded) {\n        state.battleEnded = true;\n        break;\n      }\n    }\n\n    // Check for timeout\n    if (state.currentTurn >= BATTLE_CONSTANTS.MAX_BATTLE_TURNS) {\n      throw new Error(`Battle exceeded maximum duration of ${BATTLE_CONSTANTS.MAX_BATTLE_TURNS} turns`);\n    }\n\n    // Calculate statistics\n    const statistics = BattleUtils.calculateBattleStatistics(state.combatLog, state.totalDamageDealt);\n\n    // Convert back to standard battle configuration for result\n    const standardConfig: BattleConfiguration = {\n      playerArmy: config.playerArmy,\n      enemyGroupCount: config.enemyUnits.length,\n      playerGoesFirst: config.playerGoesFirst\n    };\n\n    return {\n      outcome: 'player_eliminated',\n      combatLog: state.combatLog,\n      totalDamageDealtToEnemies: state.totalDamageDealt,\n      battleDuration: state.currentTurn,\n      playerSurvivalTurns: state.currentTurn,\n      scenario: config.playerGoesFirst ? 'best_case' : 'worst_case',\n      configuration: standardConfig,\n      statistics\n    };\n  }\n\n  /**\n   * Simulate both scenarios with enemy units\n   */\n  simulateBothScenariosWithEnemyUnits(playerArmy: ArmyComposition, enemyUnits: EnemyUnit[], useEnemyModifiers: boolean = true): BattleAnalysis {\n    // Validate inputs\n    if (!playerArmy) {\n      throw new Error('Player army is required');\n    }\n\n    if (!enemyUnits || enemyUnits.length === 0) {\n      throw new Error('At least one enemy unit is required');\n    }\n\n    if (enemyUnits.length > 100) {\n      throw new Error('Cannot simulate with more than 100 enemy units (performance limit)');\n    }\n\n    // Best case: player goes first\n    const bestCaseConfig: EnemyUnitBattleConfiguration = {\n      playerArmy,\n      enemyUnits,\n      playerGoesFirst: true,\n      useEnemyModifiers\n    };\n    const bestCase = this.simulateBattleWithEnemyUnits(bestCaseConfig);\n\n    // Worst case: enemy goes first\n    const worstCaseConfig: EnemyUnitBattleConfiguration = {\n      playerArmy,\n      enemyUnits,\n      playerGoesFirst: false,\n      useEnemyModifiers\n    };\n    const worstCase = this.simulateBattleWithEnemyUnits(worstCaseConfig);\n\n    // Calculate comparison metrics\n    const comparison = {\n      damageDifference: bestCase.totalDamageDealtToEnemies - worstCase.totalDamageDealtToEnemies,\n      survivalDifference: bestCase.playerSurvivalTurns - worstCase.playerSurvivalTurns,\n      averageDamage: (bestCase.totalDamageDealtToEnemies + worstCase.totalDamageDealtToEnemies) / 2,\n      averageSurvival: (bestCase.playerSurvivalTurns + worstCase.playerSurvivalTurns) / 2\n    };\n\n    return {\n      bestCase,\n      worstCase,\n      comparison\n    };\n  }\n\n  /**\n   * Validate enemy unit battle configuration\n   */\n  private validateEnemyUnitBattleConfiguration(config: EnemyUnitBattleConfiguration): void {\n    if (!config) {\n      throw new Error('Battle configuration is required');\n    }\n\n    if (!config.playerArmy) {\n      throw new Error('Player army is required');\n    }\n\n    if (!config.playerArmy.stackingOrder || config.playerArmy.stackingOrder.length === 0) {\n      throw new Error('Player army must have at least one unit group');\n    }\n\n    if (!config.enemyUnits || !Array.isArray(config.enemyUnits) || config.enemyUnits.length === 0) {\n      throw new Error('At least one enemy unit is required');\n    }\n\n    if (config.enemyUnits.length > 100) {\n      throw new Error('Cannot have more than 100 enemy units (performance limit)');\n    }\n\n    // Validate each player unit group\n    for (const group of config.playerArmy.stackingOrder) {\n      if (!group.unitName || group.unitName.trim() === '') {\n        throw new Error('All unit groups must have a valid name');\n      }\n\n      if (group.count <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have a positive count`);\n      }\n\n      if (group.unitStrength <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive strength`);\n      }\n\n      if (group.totalHealth <= 0) {\n        throw new Error(`Unit group \"${group.unitName}\" must have positive health`);\n      }\n    }\n\n    // Validate each enemy unit\n    for (const enemyUnit of config.enemyUnits) {\n      if (!enemyUnit.name || enemyUnit.name.trim() === '') {\n        throw new Error('All enemy units must have a valid name');\n      }\n\n      if (enemyUnit.health <= 0) {\n        throw new Error(`Enemy unit \"${enemyUnit.name}\" must have positive health`);\n      }\n\n      if (enemyUnit.strength < 0) {\n        throw new Error(`Enemy unit \"${enemyUnit.name}\" cannot have negative strength`);\n      }\n    }\n  }\n\n  /**\n   * Check if enemy unit battle should end\n   */\n  private shouldEnemyUnitBattleEnd(state: EnemyUnitBattleState): boolean {\n    return state.playerGroups.length === 0 || state.battleEnded;\n  }\n\n  /**\n   * Process a turn in enemy unit battle\n   */\n  private processEnemyUnitTurn(state: EnemyUnitBattleState, playerGoesFirst: boolean): void {\n    // Get initial orders\n    const initialPlayerAttackOrder = this.calculateAttackOrder(state.playerGroups);\n    const initialPlayerCount = initialPlayerAttackOrder.length;\n    const aliveEnemyUnits = state.enemyUnits.filter(e => e.isAlive);\n    const maxEnemyTurns = aliveEnemyUnits.length;\n\n    // Track attacks this phase\n    const playerGroupsAttacked = new Set<string>();\n    let enemyTurnsTaken = 0;\n\n    const totalTurns = Math.max(initialPlayerCount, maxEnemyTurns);\n\n    // Process alternating turns\n    for (let turnIndex = 0; turnIndex < totalTurns * 2; turnIndex++) {\n      if (this.shouldEnemyUnitBattleEnd(state)) {\n        break;\n      }\n\n      const isPlayerTurn = playerGoesFirst ? (turnIndex % 2 === 0) : (turnIndex % 2 === 1);\n\n      if (isPlayerTurn) {\n        // Player's turn\n        const nextPlayerGroup = this.getNextPlayerAttackerForEnemyBattle(\n          state,\n          initialPlayerAttackOrder,\n          playerGroupsAttacked\n        );\n        \n        if (nextPlayerGroup) {\n          this.processSinglePlayerAttackOnEnemyUnit(state, nextPlayerGroup, playerGroupsAttacked.size);\n          const groupId = `${nextPlayerGroup.unitName}:${nextPlayerGroup.count}:${nextPlayerGroup.unitStrength}`;\n          playerGroupsAttacked.add(groupId);\n        }\n      } else {\n        // Enemy's turn\n        if (enemyTurnsTaken < aliveEnemyUnits.length && state.playerGroups.length > 0) {\n          this.processSingleEnemyUnitAttack(state, enemyTurnsTaken);\n          enemyTurnsTaken++;\n        }\n      }\n\n      // Check if phase is complete\n      if (playerGroupsAttacked.size >= initialPlayerCount && enemyTurnsTaken >= maxEnemyTurns) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Process player attack on enemy unit\n   */\n  private processSinglePlayerAttackOnEnemyUnit(state: EnemyUnitBattleState, attackingGroup: StackingGroup, attackIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    const aliveEnemyUnits = state.enemyUnits.filter(e => e.isAlive);\n    if (aliveEnemyUnits.length === 0) return;\n\n    const targetEnemyIndex = attackIndex % aliveEnemyUnits.length;\n    const targetEnemyState = aliveEnemyUnits[targetEnemyIndex];\n    const targetEnemy = targetEnemyState.unit;\n\n    // Calculate damage (basic damage for now, could be enhanced with player modifiers)\n    const baseDamage = BattleUtils.calculateDamageDealt(attackingGroup);\n    \n    // Create enhanced combat action\n    const action: EnemyUnitCombatAction = {\n      turn: state.currentTurn,\n      attacker: BattleUtils.formatGroupForLog(attackingGroup),\n      target: targetEnemy.name,\n      action: `attack ${targetEnemy.name} and deal ${baseDamage.toLocaleString()} damage`,\n      damageDealt: baseDamage,\n      eliminated: false,\n      enemyUnit: targetEnemy,\n      effectiveStrength: attackingGroup.unitStrength\n    };\n\n    // Apply damage to enemy\n    targetEnemyState.currentHealth = Math.max(0, targetEnemyState.currentHealth - baseDamage);\n    targetEnemyState.damageReceived += baseDamage;\n\n    // Check if enemy is defeated (though they never truly die in this system)\n    if (targetEnemyState.currentHealth <= 0) {\n      targetEnemyState.isAlive = false;\n      action.action = `attack ${targetEnemy.name} and deal ${baseDamage.toLocaleString()} damage (defeated)`;\n    }\n\n    // Add to combat log and track damage\n    state.combatLog.push(action);\n    state.totalDamageDealt += baseDamage;\n  }\n\n  /**\n   * Process enemy unit attack on player\n   */\n  private processSingleEnemyUnitAttack(state: EnemyUnitBattleState, enemyIndex: number): void {\n    if (state.playerGroups.length === 0) return;\n\n    const aliveEnemyUnits = state.enemyUnits.filter(e => e.isAlive);\n    if (enemyIndex >= aliveEnemyUnits.length) return;\n\n    const attackingEnemyState = aliveEnemyUnits[enemyIndex];\n    const attackingEnemy = attackingEnemyState.unit;\n\n    // Get target (highest health player group)\n    const currentTargetOrder = this.calculateEnemyTargetOrder(state.playerGroups);\n    if (currentTargetOrder.length === 0) return;\n\n    const targetGroup = currentTargetOrder[0];\n\n    // Calculate effective strength (including modifiers if enabled)\n    let effectiveStrength = attackingEnemy.strength;\n    const modifiersApplied: Array<{ type: string; value: number }> = [];\n\n    if (state.useEnemyModifiers && attackingEnemy.attack_modifiers) {\n      // For now, we'll apply a general modifier since StackingGroup doesn't have unit types\n      // This could be enhanced by looking up the actual unit data to get unit types\n      const generalModifier = attackingEnemy.attack_modifiers.reduce((total, mod) => total + mod.value, 0) / attackingEnemy.attack_modifiers.length;\n      if (generalModifier > 0) {\n        effectiveStrength += Math.round(generalModifier);\n        modifiersApplied.push({ type: 'General', value: Math.round(generalModifier) });\n      }\n    }\n\n    // Create enhanced combat action\n    const action: EnemyUnitCombatAction = {\n      turn: state.currentTurn,\n      attacker: attackingEnemy.name,\n      target: BattleUtils.formatGroupForLog(targetGroup),\n      action: `attack and kill ${BattleUtils.formatGroupForLog(targetGroup)}`,\n      eliminated: true,\n      enemyUnit: attackingEnemy,\n      effectiveStrength,\n      modifiersApplied: modifiersApplied.length > 0 ? modifiersApplied : undefined\n    };\n\n    // Add modifier info to action description if applicable\n    if (modifiersApplied.length > 0) {\n      const modifierText = modifiersApplied.map(m => `+${m.value} vs ${m.type}`).join(', ');\n      action.action += ` (${modifierText})`;\n    }\n\n    // Add to combat log\n    state.combatLog.push(action);\n\n    // Remove eliminated player group\n    const groupIndex = state.playerGroups.findIndex(\n      group => group.unitName === targetGroup.unitName &&\n               group.count === targetGroup.count &&\n               group.totalHealth === targetGroup.totalHealth\n    );\n\n    if (groupIndex !== -1) {\n      state.playerGroups.splice(groupIndex, 1);\n    }\n\n    // Check if battle should end\n    if (state.playerGroups.length === 0) {\n      state.battleEnded = true;\n    }\n  }\n\n  /**\n   * Find the next player group that should attack (reimplemented for enemy battle)\n   */\n  private getNextPlayerAttackerForEnemyBattle(\n    state: EnemyUnitBattleState,\n    initialAttackOrder: StackingGroup[],\n    alreadyAttacked: Set<string>\n  ): StackingGroup | null {\n    // Go through the initial attack order and find the first group that:\n    // 1. Still exists in the current player groups\n    // 2. Hasn't attacked yet this phase\n    for (const originalGroup of initialAttackOrder) {\n      const groupId = `${originalGroup.unitName}:${originalGroup.count}:${originalGroup.unitStrength}`;\n\n      if (!alreadyAttacked.has(groupId)) {\n        // Check if this group still exists (might have been eliminated)\n        const currentGroup = state.playerGroups.find(g =>\n          g.unitName === originalGroup.unitName &&\n          g.unitStrength === originalGroup.unitStrength\n        );\n\n        if (currentGroup) {\n          return currentGroup;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get enemy unit battle statistics\n   */\n  getEnemyUnitBattleStatistics(result: BattleResult): any {\n    const baseStats = BattleUtils.calculateBattleStatistics(result.combatLog, result.totalDamageDealtToEnemies);\n    \n    // Enhanced statistics for enemy unit battles\n    const enemyUnitActions = result.combatLog.filter(action => \n      (action as EnemyUnitCombatAction).enemyUnit !== undefined\n    ) as EnemyUnitCombatAction[];\n\n    const damageByEnemyUnit: Record<string, number> = {};\n    const attacksByEnemyUnit: Record<string, number> = {};\n    const modifiersUsed: Record<string, number> = {};\n\n    enemyUnitActions.forEach(action => {\n      if (action.enemyUnit) {\n        const enemyName = action.enemyUnit.name;\n        \n        if (action.eliminated) {\n          // Enemy attack\n          attacksByEnemyUnit[enemyName] = (attacksByEnemyUnit[enemyName] || 0) + 1;\n          \n          // Track modifier usage\n          if (action.modifiersApplied) {\n            action.modifiersApplied.forEach(modifier => {\n              const key = `${enemyName} vs ${modifier.type}`;\n              modifiersUsed[key] = (modifiersUsed[key] || 0) + modifier.value;\n            });\n          }\n        } else {\n          // Player attack on enemy\n          const damage = action.damageDealt || 0;\n          damageByEnemyUnit[enemyName] = (damageByEnemyUnit[enemyName] || 0) + damage;\n        }\n      }\n    });\n\n    return {\n      ...baseStats,\n      damageByEnemyUnit,\n      attacksByEnemyUnit,\n      modifiersUsed,\n      totalEnemyUnitsInvolved: Object.keys(attacksByEnemyUnit).length,\n      totalModifierApplications: Object.keys(modifiersUsed).length\n    };\n  }\n}","/**\n * Enemy unit types and interfaces for the TotalBattle Army Calculator\n * Simplified structure without player-specific resource management fields\n */\n\n/**\n * Attack modifier interface for enemy units\n */\nexport interface EnemyAttackModifier {\n  /** Type of unit this modifier targets (e.g., 'Melee', 'Flying', 'Mounted') */\n  target_type: string;\n  /** Type of modifier (typically 'Strength') */\n  modifier_type: 'Strength';\n  /** Absolute value of the modifier */\n  value: number;\n}\n\n/**\n * Base enemy unit interface representing an enemy unit\n */\nexport interface EnemyUnit {\n  /** Display name of the enemy unit */\n  name: string;\n  /** Array of unit type tags (e.g., ['Flying', 'Epic Monster']) */\n  unit_types: string[];\n  /** Unit health points */\n  health: number;\n  /** Unit attack strength */\n  strength: number;\n  /** Array of attack modifiers this unit has against other unit types */\n  attack_modifiers?: EnemyAttackModifier[];\n}\n\n/**\n * User-created enemy unit stored in browser memory\n */\nexport interface UserEnemyUnit extends EnemyUnit {\n  /** Unique identifier for user-created units */\n  id: string;\n  /** Timestamp when the unit was created */\n  createdAt: Date;\n  /** Timestamp when the unit was last modified */\n  modifiedAt: Date;\n}\n\n/**\n * Enemy unit with calculated properties for battle simulation\n */\nexport interface EnemyUnitWithCalculatedProps extends EnemyUnit {\n  /** Calculated strength per health ratio for comparison */\n  readonly strengthPerHealth: number;\n  /** Calculated total combat effectiveness score */\n  readonly effectivenessScore: number;\n}\n\n/**\n * Enemy unit validation result\n */\nexport interface EnemyUnitValidationResult {\n  /** Whether the enemy unit data is valid */\n  isValid: boolean;\n  /** Array of validation error messages */\n  errors: string[];\n  /** Array of validation warning messages */\n  warnings?: string[];\n}\n\n/**\n * Enemy unit filter criteria\n */\nexport interface EnemyUnitFilter {\n  /** Filter by unit types (must have at least one) */\n  unitTypes?: string[];\n  /** Minimum strength requirement */\n  minStrength?: number;\n  /** Maximum strength requirement */\n  maxStrength?: number;\n  /** Minimum health requirement */\n  minHealth?: number;\n  /** Maximum health requirement */\n  maxHealth?: number;\n  /** Filter by name (partial match) */\n  nameFilter?: string;\n}\n\n/**\n * Summary statistics for enemy units\n */\nexport interface EnemyUnitSummary {\n  /** Total number of enemy units */\n  totalUnits: number;\n  /** Count of units by type */\n  byUnitType: Record<string, number>;\n  /** Strength range across all enemy units */\n  strengthRange: {\n    min: number;\n    max: number;\n    average: number;\n  };\n  /** Health range across all enemy units */\n  healthRange: {\n    min: number;\n    max: number;\n    average: number;\n  };\n}\n\n/**\n * Utility class for enemy unit operations\n */\nexport class EnemyUnitUtils {\n  /**\n   * Calculate strength per health ratio\n   */\n  static getStrengthPerHealth(unit: EnemyUnit): number {\n    return unit.health > 0 ? unit.strength / unit.health : 0;\n  }\n\n  /**\n   * Calculate effectiveness score based on strength and health\n   */\n  static getEffectivenessScore(unit: EnemyUnit): number {\n    // Simple effectiveness calculation: strength * health / 1000\n    return (unit.strength * unit.health) / 1000;\n  }\n\n  /**\n   * Check if enemy unit has specific unit type\n   */\n  static hasUnitType(unit: EnemyUnit, unitType: string): boolean {\n    return unit.unit_types.some(type => \n      type.toLowerCase() === unitType.toLowerCase()\n    );\n  }\n\n  /**\n   * Get attack modifier value against specific target type\n   */\n  static getAttackModifierAgainst(unit: EnemyUnit, targetType: string): number {\n    if (!unit.attack_modifiers) return 0;\n    \n    const modifier = unit.attack_modifiers.find(mod => \n      mod.target_type.toLowerCase() === targetType.toLowerCase()\n    );\n    \n    return modifier ? modifier.value : 0;\n  }\n\n  /**\n   * Calculate total strength including modifiers against target\n   */\n  static getTotalStrengthAgainst(unit: EnemyUnit, targetType: string): number {\n    const baseStrength = unit.strength;\n    const modifier = EnemyUnitUtils.getAttackModifierAgainst(unit, targetType);\n    return baseStrength + modifier;\n  }\n\n  /**\n   * Validate enemy unit data structure\n   */\n  static validateEnemyUnit(unit: Partial<EnemyUnit>): EnemyUnitValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Required fields validation\n    if (!unit.name || unit.name.trim() === '') {\n      errors.push('Unit name is required');\n    }\n\n    if (!unit.unit_types || !Array.isArray(unit.unit_types) || unit.unit_types.length === 0) {\n      errors.push('At least one unit type is required');\n    }\n\n    if (typeof unit.health !== 'number' || unit.health <= 0) {\n      errors.push('Health must be a positive number');\n    }\n\n    if (typeof unit.strength !== 'number' || unit.strength <= 0) {\n      errors.push('Strength must be a positive number');\n    }\n\n    // Optional fields validation\n    if (unit.attack_modifiers) {\n      if (!Array.isArray(unit.attack_modifiers)) {\n        errors.push('Attack modifiers must be an array');\n      } else {\n        unit.attack_modifiers.forEach((modifier, index) => {\n          if (!modifier.target_type || modifier.target_type.trim() === '') {\n            errors.push(`Attack modifier ${index + 1}: target_type is required`);\n          }\n          if (modifier.modifier_type !== 'Strength') {\n            errors.push(`Attack modifier ${index + 1}: modifier_type must be 'Strength'`);\n          }\n          if (typeof modifier.value !== 'number' || modifier.value < 0) {\n            errors.push(`Attack modifier ${index + 1}: value must be a non-negative number`);\n          }\n        });\n      }\n    }\n\n    // Warnings for unusual values\n    if (unit.health && unit.health > 10000000) {\n      warnings.push('Health value is unusually high');\n    }\n\n    if (unit.strength && unit.strength > 5000000) {\n      warnings.push('Strength value is unusually high');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Create a user enemy unit from base enemy unit data\n   */\n  static createUserEnemyUnit(baseUnit: EnemyUnit): UserEnemyUnit {\n    const now = new Date();\n    return {\n      ...baseUnit,\n      id: `user_enemy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      createdAt: now,\n      modifiedAt: now\n    };\n  }\n\n  /**\n   * Update a user enemy unit's modified timestamp\n   */\n  static updateUserEnemyUnit(unit: UserEnemyUnit, updates: Partial<EnemyUnit>): UserEnemyUnit {\n    return {\n      ...unit,\n      ...updates,\n      modifiedAt: new Date()\n    };\n  }\n}\n\n/**\n * Constants for enemy units\n */\nexport const ENEMY_UNIT_TYPES = [\n  'Flying', 'Epic Monster', 'Ranged', 'Melee', 'Mounted', 'Beast', 'Undead', \n  'Giant', 'Dragon', 'Elemental', 'Demon', 'Human', 'Construct', 'Magic', \n  'Siege', 'Aquatic', 'Monster', 'Specialist', 'Elite', 'Heavy', 'Light'\n] as const;\n\nexport const ENEMY_ATTACK_MODIFIER_TYPES = ['Strength'] as const;\n\nexport const ENEMY_TARGET_TYPES = [\n  'Melee', 'Ranged', 'Flying', 'Mounted', 'Beast', 'Human', 'Siege', \n  'Dragon', 'Elemental', 'Giant', 'Fortification', 'Undead', 'Demon'\n] as const;\n\n/**\n * Default enemy unit template for creating new units\n */\nexport const DEFAULT_ENEMY_UNIT: Omit<EnemyUnit, 'name'> = {\n  unit_types: ['Epic Monster'],\n  health: 10000,\n  strength: 5000,\n  attack_modifiers: []\n};","/**\n * Enemy Unit Data Loader for the Army Stacking Calculator\n * Loads and manages enemy unit data from JSON files\n */\n\nimport { \n  EnemyUnit, \n  EnemyUnitWithCalculatedProps, \n  EnemyUnitSummary, \n  EnemyUnitFilter,\n  EnemyUnitUtils \n} from '../types/enemyUnits';\n\nexport class EnemyUnitLoader {\n  private enemyUnits: EnemyUnit[] = [];\n  private enemyUnitsByName: Map<string, EnemyUnit> = new Map();\n  private enemyUnitsByType: Map<string, EnemyUnit[]> = new Map();\n\n  constructor() {\n    this.resetData();\n  }\n\n  /**\n   * Load enemy units from a JSON file or URL\n   */\n  async loadEnemyUnits(source: string | EnemyUnit[]): Promise<EnemyUnit[]> {\n    try {\n      let enemyUnitsData: EnemyUnit[];\n\n      if (typeof source === 'string') {\n        console.log(`Loading enemy units from: ${source}`);\n        const response = await fetch(source);\n        \n        if (!response.ok) {\n          throw new Error(`Failed to fetch enemy units: ${response.status} ${response.statusText}`);\n        }\n        \n        enemyUnitsData = await response.json();\n      } else {\n        enemyUnitsData = source;\n      }\n\n      if (!Array.isArray(enemyUnitsData)) {\n        throw new Error('Enemy unit data must be an array');\n      }\n\n      this.enemyUnits = enemyUnitsData.map(unitData => this.validateAndNormalizeEnemyUnit(unitData));\n      this.buildLookups();\n\n      console.log(`✅ Loaded ${this.enemyUnits.length} enemy units successfully`);\n      return this.enemyUnits;\n    } catch (error) {\n      console.error('❌ Error loading enemy units:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate and normalize enemy unit data\n   */\n  private validateAndNormalizeEnemyUnit(unitData: any): EnemyUnit {\n    // Ensure all required fields exist with defaults\n    const enemyUnit: EnemyUnit = {\n      name: unitData.name || 'Unknown Enemy',\n      unit_types: Array.isArray(unitData.unit_types) ? unitData.unit_types : [],\n      health: Number(unitData.health) || 0,\n      strength: Number(unitData.strength) || 0,\n      attack_modifiers: Array.isArray(unitData.attack_modifiers) ? unitData.attack_modifiers : []\n    };\n\n    // Validate unit types\n    if (!Array.isArray(enemyUnit.unit_types) || enemyUnit.unit_types.length === 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has no unit types, adding 'Unknown'`);\n      enemyUnit.unit_types = ['Unknown'];\n    }\n\n    // Validate numeric values\n    if (enemyUnit.health <= 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has invalid health: ${enemyUnit.health}`);\n      enemyUnit.health = 1; // Minimum health\n    }\n\n    if (enemyUnit.strength < 0) {\n      console.warn(`Enemy unit ${enemyUnit.name} has negative strength: ${enemyUnit.strength}`);\n      enemyUnit.strength = 0;\n    }\n\n    // Validate attack modifiers\n    if (enemyUnit.attack_modifiers && Array.isArray(enemyUnit.attack_modifiers)) {\n      enemyUnit.attack_modifiers = enemyUnit.attack_modifiers.filter(modifier => {\n        if (!modifier || typeof modifier !== 'object') {\n          console.warn(`Enemy unit ${enemyUnit.name} has invalid attack modifier object`);\n          return false;\n        }\n        if (!modifier.target_type || typeof modifier.value !== 'number') {\n          console.warn(`Enemy unit ${enemyUnit.name} has invalid attack modifier: ${JSON.stringify(modifier)}`);\n          return false;\n        }\n        return true;\n      });\n    }\n\n    return enemyUnit;\n  }\n\n  /**\n   * Build lookup dictionaries for efficient access\n   */\n  private buildLookups(): void {\n    this.resetData();\n\n    this.enemyUnitsByName = new Map(this.enemyUnits.map(unit => [unit.name, unit]));\n\n    // Categorize units by their types\n    this.enemyUnits.forEach(unit => {\n      unit.unit_types.forEach(type => {\n        if (!this.enemyUnitsByType.has(type)) {\n          this.enemyUnitsByType.set(type, []);\n        }\n        this.enemyUnitsByType.get(type)!.push(unit);\n      });\n    });\n\n    // Sort units within each type by strength\n    this.enemyUnitsByType.forEach(units => {\n      units.sort((a, b) => b.strength - a.strength); // Descending order for enemies\n    });\n  }\n\n  /**\n   * Reset internal data structures\n   */\n  private resetData(): void {\n    this.enemyUnitsByName.clear();\n    this.enemyUnitsByType.clear();\n  }\n\n  /**\n   * Get all loaded enemy units\n   */\n  getAllEnemyUnits(): EnemyUnit[] {\n    return [...this.enemyUnits];\n  }\n\n  /**\n   * Get an enemy unit by its name\n   */\n  getEnemyUnitByName(name: string): EnemyUnit | undefined {\n    return this.enemyUnitsByName.get(name);\n  }\n\n  /**\n   * Get enemy units by unit type\n   */\n  getEnemyUnitsByType(unitType: string): EnemyUnit[] {\n    return [...(this.enemyUnitsByType.get(unitType) || [])];\n  }\n\n  /**\n   * Get all unique unit types from loaded enemy units\n   */\n  getUniqueEnemyUnitTypes(): string[] {\n    return Array.from(this.enemyUnitsByType.keys()).sort();\n  }\n\n  /**\n   * Filter enemy units by various criteria\n   */\n  filterEnemyUnits(filter: EnemyUnitFilter): EnemyUnit[] {\n    let filtered = this.enemyUnits;\n    \n    if (filter.unitTypes && filter.unitTypes.length > 0) {\n      filtered = filtered.filter(u => \n        filter.unitTypes!.some(type => u.unit_types.includes(type))\n      );\n    }\n    \n    if (filter.minStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength >= filter.minStrength!);\n    }\n    \n    if (filter.maxStrength !== undefined) {\n      filtered = filtered.filter(u => u.strength <= filter.maxStrength!);\n    }\n\n    if (filter.minHealth !== undefined) {\n      filtered = filtered.filter(u => u.health >= filter.minHealth!);\n    }\n    \n    if (filter.maxHealth !== undefined) {\n      filtered = filtered.filter(u => u.health <= filter.maxHealth!);\n    }\n\n    // Note: hasAttackModifiers filter removed as it's not in the EnemyUnitFilter interface\n    \n    return filtered;\n  }\n\n  /**\n   * Search enemy units by name (case-insensitive, partial match)\n   */\n  searchEnemyUnits(query: string): EnemyUnit[] {\n    if (!query.trim()) {\n      return this.getAllEnemyUnits();\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return this.enemyUnits.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Get enemy units with enhanced calculated properties\n   */\n  getEnhancedEnemyUnits(): EnemyUnitWithCalculatedProps[] {\n    return this.enemyUnits.map(unit => ({\n      ...unit,\n      get strengthPerHealth(): number {\n        return EnemyUnitUtils.getStrengthPerHealth(unit);\n      },\n      get effectivenessScore(): number {\n        return EnemyUnitUtils.getEffectivenessScore(unit);\n      }\n    }));\n  }\n\n  /**\n   * Get a summary of loaded enemy units\n   */\n  getEnemyUnitSummary(): EnemyUnitSummary {\n    if (this.enemyUnits.length === 0) {\n      return {\n        totalUnits: 0,\n        byUnitType: {},\n        strengthRange: { min: 0, max: 0, average: 0 },\n        healthRange: { min: 0, max: 0, average: 0 }\n      };\n    }\n\n    const strengths = this.enemyUnits.map(u => u.strength);\n    const healths = this.enemyUnits.map(u => u.health);\n\n    // Count units by type\n    const byUnitType: Record<string, number> = {};\n    this.enemyUnitsByType.forEach((units, type) => {\n      byUnitType[type] = units.length;\n    });\n\n    return {\n      totalUnits: this.enemyUnits.length,\n      byUnitType,\n      strengthRange: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        average: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthRange: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        average: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      }\n    };\n  }\n\n  /**\n   * Get statistics about the loaded enemy units\n   */\n  getStatistics() {\n    if (this.enemyUnits.length === 0) {\n      return {\n        totalUnits: 0,\n        unitTypeDistribution: {},\n        strengthStats: { min: 0, max: 0, avg: 0 },\n        healthStats: { min: 0, max: 0, avg: 0 },\n        topUnitsByStrength: [],\n        topUnitsByHealth: [],\n        unitsWithAttackModifiers: 0\n      };\n    }\n\n    const strengths = this.enemyUnits.map(u => u.strength);\n    const healths = this.enemyUnits.map(u => u.health);\n\n    // Count units by type\n    const unitTypeDistribution: Record<string, number> = {};\n    this.enemyUnitsByType.forEach((units, type) => {\n      unitTypeDistribution[type] = units.length;\n    });\n\n    // Count units with attack modifiers\n    const unitsWithAttackModifiers = this.enemyUnits.filter(u =>\n      u.attack_modifiers && Array.isArray(u.attack_modifiers) && u.attack_modifiers.length > 0\n    ).length;\n\n    return {\n      totalUnits: this.enemyUnits.length,\n      unitTypeDistribution,\n      strengthStats: {\n        min: Math.min(...strengths),\n        max: Math.max(...strengths),\n        avg: Math.round(strengths.reduce((a, b) => a + b, 0) / strengths.length)\n      },\n      healthStats: {\n        min: Math.min(...healths),\n        max: Math.max(...healths),\n        avg: Math.round(healths.reduce((a, b) => a + b, 0) / healths.length)\n      },\n      topUnitsByStrength: [...this.enemyUnits]\n        .sort((a, b) => b.strength - a.strength)\n        .slice(0, 10),\n      topUnitsByHealth: [...this.enemyUnits]\n        .sort((a, b) => b.health - a.health)\n        .slice(0, 10),\n      unitsWithAttackModifiers\n    };\n  }\n\n  /**\n   * Get enemy units that have attack modifiers against specific unit types\n   */\n  getEnemyUnitsWithModifiersAgainst(unitTypes: string[]): EnemyUnit[] {\n    return this.enemyUnits.filter(unit => {\n      if (!unit.attack_modifiers || !Array.isArray(unit.attack_modifiers)) return false;\n      return unitTypes.some(type =>\n        unit.attack_modifiers!.some(modifier =>\n          modifier.target_type.toLowerCase() === type.toLowerCase()\n        )\n      );\n    });\n  }\n\n  /**\n   * Get the most effective enemy units against specific player unit types\n   */\n  getMostEffectiveAgainst(playerUnitTypes: string[], limit: number = 5): EnemyUnit[] {\n    return this.enemyUnits\n      .map(unit => ({\n        unit,\n        effectiveness: this.calculateEffectivenessAgainst(unit, playerUnitTypes)\n      }))\n      .sort((a, b) => b.effectiveness - a.effectiveness)\n      .slice(0, limit)\n      .map(item => item.unit);\n  }\n\n  /**\n   * Calculate effectiveness of an enemy unit against specific player unit types\n   */\n  private calculateEffectivenessAgainst(unit: EnemyUnit, playerUnitTypes: string[]): number {\n    let totalEffectiveness = EnemyUnitUtils.getEffectivenessScore(unit);\n    \n    if (unit.attack_modifiers && Array.isArray(unit.attack_modifiers)) {\n      playerUnitTypes.forEach(playerType => {\n        const modifier = EnemyUnitUtils.getAttackModifierAgainst(unit, playerType);\n        totalEffectiveness += modifier * 0.1; // Weight modifiers at 10% of base effectiveness\n      });\n    }\n    \n    return totalEffectiveness;\n  }\n}","/**\n * Enemy Unit Validation Service for the Army Stacking Calculator\n * Provides comprehensive validation for enemy unit data\n */\n\nimport { \n  EnemyUnit, \n  UserEnemyUnit, \n  EnemyUnitValidationResult,\n  EnemyUnitUtils,\n  ENEMY_UNIT_TYPES,\n  ENEMY_TARGET_TYPES,\n  ENEMY_ATTACK_MODIFIER_TYPES\n} from '../types/enemyUnits';\n\nexport class EnemyUnitValidationService {\n  \n  /**\n   * Validate a complete enemy unit\n   */\n  static validateEnemyUnit(unit: Partial<EnemyUnit>): EnemyUnitValidationResult {\n    return EnemyUnitUtils.validateEnemyUnit(unit);\n  }\n\n  /**\n   * Validate a user-created enemy unit\n   */\n  static validateUserEnemyUnit(unit: Partial<UserEnemyUnit>): EnemyUnitValidationResult {\n    const baseValidation = EnemyUnitUtils.validateEnemyUnit(unit);\n    const errors = [...baseValidation.errors];\n    const warnings = [...(baseValidation.warnings || [])];\n\n    // Additional validation for user units\n    if (!unit.id || typeof unit.id !== 'string' || unit.id.trim() === '') {\n      errors.push('User enemy unit must have a valid ID');\n    }\n\n    if (!unit.createdAt || !(unit.createdAt instanceof Date)) {\n      errors.push('User enemy unit must have a valid creation date');\n    }\n\n    if (!unit.modifiedAt || !(unit.modifiedAt instanceof Date)) {\n      errors.push('User enemy unit must have a valid modification date');\n    }\n\n    // Check if modification date is after creation date\n    if (unit.createdAt && unit.modifiedAt && \n        unit.createdAt instanceof Date && unit.modifiedAt instanceof Date) {\n      if (unit.modifiedAt < unit.createdAt) {\n        errors.push('Modification date cannot be before creation date');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate enemy unit name\n   */\n  static validateName(name: string): { isValid: boolean; error?: string } {\n    if (!name || typeof name !== 'string') {\n      return { isValid: false, error: 'Name must be a non-empty string' };\n    }\n\n    const trimmedName = name.trim();\n    if (trimmedName.length === 0) {\n      return { isValid: false, error: 'Name cannot be empty or only whitespace' };\n    }\n\n    if (trimmedName.length > 100) {\n      return { isValid: false, error: 'Name cannot exceed 100 characters' };\n    }\n\n    // Check for invalid characters\n    const invalidChars = /[<>\\\"'&]/;\n    if (invalidChars.test(trimmedName)) {\n      return { isValid: false, error: 'Name contains invalid characters (<, >, \", \\', &)' };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Validate unit types array\n   */\n  static validateUnitTypes(unitTypes: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (!Array.isArray(unitTypes)) {\n      return { isValid: false, error: 'Unit types must be an array' };\n    }\n\n    if (unitTypes.length === 0) {\n      return { isValid: false, error: 'At least one unit type is required' };\n    }\n\n    if (unitTypes.length > 10) {\n      return { isValid: false, error: 'Cannot have more than 10 unit types' };\n    }\n\n    // Validate each unit type\n    for (let i = 0; i < unitTypes.length; i++) {\n      const type = unitTypes[i];\n      if (typeof type !== 'string' || type.trim() === '') {\n        return { isValid: false, error: `Unit type ${i + 1} must be a non-empty string` };\n      }\n\n      // Check if it's a known unit type\n      if (!ENEMY_UNIT_TYPES.includes(type as any)) {\n        warnings.push(`Unit type '${type}' is not a standard type`);\n      }\n    }\n\n    // Check for duplicates\n    const uniqueTypes = new Set(unitTypes);\n    if (uniqueTypes.size !== unitTypes.length) {\n      return { isValid: false, error: 'Unit types cannot contain duplicates' };\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate health value\n   */\n  static validateHealth(health: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (typeof health !== 'number') {\n      return { isValid: false, error: 'Health must be a number' };\n    }\n\n    if (!Number.isFinite(health)) {\n      return { isValid: false, error: 'Health must be a finite number' };\n    }\n\n    if (health <= 0) {\n      return { isValid: false, error: 'Health must be greater than 0' };\n    }\n\n    if (health > 50000000) {\n      return { isValid: false, error: 'Health cannot exceed 50,000,000' };\n    }\n\n    // Warnings for unusual values\n    if (health < 100) {\n      warnings.push('Health value is unusually low (less than 100)');\n    }\n\n    if (health > 10000000) {\n      warnings.push('Health value is unusually high (greater than 10,000,000)');\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate strength value\n   */\n  static validateStrength(strength: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    if (typeof strength !== 'number') {\n      return { isValid: false, error: 'Strength must be a number' };\n    }\n\n    if (!Number.isFinite(strength)) {\n      return { isValid: false, error: 'Strength must be a finite number' };\n    }\n\n    if (strength < 0) {\n      return { isValid: false, error: 'Strength cannot be negative' };\n    }\n\n    if (strength > 25000000) {\n      return { isValid: false, error: 'Strength cannot exceed 25,000,000' };\n    }\n\n    // Warnings for unusual values\n    if (strength === 0) {\n      warnings.push('Strength value of 0 means this unit cannot deal damage');\n    }\n\n    if (strength < 50) {\n      warnings.push('Strength value is unusually low (less than 50)');\n    }\n\n    if (strength > 5000000) {\n      warnings.push('Strength value is unusually high (greater than 5,000,000)');\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate attack modifiers array\n   */\n  static validateAttackModifiers(attackModifiers: any): { isValid: boolean; error?: string; warnings?: string[] } {\n    const warnings: string[] = [];\n\n    // Attack modifiers are optional\n    if (attackModifiers === undefined || attackModifiers === null) {\n      return { isValid: true };\n    }\n\n    if (!Array.isArray(attackModifiers)) {\n      return { isValid: false, error: 'Attack modifiers must be an array' };\n    }\n\n    if (attackModifiers.length > 20) {\n      return { isValid: false, error: 'Cannot have more than 20 attack modifiers' };\n    }\n\n    // Validate each modifier\n    for (let i = 0; i < attackModifiers.length; i++) {\n      const modifier = attackModifiers[i];\n      \n      if (!modifier || typeof modifier !== 'object') {\n        return { isValid: false, error: `Attack modifier ${i + 1} must be an object` };\n      }\n\n      // Validate target_type\n      if (!modifier.target_type || typeof modifier.target_type !== 'string') {\n        return { isValid: false, error: `Attack modifier ${i + 1}: target_type is required and must be a string` };\n      }\n\n      if (!ENEMY_TARGET_TYPES.includes(modifier.target_type as any)) {\n        warnings.push(`Attack modifier ${i + 1}: '${modifier.target_type}' is not a standard target type`);\n      }\n\n      // Validate modifier_type\n      if (!modifier.modifier_type || !ENEMY_ATTACK_MODIFIER_TYPES.includes(modifier.modifier_type as any)) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: modifier_type must be 'Strength'` };\n      }\n\n      // Validate value\n      if (typeof modifier.value !== 'number' || !Number.isFinite(modifier.value)) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value must be a finite number` };\n      }\n\n      if (modifier.value < 0) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value cannot be negative` };\n      }\n\n      if (modifier.value > 10000000) {\n        return { isValid: false, error: `Attack modifier ${i + 1}: value cannot exceed 10,000,000` };\n      }\n\n      // Warning for very high modifier values\n      if (modifier.value > 1000000) {\n        warnings.push(`Attack modifier ${i + 1}: value is unusually high (${modifier.value})`);\n      }\n    }\n\n    // Check for duplicate target types\n    const targetTypes = attackModifiers.map(mod => mod.target_type?.toLowerCase()).filter(Boolean);\n    const uniqueTargetTypes = new Set(targetTypes);\n    if (uniqueTargetTypes.size !== targetTypes.length) {\n      return { isValid: false, error: 'Attack modifiers cannot have duplicate target types' };\n    }\n\n    return { \n      isValid: true, \n      warnings: warnings.length > 0 ? warnings : undefined \n    };\n  }\n\n  /**\n   * Validate enemy unit data for import/export\n   */\n  static validateForImport(data: any): EnemyUnitValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    if (!data || typeof data !== 'object') {\n      return {\n        isValid: false,\n        errors: ['Data must be an object']\n      };\n    }\n\n    // Validate each field individually and collect all errors/warnings\n    const nameValidation = this.validateName(data.name);\n    if (!nameValidation.isValid) {\n      errors.push(nameValidation.error!);\n    }\n\n    const unitTypesValidation = this.validateUnitTypes(data.unit_types);\n    if (!unitTypesValidation.isValid) {\n      errors.push(unitTypesValidation.error!);\n    } else if (unitTypesValidation.warnings) {\n      warnings.push(...unitTypesValidation.warnings);\n    }\n\n    const healthValidation = this.validateHealth(data.health);\n    if (!healthValidation.isValid) {\n      errors.push(healthValidation.error!);\n    } else if (healthValidation.warnings) {\n      warnings.push(...healthValidation.warnings);\n    }\n\n    const strengthValidation = this.validateStrength(data.strength);\n    if (!strengthValidation.isValid) {\n      errors.push(strengthValidation.error!);\n    } else if (strengthValidation.warnings) {\n      warnings.push(...strengthValidation.warnings);\n    }\n\n    const attackModifiersValidation = this.validateAttackModifiers(data.attack_modifiers);\n    if (!attackModifiersValidation.isValid) {\n      errors.push(attackModifiersValidation.error!);\n    } else if (attackModifiersValidation.warnings) {\n      warnings.push(...attackModifiersValidation.warnings);\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  /**\n   * Validate multiple enemy units (for batch operations)\n   */\n  static validateMultipleUnits(units: any[]): { \n    isValid: boolean; \n    results: Array<{ index: number; validation: EnemyUnitValidationResult }>;\n    summary: { total: number; valid: number; invalid: number; warnings: number };\n  } {\n    if (!Array.isArray(units)) {\n      return {\n        isValid: false,\n        results: [],\n        summary: { total: 0, valid: 0, invalid: 0, warnings: 0 }\n      };\n    }\n\n    const results = units.map((unit, index) => ({\n      index,\n      validation: this.validateForImport(unit)\n    }));\n\n    const summary = {\n      total: units.length,\n      valid: results.filter(r => r.validation.isValid).length,\n      invalid: results.filter(r => !r.validation.isValid).length,\n      warnings: results.filter(r => r.validation.warnings && r.validation.warnings.length > 0).length\n    };\n\n    return {\n      isValid: summary.invalid === 0,\n      results,\n      summary\n    };\n  }\n\n  /**\n   * Sanitize enemy unit data by removing/fixing invalid values\n   */\n  static sanitizeEnemyUnit(data: any): EnemyUnit {\n    const sanitized: EnemyUnit = {\n      name: typeof data.name === 'string' ? data.name.trim() : 'Unknown Enemy',\n      unit_types: Array.isArray(data.unit_types) ? \n        data.unit_types.filter((type: any) => typeof type === 'string' && type.trim() !== '') :\n        ['Epic Monster'],\n      health: typeof data.health === 'number' && data.health > 0 ? Math.min(data.health, 50000000) : 10000,\n      strength: typeof data.strength === 'number' && data.strength >= 0 ? Math.min(data.strength, 25000000) : 5000,\n      attack_modifiers: Array.isArray(data.attack_modifiers) ? \n        data.attack_modifiers\n          .filter((mod: any) => mod && typeof mod === 'object' &&\n                        typeof mod.target_type === 'string' &&\n                        typeof mod.value === 'number' &&\n                        mod.value >= 0)\n          .map((mod: any) => ({\n            target_type: mod.target_type,\n            modifier_type: 'Strength' as const,\n            value: Math.min(mod.value, 10000000)\n          })) :\n        []\n    };\n\n    // Ensure name is not empty\n    if (sanitized.name.length === 0) {\n      sanitized.name = 'Unknown Enemy';\n    }\n\n    // Ensure at least one unit type\n    if (sanitized.unit_types.length === 0) {\n      sanitized.unit_types = ['Epic Monster'];\n    }\n\n    return sanitized;\n  }\n}","/**\n * Enemy Unit Storage Service for the Army Stacking Calculator\n * Manages user-created enemy units in browser memory (localStorage)\n */\n\nimport { \n  EnemyUnit, \n  UserEnemyUnit, \n  EnemyUnitUtils,\n  EnemyUnitValidationResult\n} from '../types/enemyUnits';\nimport { EnemyUnitValidationService } from './enemyUnitValidation';\n\nexport interface EnemyUnitStorageOptions {\n  /** Maximum number of user enemy units to store */\n  maxUnits?: number;\n  /** Storage key prefix for localStorage */\n  storagePrefix?: string;\n  /** Whether to validate units on load */\n  validateOnLoad?: boolean;\n}\n\nexport interface EnemyUnitStorageStats {\n  /** Total number of stored units */\n  totalUnits: number;\n  /** Storage size in bytes (approximate) */\n  storageSize: number;\n  /** Last modification timestamp */\n  lastModified: Date | null;\n  /** Number of units created today */\n  unitsCreatedToday: number;\n}\n\nexport class EnemyUnitStorageService {\n  private static readonly DEFAULT_STORAGE_KEY = 'army_calculator_user_enemy_units';\n  private static readonly METADATA_KEY = 'army_calculator_enemy_units_metadata';\n  private static readonly DEFAULT_MAX_UNITS = 100;\n\n  private storageKey: string;\n  private metadataKey: string;\n  private maxUnits: number;\n  private validateOnLoad: boolean;\n\n  constructor(options: EnemyUnitStorageOptions = {}) {\n    this.storageKey = options.storagePrefix ? \n      `${options.storagePrefix}_user_enemy_units` : \n      EnemyUnitStorageService.DEFAULT_STORAGE_KEY;\n    \n    this.metadataKey = options.storagePrefix ? \n      `${options.storagePrefix}_enemy_units_metadata` : \n      EnemyUnitStorageService.METADATA_KEY;\n    \n    this.maxUnits = options.maxUnits || EnemyUnitStorageService.DEFAULT_MAX_UNITS;\n    this.validateOnLoad = options.validateOnLoad !== false; // Default to true\n  }\n\n  /**\n   * Check if localStorage is available\n   */\n  private isStorageAvailable(): boolean {\n    try {\n      const test = '__storage_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get all stored user enemy units\n   */\n  getAllUserEnemyUnits(): UserEnemyUnit[] {\n    if (!this.isStorageAvailable()) {\n      console.warn('localStorage is not available');\n      return [];\n    }\n\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (!stored) {\n        return [];\n      }\n\n      const units: UserEnemyUnit[] = JSON.parse(stored);\n      \n      // Convert date strings back to Date objects\n      const processedUnits = units.map(unit => ({\n        ...unit,\n        createdAt: new Date(unit.createdAt),\n        modifiedAt: new Date(unit.modifiedAt)\n      }));\n\n      // Validate units if enabled\n      if (this.validateOnLoad) {\n        return processedUnits.filter(unit => {\n          const validation = EnemyUnitValidationService.validateUserEnemyUnit(unit);\n          if (!validation.isValid) {\n            console.warn(`Invalid stored enemy unit removed: ${unit.name}`, validation.errors);\n            return false;\n          }\n          return true;\n        });\n      }\n\n      return processedUnits;\n    } catch (error) {\n      console.error('Error loading user enemy units from storage:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Save all user enemy units to storage\n   */\n  private saveAllUserEnemyUnits(units: UserEnemyUnit[]): boolean {\n    if (!this.isStorageAvailable()) {\n      console.warn('localStorage is not available');\n      return false;\n    }\n\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(units));\n      this.updateMetadata();\n      return true;\n    } catch (error) {\n      console.error('Error saving user enemy units to storage:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Add a new user enemy unit\n   */\n  addUserEnemyUnit(enemyUnit: EnemyUnit): { success: boolean; unit?: UserEnemyUnit; error?: string } {\n    // Validate the enemy unit\n    const validation = EnemyUnitValidationService.validateEnemyUnit(enemyUnit);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: `Validation failed: ${validation.errors.join(', ')}`\n      };\n    }\n\n    const units = this.getAllUserEnemyUnits();\n\n    // Check if we've reached the maximum number of units\n    if (units.length >= this.maxUnits) {\n      return {\n        success: false,\n        error: `Maximum number of units (${this.maxUnits}) reached`\n      };\n    }\n\n    // Check for duplicate names\n    if (units.some(unit => unit.name.toLowerCase() === enemyUnit.name.toLowerCase())) {\n      return {\n        success: false,\n        error: `A unit with the name \"${enemyUnit.name}\" already exists`\n      };\n    }\n\n    // Create user enemy unit\n    const userUnit = EnemyUnitUtils.createUserEnemyUnit(enemyUnit);\n    units.push(userUnit);\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save unit to storage'\n      };\n    }\n\n    return {\n      success: true,\n      unit: userUnit\n    };\n  }\n\n  /**\n   * Update an existing user enemy unit\n   */\n  updateUserEnemyUnit(id: string, updates: Partial<EnemyUnit>): { success: boolean; unit?: UserEnemyUnit; error?: string } {\n    const units = this.getAllUserEnemyUnits();\n    const unitIndex = units.findIndex(unit => unit.id === id);\n\n    if (unitIndex === -1) {\n      return {\n        success: false,\n        error: 'Unit not found'\n      };\n    }\n\n    const existingUnit = units[unitIndex];\n    const updatedUnit = { ...existingUnit, ...updates };\n\n    // Validate the updated unit\n    const validation = EnemyUnitValidationService.validateUserEnemyUnit(updatedUnit);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: `Validation failed: ${validation.errors.join(', ')}`\n      };\n    }\n\n    // Check for duplicate names (excluding current unit)\n    if (updates.name && \n        units.some((unit, index) => \n          index !== unitIndex && \n          unit.name.toLowerCase() === updates.name!.toLowerCase()\n        )) {\n      return {\n        success: false,\n        error: `A unit with the name \"${updates.name}\" already exists`\n      };\n    }\n\n    // Update the unit\n    const finalUnit = EnemyUnitUtils.updateUserEnemyUnit(existingUnit, updates);\n    units[unitIndex] = finalUnit;\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save updated unit to storage'\n      };\n    }\n\n    return {\n      success: true,\n      unit: finalUnit\n    };\n  }\n\n  /**\n   * Delete a user enemy unit\n   */\n  deleteUserEnemyUnit(id: string): { success: boolean; error?: string } {\n    const units = this.getAllUserEnemyUnits();\n    const unitIndex = units.findIndex(unit => unit.id === id);\n\n    if (unitIndex === -1) {\n      return {\n        success: false,\n        error: 'Unit not found'\n      };\n    }\n\n    units.splice(unitIndex, 1);\n\n    const saved = this.saveAllUserEnemyUnits(units);\n    if (!saved) {\n      return {\n        success: false,\n        error: 'Failed to save changes to storage'\n      };\n    }\n\n    return { success: true };\n  }\n\n  /**\n   * Get a user enemy unit by ID\n   */\n  getUserEnemyUnitById(id: string): UserEnemyUnit | null {\n    const units = this.getAllUserEnemyUnits();\n    return units.find(unit => unit.id === id) || null;\n  }\n\n  /**\n   * Search user enemy units by name\n   */\n  searchUserEnemyUnits(query: string): UserEnemyUnit[] {\n    const units = this.getAllUserEnemyUnits();\n    if (!query.trim()) {\n      return units;\n    }\n\n    const lowerQuery = query.toLowerCase();\n    return units.filter(unit => \n      unit.name.toLowerCase().includes(lowerQuery)\n    );\n  }\n\n  /**\n   * Clear all user enemy units\n   */\n  clearAllUserEnemyUnits(): { success: boolean; error?: string } {\n    if (!this.isStorageAvailable()) {\n      return {\n        success: false,\n        error: 'localStorage is not available'\n      };\n    }\n\n    try {\n      localStorage.removeItem(this.storageKey);\n      localStorage.removeItem(this.metadataKey);\n      return { success: true };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to clear storage'\n      };\n    }\n  }\n\n  /**\n   * Export user enemy units as JSON\n   */\n  exportUserEnemyUnits(): { success: boolean; data?: string; error?: string } {\n    try {\n      const units = this.getAllUserEnemyUnits();\n      const exportData = {\n        version: '1.0',\n        exportDate: new Date().toISOString(),\n        units: units.map(unit => ({\n          name: unit.name,\n          unit_types: unit.unit_types,\n          health: unit.health,\n          strength: unit.strength,\n          attack_modifiers: unit.attack_modifiers,\n          createdAt: unit.createdAt.toISOString(),\n          modifiedAt: unit.modifiedAt.toISOString()\n        }))\n      };\n\n      return {\n        success: true,\n        data: JSON.stringify(exportData, null, 2)\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to export units'\n      };\n    }\n  }\n\n  /**\n   * Import user enemy units from JSON\n   */\n  importUserEnemyUnits(jsonData: string, options: { replace?: boolean; skipDuplicates?: boolean } = {}): \n    { success: boolean; imported?: number; skipped?: number; errors?: string[] } {\n    \n    try {\n      const importData = JSON.parse(jsonData);\n      \n      if (!importData.units || !Array.isArray(importData.units)) {\n        return {\n          success: false,\n          errors: ['Invalid import format: units array not found']\n        };\n      }\n\n      const existingUnits = options.replace ? [] : this.getAllUserEnemyUnits();\n      const errors: string[] = [];\n      let imported = 0;\n      let skipped = 0;\n\n      for (const unitData of importData.units) {\n        // Validate unit data\n        const validation = EnemyUnitValidationService.validateForImport(unitData);\n        if (!validation.isValid) {\n          errors.push(`Unit \"${unitData.name || 'Unknown'}\": ${validation.errors.join(', ')}`);\n          skipped++;\n          continue;\n        }\n\n        // Check for duplicates\n        const isDuplicate = existingUnits.some(existing => \n          existing.name.toLowerCase() === unitData.name.toLowerCase()\n        );\n\n        if (isDuplicate) {\n          if (options.skipDuplicates) {\n            skipped++;\n            continue;\n          } else {\n            errors.push(`Unit \"${unitData.name}\" already exists`);\n            skipped++;\n            continue;\n          }\n        }\n\n        // Check unit limit\n        if (existingUnits.length >= this.maxUnits) {\n          errors.push(`Maximum number of units (${this.maxUnits}) reached`);\n          break;\n        }\n\n        // Create user unit\n        const userUnit = EnemyUnitUtils.createUserEnemyUnit({\n          name: unitData.name,\n          unit_types: unitData.unit_types,\n          health: unitData.health,\n          strength: unitData.strength,\n          attack_modifiers: unitData.attack_modifiers || []\n        });\n\n        existingUnits.push(userUnit);\n        imported++;\n      }\n\n      // Save all units\n      const saved = this.saveAllUserEnemyUnits(existingUnits);\n      if (!saved) {\n        return {\n          success: false,\n          errors: ['Failed to save imported units to storage']\n        };\n      }\n\n      return {\n        success: true,\n        imported,\n        skipped,\n        errors: errors.length > 0 ? errors : undefined\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        errors: ['Invalid JSON format']\n      };\n    }\n  }\n\n  /**\n   * Get storage statistics\n   */\n  getStorageStats(): EnemyUnitStorageStats {\n    const units = this.getAllUserEnemyUnits();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const unitsCreatedToday = units.filter(unit => \n      unit.createdAt >= today\n    ).length;\n\n    let lastModified: Date | null = null;\n    if (units.length > 0) {\n      lastModified = new Date(Math.max(...units.map(unit => unit.modifiedAt.getTime())));\n    }\n\n    // Approximate storage size\n    const storageSize = this.isStorageAvailable() ? \n      (localStorage.getItem(this.storageKey)?.length || 0) * 2 : 0; // Rough estimate in bytes\n\n    return {\n      totalUnits: units.length,\n      storageSize,\n      lastModified,\n      unitsCreatedToday\n    };\n  }\n\n  /**\n   * Update metadata\n   */\n  private updateMetadata(): void {\n    if (!this.isStorageAvailable()) return;\n\n    try {\n      const metadata = {\n        lastModified: new Date().toISOString(),\n        version: '1.0'\n      };\n      localStorage.setItem(this.metadataKey, JSON.stringify(metadata));\n    } catch (error) {\n      console.warn('Failed to update metadata:', error);\n    }\n  }\n\n  /**\n   * Get available storage space (approximate)\n   */\n  getAvailableSpace(): number {\n    return Math.max(0, this.maxUnits - this.getAllUserEnemyUnits().length);\n  }\n\n  /**\n   * Check if storage is near capacity\n   */\n  isNearCapacity(threshold: number = 0.9): boolean {\n    const units = this.getAllUserEnemyUnits();\n    return units.length >= (this.maxUnits * threshold);\n  }\n}","/**\n * Enemy Unit Selector component for selecting enemy units for battle simulation\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { EnemyUnit, UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitLoader } from '../../services/enemyUnitLoader';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\n\ninterface EnemyUnitSelectorProps {\n  onSelect: (enemyUnit: EnemyUnit) => void;\n  onCancel: () => void;\n  selectedUnit?: EnemyUnit | null;\n  mode: 'single' | 'multiple';\n  title?: string;\n  maxSelections?: number;\n  selectedUnits?: EnemyUnit[];\n}\n\nexport class EnemyUnitSelector {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitSelectorProps;\n  private loader: EnemyUnitLoader;\n  private storage: EnemyUnitStorageService;\n  private presetUnits: EnemyUnit[] = [];\n  private userUnits: UserEnemyUnit[] = [];\n  private filteredUnits: EnemyUnit[] = [];\n  private currentFilter: string = '';\n  private currentCategory: 'all' | 'preset' | 'user' = 'all';\n  private currentSelectedUnits: EnemyUnit[] = [];\n\n  constructor(props: EnemyUnitSelectorProps) {\n    this.props = props;\n    this.loader = new EnemyUnitLoader();\n    this.storage = new EnemyUnitStorageService();\n    this.currentSelectedUnits = props.selectedUnits ? [...props.selectedUnits] : [];\n  }\n\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    await this.loadData();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private async loadData(): Promise<void> {\n    try {\n      // Load preset enemy units\n      this.presetUnits = await this.loader.loadEnemyUnits('./enemy_units.json');\n      \n      // Load user-created enemy units\n      this.userUnits = this.storage.getAllUserEnemyUnits();\n      \n      // Initialize filtered units\n      this.updateFilteredUnits();\n    } catch (error) {\n      console.error('Error loading enemy unit data:', error);\n      this.presetUnits = [];\n      this.userUnits = [];\n      this.filteredUnits = [];\n    }\n  }\n\n  private updateFilteredUnits(): void {\n    let allUnits: EnemyUnit[] = [];\n    \n    switch (this.currentCategory) {\n      case 'preset':\n        allUnits = [...this.presetUnits];\n        break;\n      case 'user':\n        allUnits = [...this.userUnits];\n        break;\n      case 'all':\n      default:\n        allUnits = [...this.presetUnits, ...this.userUnits];\n        break;\n    }\n\n    if (this.currentFilter.trim()) {\n      const lowerFilter = this.currentFilter.toLowerCase();\n      this.filteredUnits = allUnits.filter(unit =>\n        unit.name.toLowerCase().includes(lowerFilter) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(lowerFilter))\n      );\n    } else {\n      this.filteredUnits = allUnits;\n    }\n\n    // Sort by name for consistent display\n    this.filteredUnits.sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    const title = this.props.title || 'Select Enemy Unit';\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-selector\">\n        <div class=\"modal-overlay\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h2 class=\"modal-title\" id=\"modal-title\">⚔️ ${title}</h2>\n              <button class=\"modal-close\" id=\"close-selector\">&times;</button>\n            </div>\n            \n            <div class=\"modal-body\">\n              <!-- Search and Filter Controls -->\n              <div class=\"selector-controls\">\n                <div class=\"search-section\">\n                  <div class=\"search-input-group\">\n                    <input \n                      type=\"text\" \n                      id=\"unit-search\" \n                      class=\"form-input search-input\" \n                      placeholder=\"🔍 Search by name or unit type...\"\n                      value=\"${this.currentFilter}\"\n                    >\n                    <button class=\"btn btn-secondary btn-sm\" id=\"clear-search\">\n                      ❌ Clear\n                    </button>\n                  </div>\n                </div>\n                \n                <div class=\"filter-section\">\n                  <div class=\"filter-tabs\">\n                    <button class=\"filter-tab ${this.currentCategory === 'all' ? 'active' : ''}\" data-category=\"all\">\n                      📋 All Units (${this.presetUnits.length + this.userUnits.length})\n                    </button>\n                    <button class=\"filter-tab ${this.currentCategory === 'preset' ? 'active' : ''}\" data-category=\"preset\">\n                      🏛️ Preset (${this.presetUnits.length})\n                    </button>\n                    <button class=\"filter-tab ${this.currentCategory === 'user' ? 'active' : ''}\" data-category=\"user\">\n                      👤 Custom (${this.userUnits.length})\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Unit List -->\n              <div class=\"unit-list-container\">\n                <div class=\"unit-list-header\">\n                  <span class=\"results-count\">\n                    ${this.filteredUnits.length} unit${this.filteredUnits.length !== 1 ? 's' : ''} found\n                  </span>\n                </div>\n                \n                <div class=\"unit-list\" id=\"unit-list\">\n                  ${this.renderUnitList()}\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"modal-footer\">\n              <button class=\"btn btn-secondary btn-lg\" id=\"cancel-selection\">\n                ❌ Cancel\n              </button>\n              ${this.props.selectedUnit ? `\n                <button class=\"btn btn-success btn-lg\" id=\"confirm-selection\">\n                  ✅ Select \"${this.props.selectedUnit.name}\"\n                </button>\n              ` : ''}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  private renderUnitList(): string {\n    if (this.filteredUnits.length === 0) {\n      return `\n        <div class=\"empty-state\">\n          <div class=\"empty-icon\">🔍</div>\n          <h3>No units found</h3>\n          <p>Try adjusting your search or filter criteria</p>\n          ${this.currentCategory === 'user' && this.userUnits.length === 0 ? `\n            <p class=\"text-sm text-secondary\">\n              You haven't created any custom enemy units yet.\n            </p>\n          ` : ''}\n        </div>\n      `;\n    }\n\n    return this.filteredUnits.map(unit => {\n      const isSelected = this.props.mode === 'multiple'\n        ? this.currentSelectedUnits.some(selected => selected.name === unit.name)\n        : this.props.selectedUnit?.name === unit.name;\n      const isUserUnit = 'id' in unit;\n      \n      return `\n        <div class=\"unit-card ${isSelected ? 'selected' : ''}\" data-unit-name=\"${unit.name}\">\n          <div class=\"unit-card-header\">\n            <div class=\"unit-info\">\n              <h4 class=\"unit-name\">\n                ${unit.name}\n                ${isUserUnit ? '<span class=\"user-badge\">👤</span>' : '<span class=\"preset-badge\">🏛️</span>'}\n              </h4>\n              <div class=\"unit-types\">\n                ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n              </div>\n            </div>\n            <div class=\"unit-actions\">\n              <button class=\"btn btn-primary btn-sm select-unit-btn\" data-unit-name=\"${unit.name}\">\n                ${isSelected ? '✅ Selected' : '👆 Select'}\n              </button>\n            </div>\n          </div>\n          \n          <div class=\"unit-stats\">\n            <div class=\"stat-group\">\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">❤️ Health</span>\n                <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">⚔️ Strength</span>\n                <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n              </div>\n              <div class=\"stat-item\">\n                <span class=\"stat-label\">📊 Ratio</span>\n                <span class=\"stat-value\">${(unit.strength / unit.health).toFixed(3)}</span>\n              </div>\n            </div>\n            \n            ${unit.attack_modifiers && unit.attack_modifiers.length > 0 ? `\n              <div class=\"attack-modifiers\">\n                <span class=\"modifiers-label\">🎯 Attack Bonuses:</span>\n                <div class=\"modifiers-list\">\n                  ${unit.attack_modifiers.map(mod => \n                    `<span class=\"modifier-tag\">+${mod.value.toLocaleString()} vs ${mod.target_type}</span>`\n                  ).join('')}\n                </div>\n              </div>\n            ` : ''}\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-selector {\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        z-index: 1000;\n      }\n\n      .modal-overlay {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: rgba(0, 0, 0, 0.5);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: var(--spacing-md);\n      }\n\n      .modal-content {\n        background-color: var(--color-background);\n        border-radius: var(--radius-lg);\n        max-width: 900px;\n        width: 100%;\n        max-height: 90vh;\n        display: flex;\n        flex-direction: column;\n        box-shadow: var(--shadow-lg);\n      }\n\n      .modal-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .modal-title {\n        margin: 0;\n        font-size: var(--font-size-xl);\n        color: var(--color-text);\n      }\n\n      .modal-close {\n        background: none;\n        border: none;\n        font-size: var(--font-size-xl);\n        cursor: pointer;\n        color: var(--color-text-secondary);\n        padding: var(--spacing-xs);\n        border-radius: var(--radius-sm);\n        transition: all var(--transition-fast);\n      }\n\n      .modal-close:hover {\n        color: var(--color-text);\n        background-color: var(--color-surface);\n      }\n\n      .modal-body {\n        flex: 1;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .modal-footer {\n        padding: var(--spacing-lg);\n        border-top: 1px solid var(--color-border);\n        display: flex;\n        gap: var(--spacing-md);\n        justify-content: flex-end;\n        flex-shrink: 0;\n      }\n\n      /* Selector Controls */\n      .selector-controls {\n        padding: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .search-section {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .search-input-group {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .search-input {\n        flex: 1;\n        font-size: var(--font-size-sm);\n      }\n\n      .filter-section {\n        margin-bottom: 0;\n      }\n\n      .filter-tabs {\n        display: flex;\n        gap: var(--spacing-xs);\n        flex-wrap: wrap;\n      }\n\n      .filter-tab {\n        padding: var(--spacing-sm) var(--spacing-md);\n        border: 2px solid var(--color-border);\n        background-color: var(--color-surface);\n        color: var(--color-text-secondary);\n        border-radius: var(--radius-md);\n        cursor: pointer;\n        transition: all var(--transition-fast);\n        font-size: var(--font-size-sm);\n        font-weight: 500;\n      }\n\n      .filter-tab:hover {\n        border-color: var(--color-primary);\n        color: var(--color-text);\n      }\n\n      .filter-tab.active {\n        background-color: var(--color-primary);\n        border-color: var(--color-primary);\n        color: white;\n      }\n\n      /* Unit List */\n      .unit-list-container {\n        flex: 1;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .unit-list-header {\n        padding: var(--spacing-md) var(--spacing-lg);\n        background-color: var(--color-surface);\n        border-bottom: 1px solid var(--color-border);\n        flex-shrink: 0;\n      }\n\n      .results-count {\n        font-size: var(--font-size-sm);\n        color: var(--color-text-secondary);\n        font-weight: 500;\n      }\n\n      .unit-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: var(--spacing-md);\n      }\n\n      /* Unit Cards */\n      .unit-card {\n        background-color: var(--color-surface);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        padding: var(--spacing-md);\n        margin-bottom: var(--spacing-md);\n        transition: all var(--transition-fast);\n        cursor: pointer;\n      }\n\n      .unit-card:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      }\n\n      .unit-card.selected {\n        border-color: var(--color-success);\n        background-color: rgba(34, 197, 94, 0.05);\n      }\n\n      .unit-card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .unit-info {\n        flex: 1;\n      }\n\n      .unit-name {\n        margin: 0 0 var(--spacing-xs) 0;\n        font-size: var(--font-size-md);\n        color: var(--color-text);\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-xs);\n      }\n\n      .user-badge,\n      .preset-badge {\n        font-size: var(--font-size-xs);\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        background-color: var(--color-primary);\n        color: white;\n      }\n\n      .user-badge {\n        background-color: var(--color-success);\n      }\n\n      .unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .unit-type-tag {\n        background-color: var(--color-background);\n        color: var(--color-text-secondary);\n        padding: 2px 8px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        border: 1px solid var(--color-border);\n      }\n\n      .unit-actions {\n        flex-shrink: 0;\n        margin-left: var(--spacing-md);\n      }\n\n      .select-unit-btn {\n        min-width: 100px;\n      }\n\n      .unit-stats {\n        margin-top: var(--spacing-sm);\n      }\n\n      .stat-group {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        gap: var(--spacing-md);\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .stat-item {\n        text-align: center;\n      }\n\n      .stat-label {\n        display: block;\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        margin-bottom: 2px;\n      }\n\n      .stat-value {\n        display: block;\n        font-size: var(--font-size-sm);\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .attack-modifiers {\n        padding-top: var(--spacing-sm);\n        border-top: 1px solid var(--color-border);\n      }\n\n      .modifiers-label {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        display: block;\n        margin-bottom: var(--spacing-xs);\n      }\n\n      .modifiers-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .modifier-tag {\n        background-color: var(--color-warning);\n        color: white;\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        font-weight: 500;\n      }\n\n      /* Empty State */\n      .empty-state {\n        text-align: center;\n        padding: var(--spacing-xl);\n        color: var(--color-text-secondary);\n      }\n\n      .empty-icon {\n        font-size: 3rem;\n        margin-bottom: var(--spacing-md);\n      }\n\n      .empty-state h3 {\n        margin: 0 0 var(--spacing-sm) 0;\n        color: var(--color-text);\n      }\n\n      .empty-state p {\n        margin: 0 0 var(--spacing-xs) 0;\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .modal-overlay {\n          padding: var(--spacing-sm);\n        }\n\n        .modal-content {\n          max-height: 95vh;\n        }\n\n        .unit-card-header {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-actions {\n          margin-left: 0;\n          align-self: stretch;\n        }\n\n        .select-unit-btn {\n          width: 100%;\n        }\n\n        .stat-group {\n          grid-template-columns: repeat(2, 1fr);\n        }\n\n        .filter-tabs {\n          flex-direction: column;\n        }\n\n        .filter-tab {\n          text-align: center;\n        }\n\n        .search-input-group {\n          flex-direction: column;\n        }\n\n        .search-input {\n          width: 100%;\n        }\n\n        .modal-footer {\n          flex-direction: column;\n        }\n\n        .modal-footer .btn {\n          width: 100%;\n        }\n      }\n\n      @media (max-width: 480px) {\n        .modal-title {\n          font-size: var(--font-size-lg);\n        }\n\n        .unit-name {\n          font-size: var(--font-size-sm);\n        }\n\n        .stat-group {\n          grid-template-columns: 1fr;\n          gap: var(--spacing-sm);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private attachEventListeners(): void {\n    // Close button\n    const closeBtn = document.getElementById('close-selector');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    // Cancel button\n    const cancelBtn = document.getElementById('cancel-selection');\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    // Confirm button\n    const confirmBtn = document.getElementById('confirm-selection');\n    if (confirmBtn) {\n      confirmBtn.addEventListener('click', this.handleConfirm.bind(this));\n    }\n\n    // Search input\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.addEventListener('input', this.handleSearch.bind(this));\n    }\n\n    // Clear search button\n    const clearBtn = document.getElementById('clear-search');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', this.handleClearSearch.bind(this));\n    }\n\n    // Filter tabs\n    document.querySelectorAll('.filter-tab').forEach(tab => {\n      tab.addEventListener('click', this.handleFilterChange.bind(this));\n    });\n\n    // Unit selection\n    document.querySelectorAll('.select-unit-btn').forEach(btn => {\n      btn.addEventListener('click', this.handleUnitSelect.bind(this));\n    });\n\n    // Unit card clicks\n    document.querySelectorAll('.unit-card').forEach(card => {\n      card.addEventListener('click', this.handleCardClick.bind(this));\n    });\n\n    // Close on overlay click\n    const overlay = document.querySelector('.modal-overlay');\n    if (overlay) {\n      overlay.addEventListener('click', (e) => {\n        if (e.target === overlay) {\n          this.handleCancel();\n        }\n      });\n    }\n\n    // Close on escape key\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n  }\n\n  private handleSearch(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.currentFilter = input.value;\n    this.updateFilteredUnits();\n    this.refreshUnitList();\n  }\n\n  private handleClearSearch(): void {\n    this.currentFilter = '';\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.value = '';\n    }\n    this.updateFilteredUnits();\n    this.refreshUnitList();\n  }\n\n  private handleFilterChange(event: Event): void {\n    const tab = event.target as HTMLElement;\n    const category = tab.dataset.category as 'all' | 'preset' | 'user';\n    \n    if (category && category !== this.currentCategory) {\n      this.currentCategory = category;\n      this.updateFilteredUnits();\n      this.refreshFilterTabs();\n      this.refreshUnitList();\n    }\n  }\n\n  private handleUnitSelect(event: Event): void {\n    event.stopPropagation();\n    const btn = event.target as HTMLElement;\n    const unitName = btn.dataset.unitName;\n    \n    if (unitName) {\n      const unit = this.filteredUnits.find(u => u.name === unitName);\n      if (unit) {\n        if (this.props.mode === 'multiple') {\n          // Handle multiple selection logic\n          const existingIndex = this.currentSelectedUnits.findIndex(selected => selected.name === unit.name);\n          \n          if (existingIndex >= 0) {\n            // Remove if already selected\n            this.currentSelectedUnits.splice(existingIndex, 1);\n          } else {\n            // Add if not at limit\n            const maxSelections = this.props.maxSelections || 5;\n            if (this.currentSelectedUnits.length < maxSelections) {\n              this.currentSelectedUnits.push(unit);\n            } else {\n              // Replace first selection if at limit\n              this.currentSelectedUnits.shift();\n              this.currentSelectedUnits.push(unit);\n            }\n          }\n          \n          // Refresh the unit list to update selection states\n          this.refreshUnitList();\n        }\n        \n        // Always call onSelect to notify parent\n        this.props.onSelect(unit);\n      }\n    }\n  }\n\n  private handleCardClick(event: Event): void {\n    const card = event.target as HTMLElement;\n    const unitCard = card.closest('.unit-card') as HTMLElement;\n    \n    if (unitCard) {\n      const unitName = unitCard.dataset.unitName;\n      if (unitName) {\n        const unit = this.filteredUnits.find(u => u.name === unitName);\n        if (unit) {\n          if (this.props.mode === 'multiple') {\n            // Handle multiple selection logic\n            const existingIndex = this.currentSelectedUnits.findIndex(selected => selected.name === unit.name);\n            \n            if (existingIndex >= 0) {\n              // Remove if already selected\n              this.currentSelectedUnits.splice(existingIndex, 1);\n            } else {\n              // Add if not at limit\n              const maxSelections = this.props.maxSelections || 5;\n              if (this.currentSelectedUnits.length < maxSelections) {\n                this.currentSelectedUnits.push(unit);\n              } else {\n                // Replace first selection if at limit\n                this.currentSelectedUnits.shift();\n                this.currentSelectedUnits.push(unit);\n              }\n            }\n            \n            // Refresh the unit list to update selection states\n            this.refreshUnitList();\n          }\n          \n          // Always call onSelect to notify parent\n          this.props.onSelect(unit);\n        }\n      }\n    }\n  }\n\n  private handleCancel(): void {\n    this.props.onCancel();\n  }\n\n  private handleConfirm(): void {\n    if (this.props.selectedUnit) {\n      this.props.onSelect(this.props.selectedUnit);\n    }\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    if (event.key === 'Escape') {\n      this.handleCancel();\n    }\n  }\n\n  private refreshUnitList(): void {\n    const unitList = document.getElementById('unit-list');\n    if (unitList) {\n      unitList.innerHTML = this.renderUnitList();\n      \n      // Re-attach event listeners for new elements\n      document.querySelectorAll('.select-unit-btn').forEach(btn => {\n        btn.addEventListener('click', this.handleUnitSelect.bind(this));\n      });\n\n      document.querySelectorAll('.unit-card').forEach(card => {\n        card.addEventListener('click', this.handleCardClick.bind(this));\n      });\n    }\n\n    // Update results count\n    const resultsCount = document.querySelector('.results-count');\n    if (resultsCount) {\n      resultsCount.textContent = `${this.filteredUnits.length} unit${this.filteredUnits.length !== 1 ? 's' : ''} found`;\n    }\n  }\n\n  private refreshFilterTabs(): void {\n    document.querySelectorAll('.filter-tab').forEach(tab => {\n      const category = tab.getAttribute('data-category');\n      if (category === this.currentCategory) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n  }\n\n  public unmount(): void {\n    // Remove event listeners\n    document.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    \n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n\n  /**\n   * Update the modal title (for dynamic updates)\n   */\n  public updateTitle(newTitle: string): void {\n    this.props.title = newTitle;\n    const titleElement = document.getElementById('modal-title');\n    if (titleElement) {\n      titleElement.textContent = `⚔️ ${newTitle}`;\n    }\n  }\n\n  /**\n   * Update selected units (for external updates)\n   */\n  public updateSelectedUnits(selectedUnits: EnemyUnit[]): void {\n    this.currentSelectedUnits = [...selectedUnits];\n    this.refreshUnitList();\n  }\n}","/**\n * Battle Simulation Component\n * Handles the battle simulation section of the army calculator\n */\n\nimport { BattleSimulationService } from '../../services/battleSimulation';\nimport { EnemyUnitBattleSimulationService } from '../../services/enemyBattleSimulation';\nimport { ArmyComposition } from '../../types/units';\nimport { BattleAnalysis, BattleUtils } from '../../types/battleSimulation';\nimport { EnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitSelector } from '../EnemyUnits/EnemyUnitSelector';\n\nexport class BattleSimulationComponent {\n  private container: HTMLElement | null = null;\n  private battleService: BattleSimulationService;\n  private enemyBattleService: EnemyUnitBattleSimulationService;\n  private currentArmy: ArmyComposition | null = null;\n  private currentAnalysis: BattleAnalysis | null = null;\n  private selectedEnemyUnit: EnemyUnit | null = null;\n  private enemyUnitSelector: EnemyUnitSelector | null = null;\n  private tooltipData: Record<string, string> = {\n    'battle-simulation-overview': `\n      <strong>Battle Simulation Overview</strong><br>\n      Simulates asymmetric combat where:<br>\n      • Player units deal damage to enemies<br>\n      • Enemy units eliminate player groups<br>\n      • Battle ends when all player groups are eliminated<br>\n      • Results show best case (player first) vs worst case (enemy first)\n    `,\n    'enemy-groups': `\n      <strong>Enemy Groups</strong><br>\n      Each enemy group represents a separate attacking force:<br>\n      • More groups = more enemy attacks per battle phase<br>\n      • Each group can eliminate one player unit group<br>\n      • Enemies target your highest health groups first<br>\n      • Recommended: 1-5 groups for balanced battles\n    `,\n    'run-simulation': `\n      <strong>Run Battle Simulation</strong><br>\n      Executes both scenarios simultaneously:<br>\n      • <span style=\"color: #27ae60;\">Best Case:</span> Your units attack first<br>\n      • <span style=\"color: #e74c3c;\">Worst Case:</span> Enemy units attack first<br>\n      • Shows damage dealt, battle duration, and survival statistics<br>\n      • Results help optimize army composition\n    `,\n    'battle-mechanics-guide': `\n      <strong>Battle Mechanics Guide</strong><br>\n      <strong>Turn Order:</strong> Players attack by strength (highest first), enemies target by health (highest first)<br>\n      <strong>Battle Phases:</strong> Each unit gets exactly one turn per phase<br>\n      <strong>Overflow:</strong> Side with more groups gets extra turns<br>\n      <strong>Elimination:</strong> Units eliminated mid-phase don't get subsequent turns\n    `,\n    'battle-results': `\n      <strong>Battle Analysis Results</strong><br>\n      Shows outcomes for both scenarios:<br>\n      • <span style=\"color: #27ae60;\">Best Case:</span> Maximum damage when you attack first<br>\n      • <span style=\"color: #e74c3c;\">Worst Case:</span> Minimum damage when enemies attack first<br>\n      • <strong>Comparison:</strong> Difference between scenarios<br>\n      • Use results to optimize army composition\n    `,\n    'best-case-scenario': `\n      <strong>Best Case Scenario</strong><br>\n      Your army gets initiative and attacks first:<br>\n      • Higher damage potential<br>\n      • Longer battle duration<br>\n      • Better survival chances<br>\n      • Represents optimal conditions\n    `,\n    'worst-case-scenario': `\n      <strong>Worst Case Scenario</strong><br>\n      Enemy forces attack first:<br>\n      • Lower damage potential<br>\n      • Shorter battle duration<br>\n      • Reduced survival chances<br>\n      • Represents challenging conditions\n    `\n  };\n\n  constructor() {\n    this.battleService = new BattleSimulationService();\n    this.enemyBattleService = new EnemyUnitBattleSimulationService();\n  }\n\n  /**\n   * Mount the battle simulation component\n   */\n  public mount(container: HTMLElement, army: ArmyComposition): void {\n    this.container = container;\n    this.currentArmy = army;\n    this.render();\n    this.attachEventListeners();\n\n    // Ensure controls are visible for regular stacking mode\n    this.showSimulationControls();\n  }\n\n  /**\n   * Render the battle simulation interface\n   */\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <section class=\"card battle-simulation-section\" id=\"battle-simulation-section\">\n        <h2 class=\"section-title\">⚔️ Battle Simulation\n          <span class=\"help-icon\" data-tooltip=\"battle-simulation-overview\">ℹ️</span>\n        </h2>\n        <p class=\"section-description\">\n          Simulate battles against enemy forces to analyze best and worst case scenarios.\n          Enter the number of enemy groups you expect to face.\n        </p>\n\n        <!-- Enemy Configuration -->\n        <div class=\"enemy-input-container\">\n          <!-- Enemy Type Selection -->\n          <div class=\"enemy-type-selection\">\n            <h4>Choose Enemy Type:</h4>\n            <div class=\"enemy-type-options\">\n              <label class=\"radio-option\">\n                <input type=\"radio\" name=\"enemy-type\" value=\"generic\" checked>\n                <span class=\"radio-label\">Generic Enemy Groups</span>\n                <small class=\"radio-help\">Simple enemy groups without specific units</small>\n              </label>\n              <label class=\"radio-option\">\n                <input type=\"radio\" name=\"enemy-type\" value=\"specific\">\n                <span class=\"radio-label\">Specific Enemy Units</span>\n                <small class=\"radio-help\">Choose specific enemy units with unique abilities</small>\n              </label>\n            </div>\n          </div>\n\n          <!-- Generic Enemy Input -->\n          <div id=\"generic-enemy-input\" class=\"enemy-config-section\">\n            <div class=\"input-group\">\n              <label for=\"enemy-groups\" class=\"input-label\">\n                Number of Enemy Groups:\n                <span class=\"help-icon\" data-tooltip=\"enemy-groups\">ℹ️</span>\n              </label>\n              <input\n                type=\"number\"\n                id=\"enemy-groups\"\n                min=\"1\"\n                max=\"20\"\n                value=\"3\"\n                class=\"input large-input\"\n                placeholder=\"Enter number of enemy groups\"\n              >\n              <small class=\"input-help\">\n                Each enemy group can eliminate one of your unit groups per attack.\n              </small>\n            </div>\n          </div>\n\n          <!-- Specific Enemy Unit Input -->\n          <div id=\"specific-enemy-input\" class=\"enemy-config-section hidden\">\n            <div class=\"enemy-unit-selection\">\n              <div class=\"selected-enemy-display\">\n                <div id=\"no-enemy-selected\" class=\"no-selection-message\">\n                  <span class=\"icon\">🎯</span>\n                  <span class=\"message\">No enemy unit selected</span>\n                  <small class=\"help\">Click \"Select Enemy Unit\" to choose a specific enemy</small>\n                </div>\n                <div id=\"selected-enemy-info\" class=\"selected-enemy-card hidden\">\n                  <!-- Selected enemy info will be populated here -->\n                </div>\n              </div>\n              <div class=\"enemy-selection-controls\">\n                <button id=\"select-enemy-btn\" class=\"btn btn-secondary\">\n                  🎯 Select Enemy Unit\n                </button>\n                <button id=\"clear-enemy-btn\" class=\"btn btn-outline\" style=\"display: none;\">\n                  🗑️ Clear Selection\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"simulation-controls\">\n            <button id=\"run-simulation-btn\" class=\"btn btn-primary large-btn\" data-tooltip=\"run-simulation\">\n              🎯 Run Battle Simulation\n            </button>\n            <button id=\"clear-simulation-btn\" class=\"btn btn-secondary\" style=\"display: none;\">\n              🗑️ Clear Results\n            </button>\n          </div>\n        </div>\n\n        <!-- Pre-calculated Results Note -->\n        <div id=\"simulation-note\" class=\"simulation-note hidden\">\n          <!-- Note will be populated here -->\n        </div>\n\n        <!-- Loading State -->\n        <div id=\"simulation-loading\" class=\"simulation-loading hidden\">\n          <div class=\"loading-spinner\"></div>\n          <p>Running battle simulation...</p>\n        </div>\n\n        <!-- Results Container -->\n        <div id=\"simulation-results\" class=\"simulation-results hidden\">\n          <!-- Results will be populated here -->\n        </div>\n\n        <!-- Help Section -->\n        <div class=\"help-section\">\n          <h4>📚 Battle Mechanics Guide\n            <span class=\"help-icon\" data-tooltip=\"battle-mechanics-guide\">ℹ️</span>\n          </h4>\n          <div class=\"help-content\">\n            <div class=\"help-item\">\n              <strong>🎯 Initiative:</strong> 50/50 chance who attacks first (best vs worst case)\n            </div>\n            <div class=\"help-item\">\n              <strong>⚔️ Player Attacks:</strong> Deal damage to enemies based on unit strength\n            </div>\n            <div class=\"help-item\">\n              <strong>🛡️ Enemy Attacks:</strong> Eliminate entire player unit groups\n            </div>\n            <div class=\"help-item\">\n              <strong>🔄 Battle Phases:</strong> All units take turns, then cycle repeats\n            </div>\n            <div class=\"help-item\">\n              <strong>🏁 Victory Condition:</strong> Battle ends when all player groups are eliminated\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <!-- Tooltip Container -->\n      <div id=\"tooltip\" class=\"tooltip hidden\">\n        <div class=\"tooltip-content\"></div>\n        <div class=\"tooltip-arrow\"></div>\n      </div>\n    `;\n\n    this.addBattleSimulationStyles();\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    const runBtn = document.getElementById('run-simulation-btn');\n    const clearBtn = document.getElementById('clear-simulation-btn');\n    const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n    const selectEnemyBtn = document.getElementById('select-enemy-btn');\n    const clearEnemyBtn = document.getElementById('clear-enemy-btn');\n\n    if (runBtn) {\n      runBtn.addEventListener('click', () => this.runSimulation());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearResults());\n    }\n\n    if (enemyGroupsInput) {\n      enemyGroupsInput.addEventListener('input', () => this.validateInput());\n    }\n\n    if (selectEnemyBtn) {\n      selectEnemyBtn.addEventListener('click', () => this.openEnemyUnitSelector());\n    }\n\n    if (clearEnemyBtn) {\n      clearEnemyBtn.addEventListener('click', () => this.clearSelectedEnemyUnit());\n    }\n\n    // Attach enemy type radio listeners\n    const enemyTypeRadios = document.querySelectorAll('input[name=\"enemy-type\"]');\n    enemyTypeRadios.forEach(radio => {\n      radio.addEventListener('change', (e) => this.handleEnemyTypeChange(e as Event));\n    });\n\n    // Attach tooltip listeners\n    this.attachTooltipListeners();\n  }\n\n  /**\n   * Handle enemy type change (generic vs specific)\n   */\n  private handleEnemyTypeChange(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    const enemyType = target.value;\n    \n    const genericSection = document.getElementById('generic-enemy-input');\n    const specificSection = document.getElementById('specific-enemy-input');\n    \n    if (enemyType === 'generic') {\n      genericSection?.classList.remove('hidden');\n      specificSection?.classList.add('hidden');\n    } else if (enemyType === 'specific') {\n      genericSection?.classList.add('hidden');\n      specificSection?.classList.remove('hidden');\n    }\n    \n    // Revalidate input when switching types\n    this.validateInput();\n  }\n\n  /**\n   * Open enemy unit selector modal\n   */\n  private async openEnemyUnitSelector(): Promise<void> {\n    // Create modal container\n    const modalContainer = document.createElement('div');\n    modalContainer.id = 'enemy-unit-selector-modal';\n    document.body.appendChild(modalContainer);\n    \n    // Create selector with props\n    this.enemyUnitSelector = new EnemyUnitSelector({\n      onSelect: (selectedUnit: EnemyUnit) => {\n        this.selectedEnemyUnit = selectedUnit;\n        this.displaySelectedEnemyUnit();\n        this.validateInput();\n        this.closeEnemyUnitSelector();\n      },\n      onCancel: () => {\n        this.closeEnemyUnitSelector();\n      },\n      selectedUnit: this.selectedEnemyUnit,\n      mode: 'single',\n      title: 'Select Enemy Unit for Battle'\n    });\n    \n    // Mount the selector\n    await this.enemyUnitSelector.mount(modalContainer);\n  }\n\n  /**\n   * Close enemy unit selector modal\n   */\n  private closeEnemyUnitSelector(): void {\n    if (this.enemyUnitSelector) {\n      this.enemyUnitSelector.unmount();\n      this.enemyUnitSelector = null;\n    }\n    \n    const modalContainer = document.getElementById('enemy-unit-selector-modal');\n    if (modalContainer) {\n      modalContainer.remove();\n    }\n  }\n\n  /**\n   * Clear selected enemy unit\n   */\n  private clearSelectedEnemyUnit(): void {\n    this.selectedEnemyUnit = null;\n    this.displaySelectedEnemyUnit();\n    this.validateInput();\n  }\n\n  /**\n   * Display the selected enemy unit in the UI\n   */\n  private displaySelectedEnemyUnit(): void {\n    const noSelectionEl = document.getElementById('no-enemy-selected');\n    const selectedInfoEl = document.getElementById('selected-enemy-info');\n    const clearEnemyBtn = document.getElementById('clear-enemy-btn');\n    \n    if (!noSelectionEl || !selectedInfoEl || !clearEnemyBtn) return;\n    \n    if (!this.selectedEnemyUnit) {\n      noSelectionEl.classList.remove('hidden');\n      selectedInfoEl.classList.add('hidden');\n      clearEnemyBtn.style.display = 'none';\n    } else {\n      noSelectionEl.classList.add('hidden');\n      selectedInfoEl.classList.remove('hidden');\n      clearEnemyBtn.style.display = 'inline-block';\n      \n      // Display enemy unit information\n      const unit = this.selectedEnemyUnit;\n      const attackModifiersText = unit.attack_modifiers && Object.keys(unit.attack_modifiers).length > 0\n        ? Object.entries(unit.attack_modifiers)\n            .map(([type, bonus]) => `+${bonus} vs ${type}`)\n            .join(', ')\n        : 'None';\n      \n      selectedInfoEl.innerHTML = `\n        <div class=\"enemy-unit-card\">\n          <div class=\"enemy-unit-header\">\n            <h5 class=\"enemy-unit-name\">${unit.name}</h5>\n            <div class=\"enemy-unit-types\">\n              ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n            </div>\n          </div>\n          <div class=\"enemy-unit-stats\">\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Health:</span>\n              <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Strength:</span>\n              <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-label\">Attack Modifiers:</span>\n              <span class=\"stat-value\">${attackModifiersText}</span>\n            </div>\n          </div>\n        </div>\n      `;\n    }\n  }\n\n  /**\n   * Validate enemy configuration input with comprehensive error checking\n   */\n  private validateInput(): boolean {\n    const runBtn = document.getElementById('run-simulation-btn') as HTMLButtonElement;\n    if (!runBtn) return false;\n\n    // Get current enemy type\n    const enemyTypeRadio = document.querySelector('input[name=\"enemy-type\"]:checked') as HTMLInputElement;\n    const enemyType = enemyTypeRadio?.value || 'generic';\n\n    let isValid = true;\n    let errorMessage = '';\n\n    if (enemyType === 'generic') {\n      // Validate generic enemy groups input\n      const input = document.getElementById('enemy-groups') as HTMLInputElement;\n      if (!input) return false;\n\n      const inputValue = input.value.trim();\n\n      // Check if input is empty\n      if (!inputValue) {\n        isValid = false;\n        errorMessage = 'Please enter the number of enemy groups';\n      }\n      // Check if input is a valid number\n      else if (isNaN(Number(inputValue)) || !Number.isInteger(Number(inputValue))) {\n        isValid = false;\n        errorMessage = 'Please enter a valid whole number';\n      }\n      else {\n        const value = parseInt(inputValue);\n\n        // Check range constraints\n        if (value < 1) {\n          isValid = false;\n          errorMessage = 'Number of enemy groups must be at least 1';\n        } else if (value > 50) {\n          isValid = false;\n          errorMessage = 'Number of enemy groups cannot exceed 50 (performance limit)';\n        }\n      }\n\n      // Update UI based on validation\n      if (!isValid) {\n        input.classList.add('error');\n        this.showInputError('enemy-groups', errorMessage);\n      } else {\n        input.classList.remove('error');\n        this.hideInputError('enemy-groups');\n      }\n    } else if (enemyType === 'specific') {\n      // Validate specific enemy unit selection\n      if (!this.selectedEnemyUnit) {\n        isValid = false;\n        errorMessage = 'Please select an enemy unit for the battle simulation';\n      }\n    }\n\n    // Update run button state\n    runBtn.disabled = !isValid || !this.validateArmyComposition();\n\n    return isValid;\n  }\n\n  /**\n   * Validate army composition before simulation\n   */\n  private validateArmyComposition(): boolean {\n    if (!this.currentArmy) {\n      return false;\n    }\n\n    // Check if army has any units\n    if (!this.currentArmy.stackingOrder || this.currentArmy.stackingOrder.length === 0) {\n      return false;\n    }\n\n    // Check if all units have valid data\n    for (const group of this.currentArmy.stackingOrder) {\n      if (!group.unitName || group.count <= 0 || group.unitStrength <= 0 || group.totalHealth <= 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Show input error message\n   */\n  private showInputError(inputId: string, message: string): void {\n    const input = document.getElementById(inputId);\n    if (!input) return;\n\n    // Remove existing error message\n    this.hideInputError(inputId);\n\n    // Create error message element\n    const errorElement = document.createElement('div');\n    errorElement.className = 'input-error-message';\n    errorElement.id = `${inputId}-error`;\n    errorElement.textContent = message;\n\n    // Insert after the input\n    input.parentNode?.insertBefore(errorElement, input.nextSibling);\n  }\n\n  /**\n   * Hide input error message\n   */\n  private hideInputError(inputId: string): void {\n    const errorElement = document.getElementById(`${inputId}-error`);\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  /**\n   * Attach tooltip event listeners\n   */\n  private attachTooltipListeners(): void {\n    const helpIcons = document.querySelectorAll('.help-icon[data-tooltip]');\n\n    helpIcons.forEach(icon => {\n      icon.addEventListener('mouseenter', (e) => this.showTooltip(e as MouseEvent));\n      icon.addEventListener('mouseleave', () => this.hideTooltip());\n      icon.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.toggleTooltip(e as MouseEvent);\n      });\n    });\n\n    // Hide tooltip when clicking elsewhere\n    document.addEventListener('click', (e) => {\n      const target = e.target as Element;\n      if (!target.closest('.help-icon') && !target.closest('#tooltip')) {\n        this.hideTooltip();\n      }\n    });\n  }\n\n  /**\n   * Show tooltip\n   */\n  private showTooltip(event: MouseEvent): void {\n    const target = event.target as Element;\n    const tooltipKey = target.getAttribute('data-tooltip');\n\n    if (!tooltipKey || !this.tooltipData[tooltipKey]) return;\n\n    const tooltip = document.getElementById('tooltip');\n    const tooltipContent = tooltip?.querySelector('.tooltip-content');\n\n    if (!tooltip || !tooltipContent) return;\n\n    tooltipContent.innerHTML = this.tooltipData[tooltipKey];\n    tooltip.classList.remove('hidden');\n\n    // Position tooltip\n    this.positionTooltip(tooltip, target);\n  }\n\n  /**\n   * Hide tooltip\n   */\n  private hideTooltip(): void {\n    const tooltip = document.getElementById('tooltip');\n    if (tooltip) {\n      tooltip.classList.add('hidden');\n    }\n  }\n\n  /**\n   * Toggle tooltip (for mobile/click)\n   */\n  private toggleTooltip(event: MouseEvent): void {\n    const tooltip = document.getElementById('tooltip');\n    if (tooltip?.classList.contains('hidden')) {\n      this.showTooltip(event);\n    } else {\n      this.hideTooltip();\n    }\n  }\n\n  /**\n   * Position tooltip relative to target element\n   */\n  private positionTooltip(tooltip: Element, target: Element): void {\n    const targetRect = target.getBoundingClientRect();\n    const tooltipElement = tooltip as HTMLElement;\n\n    // Reset position\n    tooltipElement.style.top = '';\n    tooltipElement.style.left = '';\n    tooltipElement.style.transform = '';\n\n    // Calculate position\n    const tooltipRect = tooltip.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    let top = targetRect.bottom + 10;\n    let left = targetRect.left + (targetRect.width / 2) - (tooltipRect.width / 2);\n\n    // Adjust if tooltip goes off screen\n    if (left < 10) {\n      left = 10;\n    } else if (left + tooltipRect.width > viewportWidth - 10) {\n      left = viewportWidth - tooltipRect.width - 10;\n    }\n\n    if (top + tooltipRect.height > viewportHeight - 10) {\n      top = targetRect.top - tooltipRect.height - 10;\n    }\n\n    tooltipElement.style.top = `${top}px`;\n    tooltipElement.style.left = `${left}px`;\n  }\n\n  /**\n   * Run the battle simulation with comprehensive error handling\n   */\n  private async runSimulation(): Promise<void> {\n    // Comprehensive validation before starting\n    if (!this.validateInput()) {\n      this.showError('Please fix the input errors before running the simulation.');\n      return;\n    }\n\n    if (!this.validateArmyComposition()) {\n      this.showError('Invalid army composition. Please ensure you have selected and optimized your army first.');\n      return;\n    }\n\n    // Get current enemy type\n    const enemyTypeRadio = document.querySelector('input[name=\"enemy-type\"]:checked') as HTMLInputElement;\n    const enemyType = enemyTypeRadio?.value || 'generic';\n\n    // Show loading state\n    this.showLoading(true);\n    this.hideError();\n\n    try {\n      // Validate army composition one more time\n      if (!this.currentArmy || !this.currentArmy.stackingOrder) {\n        throw new Error('Army composition is invalid or missing');\n      }\n\n      // Run simulation with timeout protection\n      const simulationPromise = new Promise<void>((resolve, reject) => {\n        try {\n          if (enemyType === 'specific' && this.selectedEnemyUnit) {\n            // Use enemy unit battle simulation service\n            this.currentAnalysis = this.enemyBattleService.simulateBothScenariosWithEnemyUnits(\n              this.currentArmy!,\n              [this.selectedEnemyUnit]\n            );\n          } else {\n            // Use generic battle simulation service\n            const enemyGroupsInput = document.getElementById('enemy-groups') as HTMLInputElement;\n            const enemyGroups = parseInt(enemyGroupsInput.value);\n\n            // Additional validation for generic enemies\n            if (enemyGroups > this.currentArmy!.stackingOrder.length * 10) {\n              console.warn(`Warning: ${enemyGroups} enemy groups vs ${this.currentArmy!.stackingOrder.length} player groups may result in a very short battle.`);\n            }\n\n            this.currentAnalysis = this.battleService.simulateBothScenarios(this.currentArmy!, enemyGroups);\n          }\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      // Add timeout to prevent hanging\n      const timeoutPromise = new Promise<void>((_, reject) => {\n        setTimeout(() => reject(new Error('Simulation timed out')), 30000); // 30 second timeout\n      });\n\n      await Promise.race([simulationPromise, timeoutPromise]);\n\n      // Validate results\n      if (!this.currentAnalysis || !this.currentAnalysis.bestCase || !this.currentAnalysis.worstCase) {\n        throw new Error('Simulation completed but results are invalid');\n      }\n\n      // Display results\n      this.displayResults();\n\n      // Update UI state\n      this.showLoading(false);\n      this.showResults(true);\n\n      // Show clear button\n      const clearBtn = document.getElementById('clear-simulation-btn');\n      if (clearBtn) clearBtn.style.display = 'inline-block';\n\n    } catch (error) {\n      console.error('Battle simulation failed:', error);\n      this.showLoading(false);\n\n      // Provide specific error messages based on error type\n      let errorMessage = 'An unexpected error occurred during simulation.';\n\n      if (error instanceof Error) {\n        if (error.message.includes('timeout')) {\n          errorMessage = 'Simulation timed out. Try reducing the complexity or check your army composition.';\n        } else if (error.message.includes('invalid')) {\n          errorMessage = 'Invalid data detected. Please refresh the page and try again.';\n        } else if (error.message.includes('Army composition')) {\n          errorMessage = 'Army composition error. Please re-optimize your army and try again.';\n        } else if (error.message.includes('Enemy unit')) {\n          errorMessage = 'Enemy unit configuration error. Please select a valid enemy unit.';\n        }\n      }\n\n      this.showError(errorMessage);\n    }\n  }\n\n  /**\n   * Display simulation results\n   */\n  private displayResults(): void {\n    if (!this.currentAnalysis) return;\n\n    const resultsContainer = document.getElementById('simulation-results');\n    if (!resultsContainer) return;\n\n    const { bestCase, worstCase, comparison } = this.currentAnalysis;\n\n    resultsContainer.innerHTML = `\n      <div class=\"results-header\">\n        <h3>📊 Battle Analysis Results\n          <span class=\"help-icon\" data-tooltip=\"battle-results\">ℹ️</span>\n        </h3>\n        <p class=\"results-summary\">\n          Simulation complete! Here's how your army performs against ${bestCase.configuration.enemyGroupCount} enemy groups.\n        </p>\n      </div>\n\n      <div class=\"scenario-comparison\">\n        <div class=\"scenario-card best-case\">\n          <h4>🟢 Best Case Scenario\n            <span class=\"help-icon\" data-tooltip=\"best-case-scenario\">ℹ️</span>\n          </h4>\n          <p class=\"scenario-description\">Your army attacks first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${bestCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${bestCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${bestCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"scenario-card worst-case\">\n          <h4>🔴 Worst Case Scenario\n            <span class=\"help-icon\" data-tooltip=\"worst-case-scenario\">ℹ️</span>\n          </h4>\n          <p class=\"scenario-description\">Enemy attacks first</p>\n          <div class=\"scenario-stats\">\n            <div class=\"stat\">\n              <span class=\"stat-label\">Damage Dealt:</span>\n              <span class=\"stat-value\">${worstCase.totalDamageDealtToEnemies.toLocaleString()}</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Battle Duration:</span>\n              <span class=\"stat-value\">${worstCase.battleDuration} turns</span>\n            </div>\n            <div class=\"stat\">\n              <span class=\"stat-label\">Player Attacks:</span>\n              <span class=\"stat-value\">${worstCase.statistics.totalPlayerAttacks}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"comparison-summary\">\n        <h4>📈 Comparison Analysis</h4>\n        <div class=\"comparison-stats\">\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Damage Difference:</span>\n            <span class=\"stat-value ${comparison.damageDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.damageDifference >= 0 ? '+' : ''}${comparison.damageDifference.toLocaleString()}\n            </span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Average Damage:</span>\n            <span class=\"stat-value\">${Math.round(comparison.averageDamage).toLocaleString()}</span>\n          </div>\n          <div class=\"comparison-stat\">\n            <span class=\"stat-label\">Survival Difference:</span>\n            <span class=\"stat-value ${comparison.survivalDifference >= 0 ? 'positive' : 'negative'}\">\n              ${comparison.survivalDifference >= 0 ? '+' : ''}${comparison.survivalDifference} turns\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"detailed-logs\">\n        <div class=\"log-tabs\">\n          <button class=\"log-tab active\" data-scenario=\"best\">Best Case Combat Log</button>\n          <button class=\"log-tab\" data-scenario=\"worst\">Worst Case Combat Log</button>\n        </div>\n        <div class=\"log-content\">\n          <div id=\"best-case-log\" class=\"combat-log active\">\n            ${this.formatCombatLog(bestCase.combatLog)}\n          </div>\n          <div id=\"worst-case-log\" class=\"combat-log hidden\">\n            ${this.formatCombatLog(worstCase.combatLog)}\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Attach log tab listeners\n    this.attachLogTabListeners();\n\n    // Reattach tooltip listeners for new content\n    this.attachTooltipListeners();\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private formatCombatLog(combatLog: any[]): string {\n    if (combatLog.length === 0) {\n      return '<p class=\"no-log\">No combat actions recorded.</p>';\n    }\n\n    const logEntries = combatLog.map(action => {\n      const isPlayerTurn = !action.attacker.includes('Enemy Group');\n      const turnClass = isPlayerTurn ? 'log-entry player-turn' : 'log-entry enemy-turn';\n\n      return `\n        <div class=\"${turnClass}\">\n          <span class=\"turn-number\">Turn ${action.turn}:</span>\n          <span class=\"action-text\">${action.attacker} ${action.action}</span>\n        </div>\n      `;\n    }).join('');\n\n    return `<div class=\"log-entries\">${logEntries}</div>`;\n  }\n\n  /**\n   * Attach log tab event listeners\n   */\n  private attachLogTabListeners(): void {\n    const logTabs = document.querySelectorAll('.log-tab');\n    logTabs.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const target = e.target as HTMLElement;\n        const scenario = target.dataset.scenario;\n        \n        // Update active tab\n        logTabs.forEach(t => t.classList.remove('active'));\n        target.classList.add('active');\n        \n        // Show corresponding log\n        const logs = document.querySelectorAll('.combat-log');\n        logs.forEach(log => {\n          log.classList.remove('active');\n          log.classList.add('hidden');\n        });\n        \n        const activeLog = document.getElementById(`${scenario}-case-log`);\n        if (activeLog) {\n          activeLog.classList.add('active');\n          activeLog.classList.remove('hidden');\n        }\n      });\n    });\n  }\n\n  /**\n   * Clear simulation results\n   */\n  private clearResults(): void {\n    this.currentAnalysis = null;\n    this.showResults(false);\n    \n    const clearBtn = document.getElementById('clear-simulation-btn');\n    if (clearBtn) clearBtn.style.display = 'none';\n  }\n\n  /**\n   * Show/hide loading state\n   */\n  private showLoading(show: boolean): void {\n    const loadingEl = document.getElementById('simulation-loading');\n    if (loadingEl) {\n      loadingEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show/hide results\n   */\n  private showResults(show: boolean): void {\n    const resultsEl = document.getElementById('simulation-results');\n    if (resultsEl) {\n      resultsEl.classList.toggle('hidden', !show);\n    }\n  }\n\n  /**\n   * Show error message with better UI\n   */\n  private showError(message: string): void {\n    // Remove existing error\n    this.hideError();\n\n    // Create error element\n    const errorElement = document.createElement('div');\n    errorElement.className = 'simulation-error';\n    errorElement.id = 'simulation-error';\n    errorElement.innerHTML = `\n      <div class=\"error-content\">\n        <span class=\"error-icon\">⚠️</span>\n        <span class=\"error-message\">${message}</span>\n        <button class=\"error-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n      </div>\n    `;\n\n    // Insert error before results container\n    const resultsContainer = document.getElementById('simulation-results');\n    if (resultsContainer && resultsContainer.parentNode) {\n      resultsContainer.parentNode.insertBefore(errorElement, resultsContainer);\n    } else {\n      // Fallback to container\n      if (this.container) {\n        this.container.appendChild(errorElement);\n      }\n    }\n\n    // Auto-hide after 10 seconds\n    setTimeout(() => {\n      this.hideError();\n    }, 10000);\n  }\n\n  /**\n   * Hide error message\n   */\n  private hideError(): void {\n    const errorElement = document.getElementById('simulation-error');\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  /**\n   * Add battle simulation specific styles\n   */\n  private addBattleSimulationStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .battle-simulation-section {\n        margin-top: 2rem;\n        padding: 2rem;\n        background: linear-gradient(135deg, #fff0f0 0%, #f8f9fa 100%);\n        border: 2px solid #e74c3c;\n        border-radius: 12px;\n      }\n\n      .section-description {\n        color: #666;\n        margin-bottom: 2rem;\n        font-size: 1.1rem;\n        line-height: 1.6;\n      }\n\n      .enemy-input-container {\n        background: white;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .input-help {\n        color: #666;\n        font-size: 0.9rem;\n        margin-top: 0.5rem;\n        display: block;\n      }\n\n      .simulation-controls {\n        margin-top: 1.5rem;\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .simulation-loading {\n        text-align: center;\n        padding: 2rem;\n        background: white;\n        border-radius: 8px;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .simulation-results {\n        background: white;\n        border-radius: 8px;\n        padding: 2rem;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .results-header {\n        text-align: center;\n        margin-bottom: 2rem;\n        padding-bottom: 1rem;\n        border-bottom: 2px solid #eee;\n      }\n\n      .results-summary {\n        color: #666;\n        font-size: 1.1rem;\n        margin-top: 0.5rem;\n      }\n\n      .scenario-comparison {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2rem;\n        margin-bottom: 2rem;\n      }\n\n      .scenario-card {\n        padding: 1.5rem;\n        border-radius: 8px;\n        border: 2px solid;\n      }\n\n      .scenario-card.best-case {\n        background: #f0fff4;\n        border-color: #27ae60;\n      }\n\n      .scenario-card.worst-case {\n        background: #fff5f5;\n        border-color: #e74c3c;\n      }\n\n      .scenario-card h4 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.3rem;\n      }\n\n      .scenario-description {\n        color: #666;\n        margin-bottom: 1rem;\n        font-style: italic;\n      }\n\n      .scenario-stats, .comparison-stats {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .stat, .comparison-stat {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: rgba(255,255,255,0.7);\n        border-radius: 4px;\n      }\n\n      .stat-label {\n        font-weight: 600;\n        color: #333;\n      }\n\n      .stat-value {\n        font-weight: 700;\n        color: #2c3e50;\n      }\n\n      .stat-value.positive {\n        color: #27ae60;\n      }\n\n      .stat-value.negative {\n        color: #e74c3c;\n      }\n\n      .comparison-summary {\n        background: #f8f9fa;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-bottom: 2rem;\n      }\n\n      .comparison-summary h4 {\n        margin: 0 0 1rem 0;\n        color: #2c3e50;\n      }\n\n      .detailed-logs {\n        border-top: 2px solid #eee;\n        padding-top: 2rem;\n      }\n\n      .log-tabs {\n        display: flex;\n        gap: 0.5rem;\n        margin-bottom: 1rem;\n      }\n\n      .log-tab {\n        padding: 0.75rem 1.5rem;\n        border: 2px solid #ddd;\n        background: #f8f9fa;\n        border-radius: 6px 6px 0 0;\n        cursor: pointer;\n        font-weight: 600;\n        transition: all 0.2s;\n      }\n\n      .log-tab.active {\n        background: white;\n        border-bottom-color: white;\n        color: #2c3e50;\n      }\n\n      .log-content {\n        background: white;\n        border: 2px solid #ddd;\n        border-radius: 0 6px 6px 6px;\n        padding: 1.5rem;\n        min-height: 300px;\n        max-height: 500px;\n        overflow-y: auto;\n      }\n\n      .hidden {\n        display: none !important;\n      }\n\n      .combat-log.hidden {\n        display: none;\n      }\n\n      .log-entries {\n        font-family: 'Courier New', monospace;\n        font-size: 0.9rem;\n        line-height: 1.6;\n      }\n\n      .log-entry {\n        padding: 0.5rem;\n        border-bottom: 1px solid #f0f0f0;\n        border-radius: 4px;\n        margin-bottom: 2px;\n      }\n\n      .log-entry.player-turn {\n        background-color: #e3f2fd;\n        border-left: 3px solid #2196f3;\n      }\n\n      .log-entry.enemy-turn {\n        background-color: #ffebee;\n        border-left: 3px solid #f44336;\n      }\n\n      .turn-number {\n        color: #666;\n        font-weight: 600;\n        margin-right: 0.5rem;\n      }\n\n      .action-text {\n        color: #333;\n      }\n\n      .no-log {\n        text-align: center;\n        color: #666;\n        font-style: italic;\n        padding: 2rem;\n      }\n\n      .input.error {\n        border-color: #e74c3c;\n        background-color: #fff5f5;\n        box-shadow: 0 0 0 2px rgba(231, 76, 60, 0.2);\n      }\n\n      .input-error-message {\n        color: #e74c3c;\n        font-size: 0.85rem;\n        margin-top: 0.25rem;\n        display: block;\n        font-weight: 500;\n      }\n\n      .simulation-error {\n        background: #f8d7da;\n        border: 2px solid #e74c3c;\n        border-radius: 8px;\n        margin-bottom: 1rem;\n        animation: slideIn 0.3s ease-out;\n      }\n\n      .error-content {\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .error-icon {\n        font-size: 1.2rem;\n        flex-shrink: 0;\n      }\n\n      .error-message {\n        flex: 1;\n        color: #721c24;\n        font-weight: 500;\n        line-height: 1.4;\n      }\n\n      .error-close {\n        background: none;\n        border: none;\n        font-size: 1.5rem;\n        color: #721c24;\n        cursor: pointer;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        transition: background-color 0.2s;\n      }\n\n      .error-close:hover {\n        background-color: rgba(114, 28, 36, 0.1);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateY(-10px);\n        }\n        to {\n          opacity: 1;\n          transform: translateY(0);\n        }\n      }\n\n      .loading-spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid #f3f3f3;\n        border-top: 4px solid #3498db;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin: 0 auto 1rem;\n      }\n\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n\n      @media (max-width: 768px) {\n        .scenario-comparison {\n          grid-template-columns: 1fr;\n        }\n        \n        .simulation-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n        \n        .log-tabs {\n          flex-direction: column;\n        }\n        \n        .log-tab {\n          border-radius: 6px;\n        }\n        \n        .log-content {\n          border-radius: 6px;\n        }\n      }\n\n      /* Help Section Styles */\n      .help-section {\n        background: #e8f5e8;\n        padding: 1.5rem;\n        border-radius: 8px;\n        margin-top: 2rem;\n        border: 2px solid #27ae60;\n      }\n\n      .help-section h4 {\n        margin: 0 0 1rem 0;\n        color: #1e7e34;\n        font-size: 1.1rem;\n      }\n\n      .help-content {\n        display: grid;\n        gap: 0.75rem;\n      }\n\n      .help-item {\n        background: white;\n        padding: 0.75rem;\n        border-radius: 6px;\n        border-left: 4px solid #27ae60;\n        font-size: 0.9rem;\n        line-height: 1.4;\n        color: #333333;\n      }\n\n      .help-icon {\n        display: inline-block;\n        margin-left: 0.5rem;\n        cursor: help;\n        color: #007bff;\n        font-size: 0.9rem;\n        transition: all 0.2s;\n        user-select: none;\n      }\n\n      .help-icon:hover {\n        color: #0056b3;\n        transform: scale(1.1);\n      }\n\n      /* Tooltip Styles */\n      .tooltip {\n        position: fixed;\n        background: #2c3e50;\n        color: white;\n        padding: 0;\n        border-radius: 8px;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        z-index: 1000;\n        max-width: 300px;\n        font-size: 0.9rem;\n        line-height: 1.4;\n      }\n\n      .tooltip-content {\n        padding: 1rem;\n      }\n\n      .tooltip-arrow {\n        position: absolute;\n        top: -6px;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 0;\n        height: 0;\n        border-left: 6px solid transparent;\n        border-right: 6px solid transparent;\n        border-bottom: 6px solid #2c3e50;\n      }\n\n      .tooltip.hidden {\n        display: none;\n      }\n\n      /* Simulation Note Styles */\n      .simulation-note {\n        margin-bottom: 1.5rem;\n      }\n\n      .info-note {\n        background: #e3f2fd;\n        border: 1px solid #2196f3;\n        border-radius: 6px;\n        padding: 1rem;\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n      }\n\n      .note-icon {\n        font-size: 1.2rem;\n        color: #1976d2;\n      }\n\n      .note-text {\n        color: #1565c0;\n        font-weight: 500;\n        font-size: 0.95rem;\n      }\n\n      /* Enemy Type Selection Styles */\n      .enemy-type-selection {\n        background-color: #f8f9fa;\n        border: 1px solid #dee2e6;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 20px;\n      }\n\n      .enemy-type-selection h4 {\n        margin-top: 0;\n        margin-bottom: 15px;\n        color: #495057;\n        font-size: 18px;\n      }\n\n      .enemy-type-options {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n\n      .radio-option {\n        display: flex;\n        align-items: flex-start;\n        gap: 10px;\n        padding: 15px;\n        border: 2px solid #dee2e6;\n        border-radius: 8px;\n        background-color: white;\n        cursor: pointer;\n        transition: all 0.2s ease;\n      }\n\n      .radio-option:hover {\n        border-color: #007bff;\n        background-color: #f8f9fa;\n      }\n\n      .radio-option:has(input:checked) {\n        border-color: #007bff;\n        background-color: #e7f3ff;\n      }\n\n      .radio-option input[type=\"radio\"] {\n        margin: 0;\n        margin-top: 2px;\n      }\n\n      .radio-label {\n        font-weight: 600;\n        color: #495057;\n        display: block;\n        margin-bottom: 5px;\n      }\n\n      .radio-help {\n        color: #6c757d;\n        font-size: 14px;\n        line-height: 1.4;\n        display: block;\n      }\n\n      .enemy-config-section {\n        margin-top: 15px;\n        padding: 15px;\n        background-color: #fff;\n        border: 1px solid #dee2e6;\n        border-radius: 6px;\n      }\n\n      .enemy-unit-selection {\n        margin-top: 15px;\n      }\n\n      .selected-enemy-display {\n        margin-bottom: 15px;\n      }\n\n      .no-selection-message {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 10px;\n        padding: 20px;\n        background-color: #f8f9fa;\n        border: 2px dashed #dee2e6;\n        border-radius: 8px;\n        text-align: center;\n      }\n\n      .no-selection-message .icon {\n        font-size: 24px;\n        color: #6c757d;\n      }\n\n      .no-selection-message .message {\n        font-weight: 600;\n        color: #495057;\n      }\n\n      .no-selection-message .help {\n        color: #6c757d;\n        font-size: 14px;\n      }\n\n      .selected-enemy-card {\n        padding: 15px;\n        background-color: #e7f3ff;\n        border: 1px solid #007bff;\n        border-radius: 8px;\n      }\n\n      .enemy-unit-card {\n        display: flex;\n        flex-direction: column;\n        gap: 15px;\n      }\n\n      .enemy-unit-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        gap: 15px;\n      }\n\n      .enemy-unit-name {\n        font-weight: 600;\n        color: #495057;\n        margin: 0;\n        font-size: 18px;\n      }\n\n      .enemy-unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n      }\n\n      .unit-type-tag {\n        background-color: #007bff;\n        color: white;\n        padding: 4px 8px;\n        border-radius: 4px;\n        font-size: 12px;\n        font-weight: 500;\n      }\n\n      .enemy-unit-stats {\n        display: grid;\n        gap: 10px;\n      }\n\n      .stat-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 8px 12px;\n        background-color: rgba(255, 255, 255, 0.7);\n        border-radius: 4px;\n      }\n\n      .stat-item .stat-label {\n        font-weight: 500;\n        color: #495057;\n      }\n\n      .stat-item .stat-value {\n        font-weight: 600;\n        color: #007bff;\n      }\n\n      .enemy-selection-controls {\n        display: flex;\n        gap: 10px;\n        align-items: center;\n      }\n\n      .select-enemy-unit-btn {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.2s ease;\n      }\n\n      .select-enemy-unit-btn:hover {\n        background-color: #0056b3;\n      }\n\n      .change-enemy-unit-btn {\n        background-color: #6c757d;\n        color: white;\n        border: none;\n        padding: 8px 16px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 12px;\n        transition: background-color 0.2s ease;\n      }\n\n      .change-enemy-unit-btn:hover {\n        background-color: #5a6268;\n      }\n\n      /* Mobile Responsiveness for Enemy Unit Features */\n      @media (max-width: 768px) {\n        .enemy-type-selection {\n          padding: 15px;\n        }\n\n        .radio-option {\n          padding: 12px;\n        }\n\n        .enemy-unit-header {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 10px;\n        }\n\n        .enemy-selection-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .select-enemy-unit-btn,\n        .change-enemy-unit-btn {\n          width: 100%;\n        }\n\n        .stat-item {\n          flex-direction: column;\n          align-items: flex-start;\n          gap: 5px;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Display pre-calculated battle results without running a new simulation\n   */\n  displayPreCalculatedResults(battleAnalysis: any): void {\n    console.log('BattleSimulationComponent: displayPreCalculatedResults called', battleAnalysis);\n    if (!this.container) {\n      console.log('BattleSimulationComponent: no container');\n      return;\n    }\n\n    // Store the analysis\n    this.currentAnalysis = battleAnalysis;\n\n    // Find the results container\n    const resultsContainer = this.container.querySelector('#simulation-results');\n    if (!resultsContainer) {\n      console.log('BattleSimulationComponent: simulation-results container not found');\n      return;\n    }\n    console.log('BattleSimulationComponent: found results container', resultsContainer);\n\n    // Show the results container\n    resultsContainer.classList.remove('hidden');\n\n    // Display the pre-calculated results\n    this.displayResults();\n\n    // Make sure results are visible\n    this.showResults(true);\n\n    // Hide simulation controls for damage optimization mode (view-only)\n    const controlsContainer = this.container.querySelector('.simulation-controls');\n    const enemyInputContainer = this.container.querySelector('.enemy-input-container');\n    if (controlsContainer) {\n      (controlsContainer as HTMLElement).style.display = 'none';\n    }\n    if (enemyInputContainer) {\n      (enemyInputContainer as HTMLElement).style.display = 'none';\n    }\n\n    // Show a note that these are pre-calculated results\n    const noteContainer = this.container.querySelector('#simulation-note');\n    if (noteContainer) {\n      noteContainer.innerHTML = `\n        <div class=\"info-note\">\n          <span class=\"note-icon\">ℹ️</span>\n          <span class=\"note-text\">Showing pre-calculated battle results from damage optimization</span>\n        </div>\n      `;\n      noteContainer.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Show simulation controls (for stacking mode)\n   */\n  private showSimulationControls(): void {\n    if (!this.container) return;\n\n    const controlsContainer = this.container.querySelector('.simulation-controls');\n    const enemyInputContainer = this.container.querySelector('.enemy-input-container');\n    if (controlsContainer) {\n      (controlsContainer as HTMLElement).style.display = 'block';\n    }\n    if (enemyInputContainer) {\n      (enemyInputContainer as HTMLElement).style.display = 'block';\n    }\n  }\n}\n","/**\n * Enemy Unit Input Form component for creating and editing enemy units\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { EnemyUnit, UserEnemyUnit, EnemyUnitUtils } from '../../types/enemyUnits';\nimport { EnemyUnitValidationService } from '../../services/enemyUnitValidation';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\nimport { EnemyUnitLoader } from '../../services/enemyUnitLoader';\n\ninterface EnemyUnitInputFormProps {\n  onSave: (enemyUnit: UserEnemyUnit) => void;\n  onCancel: () => void;\n  editingUnit?: UserEnemyUnit | null;\n  mode: 'create' | 'edit';\n}\n\nexport class EnemyUnitInputForm {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitInputFormProps;\n  private storage: EnemyUnitStorageService;\n  private loader: EnemyUnitLoader;\n  private attackModifiers: Record<string, number> = {};\n\n  constructor(props: EnemyUnitInputFormProps) {\n    this.props = props;\n    this.storage = new EnemyUnitStorageService();\n    this.loader = new EnemyUnitLoader();\n  }\n\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.initializeForm();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private initializeForm(): void {\n    // Initialize attack modifiers from editing unit or empty\n    if (this.props.editingUnit?.attack_modifiers) {\n      // Convert attack modifiers array to Record<string, number>\n      this.attackModifiers = {};\n      this.props.editingUnit.attack_modifiers.forEach(modifier => {\n        this.attackModifiers[modifier.target_type] = modifier.value;\n      });\n    } else {\n      this.attackModifiers = {};\n    }\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    const isEdit = this.props.mode === 'edit';\n    const unit = this.props.editingUnit;\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-input-form\">\n        <div class=\"card\">\n          <div class=\"card-header\">\n            <h2 class=\"card-title\">\n              ${isEdit ? '✏️ Edit Enemy Unit' : '➕ Create New Enemy Unit'}\n            </h2>\n            <p class=\"text-secondary\">\n              ${isEdit ? 'Modify the enemy unit details below' : 'Define a custom enemy unit for battle simulations'}\n            </p>\n          </div>\n          \n          <form id=\"enemy-unit-form\" class=\"enemy-unit-form\">\n            <!-- Basic Information Section -->\n            <div class=\"form-section\">\n              <h3>📋 Basic Information</h3>\n              <div class=\"grid grid-cols-2 gap-4\">\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-name\">Enemy Unit Name *</label>\n                  <input \n                    type=\"text\" \n                    id=\"enemy-name\" \n                    class=\"form-input\" \n                    value=\"${unit?.name || ''}\"\n                    placeholder=\"e.g., Elite Dark Elf Archer\"\n                    required\n                    maxlength=\"50\"\n                  >\n                  <div class=\"form-error\" id=\"enemy-name-error\"></div>\n                  <small class=\"form-help\">Choose a descriptive name for this enemy unit</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-description\">Description</label>\n                  <input\n                    type=\"text\"\n                    id=\"enemy-description\"\n                    class=\"form-input\"\n                    value=\"\"\n                    placeholder=\"Optional description\"\n                    maxlength=\"100\"\n                  >\n                  <small class=\"form-help\">Optional description for this enemy unit</small>\n                </div>\n              </div>\n            </div>\n\n            <!-- Combat Stats Section -->\n            <div class=\"form-section\">\n              <h3>⚔️ Combat Statistics</h3>\n              <div class=\"grid grid-cols-3 gap-4\">\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-health\">Health Points *</label>\n                  <input \n                    type=\"number\" \n                    id=\"enemy-health\" \n                    class=\"form-input\" \n                    value=\"${unit?.health || ''}\"\n                    min=\"1\" \n                    max=\"10000000\"\n                    placeholder=\"e.g., 50000\"\n                    required\n                  >\n                  <div class=\"form-error\" id=\"enemy-health-error\"></div>\n                  <small class=\"form-help\">Total health points (1 - 10,000,000)</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-strength\">Strength *</label>\n                  <input \n                    type=\"number\" \n                    id=\"enemy-strength\" \n                    class=\"form-input\" \n                    value=\"${unit?.strength || ''}\"\n                    min=\"1\" \n                    max=\"1000000\"\n                    placeholder=\"e.g., 8000\"\n                    required\n                  >\n                  <div class=\"form-error\" id=\"enemy-strength-error\"></div>\n                  <small class=\"form-help\">Attack strength (1 - 1,000,000)</small>\n                </div>\n                <div class=\"form-group\">\n                  <label class=\"form-label\" for=\"enemy-unit-types\">Unit Types</label>\n                  <input \n                    type=\"text\" \n                    id=\"enemy-unit-types\" \n                    class=\"form-input\" \n                    value=\"${unit?.unit_types?.join(', ') || ''}\"\n                    placeholder=\"e.g., Ranged, Human, Elite\"\n                  >\n                  <div class=\"form-error\" id=\"enemy-unit-types-error\"></div>\n                  <small class=\"form-help\">Comma-separated unit types (optional)</small>\n                </div>\n              </div>\n            </div>\n\n            <!-- Attack Modifiers Section -->\n            <div class=\"form-section\">\n              <h3>🎯 Attack Modifiers</h3>\n              <p class=\"text-sm text-secondary mb-4\">\n                Define strength bonuses against specific unit types. Use absolute values (e.g., 1000 = +1000 strength vs that type).\n              </p>\n              \n              <div class=\"attack-modifiers-container\">\n                <div class=\"modifier-controls\">\n                  <div class=\"add-modifier-form\">\n                    <div class=\"grid grid-cols-3 gap-2\">\n                      <input \n                        type=\"text\" \n                        id=\"new-modifier-type\" \n                        class=\"form-input\" \n                        placeholder=\"Unit type (e.g., Human)\"\n                      >\n                      <input \n                        type=\"number\" \n                        id=\"new-modifier-value\" \n                        class=\"form-input\" \n                        placeholder=\"Bonus strength\"\n                        min=\"0\"\n                        max=\"100000\"\n                      >\n                      <button type=\"button\" id=\"add-modifier-btn\" class=\"btn btn-primary\">\n                        ➕ Add\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                \n                <div id=\"attack-modifiers-list\" class=\"attack-modifiers-list\">\n                  <!-- Attack modifiers will be populated here -->\n                </div>\n              </div>\n            </div>\n\n            <!-- Form Actions -->\n            <div class=\"form-section\">\n              <div class=\"form-actions\">\n                <button type=\"submit\" class=\"btn btn-success btn-lg\" id=\"save-btn\">\n                  <span>${isEdit ? '💾 Update Enemy Unit' : '✅ Create Enemy Unit'}</span>\n                </button>\n                <button type=\"button\" class=\"btn btn-secondary btn-lg\" id=\"cancel-btn\">\n                  <span>❌ Cancel</span>\n                </button>\n                ${isEdit ? `\n                  <button type=\"button\" class=\"btn btn-danger btn-lg\" id=\"delete-btn\">\n                    <span>🗑️ Delete</span>\n                  </button>\n                ` : ''}\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    `;\n\n    this.addStyles();\n    this.populateAttackModifiers();\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-input-form {\n        max-width: 800px;\n        margin: 0 auto;\n        padding: var(--spacing-lg);\n      }\n\n      .form-section {\n        margin-bottom: var(--spacing-xl);\n        padding-bottom: var(--spacing-lg);\n        border-bottom: 1px solid var(--color-border);\n      }\n\n      .form-section:last-child {\n        border-bottom: none;\n        margin-bottom: 0;\n      }\n\n      .form-section h3 {\n        font-size: var(--font-size-lg);\n        margin-bottom: var(--spacing-md);\n        color: var(--color-text);\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-sm);\n      }\n\n      .form-group {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .form-label {\n        display: block;\n        font-weight: 600;\n        margin-bottom: var(--spacing-xs);\n        color: var(--color-text);\n        font-size: var(--font-size-sm);\n      }\n\n      .form-input {\n        width: 100%;\n        padding: var(--spacing-sm);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        font-size: var(--font-size-sm);\n        transition: border-color var(--transition-fast);\n        background-color: var(--color-background);\n        color: var(--color-text);\n      }\n\n      .form-input:focus {\n        outline: none;\n        border-color: var(--color-primary);\n        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n      }\n\n      .form-input.error {\n        border-color: var(--color-danger);\n        background-color: rgba(239, 68, 68, 0.05);\n      }\n\n      .form-error {\n        color: var(--color-danger);\n        font-size: var(--font-size-xs);\n        margin-top: var(--spacing-xs);\n        min-height: 1.2em;\n        font-weight: 500;\n      }\n\n      .form-help {\n        color: var(--color-text-secondary);\n        font-size: var(--font-size-xs);\n        margin-top: var(--spacing-xs);\n        display: block;\n      }\n\n      .grid {\n        display: grid;\n        gap: var(--spacing-md);\n      }\n\n      .grid-cols-2 {\n        grid-template-columns: repeat(2, 1fr);\n      }\n\n      .grid-cols-3 {\n        grid-template-columns: repeat(3, 1fr);\n      }\n\n      .gap-2 {\n        gap: var(--spacing-sm);\n      }\n\n      .gap-4 {\n        gap: var(--spacing-md);\n      }\n\n      /* Attack Modifiers Styles */\n      .attack-modifiers-container {\n        background: var(--color-surface);\n        border-radius: var(--radius-md);\n        padding: var(--spacing-md);\n        border: 1px solid var(--color-border);\n      }\n\n      .modifier-controls {\n        margin-bottom: var(--spacing-md);\n      }\n\n      .add-modifier-form {\n        background: var(--color-background);\n        padding: var(--spacing-md);\n        border-radius: var(--radius-sm);\n        border: 1px solid var(--color-border);\n      }\n\n      .attack-modifiers-list {\n        min-height: 60px;\n        max-height: 300px;\n        overflow-y: auto;\n      }\n\n      .modifier-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: var(--spacing-sm);\n        background: var(--color-background);\n        border: 1px solid var(--color-border);\n        border-radius: var(--radius-sm);\n        margin-bottom: var(--spacing-xs);\n        transition: all var(--transition-fast);\n      }\n\n      .modifier-item:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n\n      .modifier-info {\n        flex: 1;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .modifier-type {\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .modifier-value {\n        color: var(--color-success);\n        font-weight: 500;\n      }\n\n      .modifier-actions {\n        display: flex;\n        gap: var(--spacing-xs);\n      }\n\n      .btn-xs {\n        padding: var(--spacing-xs) var(--spacing-sm);\n        font-size: var(--font-size-xs);\n        border-radius: var(--radius-sm);\n      }\n\n      .empty-modifiers {\n        text-align: center;\n        color: var(--color-text-secondary);\n        font-style: italic;\n        padding: var(--spacing-lg);\n        border: 2px dashed var(--color-border);\n        border-radius: var(--radius-md);\n      }\n\n      /* Form Actions */\n      .form-actions {\n        display: flex;\n        gap: var(--spacing-md);\n        justify-content: center;\n        flex-wrap: wrap;\n      }\n\n      .btn-lg {\n        padding: var(--spacing-md) var(--spacing-lg);\n        font-size: var(--font-size-md);\n        font-weight: 600;\n        min-width: 160px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: var(--spacing-xs);\n      }\n\n      .btn-lg:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .enemy-unit-input-form {\n          padding: var(--spacing-md);\n        }\n\n        .grid-cols-2,\n        .grid-cols-3 {\n          grid-template-columns: 1fr;\n        }\n\n        .form-actions {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .btn-lg {\n          min-width: auto;\n          width: 100%;\n        }\n\n        .add-modifier-form .grid-cols-3 {\n          grid-template-columns: 1fr;\n          gap: var(--spacing-sm);\n        }\n\n        .modifier-item {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-sm);\n        }\n\n        .modifier-info {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-xs);\n        }\n\n        .modifier-actions {\n          justify-content: center;\n        }\n      }\n\n      @media (max-width: 480px) {\n        .card-title {\n          font-size: var(--font-size-lg);\n        }\n\n        .form-section h3 {\n          font-size: var(--font-size-md);\n        }\n\n        .attack-modifiers-container {\n          padding: var(--spacing-sm);\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private populateAttackModifiers(): void {\n    const modifiersList = document.getElementById('attack-modifiers-list');\n    if (!modifiersList) return;\n\n    if (Object.keys(this.attackModifiers).length === 0) {\n      modifiersList.innerHTML = `\n        <div class=\"empty-modifiers\">\n          <p>No attack modifiers defined</p>\n          <small>Add modifiers above to give this enemy unit bonuses against specific unit types</small>\n        </div>\n      `;\n      return;\n    }\n\n    modifiersList.innerHTML = Object.entries(this.attackModifiers)\n      .map(([unitType, bonus]) => `\n        <div class=\"modifier-item\" data-unit-type=\"${unitType}\">\n          <div class=\"modifier-info\">\n            <span class=\"modifier-type\">${unitType}</span>\n            <span class=\"modifier-value\">+${bonus.toLocaleString()} strength</span>\n          </div>\n          <div class=\"modifier-actions\">\n            <button type=\"button\" class=\"btn btn-xs btn-secondary edit-modifier-btn\" data-unit-type=\"${unitType}\">\n              ✏️ Edit\n            </button>\n            <button type=\"button\" class=\"btn btn-xs btn-danger remove-modifier-btn\" data-unit-type=\"${unitType}\">\n              🗑️ Remove\n            </button>\n          </div>\n        </div>\n      `).join('');\n\n    this.attachModifierEventListeners();\n  }\n\n  private attachEventListeners(): void {\n    const form = document.getElementById('enemy-unit-form') as HTMLFormElement;\n    const saveBtn = document.getElementById('save-btn');\n    const cancelBtn = document.getElementById('cancel-btn');\n    const deleteBtn = document.getElementById('delete-btn');\n    const addModifierBtn = document.getElementById('add-modifier-btn');\n\n    // Form submission\n    if (form) {\n      form.addEventListener('submit', this.handleSubmit.bind(this));\n    }\n\n    // Button actions\n    if (saveBtn) {\n      saveBtn.addEventListener('click', this.handleSubmit.bind(this));\n    }\n\n    if (cancelBtn) {\n      cancelBtn.addEventListener('click', this.handleCancel.bind(this));\n    }\n\n    if (deleteBtn) {\n      deleteBtn.addEventListener('click', this.handleDelete.bind(this));\n    }\n\n    if (addModifierBtn) {\n      addModifierBtn.addEventListener('click', this.handleAddModifier.bind(this));\n    }\n\n    // Real-time validation\n    this.addValidationListeners();\n\n    // Enter key for adding modifiers\n    const newModifierValue = document.getElementById('new-modifier-value');\n    if (newModifierValue) {\n      newModifierValue.addEventListener('keypress', (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          this.handleAddModifier();\n        }\n      });\n    }\n  }\n\n  private attachModifierEventListeners(): void {\n    // Edit modifier buttons\n    document.querySelectorAll('.edit-modifier-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const unitType = (e.target as HTMLElement).dataset.unitType;\n        if (unitType) {\n          this.handleEditModifier(unitType);\n        }\n      });\n    });\n\n    // Remove modifier buttons\n    document.querySelectorAll('.remove-modifier-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const unitType = (e.target as HTMLElement).dataset.unitType;\n        if (unitType) {\n          this.handleRemoveModifier(unitType);\n        }\n      });\n    });\n  }\n\n  private addValidationListeners(): void {\n    const fields = ['enemy-name', 'enemy-health', 'enemy-strength', 'enemy-unit-types'];\n    \n    fields.forEach(fieldId => {\n      const input = document.getElementById(fieldId) as HTMLInputElement;\n      if (input) {\n        input.addEventListener('blur', () => this.validateField(fieldId));\n        input.addEventListener('input', () => this.clearFieldError(fieldId));\n      }\n    });\n  }\n\n  private validateField(fieldId: string): boolean {\n    const input = document.getElementById(fieldId) as HTMLInputElement;\n    const errorElement = document.getElementById(`${fieldId}-error`);\n    \n    if (!input || !errorElement) return true;\n\n    let validation;\n    \n    switch (fieldId) {\n      case 'enemy-name':\n        validation = EnemyUnitValidationService.validateName(input.value);\n        break;\n      case 'enemy-health':\n        validation = EnemyUnitValidationService.validateHealth(parseInt(input.value));\n        break;\n      case 'enemy-strength':\n        validation = EnemyUnitValidationService.validateStrength(parseInt(input.value));\n        break;\n      case 'enemy-unit-types':\n        const types = input.value.split(',').map(t => t.trim()).filter(t => t);\n        validation = EnemyUnitValidationService.validateUnitTypes(types);\n        break;\n      default:\n        return true;\n    }\n\n    if (validation.isValid) {\n      input.classList.remove('error');\n      errorElement.textContent = '';\n      return true;\n    } else {\n      input.classList.add('error');\n      errorElement.textContent = validation.error || '';\n      return false;\n    }\n  }\n\n  private clearFieldError(fieldId: string): void {\n    const input = document.getElementById(fieldId) as HTMLInputElement;\n    const errorElement = document.getElementById(`${fieldId}-error`);\n    \n    if (input && errorElement) {\n      input.classList.remove('error');\n      errorElement.textContent = '';\n    }\n  }\n\n  private handleAddModifier(): void {\n    const typeInput = document.getElementById('new-modifier-type') as HTMLInputElement;\n    const valueInput = document.getElementById('new-modifier-value') as HTMLInputElement;\n\n    if (!typeInput || !valueInput) return;\n\n    const unitType = typeInput.value.trim();\n    const bonusValue = parseInt(valueInput.value);\n\n    // Validate inputs\n    if (!unitType) {\n      alert('Please enter a unit type');\n      typeInput.focus();\n      return;\n    }\n\n    if (isNaN(bonusValue) || bonusValue < 0) {\n      alert('Please enter a valid bonus value (0 or greater)');\n      valueInput.focus();\n      return;\n    }\n\n    // Check for duplicates\n    if (this.attackModifiers[unitType]) {\n      if (!confirm(`A modifier for \"${unitType}\" already exists. Replace it?`)) {\n        return;\n      }\n    }\n\n    // Add the modifier\n    this.attackModifiers[unitType] = bonusValue;\n\n    // Clear inputs\n    typeInput.value = '';\n    valueInput.value = '';\n\n    // Refresh the display\n    this.populateAttackModifiers();\n\n    // Focus back to type input for easy addition of more modifiers\n    typeInput.focus();\n  }\n\n  private handleEditModifier(unitType: string): void {\n    const currentValue = this.attackModifiers[unitType];\n    const newValue = prompt(`Edit strength bonus for \"${unitType}\":`, currentValue.toString());\n\n    if (newValue === null) return; // User cancelled\n\n    const parsedValue = parseInt(newValue);\n    if (isNaN(parsedValue) || parsedValue < 0) {\n      alert('Please enter a valid bonus value (0 or greater)');\n      return;\n    }\n\n    this.attackModifiers[unitType] = parsedValue;\n    this.populateAttackModifiers();\n  }\n\n  private handleRemoveModifier(unitType: string): void {\n    if (confirm(`Remove attack modifier for \"${unitType}\"?`)) {\n      delete this.attackModifiers[unitType];\n      this.populateAttackModifiers();\n    }\n  }\n\n  private handleSubmit(event: Event): void {\n    event.preventDefault();\n    \n    if (!this.validateForm()) {\n      return;\n    }\n\n    const enemyUnit = this.collectFormData();\n    if (enemyUnit) {\n      this.props.onSave(enemyUnit);\n    }\n  }\n\n  private handleCancel(): void {\n    if (this.hasUnsavedChanges()) {\n      if (confirm('You have unsaved changes. Are you sure you want to cancel?')) {\n        this.props.onCancel();\n      }\n    } else {\n      this.props.onCancel();\n    }\n  }\n\n  private handleDelete(): void {\n    if (!this.props.editingUnit) return;\n\n    const unitName = this.props.editingUnit.name;\n    if (confirm(`Are you sure you want to delete \"${unitName}\"? This action cannot be undone.`)) {\n      const result = this.storage.deleteUserEnemyUnit(this.props.editingUnit.id);\n      if (result.success) {\n        this.props.onCancel(); // Close the form after deletion\n      } else {\n        alert(`Failed to delete unit: ${result.error}`);\n      }\n    }\n  }\n\n  private validateForm(): boolean {\n    const fields = ['enemy-name', 'enemy-health', 'enemy-strength', 'enemy-unit-types'];\n    let isValid = true;\n\n    fields.forEach(fieldId => {\n      if (!this.validateField(fieldId)) {\n        isValid = false;\n      }\n    });\n\n    return isValid;\n  }\n\n  private collectFormData(): UserEnemyUnit | null {\n    try {\n      const nameInput = document.getElementById('enemy-name') as HTMLInputElement;\n      const healthInput = document.getElementById('enemy-health') as HTMLInputElement;\n      const strengthInput = document.getElementById('enemy-strength') as HTMLInputElement;\n      const unitTypesInput = document.getElementById('enemy-unit-types') as HTMLInputElement;\n\n      const name = nameInput.value.trim();\n      const health = parseInt(healthInput.value);\n      const strength = parseInt(strengthInput.value);\n      const unitTypes = unitTypesInput.value\n        .split(',')\n        .map(t => t.trim())\n        .filter(t => t);\n\n      // Convert attack modifiers back to array format\n      const attackModifiersArray = Object.keys(this.attackModifiers).length > 0\n        ? Object.entries(this.attackModifiers).map(([target_type, value]) => ({\n            target_type,\n            modifier_type: 'Strength' as const,\n            value\n          }))\n        : undefined;\n\n      const enemyUnit: UserEnemyUnit = {\n        id: this.props.editingUnit?.id || `user_enemy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        name,\n        unit_types: unitTypes,\n        health,\n        strength,\n        attack_modifiers: attackModifiersArray,\n        createdAt: this.props.editingUnit?.createdAt || new Date(),\n        modifiedAt: new Date()\n      };\n\n      // Final validation\n      const validation = EnemyUnitValidationService.validateUserEnemyUnit(enemyUnit);\n      if (!validation.isValid) {\n        alert(`Validation failed: ${validation.errors.join(', ')}`);\n        return null;\n      }\n\n      return enemyUnit;\n    } catch (error) {\n      console.error('Error collecting form data:', error);\n      alert('Error collecting form data. Please check your inputs.');\n      return null;\n    }\n  }\n\n  private hasUnsavedChanges(): boolean {\n    if (!this.props.editingUnit) {\n      // For new units, check if any fields have been filled\n      const nameInput = document.getElementById('enemy-name') as HTMLInputElement;\n      const healthInput = document.getElementById('enemy-health') as HTMLInputElement;\n      const strengthInput = document.getElementById('enemy-strength') as HTMLInputElement;\n\n      return !!(nameInput?.value.trim() || healthInput?.value || strengthInput?.value);\n    }\n\n    // For editing, compare current values with original\n    const currentData = this.collectFormData();\n    if (!currentData) return false;\n\n    const original = this.props.editingUnit;\n    return (\n      currentData.name !== original.name ||\n      currentData.health !== original.health ||\n      currentData.strength !== original.strength ||\n      JSON.stringify(currentData.unit_types) !== JSON.stringify(original.unit_types) ||\n      JSON.stringify(currentData.attack_modifiers) !== JSON.stringify(original.attack_modifiers)\n    );\n  }\n\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}","/**\n * Enemy Unit Manager component for viewing and managing user-created enemy units\n * Follows the established UI patterns from the existing codebase\n */\n\nimport { EnemyUnit, UserEnemyUnit } from '../../types/enemyUnits';\nimport { EnemyUnitStorageService } from '../../services/enemyUnitStorage';\nimport { EnemyUnitInputForm } from './EnemyUnitInputForm';\n\ninterface EnemyUnitManagerProps {\n  onClose?: () => void;\n  onUnitSelect?: (unit: UserEnemyUnit) => void;\n  mode: 'standalone' | 'embedded';\n}\n\nexport class EnemyUnitManager {\n  private container: HTMLElement | null = null;\n  private props: EnemyUnitManagerProps;\n  private storage: EnemyUnitStorageService;\n  private userUnits: UserEnemyUnit[] = [];\n  private filteredUnits: UserEnemyUnit[] = [];\n  private currentFilter: string = '';\n  private sortBy: 'name' | 'created' | 'modified' | 'health' | 'strength' = 'name';\n  private sortOrder: 'asc' | 'desc' = 'asc';\n  private selectedUnits: Set<string> = new Set();\n  private showingForm: boolean = false;\n  private editingUnit: UserEnemyUnit | null = null;\n\n  constructor(props: EnemyUnitManagerProps) {\n    this.props = props;\n    this.storage = new EnemyUnitStorageService();\n  }\n\n  public mount(container: HTMLElement): void {\n    this.container = container;\n    this.loadData();\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private loadData(): void {\n    this.userUnits = this.storage.getAllUserEnemyUnits();\n    this.updateFilteredUnits();\n  }\n\n  private updateFilteredUnits(): void {\n    let filtered = [...this.userUnits];\n\n    // Apply search filter\n    if (this.currentFilter.trim()) {\n      const lowerFilter = this.currentFilter.toLowerCase();\n      filtered = filtered.filter(unit =>\n        unit.name.toLowerCase().includes(lowerFilter) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(lowerFilter))\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let comparison = 0;\n      \n      switch (this.sortBy) {\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'created':\n          comparison = a.createdAt.getTime() - b.createdAt.getTime();\n          break;\n        case 'modified':\n          comparison = a.modifiedAt.getTime() - b.modifiedAt.getTime();\n          break;\n        case 'health':\n          comparison = a.health - b.health;\n          break;\n        case 'strength':\n          comparison = a.strength - b.strength;\n          break;\n      }\n\n      return this.sortOrder === 'desc' ? -comparison : comparison;\n    });\n\n    this.filteredUnits = filtered;\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    if (this.showingForm) {\n      this.renderForm();\n      return;\n    }\n\n    const isStandalone = this.props.mode === 'standalone';\n    const stats = this.storage.getStorageStats();\n\n    this.container.innerHTML = `\n      <div class=\"enemy-unit-manager ${isStandalone ? 'standalone' : 'embedded'}\">\n        ${isStandalone ? `\n          <div class=\"manager-header\">\n            <div class=\"header-content\">\n              <h1 class=\"manager-title\">\n                👤 Custom Enemy Units\n              </h1>\n              <p class=\"manager-subtitle\">\n                Manage your custom enemy units for battle simulations\n              </p>\n            </div>\n            ${this.props.onClose ? `\n              <button class=\"btn btn-secondary\" id=\"close-manager\">\n                ❌ Close\n              </button>\n            ` : ''}\n          </div>\n        ` : ''}\n        \n        <div class=\"manager-content\">\n          <!-- Statistics Panel -->\n          <div class=\"stats-panel\">\n            <div class=\"stats-grid\">\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">📊</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.totalUnits}</span>\n                  <span class=\"stat-label\">Total Units</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">💾</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${Math.round(stats.storageSize / 1024)}KB</span>\n                  <span class=\"stat-label\">Storage Used</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">📅</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.unitsCreatedToday}</span>\n                  <span class=\"stat-label\">Created Today</span>\n                </div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-icon\">🔄</div>\n                <div class=\"stat-info\">\n                  <span class=\"stat-value\">${stats.lastModified ? this.formatDate(stats.lastModified) : 'Never'}</span>\n                  <span class=\"stat-label\">Last Modified</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Controls Panel -->\n          <div class=\"controls-panel\">\n            <div class=\"controls-row\">\n              <div class=\"search-controls\">\n                <div class=\"search-input-group\">\n                  <input \n                    type=\"text\" \n                    id=\"unit-search\" \n                    class=\"form-input search-input\" \n                    placeholder=\"🔍 Search units...\"\n                    value=\"${this.currentFilter}\"\n                  >\n                  <button class=\"btn btn-secondary btn-sm\" id=\"clear-search\">\n                    ❌ Clear\n                  </button>\n                </div>\n              </div>\n              \n              <div class=\"action-controls\">\n                <button class=\"btn btn-success\" id=\"create-unit-btn\">\n                  ➕ Create New Unit\n                </button>\n                <div class=\"dropdown\" id=\"bulk-actions-dropdown\">\n                  <button class=\"btn btn-secondary dropdown-toggle\" id=\"bulk-actions-btn\" ${this.selectedUnits.size === 0 ? 'disabled' : ''}>\n                    📋 Bulk Actions (${this.selectedUnits.size})\n                  </button>\n                  <div class=\"dropdown-menu\">\n                    <button class=\"dropdown-item\" id=\"export-selected\">📤 Export Selected</button>\n                    <button class=\"dropdown-item\" id=\"delete-selected\">🗑️ Delete Selected</button>\n                  </div>\n                </div>\n                <div class=\"dropdown\" id=\"import-export-dropdown\">\n                  <button class=\"btn btn-secondary dropdown-toggle\" id=\"import-export-btn\">\n                    📁 Import/Export\n                  </button>\n                  <div class=\"dropdown-menu\">\n                    <button class=\"dropdown-item\" id=\"import-units\">📥 Import Units</button>\n                    <button class=\"dropdown-item\" id=\"export-all\">📤 Export All</button>\n                    <button class=\"dropdown-item\" id=\"clear-all\">🗑️ Clear All</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"controls-row\">\n              <div class=\"sort-controls\">\n                <label class=\"form-label\">Sort by:</label>\n                <select class=\"form-input sort-select\" id=\"sort-by\">\n                  <option value=\"name\" ${this.sortBy === 'name' ? 'selected' : ''}>Name</option>\n                  <option value=\"created\" ${this.sortBy === 'created' ? 'selected' : ''}>Date Created</option>\n                  <option value=\"modified\" ${this.sortBy === 'modified' ? 'selected' : ''}>Last Modified</option>\n                  <option value=\"health\" ${this.sortBy === 'health' ? 'selected' : ''}>Health</option>\n                  <option value=\"strength\" ${this.sortBy === 'strength' ? 'selected' : ''}>Strength</option>\n                </select>\n                <button class=\"btn btn-secondary btn-sm\" id=\"sort-order-btn\">\n                  ${this.sortOrder === 'asc' ? '⬆️ Ascending' : '⬇️ Descending'}\n                </button>\n              </div>\n              \n              <div class=\"selection-controls\">\n                <button class=\"btn btn-secondary btn-sm\" id=\"select-all\">\n                  ☑️ Select All\n                </button>\n                <button class=\"btn btn-secondary btn-sm\" id=\"select-none\" ${this.selectedUnits.size === 0 ? 'disabled' : ''}>\n                  ⬜ Select None\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Units List -->\n          <div class=\"units-list-container\">\n            <div class=\"units-list-header\">\n              <span class=\"results-info\">\n                Showing ${this.filteredUnits.length} of ${this.userUnits.length} units\n                ${this.selectedUnits.size > 0 ? `(${this.selectedUnits.size} selected)` : ''}\n              </span>\n            </div>\n            \n            <div class=\"units-list\" id=\"units-list\">\n              ${this.renderUnitsList()}\n            </div>\n          </div>\n        </div>\n        \n        <!-- Hidden file input for import -->\n        <input type=\"file\" id=\"import-file-input\" accept=\".json\" style=\"display: none;\">\n      </div>\n    `;\n\n    this.addStyles();\n  }\n\n  private renderForm(): void {\n    if (!this.container) return;\n\n    const formContainer = document.createElement('div');\n    this.container.innerHTML = '';\n    this.container.appendChild(formContainer);\n\n    const form = new EnemyUnitInputForm({\n      onSave: this.handleFormSave.bind(this),\n      onCancel: this.handleFormCancel.bind(this),\n      editingUnit: this.editingUnit,\n      mode: this.editingUnit ? 'edit' : 'create'\n    });\n\n    form.mount(formContainer);\n  }\n\n  private renderUnitsList(): string {\n    if (this.filteredUnits.length === 0) {\n      return `\n        <div class=\"empty-state\">\n          <div class=\"empty-icon\">👤</div>\n          <h3>No custom enemy units</h3>\n          <p>Create your first custom enemy unit to get started</p>\n          <button class=\"btn btn-primary\" id=\"create-first-unit\">\n            ➕ Create Your First Unit\n          </button>\n        </div>\n      `;\n    }\n\n    return this.filteredUnits.map(unit => {\n      const isSelected = this.selectedUnits.has(unit.id);\n      \n      return `\n        <div class=\"unit-item ${isSelected ? 'selected' : ''}\" data-unit-id=\"${unit.id}\">\n          <div class=\"unit-checkbox\">\n            <input \n              type=\"checkbox\" \n              class=\"unit-select-checkbox\" \n              data-unit-id=\"${unit.id}\"\n              ${isSelected ? 'checked' : ''}\n            >\n          </div>\n          \n          <div class=\"unit-content\">\n            <div class=\"unit-header\">\n              <div class=\"unit-basic-info\">\n                <h4 class=\"unit-name\">${unit.name}</h4>\n                <div class=\"unit-types\">\n                  ${unit.unit_types.map(type => `<span class=\"unit-type-tag\">${type}</span>`).join('')}\n                </div>\n              </div>\n              \n              <div class=\"unit-stats-summary\">\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">❤️</span>\n                  <span class=\"stat-value\">${unit.health.toLocaleString()}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">⚔️</span>\n                  <span class=\"stat-value\">${unit.strength.toLocaleString()}</span>\n                </div>\n                <div class=\"stat-item\">\n                  <span class=\"stat-icon\">📊</span>\n                  <span class=\"stat-value\">${(unit.strength / unit.health).toFixed(3)}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div class=\"unit-details\">\n              <div class=\"unit-meta\">\n                <span class=\"meta-item\">\n                  <span class=\"meta-label\">Created:</span>\n                  <span class=\"meta-value\">${this.formatDate(unit.createdAt)}</span>\n                </span>\n                <span class=\"meta-item\">\n                  <span class=\"meta-label\">Modified:</span>\n                  <span class=\"meta-value\">${this.formatDate(unit.modifiedAt)}</span>\n                </span>\n              </div>\n              \n              ${unit.attack_modifiers && unit.attack_modifiers.length > 0 ? `\n                <div class=\"unit-modifiers\">\n                  <span class=\"modifiers-label\">🎯 Attack Bonuses:</span>\n                  <div class=\"modifiers-list\">\n                    ${unit.attack_modifiers.map(mod => \n                      `<span class=\"modifier-tag\">+${mod.value.toLocaleString()} vs ${mod.target_type}</span>`\n                    ).join('')}\n                  </div>\n                </div>\n              ` : ''}\n            </div>\n          </div>\n          \n          <div class=\"unit-actions\">\n            ${this.props.onUnitSelect ? `\n              <button class=\"btn btn-primary btn-sm\" data-action=\"select\" data-unit-id=\"${unit.id}\">\n                👆 Select\n              </button>\n            ` : ''}\n            <button class=\"btn btn-secondary btn-sm\" data-action=\"edit\" data-unit-id=\"${unit.id}\">\n              ✏️ Edit\n            </button>\n            <button class=\"btn btn-warning btn-sm\" data-action=\"duplicate\" data-unit-id=\"${unit.id}\">\n              📋 Duplicate\n            </button>\n            <button class=\"btn btn-danger btn-sm\" data-action=\"delete\" data-unit-id=\"${unit.id}\">\n              🗑️ Delete\n            </button>\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  private addStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      .enemy-unit-manager {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .enemy-unit-manager.standalone {\n        max-width: 1200px;\n        margin: 0 auto;\n        padding: var(--spacing-lg);\n      }\n\n      .manager-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: var(--spacing-lg);\n        padding-bottom: var(--spacing-lg);\n        border-bottom: 2px solid var(--color-border);\n      }\n\n      .header-content h1 {\n        margin: 0 0 var(--spacing-xs) 0;\n        color: var(--color-text);\n        font-size: var(--font-size-2xl);\n      }\n\n      .header-content p {\n        margin: 0;\n        color: var(--color-text-secondary);\n        font-size: var(--font-size-sm);\n      }\n\n      .manager-content {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        gap: var(--spacing-lg);\n      }\n\n      /* Statistics Panel */\n      .stats-panel {\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        padding: var(--spacing-lg);\n        border: 1px solid var(--color-border);\n      }\n\n      .stats-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: var(--spacing-md);\n      }\n\n      .stat-card {\n        display: flex;\n        align-items: center;\n        gap: var(--spacing-md);\n        padding: var(--spacing-md);\n        background: var(--color-background);\n        border-radius: var(--radius-md);\n        border: 1px solid var(--color-border);\n      }\n\n      .stat-icon {\n        font-size: var(--font-size-xl);\n        width: 40px;\n        text-align: center;\n      }\n\n      .stat-info {\n        flex: 1;\n      }\n\n      .stat-value {\n        display: block;\n        font-size: var(--font-size-lg);\n        font-weight: 700;\n        color: var(--color-text);\n        line-height: 1.2;\n      }\n\n      .stat-label {\n        display: block;\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        margin-top: 2px;\n      }\n\n      /* Controls Panel */\n      .controls-panel {\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        padding: var(--spacing-lg);\n        border: 1px solid var(--color-border);\n      }\n\n      .controls-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        gap: var(--spacing-lg);\n        margin-bottom: var(--spacing-md);\n      }\n\n      .controls-row:last-child {\n        margin-bottom: 0;\n      }\n\n      .search-controls {\n        flex: 1;\n        max-width: 400px;\n      }\n\n      .search-input-group {\n        display: flex;\n        gap: var(--spacing-sm);\n      }\n\n      .search-input {\n        flex: 1;\n      }\n\n      .action-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .sort-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n        align-items: center;\n      }\n\n      .sort-controls .form-label {\n        margin: 0;\n        font-size: var(--font-size-sm);\n        white-space: nowrap;\n      }\n\n      .sort-select {\n        min-width: 150px;\n      }\n\n      .selection-controls {\n        display: flex;\n        gap: var(--spacing-sm);\n      }\n\n      /* Dropdown Styles */\n      .dropdown {\n        position: relative;\n        display: inline-block;\n      }\n\n      .dropdown-toggle {\n        cursor: pointer;\n      }\n\n      .dropdown-menu {\n        position: absolute;\n        top: 100%;\n        right: 0;\n        background: var(--color-background);\n        border: 1px solid var(--color-border);\n        border-radius: var(--radius-md);\n        box-shadow: var(--shadow-lg);\n        z-index: 100;\n        min-width: 180px;\n        display: none;\n      }\n\n      .dropdown.open .dropdown-menu {\n        display: block;\n      }\n\n      .dropdown-item {\n        display: block;\n        width: 100%;\n        padding: var(--spacing-sm) var(--spacing-md);\n        text-align: left;\n        background: none;\n        border: none;\n        color: var(--color-text);\n        cursor: pointer;\n        font-size: var(--font-size-sm);\n        transition: background-color var(--transition-fast);\n      }\n\n      .dropdown-item:hover {\n        background-color: var(--color-surface);\n      }\n\n      .dropdown-item:first-child {\n        border-radius: var(--radius-md) var(--radius-md) 0 0;\n      }\n\n      .dropdown-item:last-child {\n        border-radius: 0 0 var(--radius-md) var(--radius-md);\n      }\n\n      /* Units List */\n      .units-list-container {\n        flex: 1;\n        background: var(--color-surface);\n        border-radius: var(--radius-lg);\n        border: 1px solid var(--color-border);\n        display: flex;\n        flex-direction: column;\n        overflow: hidden;\n      }\n\n      .units-list-header {\n        padding: var(--spacing-md) var(--spacing-lg);\n        background: var(--color-background);\n        border-bottom: 1px solid var(--color-border);\n      }\n\n      .results-info {\n        font-size: var(--font-size-sm);\n        color: var(--color-text-secondary);\n        font-weight: 500;\n      }\n\n      .units-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: var(--spacing-md);\n      }\n\n      /* Unit Items */\n      .unit-item {\n        display: flex;\n        gap: var(--spacing-md);\n        padding: var(--spacing-md);\n        background: var(--color-background);\n        border: 2px solid var(--color-border);\n        border-radius: var(--radius-md);\n        margin-bottom: var(--spacing-md);\n        transition: all var(--transition-fast);\n      }\n\n      .unit-item:hover {\n        border-color: var(--color-primary);\n        box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n      }\n\n      .unit-item.selected {\n        border-color: var(--color-success);\n        background-color: rgba(34, 197, 94, 0.05);\n      }\n\n      .unit-checkbox {\n        display: flex;\n        align-items: flex-start;\n        padding-top: 2px;\n      }\n\n      .unit-select-checkbox {\n        width: 18px;\n        height: 18px;\n        cursor: pointer;\n      }\n\n      .unit-content {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .unit-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .unit-basic-info {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .unit-name {\n        margin: 0 0 var(--spacing-xs) 0;\n        font-size: var(--font-size-md);\n        color: var(--color-text);\n        font-weight: 600;\n      }\n\n      .unit-types {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .unit-type-tag {\n        background-color: var(--color-surface);\n        color: var(--color-text-secondary);\n        padding: 2px 8px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        border: 1px solid var(--color-border);\n      }\n\n      .unit-stats-summary {\n        display: flex;\n        gap: var(--spacing-md);\n        align-items: center;\n      }\n\n      .stat-item {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        font-size: var(--font-size-sm);\n      }\n\n      .stat-icon {\n        font-size: var(--font-size-sm);\n      }\n\n      .stat-value {\n        font-weight: 600;\n        color: var(--color-text);\n      }\n\n      .unit-details {\n        margin-top: var(--spacing-sm);\n        padding-top: var(--spacing-sm);\n        border-top: 1px solid var(--color-border);\n      }\n\n      .unit-meta {\n        display: flex;\n        gap: var(--spacing-lg);\n        margin-bottom: var(--spacing-sm);\n      }\n\n      .meta-item {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n      }\n\n      .meta-label {\n        font-weight: 500;\n      }\n\n      .unit-modifiers {\n        margin-top: var(--spacing-sm);\n      }\n\n      .modifiers-label {\n        font-size: var(--font-size-xs);\n        color: var(--color-text-secondary);\n        display: block;\n        margin-bottom: var(--spacing-xs);\n      }\n\n      .modifiers-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--spacing-xs);\n      }\n\n      .modifier-tag {\n        background-color: var(--color-warning);\n        color: white;\n        padding: 2px 6px;\n        border-radius: var(--radius-sm);\n        font-size: var(--font-size-xs);\n        font-weight: 500;\n      }\n\n      .unit-actions {\n        display: flex;\n        flex-direction: column;\n        gap: var(--spacing-xs);\n        align-items: stretch;\n        min-width: 120px;\n      }\n\n      .unit-actions .btn {\n        font-size: var(--font-size-xs);\n        padding: var(--spacing-xs) var(--spacing-sm);\n        white-space: nowrap;\n      }\n\n      /* Empty State */\n      .empty-state {\n        text-align: center;\n        padding: var(--spacing-xl);\n        color: var(--color-text-secondary);\n      }\n\n      .empty-icon {\n        font-size: 4rem;\n        margin-bottom: var(--spacing-lg);\n      }\n\n      .empty-state h3 {\n        margin: 0 0 var(--spacing-sm) 0;\n        color: var(--color-text);\n      }\n\n      .empty-state p {\n        margin: 0 0 var(--spacing-lg) 0;\n      }\n\n      /* Responsive Design */\n      @media (max-width: 768px) {\n        .enemy-unit-manager.standalone {\n          padding: var(--spacing-md);\n        }\n\n        .manager-header {\n          flex-direction: column;\n          gap: var(--spacing-md);\n          text-align: center;\n        }\n\n        .stats-grid {\n          grid-template-columns: repeat(2, 1fr);\n        }\n\n        .controls-row {\n          flex-direction: column;\n          align-items: stretch;\n          gap: var(--spacing-md);\n        }\n\n        .search-controls {\n          max-width: none;\n        }\n\n        .action-controls {\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n\n        .sort-controls {\n          flex-wrap: wrap;\n          justify-content: center;\n        }\n\n        .unit-item {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-header {\n          flex-direction: column;\n          gap: var(--spacing-sm);\n        }\n\n        .unit-stats-summary {\n          justify-content: space-around;\n        }\n\n        .unit-actions {\n          flex-direction: row;\n          min-width: auto;\n        }\n\n        .unit-actions .btn {\n          flex: 1;\n        }\n\n        .unit-meta {\n          flex-direction: column;\n          gap: var(--spacing-xs);\n        }\n      }\n\n      @media (max-width: 480px) {\n        .stats-grid {\n          grid-template-columns: 1fr;\n        }\n\n        .action-controls {\n          flex-direction: column;\n          align-items: stretch;\n        }\n\n        .selection-controls {\n          flex-direction: column;\n        }\n\n        .unit-actions {\n          flex-direction: column;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  private attachEventListeners(): void {\n    // Close button\n    const closeBtn = document.getElementById('close-manager');\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => this.props.onClose?.());\n    }\n\n    // Search\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.addEventListener('input', this.handleSearch.bind(this));\n    }\n\n    const clearSearchBtn = document.getElementById('clear-search');\n    if (clearSearchBtn) {\n      clearSearchBtn.addEventListener('click', this.handleClearSearch.bind(this));\n    }\n\n    // Create unit\n    const createBtn = document.getElementById('create-unit-btn');\n    if (createBtn) {\n      createBtn.addEventListener('click', this.handleCreateUnit.bind(this));\n    }\n\n    const createFirstBtn = document.getElementById('create-first-unit');\n    if (createFirstBtn) {\n      createFirstBtn.addEventListener('click', this.handleCreateUnit.bind(this));\n    }\n\n    // Sorting\n    const sortSelect = document.getElementById('sort-by') as HTMLSelectElement;\n    if (sortSelect) {\n      sortSelect.addEventListener('change', this.handleSortChange.bind(this));\n    }\n\n    const sortOrderBtn = document.getElementById('sort-order-btn');\n    if (sortOrderBtn) {\n      sortOrderBtn.addEventListener('click', this.handleSortOrderToggle.bind(this));\n    }\n\n    // Selection\n    const selectAllBtn = document.getElementById('select-all');\n    if (selectAllBtn) {\n      selectAllBtn.addEventListener('click', this.handleSelectAll.bind(this));\n    }\n\n    const selectNoneBtn = document.getElementById('select-none');\n    if (selectNoneBtn) {\n      selectNoneBtn.addEventListener('click', this.handleSelectNone.bind(this));\n    }\n\n    // Checkboxes\n    document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n      checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));\n    });\n\n    // Unit actions\n    document.querySelectorAll('[data-action]').forEach(btn => {\n      btn.addEventListener('click', this.handleUnitAction.bind(this));\n    });\n\n    // Dropdown toggles\n    this.attachDropdownListeners();\n\n    // Import/Export actions\n    this.attachImportExportListeners();\n  }\n\n  private attachDropdownListeners(): void {\n    document.querySelectorAll('.dropdown-toggle').forEach(toggle => {\n      toggle.addEventListener('click', (e) => {\n        e.stopPropagation();\n        const dropdown = toggle.closest('.dropdown');\n        if (dropdown) {\n          // Close other dropdowns\n          document.querySelectorAll('.dropdown.open').forEach(other => {\n            if (other !== dropdown) {\n              other.classList.remove('open');\n            }\n          });\n          // Toggle current dropdown\n          dropdown.classList.toggle('open');\n        }\n      });\n    });\n\n    // Close dropdowns when clicking outside\n    document.addEventListener('click', () => {\n      document.querySelectorAll('.dropdown.open').forEach(dropdown => {\n        dropdown.classList.remove('open');\n      });\n    });\n  }\n\n  private attachImportExportListeners(): void {\n    // Import units\n    const importBtn = document.getElementById('import-units');\n    if (importBtn) {\n      importBtn.addEventListener('click', this.handleImportUnits.bind(this));\n    }\n\n    // Export all\n    const exportAllBtn = document.getElementById('export-all');\n    if (exportAllBtn) {\n      exportAllBtn.addEventListener('click', this.handleExportAll.bind(this));\n    }\n\n    // Export selected\n    const exportSelectedBtn = document.getElementById('export-selected');\n    if (exportSelectedBtn) {\n      exportSelectedBtn.addEventListener('click', this.handleExportSelected.bind(this));\n    }\n\n    // Delete selected\n    const deleteSelectedBtn = document.getElementById('delete-selected');\n    if (deleteSelectedBtn) {\n      deleteSelectedBtn.addEventListener('click', this.handleDeleteSelected.bind(this));\n    }\n\n    // Clear all\n    const clearAllBtn = document.getElementById('clear-all');\n    if (clearAllBtn) {\n      clearAllBtn.addEventListener('click', this.handleClearAll.bind(this));\n    }\n\n    // File input for import\n    const fileInput = document.getElementById('import-file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.addEventListener('change', this.handleFileImport.bind(this));\n    }\n  }\n\n  private formatDate(date: Date): string {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) {\n      return 'Today';\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 7) {\n      return `${diffDays} days ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  }\n\n  private handleFormSave(unit: UserEnemyUnit): void {\n    if (this.editingUnit) {\n      // Update existing unit\n      const result = this.storage.updateUserEnemyUnit(this.editingUnit.id, unit);\n      if (result.success) {\n        this.showingForm = false;\n        this.editingUnit = null;\n        this.loadData();\n        this.render();\n        this.attachEventListeners();\n      } else {\n        alert(`Failed to update unit: ${result.error}`);\n      }\n    } else {\n      // Create new unit\n      const result = this.storage.addUserEnemyUnit(unit);\n      if (result.success) {\n        this.showingForm = false;\n        this.loadData();\n        this.render();\n        this.attachEventListeners();\n      } else {\n        alert(`Failed to create unit: ${result.error}`);\n      }\n    }\n  }\n\n  private handleFormCancel(): void {\n    this.showingForm = false;\n    this.editingUnit = null;\n    this.render();\n    this.attachEventListeners();\n  }\n\n  private handleSearch(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    this.currentFilter = input.value;\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleClearSearch(): void {\n    this.currentFilter = '';\n    const searchInput = document.getElementById('unit-search') as HTMLInputElement;\n    if (searchInput) {\n      searchInput.value = '';\n    }\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleCreateUnit(): void {\n    this.showingForm = true;\n    this.editingUnit = null;\n    this.render();\n  }\n\n  private handleSortChange(event: Event): void {\n    const select = event.target as HTMLSelectElement;\n    this.sortBy = select.value as any;\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n  }\n\n  private handleSortOrderToggle(): void {\n    this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    this.updateFilteredUnits();\n    this.refreshUnitsList();\n    \n    // Update button text\n    const btn = document.getElementById('sort-order-btn');\n    if (btn) {\n      btn.textContent = this.sortOrder === 'asc' ? '⬆️ Ascending' : '⬇️ Descending';\n    }\n  }\n\n  private handleSelectAll(): void {\n    this.selectedUnits.clear();\n    this.filteredUnits.forEach(unit => {\n      this.selectedUnits.add(unit.id);\n    });\n    this.refreshSelectionUI();\n  }\n\n  private handleSelectNone(): void {\n    this.selectedUnits.clear();\n    this.refreshSelectionUI();\n  }\n\n  private handleCheckboxChange(event: Event): void {\n    const checkbox = event.target as HTMLInputElement;\n    const unitId = checkbox.dataset.unitId;\n    \n    if (unitId) {\n      if (checkbox.checked) {\n        this.selectedUnits.add(unitId);\n      } else {\n        this.selectedUnits.delete(unitId);\n      }\n      this.refreshSelectionUI();\n    }\n  }\n\n  private handleUnitAction(event: Event): void {\n    const btn = event.target as HTMLElement;\n    const action = btn.dataset.action;\n    const unitId = btn.dataset.unitId;\n    \n    if (!action || !unitId) return;\n\n    const unit = this.userUnits.find(u => u.id === unitId);\n    if (!unit) return;\n\n    switch (action) {\n      case 'select':\n        this.props.onUnitSelect?.(unit);\n        break;\n      case 'edit':\n        this.editingUnit = unit;\n        this.showingForm = true;\n        this.render();\n        break;\n      case 'duplicate':\n        this.handleDuplicateUnit(unit);\n        break;\n      case 'delete':\n        this.handleDeleteUnit(unit);\n        break;\n    }\n  }\n\n  private handleDuplicateUnit(unit: UserEnemyUnit): void {\n    const duplicateName = `${unit.name} (Copy)`;\n    const duplicateUnit: EnemyUnit = {\n      name: duplicateName,\n      unit_types: [...unit.unit_types],\n      health: unit.health,\n      strength: unit.strength,\n      attack_modifiers: unit.attack_modifiers ? [...unit.attack_modifiers] : undefined\n    };\n\n    const result = this.storage.addUserEnemyUnit(duplicateUnit);\n    if (result.success) {\n      this.loadData();\n      this.refreshUnitsList();\n    } else {\n      alert(`Failed to duplicate unit: ${result.error}`);\n    }\n  }\n\n  private handleDeleteUnit(unit: UserEnemyUnit): void {\n    if (confirm(`Are you sure you want to delete \"${unit.name}\"? This action cannot be undone.`)) {\n      const result = this.storage.deleteUserEnemyUnit(unit.id);\n      if (result.success) {\n        this.selectedUnits.delete(unit.id);\n        this.loadData();\n        this.refreshUnitsList();\n      } else {\n        alert(`Failed to delete unit: ${result.error}`);\n      }\n    }\n  }\n\n  private handleImportUnits(): void {\n    const fileInput = document.getElementById('import-file-input') as HTMLInputElement;\n    if (fileInput) {\n      fileInput.click();\n    }\n  }\n\n  private handleFileImport(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    const file = input.files?.[0];\n    \n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const jsonData = e.target?.result as string;\n        const result = this.storage.importUserEnemyUnits(jsonData, { skipDuplicates: true });\n        \n        if (result.success) {\n          let message = `Successfully imported ${result.imported} units.`;\n          if (result.skipped && result.skipped > 0) {\n            message += ` ${result.skipped} units were skipped.`;\n          }\n          if (result.errors && result.errors.length > 0) {\n            message += `\\n\\nErrors:\\n${result.errors.join('\\n')}`;\n          }\n          alert(message);\n          \n          this.loadData();\n          this.refreshUnitsList();\n        } else {\n          alert(`Import failed: ${result.errors?.join(', ') || 'Unknown error'}`);\n        }\n      } catch (error) {\n        alert('Failed to read file. Please ensure it\\'s a valid JSON file.');\n      }\n    };\n    \n    reader.readAsText(file);\n    input.value = ''; // Reset file input\n  }\n\n  private handleExportAll(): void {\n    const result = this.storage.exportUserEnemyUnits();\n    if (result.success && result.data) {\n      this.downloadJson(result.data, 'enemy-units-export.json');\n    } else {\n      alert(`Export failed: ${result.error}`);\n    }\n  }\n\n  private handleExportSelected(): void {\n    if (this.selectedUnits.size === 0) {\n      alert('No units selected for export.');\n      return;\n    }\n\n    const selectedUnitsList = this.userUnits.filter(unit => this.selectedUnits.has(unit.id));\n    const exportData = {\n      version: '1.0',\n      exportDate: new Date().toISOString(),\n      units: selectedUnitsList.map(unit => ({\n        name: unit.name,\n        unit_types: unit.unit_types,\n        health: unit.health,\n        strength: unit.strength,\n        attack_modifiers: unit.attack_modifiers,\n        createdAt: unit.createdAt.toISOString(),\n        modifiedAt: unit.modifiedAt.toISOString()\n      }))\n    };\n\n    const jsonData = JSON.stringify(exportData, null, 2);\n    this.downloadJson(jsonData, `enemy-units-selected-${this.selectedUnits.size}.json`);\n  }\n\n  private handleDeleteSelected(): void {\n    if (this.selectedUnits.size === 0) {\n      alert('No units selected for deletion.');\n      return;\n    }\n\n    const count = this.selectedUnits.size;\n    if (confirm(`Are you sure you want to delete ${count} selected unit${count > 1 ? 's' : ''}? This action cannot be undone.`)) {\n      let deletedCount = 0;\n      const errors: string[] = [];\n\n      this.selectedUnits.forEach(unitId => {\n        const result = this.storage.deleteUserEnemyUnit(unitId);\n        if (result.success) {\n          deletedCount++;\n        } else {\n          errors.push(`Failed to delete unit: ${result.error}`);\n        }\n      });\n\n      this.selectedUnits.clear();\n      this.loadData();\n      this.refreshUnitsList();\n\n      let message = `Successfully deleted ${deletedCount} unit${deletedCount > 1 ? 's' : ''}.`;\n      if (errors.length > 0) {\n        message += `\\n\\nErrors:\\n${errors.join('\\n')}`;\n      }\n      alert(message);\n    }\n  }\n\n  private handleClearAll(): void {\n    if (this.userUnits.length === 0) {\n      alert('No units to clear.');\n      return;\n    }\n\n    if (confirm(`Are you sure you want to delete ALL ${this.userUnits.length} custom enemy units? This action cannot be undone.`)) {\n      const result = this.storage.clearAllUserEnemyUnits();\n      if (result.success) {\n        this.selectedUnits.clear();\n        this.loadData();\n        this.refreshUnitsList();\n        alert('All custom enemy units have been deleted.');\n      } else {\n        alert(`Failed to clear units: ${result.error}`);\n      }\n    }\n  }\n\n  private downloadJson(data: string, filename: string): void {\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  private refreshUnitsList(): void {\n    const unitsList = document.getElementById('units-list');\n    if (unitsList) {\n      unitsList.innerHTML = this.renderUnitsList();\n      \n      // Re-attach event listeners for new elements\n      document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n        checkbox.addEventListener('change', this.handleCheckboxChange.bind(this));\n      });\n\n      document.querySelectorAll('[data-action]').forEach(btn => {\n        btn.addEventListener('click', this.handleUnitAction.bind(this));\n      });\n    }\n\n    // Update results info\n    const resultsInfo = document.querySelector('.results-info');\n    if (resultsInfo) {\n      resultsInfo.textContent = `Showing ${this.filteredUnits.length} of ${this.userUnits.length} units${this.selectedUnits.size > 0 ? ` (${this.selectedUnits.size} selected)` : ''}`;\n    }\n  }\n\n  private refreshSelectionUI(): void {\n    // Update checkboxes\n    document.querySelectorAll('.unit-select-checkbox').forEach(checkbox => {\n      const input = checkbox as HTMLInputElement;\n      const unitId = input.dataset.unitId;\n      if (unitId) {\n        input.checked = this.selectedUnits.has(unitId);\n      }\n    });\n\n    // Update unit item selection styling\n    document.querySelectorAll('.unit-item').forEach(item => {\n      const unitId = (item as HTMLElement).dataset.unitId;\n      if (unitId) {\n        if (this.selectedUnits.has(unitId)) {\n          item.classList.add('selected');\n        } else {\n          item.classList.remove('selected');\n        }\n      }\n    });\n\n    // Update bulk actions button\n    const bulkActionsBtn = document.getElementById('bulk-actions-btn');\n    if (bulkActionsBtn) {\n      bulkActionsBtn.textContent = `📋 Bulk Actions (${this.selectedUnits.size})`;\n      (bulkActionsBtn as HTMLButtonElement).disabled = this.selectedUnits.size === 0;\n    }\n\n    // Update select none button\n    const selectNoneBtn = document.getElementById('select-none');\n    if (selectNoneBtn) {\n      (selectNoneBtn as HTMLButtonElement).disabled = this.selectedUnits.size === 0;\n    }\n\n    // Update results info\n    const resultsInfo = document.querySelector('.results-info');\n    if (resultsInfo) {\n      resultsInfo.textContent = `Showing ${this.filteredUnits.length} of ${this.userUnits.length} units${this.selectedUnits.size > 0 ? ` (${this.selectedUnits.size} selected)` : ''}`;\n    }\n  }\n\n  public unmount(): void {\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}","/**\n * Mobile utility functions for responsive behavior and touch interactions\n */\n\nexport interface BreakpointConfig {\n  mobileSmall: number;\n  mobileLarge: number;\n  tabletSmall: number;\n  tabletLarge: number;\n  desktop: number;\n}\n\nexport const BREAKPOINTS: BreakpointConfig = {\n  mobileSmall: 320,\n  mobileLarge: 480,\n  tabletSmall: 768,\n  tabletLarge: 1024,\n  desktop: 1200,\n};\n\nexport type LayoutMode = 'mobile' | 'tablet' | 'desktop';\n\n/**\n * Mobile detection and layout utilities\n */\nexport class MobileLayoutManager {\n  private currentMode: LayoutMode = 'desktop';\n  private listeners: Array<(mode: LayoutMode) => void> = [];\n\n  constructor() {\n    this.updateLayoutMode();\n    this.setupResizeListener();\n  }\n\n  /**\n   * Get current layout mode based on screen width\n   */\n  getCurrentMode(): LayoutMode {\n    return this.currentMode;\n  }\n\n  /**\n   * Check if current layout is mobile\n   */\n  isMobile(): boolean {\n    return this.currentMode === 'mobile';\n  }\n\n  /**\n   * Check if current layout is tablet\n   */\n  isTablet(): boolean {\n    return this.currentMode === 'tablet';\n  }\n\n  /**\n   * Check if current layout is desktop\n   */\n  isDesktop(): boolean {\n    return this.currentMode === 'desktop';\n  }\n\n  /**\n   * Check if device has touch capability\n   */\n  isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n  }\n\n  /**\n   * Get current viewport width\n   */\n  getViewportWidth(): number {\n    return window.innerWidth;\n  }\n\n  /**\n   * Add listener for layout mode changes\n   */\n  addLayoutChangeListener(callback: (mode: LayoutMode) => void): void {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * Remove layout change listener\n   */\n  removeLayoutChangeListener(callback: (mode: LayoutMode) => void): void {\n    const index = this.listeners.indexOf(callback);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Update layout mode based on current viewport\n   */\n  private updateLayoutMode(): void {\n    const width = this.getViewportWidth();\n    let newMode: LayoutMode;\n\n    if (width < BREAKPOINTS.tabletSmall) {\n      newMode = 'mobile';\n    } else if (width < BREAKPOINTS.tabletLarge) {\n      newMode = 'tablet';\n    } else {\n      newMode = 'desktop';\n    }\n\n    if (newMode !== this.currentMode) {\n      this.currentMode = newMode;\n      this.notifyListeners();\n    }\n  }\n\n  /**\n   * Setup resize listener for responsive behavior\n   */\n  private setupResizeListener(): void {\n    let resizeTimeout: number;\n    \n    window.addEventListener('resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = window.setTimeout(() => {\n        this.updateLayoutMode();\n      }, 150);\n    });\n  }\n\n  /**\n   * Notify all listeners of layout change\n   */\n  private notifyListeners(): void {\n    this.listeners.forEach(callback => callback(this.currentMode));\n  }\n}\n\n/**\n * Touch interaction utilities\n */\nexport class TouchInteractionManager {\n  /**\n   * Add swipe gesture support to an element\n   */\n  static addSwipeSupport(\n    element: HTMLElement,\n    onSwipeLeft?: () => void,\n    onSwipeRight?: () => void,\n    threshold: number = 50\n  ): void {\n    if (!('ontouchstart' in window)) return;\n\n    let startX: number = 0;\n    let startY: number = 0;\n    let startTime: number = 0;\n\n    element.addEventListener('touchstart', (e) => {\n      const touch = e.touches[0];\n      startX = touch.clientX;\n      startY = touch.clientY;\n      startTime = Date.now();\n    }, { passive: true });\n\n    element.addEventListener('touchend', (e) => {\n      if (e.changedTouches.length === 0) return;\n\n      const touch = e.changedTouches[0];\n      const endX = touch.clientX;\n      const endY = touch.clientY;\n      const endTime = Date.now();\n\n      const deltaX = endX - startX;\n      const deltaY = endY - startY;\n      const deltaTime = endTime - startTime;\n\n      // Check if it's a valid swipe (not too slow, not too vertical)\n      if (deltaTime < 500 && Math.abs(deltaX) > threshold && Math.abs(deltaY) < Math.abs(deltaX) * 0.5) {\n        if (deltaX > 0 && onSwipeRight) {\n          e.preventDefault();\n          onSwipeRight();\n        } else if (deltaX < 0 && onSwipeLeft) {\n          e.preventDefault();\n          onSwipeLeft();\n        }\n      }\n    }, { passive: false });\n  }\n  /**\n   * Add touch-friendly event listeners to an element\n   */\n  static addTouchSupport(element: HTMLElement, callback: () => void): void {\n    // Add both click and touch events for better compatibility\n    element.addEventListener('click', callback);\n    \n    if ('ontouchstart' in window) {\n      let touchStartTime: number;\n      \n      element.addEventListener('touchstart', (e) => {\n        touchStartTime = Date.now();\n        element.classList.add('touch-active');\n      });\n      \n      element.addEventListener('touchend', (e) => {\n        element.classList.remove('touch-active');\n        \n        // Only trigger if it was a quick tap (not a scroll)\n        if (Date.now() - touchStartTime < 200) {\n          e.preventDefault();\n          callback();\n        }\n      });\n      \n      element.addEventListener('touchcancel', () => {\n        element.classList.remove('touch-active');\n      });\n    }\n  }\n\n  /**\n   * Optimize scrollable element for mobile\n   */\n  static optimizeScrolling(element: HTMLElement): void {\n    // Add momentum scrolling for iOS\n    element.style.webkitOverflowScrolling = 'touch';\n    element.style.scrollBehavior = 'smooth';\n    \n    // Add scroll indicators\n    element.classList.add('scroll-momentum');\n  }\n\n  /**\n   * Add haptic feedback simulation (visual feedback)\n   */\n  static addHapticFeedback(element: HTMLElement): void {\n    element.addEventListener('touchstart', () => {\n      element.style.transform = 'scale(0.98)';\n      element.style.transition = 'transform 0.1s ease';\n    });\n\n    element.addEventListener('touchend', () => {\n      element.style.transform = 'scale(1)';\n    });\n\n    element.addEventListener('touchcancel', () => {\n      element.style.transform = 'scale(1)';\n    });\n  }\n\n  /**\n   * Add pull-to-refresh functionality\n   */\n  static addPullToRefresh(\n    container: HTMLElement,\n    onRefresh: () => Promise<void>,\n    threshold: number = 80\n  ): void {\n    if (!('ontouchstart' in window)) return;\n\n    let startY: number = 0;\n    let currentY: number = 0;\n    let isRefreshing: boolean = false;\n    let refreshIndicator: HTMLElement | null = null;\n\n    // Create refresh indicator\n    const createRefreshIndicator = () => {\n      if (refreshIndicator) return;\n\n      refreshIndicator = document.createElement('div');\n      refreshIndicator.className = 'pull-refresh-indicator';\n      refreshIndicator.innerHTML = `\n        <div class=\"refresh-spinner\"></div>\n        <span class=\"refresh-text\">Pull to refresh</span>\n      `;\n      container.insertBefore(refreshIndicator, container.firstChild);\n    };\n\n    container.addEventListener('touchstart', (e) => {\n      if (container.scrollTop === 0 && !isRefreshing) {\n        startY = e.touches[0].clientY;\n        createRefreshIndicator();\n      }\n    }, { passive: true });\n\n    container.addEventListener('touchmove', (e) => {\n      if (container.scrollTop === 0 && !isRefreshing && refreshIndicator) {\n        currentY = e.touches[0].clientY;\n        const pullDistance = Math.max(0, currentY - startY);\n\n        if (pullDistance > 0) {\n          e.preventDefault();\n          const progress = Math.min(pullDistance / threshold, 1);\n          refreshIndicator.style.transform = `translateY(${pullDistance * 0.5}px)`;\n          refreshIndicator.style.opacity = progress.toString();\n\n          if (pullDistance > threshold) {\n            refreshIndicator.querySelector('.refresh-text')!.textContent = 'Release to refresh';\n          } else {\n            refreshIndicator.querySelector('.refresh-text')!.textContent = 'Pull to refresh';\n          }\n        }\n      }\n    }, { passive: false });\n\n    container.addEventListener('touchend', async () => {\n      if (refreshIndicator && !isRefreshing) {\n        const pullDistance = currentY - startY;\n\n        if (pullDistance > threshold) {\n          isRefreshing = true;\n          refreshIndicator.querySelector('.refresh-text')!.textContent = 'Refreshing...';\n          refreshIndicator.querySelector('.refresh-spinner')!.classList.add('spinning');\n\n          try {\n            await onRefresh();\n          } finally {\n            isRefreshing = false;\n            if (refreshIndicator) {\n              refreshIndicator.style.transform = 'translateY(-100%)';\n              refreshIndicator.style.opacity = '0';\n              setTimeout(() => {\n                if (refreshIndicator && refreshIndicator.parentNode) {\n                  refreshIndicator.parentNode.removeChild(refreshIndicator);\n                  refreshIndicator = null;\n                }\n              }, 300);\n            }\n          }\n        } else {\n          refreshIndicator.style.transform = 'translateY(-100%)';\n          refreshIndicator.style.opacity = '0';\n          setTimeout(() => {\n            if (refreshIndicator && refreshIndicator.parentNode) {\n              refreshIndicator.parentNode.removeChild(refreshIndicator);\n              refreshIndicator = null;\n            }\n          }, 300);\n        }\n      }\n    });\n  }\n}\n\n/**\n * Mobile-specific CSS utilities\n */\nexport class MobileCSSManager {\n  /**\n   * Add mobile-specific CSS classes to body based on current layout\n   */\n  static updateBodyClasses(layoutManager: MobileLayoutManager): void {\n    const body = document.body;\n    \n    // Remove existing layout classes\n    body.classList.remove('layout-mobile', 'layout-tablet', 'layout-desktop');\n    \n    // Add current layout class\n    body.classList.add(`layout-${layoutManager.getCurrentMode()}`);\n    \n    // Add touch device class if applicable\n    if (layoutManager.isTouchDevice()) {\n      body.classList.add('touch-device');\n    }\n  }\n\n  /**\n   * Apply mobile-optimized styles to combat logs\n   */\n  static optimizeCombatLogs(): void {\n    const combatLogs = document.querySelectorAll('.combat-log');\n    \n    combatLogs.forEach(log => {\n      if (log instanceof HTMLElement) {\n        TouchInteractionManager.optimizeScrolling(log);\n      }\n    });\n  }\n\n  /**\n   * Apply mobile-optimized styles to unit cards\n   */\n  static optimizeUnitCards(): void {\n    const unitCards = document.querySelectorAll('.unit-card');\n    \n    unitCards.forEach(card => {\n      if (card instanceof HTMLElement) {\n        TouchInteractionManager.addHapticFeedback(card);\n      }\n    });\n  }\n}\n\n// Global mobile layout manager instance\nexport const mobileLayoutManager = new MobileLayoutManager();\n\n// Auto-update body classes when layout changes\nmobileLayoutManager.addLayoutChangeListener(() => {\n  MobileCSSManager.updateBodyClasses(mobileLayoutManager);\n});\n\n// Initialize body classes\nMobileCSSManager.updateBodyClasses(mobileLayoutManager);\n","/**\n * Responsive navigation manager for hybrid layout approach\n * Handles desktop, tablet, and mobile navigation patterns\n */\n\nimport { mobileLayoutManager, LayoutMode, TouchInteractionManager } from './mobileUtils';\n\nexport interface NavigationSection {\n  id: string;\n  title: string;\n  icon: string;\n  element: HTMLElement | null;\n  isAvailable: boolean;  // Whether the section has content and can be accessed\n  isCollapsed?: boolean;\n}\n\nexport class ResponsiveNavigationManager {\n  private sections: NavigationSection[] = [];\n  private currentActiveSection: string | null = null;\n  private tabContainer: HTMLElement | null = null;\n  private initialized = false;\n\n  constructor() {\n    this.setupLayoutListener();\n  }\n\n  /**\n   * Initialize the navigation system\n   */\n  public initialize(): void {\n    if (this.initialized) return;\n\n    this.identifySections();\n    this.createNavigationElements();\n    this.setupInitialLayout();\n    this.initialized = true;\n  }\n\n  /**\n   * Identify main sections in the app\n   */\n  private identifySections(): void {\n    this.sections = [\n      {\n        id: 'config-section',\n        title: 'Configuration',\n        icon: '⚙️',\n        element: document.getElementById('config-section'),\n        isAvailable: true,\n        isCollapsed: false\n      },\n      {\n        id: 'results-section',\n        title: 'Results',\n        icon: '🎯',\n        element: document.getElementById('results-section'),\n        isAvailable: false,\n        isCollapsed: false\n      },\n      {\n        id: 'battle-simulation-container',\n        title: 'Battle Simulation',\n        icon: '⚔️',\n        element: document.getElementById('battle-simulation-container'),\n        isAvailable: false,\n        isCollapsed: false\n      }\n    ];\n  }\n\n  /**\n   * Create navigation elements for different layouts\n   */\n  private createNavigationElements(): void {\n    this.createMobileTabNavigation();\n    this.createTabletCollapsibleHeaders();\n  }\n\n  /**\n   * Create mobile tab navigation\n   */\n  private createMobileTabNavigation(): void {\n    const mainContent = document.querySelector('.main-content');\n    if (!mainContent) return;\n\n    // Create tab container\n    const tabContainer = document.createElement('div');\n    tabContainer.className = 'mobile-tab-navigation mobile-only';\n    tabContainer.innerHTML = `\n      <div class=\"tab-nav-container\">\n        ${this.sections.map(section => `\n          <button class=\"tab-nav-item ${section.id === 'config-section' ? 'active' : ''}\" \n                  data-section=\"${section.id}\">\n            <span class=\"tab-icon\">${section.icon}</span>\n            <span class=\"tab-label\">${section.title}</span>\n          </button>\n        `).join('')}\n      </div>\n    `;\n\n    // Insert before main content\n    mainContent.parentNode?.insertBefore(tabContainer, mainContent);\n    this.tabContainer = tabContainer;\n\n    // Add event listeners\n    this.attachTabListeners();\n\n    // Add swipe support for mobile\n    this.addSwipeSupport();\n  }\n\n  /**\n   * Create tablet collapsible headers\n   */\n  private createTabletCollapsibleHeaders(): void {\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Create collapsible header\n      const header = document.createElement('div');\n      header.className = 'collapsible-header tablet-only';\n      header.innerHTML = `\n        <div class=\"collapsible-title\">\n          <span class=\"section-icon\">${section.icon}</span>\n          <h2>${section.title}</h2>\n          <span class=\"collapse-indicator\">▼</span>\n        </div>\n      `;\n\n      // Insert header before section content\n      section.element.insertBefore(header, section.element.firstChild);\n\n      // Add click listener\n      header.addEventListener('click', () => {\n        this.toggleSectionCollapse(section.id);\n      });\n    });\n  }\n\n  /**\n   * Setup initial layout based on current screen size\n   */\n  private setupInitialLayout(): void {\n    const currentMode = mobileLayoutManager.getCurrentMode();\n    this.applyLayoutMode(currentMode);\n\n    // Initialize tab visibility\n    this.updateTabVisibility();\n  }\n\n  /**\n   * Apply layout mode\n   */\n  private applyLayoutMode(mode: LayoutMode): void {\n    switch (mode) {\n      case 'mobile':\n        this.applyMobileLayout();\n        break;\n      case 'tablet':\n        this.applyTabletLayout();\n        break;\n      case 'desktop':\n        this.applyDesktopLayout();\n        break;\n    }\n  }\n\n  /**\n   * Apply mobile layout (tab navigation)\n   */\n  private applyMobileLayout(): void {\n    // Show only active section, hide others (but don't change isVisible for available sections)\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      if (section.id === this.currentActiveSection ||\n          (this.currentActiveSection === null && section.id === 'config-section')) {\n        section.element.classList.remove('hidden');\n        // Don't change isVisible - it tracks actual availability, not display state\n      } else {\n        section.element.classList.add('hidden');\n        // Don't change isVisible - it tracks actual availability, not display state\n      }\n    });\n\n    // Update tab active state\n    this.updateTabActiveState();\n  }\n\n  /**\n   * Apply tablet layout (collapsible sections)\n   */\n  private applyTabletLayout(): void {\n    // Show all available sections but allow collapsing\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Only show sections that are available\n      if (section.isAvailable) {\n        section.element.classList.remove('hidden');\n      } else {\n        section.element.classList.add('hidden');\n      }\n\n      // Apply collapsed state if needed\n      if (section.isCollapsed) {\n        section.element.classList.add('collapsed');\n      } else {\n        section.element.classList.remove('collapsed');\n      }\n    });\n  }\n\n  /**\n   * Apply desktop layout (current layout)\n   */\n  private applyDesktopLayout(): void {\n    // Show all available sections, remove any mobile/tablet specific classes\n    this.sections.forEach(section => {\n      if (!section.element) return;\n\n      // Only show sections that are available\n      if (section.isAvailable) {\n        section.element.classList.remove('hidden', 'collapsed');\n      } else {\n        section.element.classList.add('hidden');\n      }\n      section.isCollapsed = false;\n    });\n  }\n\n  /**\n   * Switch to section (mobile)\n   */\n  public switchToSection(sectionId: string): void {\n    this.currentActiveSection = sectionId;\n\n    if (mobileLayoutManager.isMobile()) {\n      this.applyMobileLayout();\n    }\n  }\n\n  /**\n   * Toggle section collapse (tablet)\n   */\n  private toggleSectionCollapse(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section || !section.element) return;\n\n    section.isCollapsed = !section.isCollapsed;\n    \n    if (section.isCollapsed) {\n      section.element.classList.add('collapsed');\n    } else {\n      section.element.classList.remove('collapsed');\n    }\n\n    // Update collapse indicator\n    const indicator = section.element.querySelector('.collapse-indicator');\n    if (indicator) {\n      indicator.textContent = section.isCollapsed ? '▶' : '▼';\n    }\n  }\n\n  /**\n   * Attach tab navigation listeners\n   */\n  private attachTabListeners(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      tab.addEventListener('click', () => {\n        // Don't switch if tab is disabled\n        if (tab.classList.contains('disabled')) return;\n\n        const sectionId = tab.getAttribute('data-section');\n        if (sectionId) {\n          this.switchToSection(sectionId);\n        }\n      });\n    });\n  }\n\n  /**\n   * Update tab active state\n   */\n  private updateTabActiveState(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      const sectionId = tab.getAttribute('data-section');\n      if (sectionId === this.currentActiveSection || \n          (this.currentActiveSection === null && sectionId === 'config-section')) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n  }\n\n  /**\n   * Setup layout change listener\n   */\n  private setupLayoutListener(): void {\n    mobileLayoutManager.addLayoutChangeListener((mode) => {\n      if (this.initialized) {\n        this.applyLayoutMode(mode);\n      }\n    });\n  }\n\n  /**\n   * Show section (called when results are ready)\n   */\n  public showSection(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section) return;\n\n    // Refresh element reference if it's null\n    if (!section.element) {\n      section.element = document.getElementById(sectionId);\n      if (!section.element) return;\n    }\n\n    // Remove hidden class\n    section.element.classList.remove('hidden');\n    section.isAvailable = true;\n\n    // If mobile, switch to this section\n    if (mobileLayoutManager.isMobile()) {\n      this.switchToSection(sectionId);\n    }\n\n    // Update tab navigation to show this section is available\n    this.updateTabVisibility();\n  }\n\n  /**\n   * Hide section\n   */\n  public hideSection(sectionId: string): void {\n    const section = this.sections.find(s => s.id === sectionId);\n    if (!section || !section.element) return;\n\n    section.element.classList.add('hidden');\n    section.isAvailable = false;\n\n    // Update tab navigation\n    this.updateTabVisibility();\n\n    // If this was the active section on mobile, switch to config\n    if (mobileLayoutManager.isMobile() && this.currentActiveSection === sectionId) {\n      this.switchToSection('config-section');\n    }\n  }\n\n  /**\n   * Update tab visibility based on section availability\n   */\n  private updateTabVisibility(): void {\n    if (!this.tabContainer) return;\n\n    const tabItems = this.tabContainer.querySelectorAll('.tab-nav-item');\n    tabItems.forEach(tab => {\n      const sectionId = tab.getAttribute('data-section');\n      const section = this.sections.find(s => s.id === sectionId);\n\n      if (section) {\n        if (section.isAvailable) {\n          tab.classList.remove('disabled');\n          (tab as HTMLButtonElement).disabled = false;\n        } else {\n          tab.classList.add('disabled');\n          (tab as HTMLButtonElement).disabled = true;\n        }\n      }\n    });\n  }\n\n  /**\n   * Add swipe support for mobile navigation\n   */\n  private addSwipeSupport(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const mainContent = document.querySelector('.main-content');\n    if (!mainContent) return;\n\n    TouchInteractionManager.addSwipeSupport(\n      mainContent as HTMLElement,\n      () => this.swipeToNextSection(), // Swipe left = next section\n      () => this.swipeToPreviousSection() // Swipe right = previous section\n    );\n  }\n\n  /**\n   * Navigate to next available section via swipe\n   */\n  private swipeToNextSection(): void {\n    const availableSections = this.sections.filter(s => s.isAvailable);\n    const currentIndex = availableSections.findIndex(s => s.id === this.currentActiveSection);\n\n    if (currentIndex < availableSections.length - 1) {\n      const nextSection = availableSections[currentIndex + 1];\n      this.switchToSection(nextSection.id);\n    }\n  }\n\n  /**\n   * Navigate to previous available section via swipe\n   */\n  private swipeToPreviousSection(): void {\n    const availableSections = this.sections.filter(s => s.isAvailable);\n    const currentIndex = availableSections.findIndex(s => s.id === this.currentActiveSection);\n\n    if (currentIndex > 0) {\n      const previousSection = availableSections[currentIndex - 1];\n      this.switchToSection(previousSection.id);\n    }\n  }\n}\n\n// Global navigation manager instance\nexport const responsiveNavigation = new ResponsiveNavigationManager();\n","/**\n * Mobile-specific UI patterns and components\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\nexport interface FloatingActionButtonConfig {\n  icon: string;\n  label: string;\n  onClick: () => void;\n  position?: 'bottom-right' | 'bottom-left' | 'bottom-center';\n  color?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\n}\n\nexport interface BottomSheetConfig {\n  title: string;\n  content: string | HTMLElement;\n  actions?: Array<{\n    label: string;\n    onClick: () => void;\n    style?: 'primary' | 'secondary' | 'danger';\n  }>;\n  dismissible?: boolean;\n}\n\n/**\n * Mobile UI Pattern Manager\n */\nexport class MobileUIPatterns {\n  private static fabContainer: HTMLElement | null = null;\n  private static bottomSheetContainer: HTMLElement | null = null;\n\n  /**\n   * Create floating action button\n   */\n  static createFloatingActionButton(config: FloatingActionButtonConfig): HTMLElement {\n    const fab = document.createElement('button');\n    fab.className = `floating-action-button fab-${config.position || 'bottom-right'} fab-${config.color || 'primary'}`;\n    fab.innerHTML = `\n      <span class=\"fab-icon\">${config.icon}</span>\n      <span class=\"fab-label\">${config.label}</span>\n    `;\n    \n    fab.addEventListener('click', config.onClick);\n    \n    // Add touch feedback\n    fab.addEventListener('touchstart', () => {\n      fab.style.transform = 'scale(0.95)';\n    });\n    \n    fab.addEventListener('touchend', () => {\n      fab.style.transform = 'scale(1)';\n    });\n\n    return fab;\n  }\n\n  /**\n   * Show floating action button (only on mobile)\n   */\n  static showFloatingActionButton(config: FloatingActionButtonConfig): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    this.hideFloatingActionButton(); // Remove any existing FAB\n\n    if (!this.fabContainer) {\n      this.fabContainer = document.createElement('div');\n      this.fabContainer.className = 'fab-container';\n      document.body.appendChild(this.fabContainer);\n    }\n\n    const fab = this.createFloatingActionButton(config);\n    this.fabContainer.appendChild(fab);\n\n    // Animate in\n    setTimeout(() => {\n      fab.classList.add('fab-visible');\n    }, 10);\n  }\n\n  /**\n   * Hide floating action button\n   */\n  static hideFloatingActionButton(): void {\n    if (this.fabContainer) {\n      const fabs = this.fabContainer.querySelectorAll('.floating-action-button');\n      fabs.forEach(fab => {\n        fab.classList.remove('fab-visible');\n        setTimeout(() => {\n          if (fab.parentNode) {\n            fab.parentNode.removeChild(fab);\n          }\n        }, 300);\n      });\n    }\n  }\n\n  /**\n   * Create bottom sheet modal\n   */\n  static showBottomSheet(config: BottomSheetConfig): Promise<void> {\n    return new Promise((resolve) => {\n      if (!mobileLayoutManager.isMobile()) {\n        // On desktop, show as regular modal\n        this.showDesktopModal(config);\n        resolve();\n        return;\n      }\n\n      this.hideBottomSheet(); // Remove any existing bottom sheet\n\n      // Create backdrop\n      const backdrop = document.createElement('div');\n      backdrop.className = 'bottom-sheet-backdrop';\n\n      // Create bottom sheet\n      const bottomSheet = document.createElement('div');\n      bottomSheet.className = 'bottom-sheet';\n      \n      const header = document.createElement('div');\n      header.className = 'bottom-sheet-header';\n      header.innerHTML = `\n        <div class=\"bottom-sheet-handle\"></div>\n        <h3 class=\"bottom-sheet-title\">${config.title}</h3>\n        ${config.dismissible !== false ? '<button class=\"bottom-sheet-close\">×</button>' : ''}\n      `;\n\n      const content = document.createElement('div');\n      content.className = 'bottom-sheet-content';\n      if (typeof config.content === 'string') {\n        content.innerHTML = config.content;\n      } else {\n        content.appendChild(config.content);\n      }\n\n      const actions = document.createElement('div');\n      actions.className = 'bottom-sheet-actions';\n      if (config.actions) {\n        config.actions.forEach(action => {\n          const button = document.createElement('button');\n          button.className = `btn btn-${action.style || 'secondary'}`;\n          button.textContent = action.label;\n          button.addEventListener('click', () => {\n            action.onClick();\n            this.hideBottomSheet();\n            resolve();\n          });\n          actions.appendChild(button);\n        });\n      }\n\n      bottomSheet.appendChild(header);\n      bottomSheet.appendChild(content);\n      if (config.actions && config.actions.length > 0) {\n        bottomSheet.appendChild(actions);\n      }\n\n      // Create container\n      if (!this.bottomSheetContainer) {\n        this.bottomSheetContainer = document.createElement('div');\n        this.bottomSheetContainer.className = 'bottom-sheet-container';\n        document.body.appendChild(this.bottomSheetContainer);\n      }\n\n      this.bottomSheetContainer.appendChild(backdrop);\n      this.bottomSheetContainer.appendChild(bottomSheet);\n\n      // Add event listeners\n      if (config.dismissible !== false) {\n        backdrop.addEventListener('click', () => {\n          this.hideBottomSheet();\n          resolve();\n        });\n\n        const closeBtn = header.querySelector('.bottom-sheet-close');\n        if (closeBtn) {\n          closeBtn.addEventListener('click', () => {\n            this.hideBottomSheet();\n            resolve();\n          });\n        }\n      }\n\n      // Animate in\n      setTimeout(() => {\n        backdrop.classList.add('visible');\n        bottomSheet.classList.add('visible');\n      }, 10);\n    });\n  }\n\n  /**\n   * Hide bottom sheet\n   */\n  static hideBottomSheet(): void {\n    if (this.bottomSheetContainer) {\n      const backdrop = this.bottomSheetContainer.querySelector('.bottom-sheet-backdrop');\n      const bottomSheet = this.bottomSheetContainer.querySelector('.bottom-sheet');\n\n      if (backdrop && bottomSheet) {\n        backdrop.classList.remove('visible');\n        bottomSheet.classList.remove('visible');\n\n        setTimeout(() => {\n          if (this.bottomSheetContainer) {\n            this.bottomSheetContainer.innerHTML = '';\n          }\n        }, 300);\n      }\n    }\n  }\n\n  /**\n   * Show desktop modal (fallback for non-mobile)\n   */\n  private static showDesktopModal(config: BottomSheetConfig): void {\n    // Simple alert fallback for desktop\n    // In a real implementation, you might want to show a proper modal\n    const message = typeof config.content === 'string' ? config.content : config.title;\n    alert(message);\n  }\n\n  /**\n   * Create mobile-optimized dropdown\n   */\n  static createMobileDropdown(\n    trigger: HTMLElement,\n    options: Array<{ label: string; value: string; onClick: () => void }>\n  ): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    trigger.addEventListener('click', () => {\n      const content = document.createElement('div');\n      content.className = 'mobile-dropdown-content';\n      \n      options.forEach(option => {\n        const item = document.createElement('button');\n        item.className = 'mobile-dropdown-item';\n        item.textContent = option.label;\n        item.addEventListener('click', () => {\n          option.onClick();\n          this.hideBottomSheet();\n        });\n        content.appendChild(item);\n      });\n\n      this.showBottomSheet({\n        title: 'Select Option',\n        content: content,\n        dismissible: true\n      });\n    });\n  }\n\n  /**\n   * Add loading overlay for mobile\n   */\n  static showMobileLoading(message: string = 'Loading...'): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const overlay = document.createElement('div');\n    overlay.className = 'mobile-loading-overlay';\n    overlay.innerHTML = `\n      <div class=\"mobile-loading-content\">\n        <div class=\"mobile-loading-spinner\"></div>\n        <p class=\"mobile-loading-text\">${message}</p>\n      </div>\n    `;\n\n    document.body.appendChild(overlay);\n\n    setTimeout(() => {\n      overlay.classList.add('visible');\n    }, 10);\n  }\n\n  /**\n   * Hide mobile loading overlay\n   */\n  static hideMobileLoading(): void {\n    const overlay = document.querySelector('.mobile-loading-overlay');\n    if (overlay) {\n      overlay.classList.remove('visible');\n      setTimeout(() => {\n        if (overlay.parentNode) {\n          overlay.parentNode.removeChild(overlay);\n        }\n      }, 300);\n    }\n  }\n}\n\n// Auto-hide FAB when switching to desktop\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobileUIPatterns.hideFloatingActionButton();\n    MobileUIPatterns.hideBottomSheet();\n  }\n});\n","/**\n * Mobile performance optimization utilities\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\nexport interface PerformanceMetrics {\n  renderTime: number;\n  interactionTime: number;\n  scrollPerformance: number;\n  memoryUsage?: number;\n}\n\n/**\n * Mobile Performance Manager\n */\nexport class MobilePerformanceManager {\n  private static metrics: PerformanceMetrics = {\n    renderTime: 0,\n    interactionTime: 0,\n    scrollPerformance: 0\n  };\n\n  private static observers: Map<string, IntersectionObserver> = new Map();\n  private static rafId: number | null = null;\n\n  /**\n   * Initialize performance monitoring\n   */\n  static initialize(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    this.setupLazyLoading();\n    this.optimizeScrolling();\n    this.monitorInteractions();\n    this.setupMemoryMonitoring();\n  }\n\n  /**\n   * Setup lazy loading for non-critical sections\n   */\n  private static setupLazyLoading(): void {\n    const lazyElements = document.querySelectorAll('[data-lazy]');\n    \n    if (lazyElements.length === 0) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const element = entry.target as HTMLElement;\n            this.loadElement(element);\n            observer.unobserve(element);\n          }\n        });\n      },\n      {\n        rootMargin: '50px',\n        threshold: 0.1\n      }\n    );\n\n    lazyElements.forEach(element => observer.observe(element));\n    this.observers.set('lazy-loading', observer);\n  }\n\n  /**\n   * Load a lazy element\n   */\n  private static loadElement(element: HTMLElement): void {\n    const startTime = performance.now();\n\n    // Simulate loading content\n    const content = element.dataset.lazy;\n    if (content) {\n      element.innerHTML = content;\n      element.removeAttribute('data-lazy');\n    }\n\n    const endTime = performance.now();\n    this.metrics.renderTime += endTime - startTime;\n  }\n\n  /**\n   * Optimize scrolling performance\n   */\n  private static optimizeScrolling(): void {\n    const scrollableElements = document.querySelectorAll('.combat-log, .unit-family-content, .main-content');\n    \n    scrollableElements.forEach(element => {\n      let isScrolling = false;\n      let scrollTimeout: number;\n\n      element.addEventListener('scroll', () => {\n        if (!isScrolling) {\n          isScrolling = true;\n          this.requestOptimizedFrame(() => {\n            // Optimize scroll performance\n            this.optimizeScrollFrame(element as HTMLElement);\n            isScrolling = false;\n          });\n        }\n\n        // Clear timeout and set a new one\n        clearTimeout(scrollTimeout);\n        scrollTimeout = window.setTimeout(() => {\n          this.onScrollEnd(element as HTMLElement);\n        }, 150);\n      }, { passive: true });\n    });\n  }\n\n  /**\n   * Optimize scroll frame\n   */\n  private static optimizeScrollFrame(element: HTMLElement): void {\n    const startTime = performance.now();\n\n    // Hide elements that are far out of view to improve performance\n    const rect = element.getBoundingClientRect();\n    const children = element.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i] as HTMLElement;\n      const childRect = child.getBoundingClientRect();\n      \n      // Hide elements that are more than 2 viewport heights away\n      const isVisible = childRect.bottom > -window.innerHeight * 2 && \n                       childRect.top < window.innerHeight * 3;\n      \n      if (!isVisible && !child.classList.contains('scroll-hidden')) {\n        child.classList.add('scroll-hidden');\n        child.style.visibility = 'hidden';\n      } else if (isVisible && child.classList.contains('scroll-hidden')) {\n        child.classList.remove('scroll-hidden');\n        child.style.visibility = 'visible';\n      }\n    }\n\n    const endTime = performance.now();\n    this.metrics.scrollPerformance += endTime - startTime;\n  }\n\n  /**\n   * Handle scroll end\n   */\n  private static onScrollEnd(element: HTMLElement): void {\n    // Restore visibility to all hidden elements\n    const hiddenElements = element.querySelectorAll('.scroll-hidden');\n    hiddenElements.forEach(el => {\n      el.classList.remove('scroll-hidden');\n      (el as HTMLElement).style.visibility = 'visible';\n    });\n  }\n\n  /**\n   * Request optimized animation frame\n   */\n  private static requestOptimizedFrame(callback: () => void): void {\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n    }\n\n    this.rafId = requestAnimationFrame(() => {\n      callback();\n      this.rafId = null;\n    });\n  }\n\n  /**\n   * Monitor touch interactions\n   */\n  private static monitorInteractions(): void {\n    let interactionStart: number;\n\n    document.addEventListener('touchstart', () => {\n      interactionStart = performance.now();\n    }, { passive: true });\n\n    document.addEventListener('touchend', () => {\n      if (interactionStart) {\n        const interactionTime = performance.now() - interactionStart;\n        this.metrics.interactionTime = Math.max(this.metrics.interactionTime, interactionTime);\n      }\n    }, { passive: true });\n  }\n\n  /**\n   * Setup memory monitoring\n   */\n  private static setupMemoryMonitoring(): void {\n    if ('memory' in performance) {\n      setInterval(() => {\n        const memory = (performance as any).memory;\n        this.metrics.memoryUsage = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n        \n        // Warn if memory usage is high\n        if (this.metrics.memoryUsage > 0.8) {\n          console.warn('High memory usage detected:', this.metrics.memoryUsage);\n          this.optimizeMemory();\n        }\n      }, 10000); // Check every 10 seconds\n    }\n  }\n\n  /**\n   * Optimize memory usage\n   */\n  private static optimizeMemory(): void {\n    // Clear unused observers\n    this.observers.forEach((observer, key) => {\n      if (key !== 'lazy-loading') {\n        observer.disconnect();\n        this.observers.delete(key);\n      }\n    });\n\n    // Force garbage collection if available\n    if ('gc' in window) {\n      (window as any).gc();\n    }\n  }\n\n  /**\n   * Get performance metrics\n   */\n  static getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Reset metrics\n   */\n  static resetMetrics(): void {\n    this.metrics = {\n      renderTime: 0,\n      interactionTime: 0,\n      scrollPerformance: 0\n    };\n  }\n\n  /**\n   * Add CSS optimizations for mobile\n   */\n  static addMobileCSSOptimizations(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Mobile Performance Optimizations */\n      * {\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      .scroll-hidden {\n        visibility: hidden !important;\n      }\n\n      /* Optimize animations for mobile */\n      @media (max-width: 767px) {\n        * {\n          animation-duration: 0.2s !important;\n          transition-duration: 0.2s !important;\n        }\n\n        /* Reduce motion for better performance */\n        @media (prefers-reduced-motion: reduce) {\n          * {\n            animation-duration: 0.01ms !important;\n            animation-iteration-count: 1 !important;\n            transition-duration: 0.01ms !important;\n          }\n        }\n\n        /* Optimize transforms */\n        .unit-card,\n        .tab-nav-item,\n        .btn {\n          will-change: transform;\n          transform: translateZ(0);\n        }\n\n        /* Optimize scrolling */\n        .combat-log,\n        .unit-family-content,\n        .main-content {\n          -webkit-overflow-scrolling: touch;\n          overflow-scrolling: touch;\n          will-change: scroll-position;\n        }\n      }\n    `;\n\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Cleanup performance monitoring\n   */\n  static cleanup(): void {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers.clear();\n\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n}\n\n// Auto-initialize on mobile\nif (mobileLayoutManager.isMobile()) {\n  document.addEventListener('DOMContentLoaded', () => {\n    MobilePerformanceManager.initialize();\n    MobilePerformanceManager.addMobileCSSOptimizations();\n  });\n}\n\n// Cleanup when switching away from mobile\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobilePerformanceManager.cleanup();\n  } else {\n    MobilePerformanceManager.initialize();\n    MobilePerformanceManager.addMobileCSSOptimizations();\n  }\n});\n","/**\n * Mobile accessibility enhancements\n */\n\nimport { mobileLayoutManager } from './mobileUtils';\n\n/**\n * Mobile Accessibility Manager\n */\nexport class MobileAccessibilityManager {\n  private static focusTracker: HTMLElement | null = null;\n  private static announcer: HTMLElement | null = null;\n\n  /**\n   * Initialize mobile accessibility features\n   */\n  static initialize(): void {\n    this.createScreenReaderAnnouncer();\n    this.setupFocusManagement();\n    this.enhanceTabNavigation();\n    this.addTouchAccessibility();\n    this.setupKeyboardNavigation();\n  }\n\n  /**\n   * Create screen reader announcer\n   */\n  private static createScreenReaderAnnouncer(): void {\n    if (this.announcer) return;\n\n    this.announcer = document.createElement('div');\n    this.announcer.setAttribute('aria-live', 'polite');\n    this.announcer.setAttribute('aria-atomic', 'true');\n    this.announcer.className = 'sr-only';\n    this.announcer.style.cssText = `\n      position: absolute !important;\n      width: 1px !important;\n      height: 1px !important;\n      padding: 0 !important;\n      margin: -1px !important;\n      overflow: hidden !important;\n      clip: rect(0, 0, 0, 0) !important;\n      white-space: nowrap !important;\n      border: 0 !important;\n    `;\n\n    document.body.appendChild(this.announcer);\n  }\n\n  /**\n   * Announce message to screen readers\n   */\n  static announce(message: string, priority: 'polite' | 'assertive' = 'polite'): void {\n    if (!this.announcer) this.createScreenReaderAnnouncer();\n\n    this.announcer!.setAttribute('aria-live', priority);\n    this.announcer!.textContent = message;\n\n    // Clear after announcement\n    setTimeout(() => {\n      if (this.announcer) {\n        this.announcer.textContent = '';\n      }\n    }, 1000);\n  }\n\n  /**\n   * Setup focus management for mobile\n   */\n  private static setupFocusManagement(): void {\n    // Track focus for mobile navigation\n    document.addEventListener('focusin', (e) => {\n      this.focusTracker = e.target as HTMLElement;\n    });\n\n    // Handle focus when switching tabs on mobile\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'visible' && mobileLayoutManager.isMobile()) {\n        this.restoreFocus();\n      }\n    });\n  }\n\n  /**\n   * Restore focus to appropriate element\n   */\n  private static restoreFocus(): void {\n    if (this.focusTracker && document.contains(this.focusTracker)) {\n      this.focusTracker.focus();\n    } else {\n      // Focus first interactive element in current section\n      const activeSection = document.querySelector('.main-content > :not(.hidden)');\n      if (activeSection) {\n        const firstInteractive = activeSection.querySelector('button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        if (firstInteractive) {\n          (firstInteractive as HTMLElement).focus();\n        }\n      }\n    }\n  }\n\n  /**\n   * Enhance tab navigation for mobile\n   */\n  private static enhanceTabNavigation(): void {\n    const tabContainer = document.querySelector('.mobile-tab-navigation');\n    if (!tabContainer) return;\n\n    // Add ARIA labels and roles\n    tabContainer.setAttribute('role', 'tablist');\n    tabContainer.setAttribute('aria-label', 'Main navigation');\n\n    const tabs = tabContainer.querySelectorAll('.tab-nav-item');\n    tabs.forEach((tab, index) => {\n      tab.setAttribute('role', 'tab');\n      tab.setAttribute('aria-selected', index === 0 ? 'true' : 'false');\n      tab.setAttribute('tabindex', index === 0 ? '0' : '-1');\n      \n      const sectionId = tab.getAttribute('data-section');\n      if (sectionId) {\n        tab.setAttribute('aria-controls', sectionId);\n        tab.id = `tab-${sectionId}`;\n      }\n\n      // Add keyboard navigation\n      tab.addEventListener('keydown', (e) => {\n        this.handleTabKeydown(e as KeyboardEvent, tabs, index);\n      });\n\n      // Announce tab changes\n      tab.addEventListener('click', () => {\n        const label = tab.querySelector('.tab-label')?.textContent || 'Section';\n        this.announce(`Switched to ${label} section`);\n        this.updateTabAria(tabs, index);\n      });\n    });\n  }\n\n  /**\n   * Handle keyboard navigation in tabs\n   */\n  private static handleTabKeydown(e: KeyboardEvent, tabs: NodeListOf<Element>, currentIndex: number): void {\n    let newIndex = currentIndex;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        newIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        newIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;\n        break;\n      case 'Home':\n        e.preventDefault();\n        newIndex = 0;\n        break;\n      case 'End':\n        e.preventDefault();\n        newIndex = tabs.length - 1;\n        break;\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n        (tabs[currentIndex] as HTMLElement).click();\n        return;\n    }\n\n    if (newIndex !== currentIndex) {\n      this.updateTabAria(tabs, newIndex);\n      (tabs[newIndex] as HTMLElement).focus();\n    }\n  }\n\n  /**\n   * Update ARIA attributes for tabs\n   */\n  private static updateTabAria(tabs: NodeListOf<Element>, activeIndex: number): void {\n    tabs.forEach((tab, index) => {\n      tab.setAttribute('aria-selected', index === activeIndex ? 'true' : 'false');\n      tab.setAttribute('tabindex', index === activeIndex ? '0' : '-1');\n    });\n  }\n\n  /**\n   * Add touch accessibility features\n   */\n  private static addTouchAccessibility(): void {\n    // Add touch feedback for screen readers\n    document.addEventListener('touchstart', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.matches('button, .unit-card, .tab-nav-item')) {\n        target.setAttribute('aria-pressed', 'true');\n      }\n    }, { passive: true });\n\n    document.addEventListener('touchend', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.matches('button, .unit-card, .tab-nav-item')) {\n        target.removeAttribute('aria-pressed');\n      }\n    }, { passive: true });\n\n    // Add double-tap to activate for complex elements\n    let lastTap = 0;\n    document.addEventListener('touchend', (e) => {\n      const currentTime = new Date().getTime();\n      const tapLength = currentTime - lastTap;\n      \n      if (tapLength < 500 && tapLength > 0) {\n        const target = e.target as HTMLElement;\n        if (target.matches('.unit-card, .army-composition')) {\n          this.announce('Double tap to activate', 'assertive');\n        }\n      }\n      lastTap = currentTime;\n    });\n  }\n\n  /**\n   * Setup keyboard navigation for mobile\n   */\n  private static setupKeyboardNavigation(): void {\n    // Add skip links for mobile\n    this.addSkipLinks();\n\n    // Handle escape key to close modals/sheets\n    document.addEventListener('keydown', (e) => {\n      if (e.key === 'Escape') {\n        const activeModal = document.querySelector('.bottom-sheet.visible, .mobile-loading-overlay.visible');\n        if (activeModal) {\n          e.preventDefault();\n          this.announce('Modal closed');\n          // Trigger close event\n          const closeBtn = activeModal.querySelector('.bottom-sheet-close');\n          if (closeBtn) {\n            (closeBtn as HTMLElement).click();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Add skip links for mobile navigation\n   */\n  private static addSkipLinks(): void {\n    const skipLinks = document.createElement('div');\n    skipLinks.className = 'skip-links';\n    skipLinks.innerHTML = `\n      <a href=\"#main-content\" class=\"skip-link\">Skip to main content</a>\n      <a href=\"#mobile-navigation\" class=\"skip-link\">Skip to navigation</a>\n    `;\n\n    document.body.insertBefore(skipLinks, document.body.firstChild);\n\n    // Add main content ID if not present\n    const mainContent = document.querySelector('.main-content');\n    if (mainContent && !mainContent.id) {\n      mainContent.id = 'main-content';\n    }\n\n    // Add navigation ID if not present\n    const navigation = document.querySelector('.mobile-tab-navigation');\n    if (navigation && !navigation.id) {\n      navigation.id = 'mobile-navigation';\n    }\n  }\n\n  /**\n   * Enhance form accessibility for mobile\n   */\n  static enhanceFormAccessibility(): void {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(form => {\n      // Add form labels and descriptions\n      const inputs = form.querySelectorAll('input, select, textarea');\n      inputs.forEach(input => {\n        const label = form.querySelector(`label[for=\"${input.id}\"]`);\n        if (!label && input.id) {\n          // Create label if missing\n          const newLabel = document.createElement('label');\n          newLabel.setAttribute('for', input.id);\n          newLabel.textContent = input.getAttribute('placeholder') || 'Input field';\n          newLabel.className = 'sr-only';\n          input.parentNode?.insertBefore(newLabel, input);\n        }\n\n        // Add required field announcements\n        if (input.hasAttribute('required')) {\n          input.setAttribute('aria-required', 'true');\n          input.addEventListener('invalid', () => {\n            this.announce('Required field is empty', 'assertive');\n          });\n        }\n      });\n\n      // Announce form submission\n      form.addEventListener('submit', () => {\n        this.announce('Form submitted');\n      });\n    });\n  }\n\n  /**\n   * Add ARIA labels to dynamic content\n   */\n  static addDynamicLabels(): void {\n    // Label unit cards\n    const unitCards = document.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      const unitName = card.querySelector('.unit-name')?.textContent;\n      if (unitName && !card.getAttribute('aria-label')) {\n        card.setAttribute('aria-label', `Unit: ${unitName}`);\n        card.setAttribute('role', 'button');\n      }\n    });\n\n    // Label army compositions\n    const compositions = document.querySelectorAll('.army-composition');\n    compositions.forEach((comp, index) => {\n      if (!comp.getAttribute('aria-label')) {\n        comp.setAttribute('aria-label', `Army composition ${index + 1}`);\n        comp.setAttribute('role', 'article');\n      }\n    });\n\n    // Label combat log entries\n    const combatActions = document.querySelectorAll('.combat-action');\n    combatActions.forEach((action, index) => {\n      if (!action.getAttribute('aria-label')) {\n        const actionText = action.textContent?.substring(0, 50) || 'Combat action';\n        action.setAttribute('aria-label', `Combat action ${index + 1}: ${actionText}`);\n      }\n    });\n  }\n\n  /**\n   * Cleanup accessibility features\n   */\n  static cleanup(): void {\n    if (this.announcer && this.announcer.parentNode) {\n      this.announcer.parentNode.removeChild(this.announcer);\n      this.announcer = null;\n    }\n\n    const skipLinks = document.querySelector('.skip-links');\n    if (skipLinks && skipLinks.parentNode) {\n      skipLinks.parentNode.removeChild(skipLinks);\n    }\n  }\n}\n\n// Auto-initialize on mobile\nif (mobileLayoutManager.isMobile()) {\n  document.addEventListener('DOMContentLoaded', () => {\n    MobileAccessibilityManager.initialize();\n  });\n}\n\n// Cleanup when switching away from mobile\nmobileLayoutManager.addLayoutChangeListener((mode) => {\n  if (mode !== 'mobile') {\n    MobileAccessibilityManager.cleanup();\n  } else {\n    MobileAccessibilityManager.initialize();\n  }\n});\n","/**\n * Main application component for the TotalBattle Army Calculator\n * Updated to use our validated unit data and stacking optimization algorithm\n */\n\nimport { Unit, OptimizationConstraints, ArmyComposition } from '../../types/units';\nimport { UnitLoader } from '../../services/unitLoader';\nimport { StackingOptimizer } from '../../services/stackingOptimizer';\nimport { DamageOptimizer, DamageOptimizationConstraints } from '../../services/damageOptimizer';\nimport { BattleSimulationComponent } from '../BattleSimulation/BattleSimulationComponent';\nimport { EnemyUnitManager } from '../EnemyUnits/EnemyUnitManager';\nimport { mobileLayoutManager, TouchInteractionManager, MobileCSSManager } from '../../utils/mobileUtils';\nimport { responsiveNavigation } from '../../utils/responsiveNavigation';\nimport { MobileUIPatterns } from '../../utils/mobileUIPatterns';\nimport { MobilePerformanceManager } from '../../utils/mobilePerformance';\nimport { MobileAccessibilityManager } from '../../utils/mobileAccessibility';\n\nexport class ArmyCalculatorApp {\n  private container: HTMLElement | null = null;\n  private unitLoader: UnitLoader;\n  private optimizer: StackingOptimizer | null = null;\n  private damageOptimizer: DamageOptimizer | null = null;\n  private selectedUnits: Set<string> = new Set();\n  private mercenaryLimits: Record<string, number> = {};\n  private battleSimulation: BattleSimulationComponent | null = null;\n  private currentOptimizedArmy: ArmyComposition | null = null;\n  private currentMode: 'stacking' | 'damage' | 'enemy-units' = 'stacking';\n  private enemyUnitManager: EnemyUnitManager | null = null;\n  private selectedEnemyUnits: any[] = [];\n  private currentEnemyUnitSelector: any = null;\n  private currentEnemyUnitSelectorContainer: HTMLElement | null = null;\n\n  constructor() {\n    this.unitLoader = new UnitLoader();\n  }\n\n  public async mount(container: HTMLElement): Promise<void> {\n    this.container = container;\n    this.render();\n    this.attachEventListeners();\n    await this.loadInitialData();\n\n    // Initialize mobile optimizations\n    this.initializeMobileOptimizations();\n\n    // Initialize responsive navigation\n    responsiveNavigation.initialize();\n\n    // Initialize Phase 3 mobile enhancements\n    this.initializeAdvancedMobileFeatures();\n  }\n\n  private render(): void {\n    if (!this.container) return;\n\n    this.container.innerHTML = `\n      <div class=\"army-calculator\">\n        <header class=\"header\">\n          <h1>🏰 TotalBattle Army Calculator</h1>\n          <p class=\"subtitle\">Optimize your army composition for maximum effectiveness</p>\n\n          <!-- Mode Switcher -->\n          <div class=\"mode-switcher\">\n            <div class=\"mode-tabs\">\n              <button id=\"stacking-mode-btn\" class=\"mode-tab active\" data-mode=\"stacking\">\n                <span class=\"mode-icon\">🛡️</span>\n                <span class=\"mode-label\">Stacking Optimizer</span>\n                <span class=\"mode-desc\">Maximize budget usage</span>\n              </button>\n              <button id=\"damage-mode-btn\" class=\"mode-tab\" data-mode=\"damage\">\n                <span class=\"mode-icon\">⚔️</span>\n                <span class=\"mode-label\">Damage Optimizer</span>\n                <span class=\"mode-desc\">Maximize damage output</span>\n              </button>\n              <button id=\"enemy-units-btn\" class=\"mode-tab\" data-mode=\"enemy-units\">\n                <span class=\"mode-icon\">👹</span>\n                <span class=\"mode-label\">Enemy Units</span>\n                <span class=\"mode-desc\">Manage enemy units</span>\n              </button>\n            </div>\n          </div>\n        </header>\n\n        <main class=\"main-content\">\n          <!-- Army Configuration Section -->\n          <section class=\"card main-config-section\" id=\"config-section\">\n            <h1 class=\"main-title\" id=\"config-title\">⚔️ Army Configuration</h1>\n\n            <!-- Mode-specific description -->\n            <div class=\"mode-description\" id=\"mode-description\">\n              <p id=\"stacking-description\" class=\"mode-desc-text\">\n                Configure your army to maximize budget usage with optimal health stacking.\n              </p>\n              <p id=\"damage-description\" class=\"mode-desc-text hidden\">\n                Configure your army to maximize damage output against enemy forces.\n              </p>\n            </div>\n\n            <div class=\"config-grid\">\n              <!-- Resource Constraints -->\n              <div class=\"config-group resource-constraints\">\n                <h2 class=\"section-title\">💰 Resource Constraints</h2>\n                <div class=\"input-group\">\n                  <label for=\"leadership-budget\" class=\"input-label\">Leadership Points:</label>\n                  <input type=\"number\" id=\"leadership-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n                <div class=\"input-group\">\n                  <label for=\"dominance-budget\" class=\"input-label\">Dominance Points:</label>\n                  <input type=\"number\" id=\"dominance-budget\" min=\"0\" value=\"0\" class=\"input large-input\">\n                </div>\n\n                <!-- Damage Optimization Controls -->\n                <div class=\"damage-optimization-controls hidden\" id=\"damage-controls\">\n                  <div class=\"input-group\">\n                    <label for=\"enemy-count\" class=\"input-label\">Enemy Groups:</label>\n                    <input type=\"number\" id=\"enemy-count\" min=\"1\" max=\"20\" value=\"5\" class=\"input large-input\">\n                    <small class=\"input-help\">Number of enemy groups to optimize against</small>\n                  </div>\n                  <div class=\"input-group\">\n                    <label for=\"max-combinations\" class=\"input-label\">Max Combinations:</label>\n                    <input type=\"number\" id=\"max-combinations\" min=\"10\" max=\"200\" value=\"50\" class=\"input large-input\">\n                    <small class=\"input-help\">Performance limit (higher = more thorough but slower)</small>\n                  </div>\n                  <div class=\"input-group\">\n                    <label class=\"input-label\">Enemy Configuration:</label>\n                    <button id=\"select-enemy-units-btn\" class=\"btn btn-secondary\">\n                      👹 Select Enemy Units\n                    </button>\n                    <small class=\"input-help\">Choose specific enemy units for battle optimization</small>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Available Units -->\n              <div class=\"config-group unit-selection-group\">\n                <h2 class=\"section-title\">🛡️ Available Units</h2>\n                <div class=\"unit-selection\">\n                  <div class=\"unit-controls\">\n                    <div class=\"search-box\">\n                      <input type=\"text\" id=\"unit-search\" placeholder=\"Search units...\" class=\"input\">\n                    </div>\n                    <div class=\"filter-tabs\">\n                      <button class=\"filter-tab active\" data-filter=\"all\">All (101)</button>\n                      <button class=\"filter-tab\" data-filter=\"Guardsmen\">Guardsmen</button>\n                      <button class=\"filter-tab\" data-filter=\"Specialists\">Specialists</button>\n                      <button class=\"filter-tab\" data-filter=\"Engineer Corps\">Engineer Corps</button>\n                      <button class=\"filter-tab\" data-filter=\"Monsters\">Monsters</button>\n                      <button class=\"filter-tab\" data-filter=\"Mercenaries\">Mercenaries</button>\n                    </div>\n                    <div class=\"unit-type-filters\">\n                      <select id=\"unit-type-filter\" class=\"input\">\n                        <option value=\"\">All Unit Types</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div class=\"selected-units-summary\">\n                    <span id=\"selected-count\">0 units selected</span>\n                    <button id=\"select-all-visible\" class=\"btn btn-sm\">Select All Visible</button>\n                    <button id=\"clear-selection\" class=\"btn btn-sm\">Clear All</button>\n                  </div>\n                  <div id=\"unit-groups\" class=\"unit-groups\"></div>\n                </div>\n              </div>\n\n              <!-- Mercenary Limits -->\n              <div class=\"config-group mercenary-group\">\n                <h2 class=\"section-title\">🗡️ Mercenary Limits</h2>\n                <div id=\"mercenary-limits\" class=\"mercenary-limits\">\n                  <p class=\"text-muted\">Select mercenary units to set limits</p>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"action-buttons\">\n              <button id=\"optimize-btn\" class=\"btn btn-success large-btn\" disabled>\n                <span id=\"optimize-btn-text\">🚀 Optimize Army</span>\n              </button>\n              <button id=\"clear-btn\" class=\"btn btn-secondary large-btn\">🗑️ Clear Selection</button>\n            </div>\n          </section>\n\n          <!-- Results Section -->\n          <section class=\"card hidden\" id=\"results-section\">\n            <h2 id=\"results-title\">🎯 Optimization Results</h2>\n\n            <div id=\"optimization-stats\" class=\"optimization-stats\"></div>\n\n            <!-- Stacking Results -->\n            <div id=\"stacking-results\" class=\"results-container\">\n              <div id=\"army-compositions\" class=\"army-compositions\"></div>\n            </div>\n\n            <!-- Damage Results -->\n            <div id=\"damage-results\" class=\"results-container hidden\">\n              <div id=\"damage-army-list\" class=\"damage-army-list\"></div>\n\n              <!-- Selected Army Details -->\n              <div id=\"selected-army-details\" class=\"selected-army-details hidden\">\n                <h3>📋 Selected Army Details</h3>\n                <div id=\"selected-army-composition\" class=\"selected-army-composition\"></div>\n              </div>\n            </div>\n          </section>\n\n          <!-- Enemy Units Management Section -->\n          <section class=\"card hidden\" id=\"enemy-units-section\">\n            <h2>👹 Enemy Units Management</h2>\n            <div id=\"enemy-units-container\">\n              <!-- Enemy units manager component will be mounted here -->\n            </div>\n          </section>\n\n          <!-- Battle Simulation Section -->\n          <div id=\"battle-simulation-container\" class=\"hidden\">\n            <!-- Battle simulation component will be mounted here -->\n          </div>\n\n        </main>\n\n        <!-- Loading Modal -->\n        <div id=\"loading-modal\" class=\"modal hidden\">\n          <div class=\"modal-content\">\n            <div class=\"loading-spinner\"></div>\n            <p>Optimizing army compositions...</p>\n          </div>\n        </div>\n\n        <footer class=\"footer\">\n          <p>Built for TotalBattle strategy optimization</p>\n        </footer>\n      </div>\n    `;\n\n    this.addUnitSelectionStyles();\n  }\n\n  /**\n   * Add CSS styles for the unit selection component\n   */\n  private addUnitSelectionStyles(): void {\n    const style = document.createElement('style');\n    style.textContent = `\n      /* Main Layout Improvements */\n      .main-config-section {\n        margin-bottom: 3rem;\n      }\n\n      .main-title {\n        font-size: 2.5rem;\n        margin-bottom: 2rem;\n        color: #2c3e50;\n        text-align: center;\n        font-weight: 700;\n      }\n\n      .section-title {\n        font-size: 1.5rem;\n        margin-bottom: 1.5rem;\n        color: #34495e;\n        font-weight: 600;\n        border-bottom: 2px solid #3498db;\n        padding-bottom: 0.5rem;\n      }\n\n      .config-grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 3rem;\n        margin-bottom: 2rem;\n      }\n\n      .config-group {\n        padding: 1.5rem;\n        background: #f8f9fa;\n        border-radius: 8px;\n        border: 1px solid #e9ecef;\n      }\n\n      .resource-constraints {\n        background: linear-gradient(135deg, #fff5f5 0%, #f8f9fa 100%);\n      }\n\n      .unit-selection-group {\n        background: linear-gradient(135deg, #f0f8ff 0%, #f8f9fa 100%);\n      }\n\n      .mercenary-group {\n        background: linear-gradient(135deg, #fff8f0 0%, #f8f9fa 100%);\n        margin-top: 2rem;\n      }\n\n      .input-group {\n        margin-bottom: 1.5rem;\n      }\n\n      .input-label {\n        display: block;\n        font-size: 1.2rem;\n        font-weight: 600;\n        margin-bottom: 0.75rem;\n        color: #2c3e50;\n      }\n\n      .large-input {\n        font-size: 1.2rem;\n        padding: 0.75rem 1rem;\n        border: 2px solid #bdc3c7;\n        border-radius: 6px;\n        width: 200px;\n        transition: border-color 0.3s;\n      }\n\n      .large-input:focus {\n        border-color: #3498db;\n        outline: none;\n        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\n      }\n\n      .action-buttons {\n        display: flex;\n        gap: 1.5rem;\n        justify-content: center;\n        margin-top: 2rem;\n        padding-top: 2rem;\n        border-top: 2px solid #ecf0f1;\n      }\n\n      .large-btn {\n        font-size: 1.3rem;\n        padding: 1rem 2rem;\n        border-radius: 8px;\n        font-weight: 600;\n        min-width: 200px;\n        transition: all 0.3s;\n      }\n\n      .large-btn:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n      }\n\n      /* Compact Data Section */\n      .compact-data-section {\n        margin-top: 3rem;\n        padding: 1rem;\n        background: #f8f9fa;\n        border: 1px solid #dee2e6;\n      }\n\n      .compact-data-section h3 {\n        font-size: 1.1rem;\n        margin-bottom: 1rem;\n        color: #6c757d;\n      }\n\n\n\n      .data-table {\n        width: 100%;\n        border-collapse: collapse;\n        font-size: 0.9rem;\n      }\n\n      .data-table th,\n      .data-table td {\n        padding: 0.5rem;\n        text-align: center;\n        border: 1px solid #dee2e6;\n      }\n\n      .data-table th {\n        background: #e9ecef;\n        font-weight: 600;\n        color: #495057;\n      }\n\n      .data-table td {\n        background: white;\n      }\n\n      /* Unit Selection Styles */\n      .unit-controls {\n        display: flex;\n        flex-direction: column;\n        gap: 1.5rem;\n        margin-bottom: 1.5rem;\n      }\n\n      .filter-tabs {\n        display: flex;\n        gap: 0.5rem;\n        flex-wrap: wrap;\n      }\n\n      .filter-tab {\n        padding: 0.5rem 1rem;\n        border: 1px solid #ddd;\n        background: white;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 0.9rem;\n        transition: all 0.2s;\n      }\n\n      .filter-tab:hover {\n        background: #f5f5f5;\n      }\n\n      .filter-tab.active {\n        background: #007bff;\n        color: white;\n        border-color: #007bff;\n      }\n\n      .unit-type-filters {\n        display: flex;\n        gap: 1rem;\n        align-items: center;\n      }\n\n      .selected-units-summary {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #f8f9fa;\n        border-radius: 4px;\n        font-size: 0.9rem;\n      }\n\n      .selected-units-summary .btn {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.8rem;\n      }\n\n      .unit-groups {\n        max-height: 500px;\n        overflow-y: auto;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n      }\n\n      /* Main Category Styles */\n      .main-category {\n        border-bottom: 2px solid #ddd;\n      }\n\n      .main-category:last-child {\n        border-bottom: none;\n      }\n\n      .main-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 1rem;\n        background: #e9ecef;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .main-category-header:hover {\n        background: #dee2e6;\n      }\n\n      .category-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .category-title h3 {\n        margin: 0;\n        font-size: 1.1rem;\n        color: #333;\n      }\n\n      .main-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .main-category-content.collapsed {\n        display: none;\n      }\n\n      /* Sub Category Styles */\n      .sub-category {\n        border-bottom: 1px solid #eee;\n        margin-left: 1rem;\n      }\n\n      .sub-category-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .sub-category-header:hover {\n        background: #f1f3f4;\n      }\n\n      .subcategory-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .subcategory-title h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #444;\n      }\n\n      .sub-category-content {\n        transition: all 0.3s ease;\n      }\n\n      .sub-category-content.collapsed {\n        display: none;\n      }\n\n      /* Unit Family Styles */\n      .unit-family {\n        border-bottom: 1px solid #f0f0f0;\n        margin-left: 1rem;\n      }\n\n      .unit-family-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.5rem;\n        background: #fafbfc;\n        cursor: pointer;\n        transition: background-color 0.2s;\n      }\n\n      .unit-family-header:hover {\n        background: #f5f6f7;\n      }\n\n      .family-title {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .family-title h5 {\n        margin: 0;\n        font-size: 0.9rem;\n        color: #555;\n      }\n\n      .unit-family-content {\n        transition: all 0.3s ease;\n      }\n\n      .unit-family-content.collapsed {\n        display: none;\n      }\n\n      /* Expand Icons */\n      .expand-icon {\n        font-size: 0.8rem;\n        color: #666;\n        transition: transform 0.2s;\n      }\n\n      /* Action Buttons */\n      .category-actions,\n      .subcategory-actions,\n      .family-actions {\n        display: flex;\n        gap: 0.25rem;\n      }\n\n      .unit-group-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0.75rem;\n        background: #f8f9fa;\n        border-bottom: 1px solid #eee;\n      }\n\n      .group-title {\n        display: flex;\n        flex-direction: column;\n        gap: 0.25rem;\n      }\n\n      .hierarchy {\n        font-size: 0.75rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      .unit-group-header h4 {\n        margin: 0;\n        font-size: 1rem;\n        color: #333;\n      }\n\n      .group-actions {\n        display: flex;\n        gap: 0.5rem;\n      }\n\n      .btn-xs {\n        padding: 0.25rem 0.5rem;\n        font-size: 0.75rem;\n        border-radius: 3px;\n      }\n\n      /* Unit Cards Grid */\n      .unit-family-content {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n        gap: 0.5rem;\n        padding: 0.75rem;\n        background: white;\n      }\n\n      /* Mobile responsive grid adjustments */\n      @media (max-width: 767px) {\n        .unit-family-content {\n          grid-template-columns: 1fr;\n          gap: 0.75rem;\n          padding: 1rem;\n        }\n\n        .unit-card {\n          min-height: 48px;\n          padding: 1rem;\n        }\n\n        .unit-name {\n          font-size: 1rem;\n        }\n\n        .unit-cost {\n          font-size: 0.9rem;\n        }\n\n        .stat {\n          font-size: 0.9rem;\n        }\n      }\n\n      @media (min-width: 768px) and (max-width: 1023px) {\n        .unit-family-content {\n          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n          gap: 0.75rem;\n        }\n\n        .unit-card {\n          min-height: 44px;\n          padding: 0.875rem;\n        }\n      }\n\n      .unit-card {\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        padding: 0.75rem;\n        cursor: pointer;\n        transition: all 0.2s;\n        background: white;\n        /* Mobile touch optimizations */\n        min-height: 44px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n      }\n\n      .unit-card:hover {\n        border-color: #007bff;\n        box-shadow: 0 2px 4px rgba(0,123,255,0.1);\n      }\n\n      .unit-card:active {\n        transform: scale(0.98);\n        background: #f8fafc;\n      }\n\n      .unit-card.selected {\n        border-color: #28a745;\n        background: #f8fff9;\n        box-shadow: 0 2px 4px rgba(40,167,69,0.2);\n      }\n\n      .unit-card.touch-active {\n        transform: scale(0.98);\n        background: #f0f9ff;\n      }\n\n      .unit-card-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 0.5rem;\n      }\n\n      .unit-name {\n        font-weight: 600;\n        color: #333;\n        font-size: 0.9rem;\n        line-height: 1.2;\n      }\n\n      .unit-cost {\n        font-size: 0.8rem;\n        color: #666;\n        white-space: nowrap;\n      }\n\n      .unit-stats {\n        display: flex;\n        gap: 1rem;\n        margin-bottom: 0.5rem;\n      }\n\n      .stat {\n        font-size: 0.8rem;\n        color: #555;\n      }\n\n      .unit-types {\n        font-size: 0.75rem;\n        color: #777;\n        font-style: italic;\n      }\n\n      .no-units {\n        text-align: center;\n        padding: 2rem;\n        color: #666;\n        font-style: italic;\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 768px) {\n        .main-title {\n          font-size: 2rem;\n        }\n\n        .section-title {\n          font-size: 1.3rem;\n        }\n\n        .large-input {\n          width: 100%;\n          font-size: 1.1rem;\n        }\n\n        .action-buttons {\n          flex-direction: column;\n          align-items: center;\n        }\n\n        .large-btn {\n          width: 100%;\n          max-width: 300px;\n        }\n\n        .unit-family-content {\n          grid-template-columns: 1fr;\n        }\n\n        .filter-tabs {\n          flex-direction: column;\n        }\n\n        .selected-units-summary {\n          flex-direction: column;\n          gap: 0.5rem;\n          align-items: stretch;\n        }\n\n        .data-table {\n          font-size: 0.8rem;\n        }\n\n        .data-table th,\n        .data-table td {\n          padding: 0.3rem;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Load initial unit data\n   */\n  private async loadInitialData(): Promise<void> {\n    try {\n\n\n      await this.unitLoader.loadUnits('./final_units.json');\n\n\n\n      this.displayUnitList();\n      this.updateOptimizeButton();\n\n    } catch (error) {\n      console.error('Failed to load unit data:', error);\n    }\n  }\n\n  /**\n   * Attach event listeners\n   */\n  private attachEventListeners(): void {\n    // Mode switcher\n    const stackingModeBtn = document.getElementById('stacking-mode-btn') as HTMLButtonElement;\n    const damageModeBtn = document.getElementById('damage-mode-btn') as HTMLButtonElement;\n    const enemyUnitsBtn = document.getElementById('enemy-units-btn') as HTMLButtonElement;\n\n    // Existing elements\n    const unitSearch = document.getElementById('unit-search') as HTMLInputElement;\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const clearBtn = document.getElementById('clear-btn') as HTMLButtonElement;\n    const selectAllVisible = document.getElementById('select-all-visible') as HTMLButtonElement;\n    const clearSelection = document.getElementById('clear-selection') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const selectEnemyUnitsBtn = document.getElementById('select-enemy-units-btn') as HTMLButtonElement;\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n\n    // Mode switcher event listeners\n    if (stackingModeBtn) {\n      stackingModeBtn.addEventListener('click', () => this.switchMode('stacking'));\n    }\n\n    if (damageModeBtn) {\n      damageModeBtn.addEventListener('click', () => this.switchMode('damage'));\n    }\n\n    if (enemyUnitsBtn) {\n      enemyUnitsBtn.addEventListener('click', () => this.switchMode('enemy-units'));\n    }\n\n    if (selectEnemyUnitsBtn) {\n      selectEnemyUnitsBtn.addEventListener('click', () => this.openEnemyUnitSelector());\n    }\n\n    if (unitSearch) {\n      unitSearch.addEventListener('input', () => this.filterAndDisplayUnits());\n    }\n\n    if (unitTypeFilter) {\n      unitTypeFilter.addEventListener('change', () => this.filterAndDisplayUnits());\n    }\n\n    if (optimizeBtn) {\n      optimizeBtn.addEventListener('click', () => this.optimizeArmy());\n    }\n\n    if (clearBtn) {\n      clearBtn.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (selectAllVisible) {\n      selectAllVisible.addEventListener('click', () => this.selectAllVisible());\n    }\n\n    if (clearSelection) {\n      clearSelection.addEventListener('click', () => this.clearSelection());\n    }\n\n    if (leadershipBudget) {\n      leadershipBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    if (dominanceBudget) {\n      dominanceBudget.addEventListener('input', () => this.updateOptimizeButton());\n    }\n\n    // Enemy groups count change listener for dynamic updates\n    if (enemyCountInput) {\n      enemyCountInput.addEventListener('input', () => this.handleEnemyGroupsChange());\n    }\n\n    // Filter tab listeners\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement;\n      if (target.classList.contains('filter-tab')) {\n        this.handleFilterTabClick(target);\n      }\n    });\n  }\n\n\n\n  /**\n   * Display unit list with initial setup\n   */\n  private displayUnitList(): void {\n    this.setupUnitTypeFilter();\n    this.updateFilterTabCounts();\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Setup unit type filter dropdown\n   */\n  private setupUnitTypeFilter(): void {\n    const unitTypeFilter = document.getElementById('unit-type-filter') as HTMLSelectElement;\n    if (!unitTypeFilter) return;\n\n    const allTypes = this.unitLoader.getUniqueUnitTypes();\n    unitTypeFilter.innerHTML = '<option value=\"\">All Unit Types</option>';\n\n    allTypes.forEach(type => {\n      const option = document.createElement('option');\n      option.value = type;\n      option.textContent = type;\n      unitTypeFilter.appendChild(option);\n    });\n  }\n\n  /**\n   * Update filter tab counts\n   */\n  private updateFilterTabCounts(): void {\n    const allUnits = this.unitLoader.getAllUnits();\n    const tabs = document.querySelectorAll('.filter-tab');\n\n    tabs.forEach(tab => {\n      const filter = tab.getAttribute('data-filter');\n      let count = 0;\n\n      if (filter === 'all') {\n        count = allUnits.length;\n      } else {\n        count = allUnits.filter(unit => this.getMainCategory(unit) === filter).length;\n      }\n\n      tab.textContent = `${filter === 'all' ? 'All' : filter} (${count})`;\n    });\n  }\n\n  /**\n   * Handle filter tab clicks\n   */\n  private handleFilterTabClick(tab: HTMLElement): void {\n    // Update active tab\n    document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));\n    tab.classList.add('active');\n\n    this.filterAndDisplayUnits();\n  }\n\n  /**\n   * Filter and display units based on current filters\n   */\n  private filterAndDisplayUnits(): void {\n    const searchQuery = (document.getElementById('unit-search') as HTMLInputElement)?.value || '';\n    const activeTab = document.querySelector('.filter-tab.active')?.getAttribute('data-filter') || 'all';\n    const unitTypeFilter = (document.getElementById('unit-type-filter') as HTMLSelectElement)?.value || '';\n\n    let units = this.unitLoader.getAllUnits();\n\n    // Apply main category filter\n    if (activeTab !== 'all') {\n      units = units.filter(unit => this.getMainCategory(unit) === activeTab);\n    }\n\n    // Apply unit type filter\n    if (unitTypeFilter) {\n      units = units.filter(unit => unit.unit_types.includes(unitTypeFilter));\n    }\n\n    // Apply search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      units = units.filter(unit =>\n        unit.name.toLowerCase().includes(query) ||\n        unit.unit_types.some(type => type.toLowerCase().includes(query))\n      );\n    }\n\n    this.renderGroupedUnits(units);\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Render units in hierarchical tree structure\n   */\n  private renderGroupedUnits(units: Unit[]): void {\n    const unitGroupsElement = document.getElementById('unit-groups');\n    if (!unitGroupsElement) return;\n\n    unitGroupsElement.innerHTML = '';\n\n    if (units.length === 0) {\n      unitGroupsElement.innerHTML = '<div class=\"no-units\">No units match your filters</div>';\n      return;\n    }\n\n    // Create hierarchical tree structure\n    const hierarchicalGroups = this.createHierarchicalGroups(units);\n\n    // Render main categories\n    Object.entries(hierarchicalGroups).forEach(([mainCategory, subCategories]) => {\n      const mainElement = this.createMainCategoryElement(mainCategory, subCategories);\n      unitGroupsElement.appendChild(mainElement);\n    });\n\n    // Attach all event listeners after DOM is created\n    this.attachAllEventListeners(hierarchicalGroups);\n  }\n\n  /**\n   * Create hierarchical group structure for tree display\n   */\n  private createHierarchicalGroups(units: Unit[]): Record<string, Record<string, Record<string, Unit[]>>> {\n    const hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>> = {\n      'Guardsmen': {},\n      'Specialists': {},\n      'Engineer Corps': {},\n      'Monsters': {},\n      'Mercenaries': {}\n    };\n\n    units.forEach(unit => {\n      const mainCategory = this.getMainCategory(unit);\n      const subCategory = this.getSubCategory(unit);\n      const familyName = this.getUnitFamily(unit);\n\n      if (!hierarchicalGroups[mainCategory][subCategory]) {\n        hierarchicalGroups[mainCategory][subCategory] = {};\n      }\n      if (!hierarchicalGroups[mainCategory][subCategory][familyName]) {\n        hierarchicalGroups[mainCategory][subCategory][familyName] = [];\n      }\n\n      hierarchicalGroups[mainCategory][subCategory][familyName].push(unit);\n    });\n\n    // Sort units within each family by strength\n    Object.values(hierarchicalGroups).forEach(subCategories => {\n      Object.values(subCategories).forEach(families => {\n        Object.values(families).forEach(units => {\n          units.sort((a, b) => a.strength - b.strength);\n        });\n      });\n    });\n\n    return hierarchicalGroups;\n  }\n\n  /**\n   * Determine main category for a unit based on actual unit_types\n   */\n  private getMainCategory(unit: Unit): string {\n    // Check if it's a mercenary first\n    if (unit.cost_type === 'Mercenary' || unit.authority_cost > 0) {\n      return 'Mercenaries';\n    }\n\n    // Check unit types for category indicators (case-sensitive to match data)\n    const types = unit.unit_types;\n\n    // Engineer Corps: explicitly marked or siege engines\n    if (types.includes('Engineer corps') || types.includes('Siege engine')) {\n      return 'Engineer Corps';\n    }\n\n    // Guardsmen: explicitly marked as Guardsman\n    if (types.includes('Guardsman')) {\n      return 'Guardsmen';\n    }\n\n    // Specialists: explicitly marked as Specialist\n    if (types.includes('Specialist')) {\n      return 'Specialists';\n    }\n\n    // Monsters: non-human creatures (Beast, Dragon, Giant, Elemental, Flying creatures without Human)\n    if (types.includes('Beast') || types.includes('Dragon') || types.includes('Giant') ||\n        types.includes('Elemental') || types.includes('ELEMENTAL')) {\n      return 'Monsters';\n    }\n\n    // Flying units without Human are typically monsters\n    if (types.includes('Flying') && !types.includes('Human')) {\n      return 'Monsters';\n    }\n\n    // Remaining units are likely specialists or guardsmen\n    // If they have Human and basic combat types, they're probably guardsmen\n    if (types.includes('Human') && (types.includes('Melee') || types.includes('Ranged') || types.includes('Mounted'))) {\n      return 'Guardsmen';\n    }\n\n    // Default to Specialists for edge cases\n    return 'Specialists';\n  }\n\n  /**\n   * Determine subcategory for a unit based on combat role/type\n   */\n  private getSubCategory(unit: Unit): string {\n    const types = unit.unit_types;\n    const name = unit.name.toUpperCase();\n    const mainCategory = this.getMainCategory(unit);\n\n    // For Mercenaries, group by type\n    if (mainCategory === 'Mercenaries') {\n      if (types.includes('Guardsman')) return 'Elite Forces';\n      return 'Special Forces';\n    }\n\n    // For Engineer Corps, group by siege engine type\n    if (mainCategory === 'Engineer Corps') {\n      if (name.includes('CATAPULT')) return 'Catapults';\n      if (name.includes('BALLISTA')) return 'Ballistae';\n      if (name.includes('JOSEPHINE')) return 'Heavy Artillery';\n      if (types.includes('Siege engine')) return 'Siege Engines';\n    }\n\n    // For Monsters, group by creature type\n    if (mainCategory === 'Monsters') {\n      if (types.includes('Dragon')) return 'Dragons';\n      if (types.includes('Giant')) return 'Giants';\n      if (types.includes('Beast')) return 'Beasts';  // Flying Beasts go into Beasts\n      if (types.includes('Elemental') || types.includes('ELEMENTAL')) return 'Elementals';\n      if (types.includes('Flying')) return 'Flying';\n    }\n\n    // For Guardsmen and Specialists, group by combat role (your requested categories)\n    if (mainCategory === 'Guardsmen' || mainCategory === 'Specialists') {\n      if (types.includes('Ranged')) return 'Ranged';\n      if (types.includes('Melee')) return 'Melee';\n      if (types.includes('Mounted')) return 'Mounted';\n      if (types.includes('Flying')) return 'Flying';  // Flying Beasts go into Flying\n      if (types.includes('Beast')) return 'Flying';   // Non-flying Beasts also go into Flying for Specialists\n      if (types.includes('Scout')) return 'Scouts';\n    }\n\n    // Fallback groupings\n    if (types.includes('Human')) return 'Infantry';\n\n    return 'Other';\n  }\n\n  /**\n   * Get unit family name (base unit name without tier)\n   */\n  private getUnitFamily(unit: Unit): string {\n    // Extract base name by removing Roman numerals and common suffixes\n    let baseName = unit.name;\n\n    // Remove Roman numerals (I, II, III, IV, V, VI, VII)\n    baseName = baseName.replace(/\\s+(I{1,3}|IV|V|VI{0,2}|VII)$/, '');\n\n    // Handle special cases\n    if (baseName.includes('HEAVY ')) {\n      return baseName; // Keep \"HEAVY KNIGHT\", \"HEAVY HALBERDIER\", etc.\n    }\n\n    return baseName;\n  }\n\n  /**\n   * Create main category element (e.g., \"Guardsmen\")\n   */\n  private createMainCategoryElement(mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): HTMLElement {\n    const mainDiv = document.createElement('div');\n    mainDiv.className = 'main-category';\n\n    const totalUnits = this.countUnitsInCategory(subCategories);\n    const selectedUnits = this.countSelectedUnitsInCategory(subCategories);\n\n    mainDiv.innerHTML = `\n      <div class=\"main-category-header\" data-category=\"${mainCategory}\">\n        <div class=\"category-title\">\n          <h3>${mainCategory} (${selectedUnits}/${totalUnits})</h3>\n          <span class=\"expand-icon\">▼</span>\n        </div>\n        <div class=\"category-actions\">\n          <button class=\"btn btn-xs select-category\" data-category=\"${mainCategory}\">Select All</button>\n          <button class=\"btn btn-xs deselect-category\" data-category=\"${mainCategory}\">Deselect All</button>\n        </div>\n      </div>\n      <div class=\"main-category-content collapsed\">\n        ${Object.entries(subCategories).map(([subCategory, families]) =>\n          this.createSubCategoryHTML(mainCategory, subCategory, families)\n        ).join('')}\n      </div>\n    `;\n\n    return mainDiv;\n  }\n\n  /**\n   * Create sub category HTML string\n   */\n  private createSubCategoryHTML(mainCategory: string, subCategory: string, families: Record<string, Unit[]>): string {\n    const totalUnits = Object.values(families).reduce((sum, units) => sum + units.length, 0);\n    const selectedUnits = Object.values(families).reduce((sum, units) =>\n      sum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0);\n\n    return `\n      <div class=\"sub-category\" data-category=\"${mainCategory}\" data-subcategory=\"${subCategory}\">\n        <div class=\"sub-category-header\">\n          <div class=\"subcategory-title\">\n            <h4>${subCategory} (${selectedUnits}/${totalUnits})</h4>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"subcategory-actions\">\n            <button class=\"btn btn-xs select-subcategory\">Select All</button>\n            <button class=\"btn btn-xs deselect-subcategory\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"sub-category-content collapsed\">\n          ${Object.entries(families).map(([familyName, units]) =>\n            this.createUnitFamilyHTML(familyName, units)\n          ).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create unit family HTML string\n   */\n  private createUnitFamilyHTML(familyName: string, units: Unit[]): string {\n    const selectedUnits = units.filter(unit => this.selectedUnits.has(unit.name)).length;\n\n    return `\n      <div class=\"unit-family\" data-family=\"${familyName}\">\n        <div class=\"unit-family-header\">\n          <div class=\"family-title\">\n            <h5>${familyName} (${selectedUnits}/${units.length})</h5>\n            <span class=\"expand-icon\">▼</span>\n          </div>\n          <div class=\"family-actions\">\n            <button class=\"btn btn-xs select-family\">Select All</button>\n            <button class=\"btn btn-xs deselect-family\">Deselect All</button>\n          </div>\n        </div>\n        <div class=\"unit-family-content collapsed\">\n          ${units.map(unit => this.createUnitCard(unit)).join('')}\n        </div>\n      </div>\n    `;\n  }\n\n  /**\n   * Create a compact unit card\n   */\n  private createUnitCard(unit: Unit): string {\n    const isSelected = this.selectedUnits.has(unit.name);\n    const cost = this.getUnitCost(unit);\n\n    return `\n      <div class=\"unit-card ${isSelected ? 'selected' : ''}\" data-unit=\"${unit.name}\">\n        <div class=\"unit-card-header\">\n          <div class=\"unit-name\">${unit.name}</div>\n          <div class=\"unit-cost\">${unit.cost_type}: ${cost}</div>\n        </div>\n        <div class=\"unit-stats\">\n          <span class=\"stat\">HP: ${unit.health.toLocaleString()}</span>\n          <span class=\"stat\">STR: ${unit.strength.toLocaleString()}</span>\n        </div>\n        <div class=\"unit-types\">${unit.unit_types.slice(0, 3).join(', ')}${unit.unit_types.length > 3 ? '...' : ''}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Attach all event listeners after DOM is created\n   */\n  private attachAllEventListeners(hierarchicalGroups: Record<string, Record<string, Record<string, Unit[]>>>): void {\n    // Attach main category listeners\n    document.querySelectorAll('.main-category').forEach((mainElement, index) => {\n      const mainCategories = Object.keys(hierarchicalGroups);\n      const mainCategory = mainCategories[index];\n      if (mainCategory) {\n        const subCategories = hierarchicalGroups[mainCategory];\n        this.attachMainCategoryListeners(mainElement as HTMLElement, mainCategory, subCategories);\n      }\n    });\n\n    // Attach sub category listeners\n    document.querySelectorAll('.sub-category').forEach((subElement) => {\n      const mainCategory = subElement.getAttribute('data-category');\n      const subCategory = subElement.getAttribute('data-subcategory');\n\n      if (mainCategory && subCategory && hierarchicalGroups[mainCategory]?.[subCategory]) {\n        const families = hierarchicalGroups[mainCategory][subCategory];\n        this.attachSubCategoryListeners(subElement as HTMLElement, families);\n      }\n    });\n\n    // Attach unit family listeners\n    document.querySelectorAll('.unit-family').forEach((familyElement) => {\n      const familyName = familyElement.getAttribute('data-family');\n\n      // Find the units for this family\n      let units: Unit[] = [];\n      Object.values(hierarchicalGroups).forEach(subCategories => {\n        Object.values(subCategories).forEach(families => {\n          if (families[familyName!]) {\n            units = families[familyName!];\n          }\n        });\n      });\n\n      if (units.length > 0) {\n        this.attachUnitFamilyListeners(familyElement as HTMLElement, units);\n      }\n    });\n  }\n\n  /**\n   * Count total units in a category\n   */\n  private countUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) => familySum + units.length, 0), 0);\n  }\n\n  /**\n   * Count selected units in a category\n   */\n  private countSelectedUnitsInCategory(subCategories: Record<string, Record<string, Unit[]>>): number {\n    return Object.values(subCategories).reduce((sum, families) =>\n      sum + Object.values(families).reduce((familySum, units) =>\n        familySum + units.filter(unit => this.selectedUnits.has(unit.name)).length, 0), 0);\n  }\n\n  /**\n   * Attach event listeners to main category\n   */\n  private attachMainCategoryListeners(element: HTMLElement, mainCategory: string, subCategories: Record<string, Record<string, Unit[]>>): void {\n    const header = element.querySelector('.main-category-header') as HTMLElement;\n    const content = element.querySelector('.main-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing main-category elements for', mainCategory, { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Main category header clicked:', mainCategory, 'collapsed:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in category\n    const selectBtn = element.querySelector('.select-category') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-category') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInCategory(subCategories);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInCategory(subCategories);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to sub category\n   */\n  private attachSubCategoryListeners(element: HTMLElement, families: Record<string, Unit[]>): void {\n    const header = element.querySelector('.sub-category-header') as HTMLElement;\n    const content = element.querySelector('.sub-category-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    if (!header || !content || !expandIcon) {\n      console.warn('Missing sub-category elements:', { header: !!header, content: !!content, expandIcon: !!expandIcon });\n      return;\n    }\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      // Don't toggle if clicking on action buttons\n      if ((e.target as HTMLElement).classList.contains('btn')) {\n        e.stopPropagation();\n        return;\n      }\n\n      console.log('Sub-category header clicked, toggling:', content.classList.contains('collapsed'));\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in subcategory\n    const selectBtn = element.querySelector('.select-subcategory') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-subcategory') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllInFamilies(families);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllInFamilies(families);\n      });\n    }\n  }\n\n  /**\n   * Attach event listeners to unit family\n   */\n  private attachUnitFamilyListeners(element: HTMLElement, units: Unit[]): void {\n    const header = element.querySelector('.unit-family-header') as HTMLElement;\n    const content = element.querySelector('.unit-family-content') as HTMLElement;\n    const expandIcon = element.querySelector('.expand-icon') as HTMLElement;\n\n    // Click anywhere on header to toggle\n    header.addEventListener('click', (e) => {\n      if ((e.target as HTMLElement).classList.contains('btn')) return;\n\n      content.classList.toggle('collapsed');\n      expandIcon.textContent = content.classList.contains('collapsed') ? '▼' : '▲';\n    });\n\n    // Select/deselect all in family\n    const selectBtn = element.querySelector('.select-family') as HTMLButtonElement;\n    const deselectBtn = element.querySelector('.deselect-family') as HTMLButtonElement;\n\n    if (selectBtn) {\n      selectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.selectAllUnits(units);\n      });\n    }\n\n    if (deselectBtn) {\n      deselectBtn.addEventListener('click', (e) => {\n        e.stopPropagation();\n        this.deselectAllUnits(units);\n      });\n    }\n\n    // Individual unit selection\n    const unitCards = element.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      card.addEventListener('click', () => {\n        const unitName = card.getAttribute('data-unit');\n        if (unitName) {\n          const unit = this.unitLoader.getUnitByName(unitName);\n          if (unit) {\n            this.toggleUnitSelection(unit);\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Get unit cost for display\n   */\n  private getUnitCost(unit: Unit): number {\n    switch (unit.cost_type) {\n      case 'Leadership': return unit.leadership_cost;\n      case 'Dominance': return unit.dominance_cost;\n      case 'Authority':\n      case 'Mercenary': return unit.authority_cost;\n      default: return 0;\n    }\n  }\n\n  /**\n   * Toggle unit selection\n   */\n  private toggleUnitSelection(unit: Unit): void {\n    if (this.selectedUnits.has(unit.name)) {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    } else {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        this.mercenaryLimits[unit.name] = 1; // Default limit\n      }\n    }\n\n    this.updateSelectionDisplay(); // Update selection without rebuilding\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n\n    // Update mobile FAB based on selection\n    if (mobileLayoutManager.isMobile()) {\n      this.addFloatingActionButton();\n    }\n  }\n\n  /**\n   * Update selection display without rebuilding the tree\n   */\n  private updateSelectionDisplay(): void {\n    // Update unit card selection states\n    document.querySelectorAll('.unit-card').forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        if (this.selectedUnits.has(unitName)) {\n          card.classList.add('selected');\n        } else {\n          card.classList.remove('selected');\n        }\n      }\n    });\n\n    // Update all counters in headers\n    this.updateAllCounters();\n    this.updateSelectedSummary();\n  }\n\n  /**\n   * Update all selection counters in headers\n   */\n  private updateAllCounters(): void {\n    // Update main category counters\n    document.querySelectorAll('.main-category').forEach((element, index) => {\n      const titleElement = element.querySelector('.category-title h3');\n      if (titleElement) {\n        const mainCategories = ['Guardsmen', 'Specialists', 'Engineer Corps', 'Monsters', 'Mercenaries'];\n        const mainCategory = mainCategories[index];\n        if (mainCategory) {\n          const { selected, total } = this.countUnitsInMainCategory(mainCategory);\n          const originalText = titleElement.textContent || '';\n          const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n          titleElement.textContent = `${baseText} (${selected}/${total})`;\n        }\n      }\n    });\n\n    // Update sub category counters\n    document.querySelectorAll('.sub-category').forEach(element => {\n      const titleElement = element.querySelector('.subcategory-title h4');\n      const mainCategory = element.getAttribute('data-category');\n      const subCategory = element.getAttribute('data-subcategory');\n\n      if (titleElement && mainCategory && subCategory) {\n        const { selected, total } = this.countUnitsInSubCategory(mainCategory, subCategory);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n\n    // Update family counters\n    document.querySelectorAll('.unit-family').forEach(element => {\n      const titleElement = element.querySelector('.family-title h5');\n      const familyName = element.getAttribute('data-family');\n\n      if (titleElement && familyName) {\n        const { selected, total } = this.countUnitsInFamily(familyName);\n        const originalText = titleElement.textContent || '';\n        const baseText = originalText.replace(/\\s*\\(\\d+\\/\\d+\\)/, '');\n        titleElement.textContent = `${baseText} (${selected}/${total})`;\n      }\n    });\n  }\n\n  /**\n   * Count units in main category\n   */\n  private countUnitsInMainCategory(mainCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const categoryUnits = allUnits.filter(unit => this.getMainCategory(unit) === mainCategory);\n    const selectedCount = categoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: categoryUnits.length };\n  }\n\n  /**\n   * Count units in sub category\n   */\n  private countUnitsInSubCategory(mainCategory: string, subCategory: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const subCategoryUnits = allUnits.filter(unit =>\n      this.getMainCategory(unit) === mainCategory && this.getSubCategory(unit) === subCategory\n    );\n    const selectedCount = subCategoryUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: subCategoryUnits.length };\n  }\n\n  /**\n   * Count units in family\n   */\n  private countUnitsInFamily(familyName: string): { selected: number, total: number } {\n    const allUnits = this.unitLoader.getAllUnits();\n    const familyUnits = allUnits.filter(unit => this.getUnitFamily(unit) === familyName);\n    const selectedCount = familyUnits.filter(unit => this.selectedUnits.has(unit.name)).length;\n    return { selected: selectedCount, total: familyUnits.length };\n  }\n\n  /**\n   * Update selected units summary\n   */\n  private updateSelectedSummary(): void {\n    const selectedCountElement = document.getElementById('selected-count');\n    if (selectedCountElement) {\n      selectedCountElement.textContent = `${this.selectedUnits.size} units selected`;\n    }\n  }\n\n  /**\n   * Select all visible units\n   */\n  private selectAllVisible(): void {\n    const visibleUnitCards = document.querySelectorAll('.unit-card');\n    visibleUnitCards.forEach(card => {\n      const unitName = card.getAttribute('data-unit');\n      if (unitName) {\n        const unit = this.unitLoader.getUnitByName(unitName);\n        if (unit) {\n          this.selectedUnits.add(unit.name);\n          if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n            this.mercenaryLimits[unit.name] = 1;\n          }\n        }\n      }\n    });\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Select all units in a category\n   */\n  private selectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.selectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Deselect all units in a category\n   */\n  private deselectAllInCategory(subCategories: Record<string, Record<string, Unit[]>>): void {\n    Object.values(subCategories).forEach(families => {\n      this.deselectAllInFamilies(families);\n    });\n  }\n\n  /**\n   * Select all units in families\n   */\n  private selectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.selectAllUnits(units);\n    });\n  }\n\n  /**\n   * Deselect all units in families\n   */\n  private deselectAllInFamilies(families: Record<string, Unit[]>): void {\n    Object.values(families).forEach(units => {\n      this.deselectAllUnits(units);\n    });\n  }\n\n  /**\n   * Select all units in array\n   */\n  private selectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.add(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        this.mercenaryLimits[unit.name] = 1;\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Deselect all units in array\n   */\n  private deselectAllUnits(units: Unit[]): void {\n    units.forEach(unit => {\n      this.selectedUnits.delete(unit.name);\n      if (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority') {\n        delete this.mercenaryLimits[unit.name];\n      }\n    });\n\n    this.updateSelectionDisplay();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Update mercenary limits UI\n   */\n  private updateMercenaryLimits(): void {\n    const mercenaryLimitsElement = document.getElementById('mercenary-limits');\n    if (!mercenaryLimitsElement) return;\n\n    const mercenaryUnits = Array.from(this.selectedUnits)\n      .map(name => this.unitLoader.getUnitByName(name))\n      .filter(unit => unit && (unit.cost_type === 'Mercenary' || unit.cost_type === 'Authority'));\n\n    if (mercenaryUnits.length === 0) {\n      mercenaryLimitsElement.innerHTML = '<p class=\"text-muted\">Select mercenary units to set limits</p>';\n      return;\n    }\n\n    mercenaryLimitsElement.innerHTML = '';\n\n    mercenaryUnits.forEach(unit => {\n      if (!unit) return;\n\n      const mercItem = document.createElement('div');\n      mercItem.className = 'mercenary-item';\n\n      // Use different icon for Authority vs Mercenary units\n      const icon = unit.cost_type === 'Authority' ? '⚔️' : '🗡️';\n      const costDisplay = unit.cost_type === 'Authority' ? `AUTH: ${unit.authority_cost}` : `AUTH: ${unit.authority_cost}`;\n\n      mercItem.innerHTML = `\n        <div class=\"mercenary-label\">\n          <span class=\"unit-name\">${icon} ${unit.name}</span>\n          <span class=\"unit-stats\">(STR: ${unit.strength}, HP: ${unit.health}, ${costDisplay})</span>\n        </div>\n        <div class=\"mercenary-input\">\n          <label for=\"merc-${unit.name}\">Max Available:</label>\n          <input type=\"number\" id=\"merc-${unit.name}\" min=\"1\" max=\"100\" value=\"${this.mercenaryLimits[unit.name] || 1}\"\n                 data-unit=\"${unit.name}\" class=\"input\" placeholder=\"1\">\n        </div>\n      `;\n\n      const input = mercItem.querySelector('input') as HTMLInputElement;\n      input.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        this.mercenaryLimits[target.dataset.unit!] = parseInt(target.value) || 1;\n      });\n\n      mercenaryLimitsElement.appendChild(mercItem);\n    });\n  }\n\n\n\n  /**\n   * Update optimize button state\n   */\n  private updateOptimizeButton(): void {\n    const optimizeBtn = document.getElementById('optimize-btn') as HTMLButtonElement;\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    if (!optimizeBtn || !leadershipBudget || !dominanceBudget) return;\n\n    const hasUnits = this.selectedUnits.size > 0;\n    const hasBudget = parseInt(leadershipBudget.value) > 0 ||\n                     parseInt(dominanceBudget.value) > 0 ||\n                     Object.keys(this.mercenaryLimits).length > 0;\n\n    optimizeBtn.disabled = !hasUnits || !hasBudget;\n  }\n\n  /**\n   * Optimize army composition\n   */\n  private async optimizeArmy(): Promise<void> {\n    try {\n      if (this.currentMode === 'stacking') {\n        this.showLoadingModal();\n        await this.optimizeForStacking();\n        this.hideLoadingModal();\n      } else {\n        // Damage optimization uses its own progress modal\n        await this.optimizeForDamage();\n      }\n\n    } catch (error) {\n      console.error('Optimization failed:', error);\n      alert('Optimization failed. Please check your inputs and try again.');\n\n      // Hide any open modals\n      this.hideLoadingModal();\n      this.hideProgressModal();\n    }\n  }\n\n  /**\n   * Optimize for stacking (original functionality)\n   */\n  private async optimizeForStacking(): Promise<void> {\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Array.from(this.selectedUnits));\n    this.optimizer = new StackingOptimizer(selectedUnitObjects);\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n\n    const constraints: OptimizationConstraints = {\n      leadershipBudget: parseInt(leadershipBudget.value) || 0,\n      dominanceBudget: parseInt(dominanceBudget.value) || 0,\n      mercenaryLimits: { ...this.mercenaryLimits },\n      availableUnits: Array.from(this.selectedUnits)\n    };\n\n    const result = await this.optimizer.optimizeArmy(constraints);\n    this.displayStackingResults(result);\n  }\n\n  /**\n   * Optimize for damage output with progress feedback\n   */\n  private async optimizeForDamage(): Promise<void> {\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Array.from(this.selectedUnits));\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const enemyCount = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxCombinations = document.getElementById('max-combinations') as HTMLInputElement;\n\n    const constraints: DamageOptimizationConstraints = {\n      leadershipBudget: parseInt(leadershipBudget.value) || 0,\n      dominanceBudget: parseInt(dominanceBudget.value) || 0,\n      mercenaryLimits: { ...this.mercenaryLimits },\n      availableUnits: Array.from(this.selectedUnits),\n      enemyGroupCount: parseInt(enemyCount.value) || 5,\n      maxCombinations: parseInt(maxCombinations.value) || 50\n    };\n\n    // Use async processing with progress feedback\n    await this.runDamageOptimizationWithProgress(constraints, selectedUnitObjects);\n  }\n\n  /**\n   * Run damage optimization with progress feedback using async processing\n   */\n  private async runDamageOptimizationWithProgress(\n    constraints: DamageOptimizationConstraints,\n    units: any[]\n  ): Promise<void> {\n    // Create abort controller for cancellation\n    this.optimizationAbortController = new AbortController();\n\n    // Show progress modal or mobile loading\n    if (mobileLayoutManager.isMobile()) {\n      MobileUIPatterns.showMobileLoading('Optimizing army composition...');\n    } else {\n      this.showProgressModal();\n    }\n\n    try {\n      // Initialize damage optimizer if not already done\n      if (!this.damageOptimizer) {\n        this.damageOptimizer = new DamageOptimizer();\n      }\n\n      // Add progress callback and abort signal to constraints\n      const enhancedConstraints = {\n        ...constraints,\n        signal: this.optimizationAbortController.signal,\n        onProgress: (progress: any) => {\n          this.updateProgressModal(progress.progress, progress.message, {\n            combinationsEvaluated: progress.combinationsEvaluated,\n            totalToEvaluate: progress.totalToEvaluate,\n            phase: progress.phase,\n            estimatedRemainingMs: progress.estimatedRemainingMs\n          });\n        }\n      };\n\n      // Run the optimization with real-time progress updates\n      const result = await this.damageOptimizer.optimizeForDamage(enhancedConstraints, units);\n\n      // Show completion briefly\n      await this.delay(500);\n\n      // Hide progress modal and show results\n      if (mobileLayoutManager.isMobile()) {\n        MobileUIPatterns.hideMobileLoading();\n      } else {\n        this.hideProgressModal();\n      }\n      this.displayDamageResults(result);\n\n    } catch (error) {\n      if (mobileLayoutManager.isMobile()) {\n        MobileUIPatterns.hideMobileLoading();\n      } else {\n        this.hideProgressModal();\n      }\n\n      if (error instanceof Error && error.message.includes('cancelled')) {\n        // User cancelled - don't show error\n        console.log('Optimization cancelled by user');\n      } else {\n        console.error('Damage optimization failed:', error);\n        alert(`Optimization failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n  }\n\n\n\n  /**\n   * Simple delay utility to allow UI updates\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Display stacking optimization results\n   */\n  private displayStackingResults(result: any): void {\n    const optimizationStats = document.getElementById('optimization-stats');\n    const armyCompositions = document.getElementById('army-compositions');\n    const resultsSection = document.getElementById('results-section');\n    const stackingResults = document.getElementById('stacking-results');\n    const damageResults = document.getElementById('damage-results');\n\n    if (!optimizationStats || !armyCompositions || !resultsSection) return;\n\n    // Show stacking results, hide damage results\n    if (stackingResults) stackingResults.classList.remove('hidden');\n    if (damageResults) damageResults.classList.add('hidden');\n\n    // Display optimization statistics\n    optimizationStats.innerHTML = `\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.compositions.length}</div>\n        <div class=\"stat-label\">Valid Solutions</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.totalCombinationsEvaluated.toLocaleString()}</div>\n        <div class=\"stat-label\">Combinations Tested</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${Math.round(result.executionTimeMs)}ms</div>\n        <div class=\"stat-label\">Execution Time</div>\n      </div>\n    `;\n\n    // Display army compositions\n    armyCompositions.innerHTML = '';\n\n    if (result.compositions.length === 0) {\n      armyCompositions.innerHTML = '<p class=\"text-center text-muted\">No valid army compositions found. Try adjusting your constraints.</p>';\n    } else {\n      result.compositions.forEach((composition: ArmyComposition, index: number) => {\n        const compositionDiv = this.createCompositionElement(composition, index + 1);\n        armyCompositions.appendChild(compositionDiv);\n      });\n    }\n\n    resultsSection.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('results-section');\n\n    // Store the best composition for potential battle simulation\n    if (result.compositions.length > 0) {\n      this.currentOptimizedArmy = result.compositions[0]; // Use the best composition\n      // Don't automatically show battle simulation in stacking mode\n      // Let the user navigate to it manually if they want to\n    }\n  }\n\n  /**\n   * Display damage optimization results\n   */\n  private displayDamageResults(result: any): void {\n    const optimizationStats = document.getElementById('optimization-stats');\n    const damageArmyList = document.getElementById('damage-army-list');\n    const resultsSection = document.getElementById('results-section');\n    const stackingResults = document.getElementById('stacking-results');\n    const damageResults = document.getElementById('damage-results');\n\n    if (!optimizationStats || !damageArmyList || !resultsSection) return;\n\n    // Show damage results, hide stacking results and battle simulation\n    if (stackingResults) stackingResults.classList.add('hidden');\n    if (damageResults) damageResults.classList.remove('hidden');\n\n    // Hide battle simulation container in damage mode\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (battleContainer) {\n      battleContainer.classList.add('hidden');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n\n    // Display optimization statistics\n    optimizationStats.innerHTML = `\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.rankedResults.length}</div>\n        <div class=\"stat-label\">Army Options</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.combinationsEvaluated.toLocaleString()}</div>\n        <div class=\"stat-label\">Combinations Tested</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${Math.round(result.optimizationTimeMs)}ms</div>\n        <div class=\"stat-label\">Execution Time</div>\n      </div>\n      <div class=\"stat-card\">\n        <div class=\"stat-value\">${result.algorithmUsed}</div>\n        <div class=\"stat-label\">Algorithm</div>\n      </div>\n    `;\n\n    // Display damage optimization results\n    damageArmyList.innerHTML = '';\n\n    if (result.rankedResults.length === 0) {\n      damageArmyList.innerHTML = '<p class=\"text-center text-muted\">No valid army compositions found. Try adjusting your constraints.</p>';\n    } else {\n      result.rankedResults.slice(0, 10).forEach((armyResult: any, index: number) => {\n        const armyDiv = this.createDamageArmyElement(armyResult, index + 1);\n        damageArmyList.appendChild(armyDiv);\n      });\n    }\n\n    resultsSection.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('results-section');\n\n    // Scroll to the results section (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      setTimeout(() => {\n        resultsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n\n    // Don't show battle simulation in damage optimization mode\n    // Users can click on individual results to see detailed analysis\n  }\n\n  /**\n   * Show battle simulation section with pre-calculated results\n   */\n  private showBattleSimulationWithResults(battleAnalysis: any): void {\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (!battleContainer || !this.currentOptimizedArmy) return;\n\n    // Show the container first\n    battleContainer.classList.remove('hidden');\n\n    // Update responsive navigation\n    responsiveNavigation.showSection('battle-simulation-container');\n\n    // Initialize battle simulation component if not already done\n    if (!this.battleSimulation) {\n      this.battleSimulation = new BattleSimulationComponent();\n      // Mount only if it's a new component\n      this.battleSimulation.mount(battleContainer, this.currentOptimizedArmy);\n    }\n\n    // Display the pre-calculated results\n    this.battleSimulation.displayPreCalculatedResults(battleAnalysis);\n\n    // Scroll to battle simulation (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      battleContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    }\n  }\n\n  /**\n   * Show battle simulation section\n   */\n  private showBattleSimulation(): void {\n    if (!this.currentOptimizedArmy) return;\n\n    const battleContainer = document.getElementById('battle-simulation-container');\n    if (!battleContainer) return;\n\n    // Show the container first\n    battleContainer.classList.remove('hidden');\n\n    // Initialize battle simulation component if not already done\n    if (!this.battleSimulation) {\n      this.battleSimulation = new BattleSimulationComponent();\n    }\n\n    // Mount the battle simulation component\n    this.battleSimulation.mount(battleContainer, this.currentOptimizedArmy);\n\n    // Update responsive navigation after mounting\n    responsiveNavigation.showSection('battle-simulation-container');\n\n    // Scroll to battle simulation section (only on desktop/tablet)\n    if (!mobileLayoutManager.isMobile()) {\n      setTimeout(() => {\n        battleContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }, 100);\n    }\n  }\n\n  /**\n   * Create composition element\n   */\n  private createCompositionElement(composition: ArmyComposition, rank: number): HTMLElement {\n    const div = document.createElement('div');\n    div.className = 'army-composition';\n\n    // Use the new cleaner format from the optimizer\n    const cleanFormat = this.optimizer?.explainStacking(composition) || 'No stacking explanation available';\n\n    // Create the header with solution info\n    const header = `\n      <div class=\"composition-header\">\n        <div class=\"composition-title\">Solution ${rank} ${composition.isValidStacking ? '✅' : '❌'}</div>\n        <div class=\"composition-score\">Efficiency: ${composition.efficiencyScore.toFixed(2)}</div>\n      </div>\n    `;\n\n    // Convert the clean format to HTML with proper styling\n    const formattedContent = cleanFormat\n      .split('\\n')\n      .map(line => {\n        // Headers with special characters\n        if (line.includes('🏆 OPTIMIZED ARMY COMPOSITION')) {\n          return `<h3 class=\"army-title\">${line}</h3>`;\n        }\n        if (line.includes('═'.repeat(60))) {\n          return '<hr class=\"title-divider\">';\n        }\n        if (line.includes('📊 ARMY SUMMARY') || line.includes('🗡️ MERCENARY FORCES') ||\n            line.includes('👑 LEADERSHIP FORCES') || line.includes('⚡ DOMINANCE FORCES') ||\n            line.includes('⚔️ BATTLE ORDER')) {\n          return `<h4 class=\"section-header\">${line}</h4>`;\n        }\n        if (line.includes('─'.repeat(30)) || line.includes('─'.repeat(40))) {\n          return '<hr class=\"section-divider\">';\n        }\n        // Unit entries with indentation\n        if (line.includes('└─')) {\n          return `<div class=\"unit-detail\">${line}</div>`;\n        }\n        // Regular unit lines\n        if (line.trim() && !line.includes('═') && !line.includes('─')) {\n          return `<div class=\"unit-line\">${line}</div>`;\n        }\n        // Empty lines for spacing\n        if (line.trim() === '') {\n          return '<div class=\"spacing\"></div>';\n        }\n        return '';\n      })\n      .filter(line => line !== '')\n      .join('');\n\n    // Add battle simulation button for stacking mode\n    const battleButton = `\n      <div class=\"composition-actions\">\n        <button class=\"btn btn-secondary simulate-btn\" data-composition-index=\"${rank - 1}\">\n          ⚔️ Simulate Battle\n        </button>\n      </div>\n    `;\n\n    div.innerHTML = header + '<div class=\"composition-content\">' + formattedContent + '</div>' + battleButton;\n\n    // Add event listener for battle simulation button\n    const simulateBtn = div.querySelector('.simulate-btn') as HTMLButtonElement;\n    if (simulateBtn) {\n      simulateBtn.addEventListener('click', () => {\n        this.currentOptimizedArmy = composition;\n        this.showBattleSimulation();\n      });\n    }\n\n    return div;\n  }\n\n  /**\n   * Create damage army element for display\n   */\n  private createDamageArmyElement(armyResult: any, rank: number): HTMLElement {\n    const div = document.createElement('div');\n    div.className = 'damage-army-card';\n    div.setAttribute('data-army-index', (rank - 1).toString());\n\n    const strategy = armyResult.armyComposition.totalDominanceCost === 0 ? 'Leadership' :\n                    armyResult.armyComposition.totalLeadershipCost === 0 ? 'Dominance' : 'Mixed';\n\n    const strategyIcon = strategy === 'Leadership' ? '🛡️' : strategy === 'Dominance' ? '👹' : '⚔️';\n\n    // Add click handler\n    div.addEventListener('click', () => this.selectDamageArmy(armyResult, rank - 1));\n\n    div.innerHTML = `\n      <div class=\"damage-army-header\">\n        <div class=\"army-rank\">#${rank}</div>\n        <div class=\"army-strategy\">\n          <span class=\"strategy-icon\">${strategyIcon}</span>\n          <span class=\"strategy-label\">${strategy} Strategy</span>\n        </div>\n        <div class=\"army-damage\">\n          <span class=\"damage-value\">${armyResult.averageDamagePerBattle.toLocaleString()}</span>\n          <span class=\"damage-label\">avg damage/battle</span>\n        </div>\n        <div class=\"click-indicator\">\n          <span class=\"click-text\">Click for details</span>\n          <span class=\"click-icon\">👆</span>\n        </div>\n      </div>\n\n      <div class=\"damage-army-content\">\n        <div class=\"army-composition-summary\">\n          <h4>Army Composition:</h4>\n          <div class=\"unit-list\">\n            ${Object.entries(armyResult.armyComposition.units).map(([unitName, count]: [string, any]) =>\n              `<div class=\"unit-item\">\n                <span class=\"unit-count\">${count.toLocaleString()}x</span>\n                <span class=\"unit-name\">${unitName}</span>\n              </div>`\n            ).join('')}\n          </div>\n        </div>\n\n        <div class=\"army-stats-grid\">\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Total Strength:</span>\n            <span class=\"stat-value\">${armyResult.armyComposition.totalStrength.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Budget Usage:</span>\n            <span class=\"stat-value\">${armyResult.armyComposition.totalLeadershipCost}L / ${armyResult.armyComposition.totalDominanceCost}D</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Battle Range:</span>\n            <span class=\"stat-value\">${armyResult.battleAnalysis.worstCase.totalDamageDealtToEnemies.toLocaleString()} - ${armyResult.battleAnalysis.bestCase.totalDamageDealtToEnemies.toLocaleString()} damage</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Silver Cost:</span>\n            <span class=\"stat-value\">${armyResult.totalSilverCost.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Food Cost:</span>\n            <span class=\"stat-value\">${armyResult.totalFoodConsumption.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">Efficiency:</span>\n            <span class=\"stat-value\">${armyResult.damageEfficiencyScore.toFixed(3)}</span>\n          </div>\n        </div>\n      </div>\n    `;\n\n    return div;\n  }\n\n  /**\n   * Select a damage army result for detailed view\n   */\n  private selectDamageArmy(armyResult: any, index: number): void {\n    // Update visual selection\n    const allCards = document.querySelectorAll('.damage-army-card');\n    allCards.forEach((card, i) => {\n      card.classList.toggle('selected', i === index);\n    });\n\n    // Show detailed composition\n    this.showSelectedArmyDetails(armyResult);\n\n    // Update battle simulation with this army and pre-calculated results\n    this.currentOptimizedArmy = armyResult.armyComposition;\n    this.showBattleSimulationWithResults(armyResult.battleAnalysis);\n  }\n\n  /**\n   * Show detailed composition for selected army\n   */\n  private showSelectedArmyDetails(armyResult: any): void {\n    const detailsContainer = document.getElementById('selected-army-details');\n    const compositionContainer = document.getElementById('selected-army-composition');\n\n    if (!detailsContainer || !compositionContainer) return;\n\n    // Create a detailed composition display similar to stacking results\n    const composition = armyResult.armyComposition;\n\n    // Generate detailed explanation using the stacking optimizer format\n    const selectedUnitObjects = this.unitLoader.getAvailableUnits(Object.keys(composition.units));\n    const tempOptimizer = new StackingOptimizer(selectedUnitObjects);\n    const explanation = tempOptimizer.explainStacking(composition);\n\n    compositionContainer.innerHTML = `\n      <div class=\"selected-army-header\">\n        <h4>Army Composition Details</h4>\n        <div class=\"army-summary-stats\">\n          <span class=\"summary-stat\">\n            <strong>Total Damage:</strong> ${armyResult.averageDamagePerBattle.toLocaleString()}/battle\n          </span>\n          <span class=\"summary-stat\">\n            <strong>Total Strength:</strong> ${composition.totalStrength.toLocaleString()}\n          </span>\n          <span class=\"summary-stat\">\n            <strong>Army Size:</strong> ${Object.values(composition.units).reduce((sum: number, count: any) => sum + count, 0).toLocaleString()} units\n          </span>\n        </div>\n      </div>\n\n      <div class=\"composition-explanation\">\n        ${explanation.split('\\n').map(line => {\n          // Format the explanation lines\n          if (line.trim() === '') {\n            return '<div class=\"spacing\"></div>';\n          }\n          if (line.includes('Total') || line.includes('Budget')) {\n            return `<div class=\"summary-line\"><strong>${line}</strong></div>`;\n          }\n          if (line.includes('→')) {\n            return `<div class=\"unit-line\">${line}</div>`;\n          }\n          if (line.includes('✓') || line.includes('Valid')) {\n            return `<div class=\"validation-line success\">${line}</div>`;\n          }\n          return `<div class=\"explanation-line\">${line}</div>`;\n        }).join('')}\n      </div>\n\n      <div class=\"battle-performance-summary\">\n        <h5>Battle Performance Analysis</h5>\n        <div class=\"performance-grid\">\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Best Case:</span>\n            <span class=\"performance-value\">${armyResult.battleAnalysis.bestCase.totalDamageDealtToEnemies.toLocaleString()} damage in ${armyResult.battleAnalysis.bestCase.battleDuration} turns</span>\n          </div>\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Worst Case:</span>\n            <span class=\"performance-value\">${armyResult.battleAnalysis.worstCase.totalDamageDealtToEnemies.toLocaleString()} damage in ${armyResult.battleAnalysis.worstCase.battleDuration} turns</span>\n          </div>\n          <div class=\"performance-item\">\n            <span class=\"performance-label\">Efficiency Score:</span>\n            <span class=\"performance-value\">${armyResult.damageEfficiencyScore.toFixed(3)}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"combat-logs-section\">\n        <h5>📜 Complete Combat Logs</h5>\n\n        <div class=\"combat-scenarios\">\n          <div class=\"combat-scenario\">\n            <h6>🟢 Best Case Scenario (You Attack First)</h6>\n            <div class=\"combat-log\">\n              ${this.formatCombatLog(armyResult.battleAnalysis.bestCase.combatLog)}\n            </div>\n          </div>\n\n          <div class=\"combat-scenario\">\n            <h6>🔴 Worst Case Scenario (Enemy Attacks First)</h6>\n            <div class=\"combat-log\">\n              ${this.formatCombatLog(armyResult.battleAnalysis.worstCase.combatLog)}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    detailsContainer.classList.remove('hidden');\n\n    // Scroll to the details section\n    detailsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n  }\n\n  /**\n   * Format combat log for display\n   */\n  private formatCombatLog(combatLog: any[]): string {\n    if (!combatLog || combatLog.length === 0) {\n      return '<div class=\"no-combat-log\">No combat actions recorded</div>';\n    }\n\n    return combatLog.map((action, index) => {\n      const isPlayerAction = action.attacker && !action.attacker.includes('Enemy');\n      const actionClass = isPlayerAction ? 'player-action' : 'enemy-action';\n\n      return `\n        <div class=\"combat-action ${actionClass}\">\n          <div class=\"action-header\">\n            <span class=\"turn-number\">Turn ${action.turn}</span>\n            <span class=\"action-type\">${isPlayerAction ? '⚔️ Player Attack' : '🛡️ Enemy Attack'}</span>\n          </div>\n          <div class=\"action-details\">\n            <strong>${action.attacker}</strong> ${action.action} <strong>${action.target}</strong>\n            ${action.damageDealt ? `<span class=\"damage-dealt\">(${action.damageDealt.toLocaleString()} damage)</span>` : ''}\n            ${action.eliminated ? '<span class=\"eliminated-indicator\">💀 Eliminated</span>' : ''}\n          </div>\n        </div>\n      `;\n    }).join('');\n  }\n\n  /**\n   * Clear selection\n   */\n  private clearSelection(): void {\n    this.selectedUnits.clear();\n    this.mercenaryLimits = {};\n    this.currentOptimizedArmy = null;\n\n    const leadershipBudget = document.getElementById('leadership-budget') as HTMLInputElement;\n    const dominanceBudget = document.getElementById('dominance-budget') as HTMLInputElement;\n    const resultsSection = document.getElementById('results-section');\n    const battleContainer = document.getElementById('battle-simulation-container');\n\n    if (leadershipBudget) leadershipBudget.value = '0';\n    if (dominanceBudget) dominanceBudget.value = '0';\n    if (resultsSection) {\n      resultsSection.classList.add('hidden');\n      responsiveNavigation.hideSection('results-section');\n    }\n    if (battleContainer) {\n      battleContainer.classList.add('hidden');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n\n    this.filterAndDisplayUnits();\n    this.updateMercenaryLimits();\n    this.updateOptimizeButton();\n  }\n\n  /**\n   * Switch between optimization modes\n   */\n  private switchMode(mode: 'stacking' | 'damage' | 'enemy-units'): void {\n    this.currentMode = mode;\n\n    // Update mode tabs\n    const stackingBtn = document.getElementById('stacking-mode-btn');\n    const damageBtn = document.getElementById('damage-mode-btn');\n    const enemyUnitsBtn = document.getElementById('enemy-units-btn');\n\n    if (stackingBtn && damageBtn && enemyUnitsBtn) {\n      stackingBtn.classList.toggle('active', mode === 'stacking');\n      damageBtn.classList.toggle('active', mode === 'damage');\n      enemyUnitsBtn.classList.toggle('active', mode === 'enemy-units');\n    }\n\n    // Update mode descriptions\n    const stackingDesc = document.getElementById('stacking-description');\n    const damageDesc = document.getElementById('damage-description');\n\n    if (stackingDesc && damageDesc) {\n      stackingDesc.classList.toggle('hidden', mode !== 'stacking');\n      damageDesc.classList.toggle('hidden', mode !== 'damage');\n    }\n\n    // Update damage optimization controls\n    const damageControls = document.getElementById('damage-controls');\n    if (damageControls) {\n      damageControls.classList.toggle('hidden', mode !== 'damage');\n    }\n\n    // Update optimize button text\n    const optimizeBtnText = document.getElementById('optimize-btn-text');\n    if (optimizeBtnText) {\n      if (mode === 'stacking') {\n        optimizeBtnText.textContent = '🚀 Optimize Army';\n      } else if (mode === 'damage') {\n        optimizeBtnText.textContent = '⚔️ Optimize for Damage';\n      } else {\n        optimizeBtnText.textContent = '👹 Manage Enemy Units';\n      }\n    }\n\n    // Update results title\n    const resultsTitle = document.getElementById('results-title');\n    if (resultsTitle) {\n      if (mode === 'stacking') {\n        resultsTitle.textContent = '🎯 Stacking Results';\n      } else if (mode === 'damage') {\n        resultsTitle.textContent = '⚔️ Damage Optimization Results';\n      } else {\n        resultsTitle.textContent = '👹 Enemy Units Management';\n      }\n    }\n\n    // Show/hide sections based on mode\n    const configSection = document.getElementById('config-section');\n    const resultsSection = document.getElementById('results-section');\n    const enemyUnitsSection = document.getElementById('enemy-units-section');\n    const battleContainer = document.getElementById('battle-simulation-container');\n\n    if (mode === 'enemy-units') {\n      // Show enemy units section, hide others\n      if (configSection) configSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.remove('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      // Initialize enemy units manager\n      this.initializeEnemyUnitsManager();\n      \n      responsiveNavigation.hideSection('config-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.showSection('enemy-units-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    } else {\n      // Show config section, hide enemy units section\n      if (configSection) configSection.classList.remove('hidden');\n      if (enemyUnitsSection) enemyUnitsSection.classList.add('hidden');\n      if (resultsSection) resultsSection.classList.add('hidden');\n      if (battleContainer) battleContainer.classList.add('hidden');\n      \n      responsiveNavigation.showSection('config-section');\n      responsiveNavigation.hideSection('enemy-units-section');\n      responsiveNavigation.hideSection('results-section');\n      responsiveNavigation.hideSection('battle-simulation-container');\n    }\n  }\n\n  /**\n   * Show loading modal\n   */\n  private showLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.remove('hidden');\n    }\n  }\n\n  /**\n   * Hide loading modal\n   */\n  private hideLoadingModal(): void {\n    const loadingModal = document.getElementById('loading-modal');\n    if (loadingModal) {\n      loadingModal.classList.add('hidden');\n    }\n  }\n\n  private optimizationAbortController: AbortController | null = null;\n  private optimizationStartTime: number = 0;\n  private progressUpdateInterval: number | null = null;\n\n  /**\n   * Show progress modal with progress bar, timer, and cancel button\n   */\n  private showProgressModal(): void {\n    // Create progress modal if it doesn't exist\n    let progressModal = document.getElementById('progress-modal');\n    if (!progressModal) {\n      progressModal = document.createElement('div');\n      progressModal.id = 'progress-modal';\n      progressModal.className = 'modal';\n      progressModal.innerHTML = `\n        <div class=\"modal-content progress-modal-content\">\n          <h3>⚔️ Optimizing for Damage</h3>\n          <div class=\"progress-container\">\n            <div class=\"progress-bar\">\n              <div class=\"progress-fill\" id=\"progress-fill\"></div>\n            </div>\n            <div class=\"progress-text\" id=\"progress-text\">Initializing...</div>\n            <div class=\"progress-percentage\" id=\"progress-percentage\">0%</div>\n          </div>\n          <div class=\"progress-details\">\n            <div class=\"progress-stats\">\n              <span id=\"progress-combinations\">0 / 0 combinations</span>\n              <span id=\"progress-phase\">Initializing</span>\n            </div>\n            <div class=\"progress-timing\">\n              <span id=\"progress-elapsed\">00:00</span>\n              <span class=\"timer-separator\">/</span>\n              <span id=\"progress-timeout\">02:00</span>\n              <span id=\"progress-remaining\"></span>\n            </div>\n          </div>\n          <div class=\"progress-actions\">\n            <button id=\"cancel-optimization-btn\" class=\"btn btn-secondary\">\n              <span class=\"btn-icon\">❌</span>\n              Cancel Optimization\n            </button>\n          </div>\n          <p class=\"progress-note\">Large army pools may take longer to process...</p>\n        </div>\n      `;\n      document.body.appendChild(progressModal);\n\n      // Add cancel button event listener\n      const cancelBtn = document.getElementById('cancel-optimization-btn');\n      if (cancelBtn) {\n        cancelBtn.addEventListener('click', () => {\n          this.cancelOptimization();\n        });\n      }\n    }\n\n    progressModal.classList.remove('hidden');\n    this.optimizationStartTime = performance.now();\n    this.updateProgressModal(0, 'Initializing...');\n    this.startProgressTimer();\n  }\n\n  /**\n   * Update progress modal with detailed information\n   */\n  private updateProgressModal(progress: number, message: string, details?: {\n    combinationsEvaluated?: number;\n    totalToEvaluate?: number;\n    phase?: string;\n    estimatedRemainingMs?: number;\n  }): void {\n    const progressFill = document.getElementById('progress-fill');\n    const progressText = document.getElementById('progress-text');\n    const progressPercentage = document.getElementById('progress-percentage');\n    const progressCombinations = document.getElementById('progress-combinations');\n    const progressPhase = document.getElementById('progress-phase');\n    const progressRemaining = document.getElementById('progress-remaining');\n\n    if (progressFill) {\n      progressFill.style.width = `${progress}%`;\n    }\n    if (progressText) {\n      progressText.textContent = message;\n    }\n    if (progressPercentage) {\n      progressPercentage.textContent = `${Math.round(progress)}%`;\n    }\n    if (progressCombinations && details) {\n      const evaluated = details.combinationsEvaluated || 0;\n      const total = details.totalToEvaluate || 0;\n      progressCombinations.textContent = `${evaluated.toLocaleString()} / ${total.toLocaleString()} combinations`;\n    }\n    if (progressPhase && details?.phase) {\n      progressPhase.textContent = details.phase.charAt(0).toUpperCase() + details.phase.slice(1);\n    }\n    if (progressRemaining && details?.estimatedRemainingMs) {\n      const remainingSeconds = Math.ceil(details.estimatedRemainingMs / 1000);\n      const minutes = Math.floor(remainingSeconds / 60);\n      const seconds = remainingSeconds % 60;\n      progressRemaining.textContent = `(~${minutes}:${seconds.toString().padStart(2, '0')} remaining)`;\n    } else if (progressRemaining) {\n      progressRemaining.textContent = '';\n    }\n  }\n\n  /**\n   * Start the progress timer\n   */\n  private startProgressTimer(): void {\n    this.progressUpdateInterval = window.setInterval(() => {\n      const elapsedMs = performance.now() - this.optimizationStartTime;\n      const elapsedSeconds = Math.floor(elapsedMs / 1000);\n      const minutes = Math.floor(elapsedSeconds / 60);\n      const seconds = elapsedSeconds % 60;\n\n      const progressElapsed = document.getElementById('progress-elapsed');\n      if (progressElapsed) {\n        progressElapsed.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n      }\n    }, 1000);\n  }\n\n  /**\n   * Stop the progress timer\n   */\n  private stopProgressTimer(): void {\n    if (this.progressUpdateInterval) {\n      clearInterval(this.progressUpdateInterval);\n      this.progressUpdateInterval = null;\n    }\n  }\n\n  /**\n   * Cancel the current optimization\n   */\n  private cancelOptimization(): void {\n    if (this.optimizationAbortController) {\n      this.optimizationAbortController.abort();\n      this.hideProgressModal();\n      alert('Optimization cancelled by user.');\n    }\n  }\n\n  /**\n   * Hide progress modal\n   */\n  private hideProgressModal(): void {\n    const progressModal = document.getElementById('progress-modal');\n    if (progressModal) {\n      progressModal.classList.add('hidden');\n    }\n    this.stopProgressTimer();\n    this.optimizationAbortController = null;\n  }\n\n  /**\n   * Initialize mobile optimizations\n   */\n  private initializeMobileOptimizations(): void {\n    // Apply mobile CSS optimizations\n    MobileCSSManager.optimizeCombatLogs();\n    MobileCSSManager.optimizeUnitCards();\n\n    // Add touch support to unit cards\n    this.addTouchSupportToUnitCards();\n\n    // Listen for layout changes\n    mobileLayoutManager.addLayoutChangeListener((mode) => {\n      this.handleLayoutModeChange(mode);\n    });\n  }\n\n  /**\n   * Add touch support to unit cards\n   */\n  private addTouchSupportToUnitCards(): void {\n    const unitCards = document.querySelectorAll('.unit-card');\n    unitCards.forEach(card => {\n      if (card instanceof HTMLElement) {\n        // Add haptic feedback for touch interactions\n        TouchInteractionManager.addHapticFeedback(card);\n      }\n    });\n  }\n\n  /**\n   * Handle layout mode changes\n   */\n  private handleLayoutModeChange(mode: 'mobile' | 'tablet' | 'desktop'): void {\n    // Re-apply mobile optimizations when layout changes\n    setTimeout(() => {\n      MobileCSSManager.optimizeCombatLogs();\n      MobileCSSManager.optimizeUnitCards();\n      this.addTouchSupportToUnitCards();\n\n      // Re-initialize advanced features for new layout\n      if (mode === 'mobile') {\n        this.initializeAdvancedMobileFeatures();\n      }\n    }, 100);\n  }\n\n  /**\n   * Initialize Phase 3 advanced mobile features\n   */\n  private initializeAdvancedMobileFeatures(): void {\n    if (!mobileLayoutManager.isMobile()) return;\n\n    // Initialize performance monitoring\n    MobilePerformanceManager.initialize();\n\n    // Initialize accessibility enhancements\n    MobileAccessibilityManager.initialize();\n\n    // Add pull-to-refresh to main content\n    this.addPullToRefresh();\n\n    // Add floating action button for quick optimization\n    this.addFloatingActionButton();\n\n    // Enhance forms for mobile accessibility\n    MobileAccessibilityManager.enhanceFormAccessibility();\n\n    // Add dynamic ARIA labels\n    setTimeout(() => {\n      MobileAccessibilityManager.addDynamicLabels();\n    }, 500);\n  }\n\n  /**\n   * Add pull-to-refresh functionality\n   */\n  private addPullToRefresh(): void {\n    const mainContent = document.querySelector('.main-content') as HTMLElement;\n    if (!mainContent) return;\n\n    TouchInteractionManager.addPullToRefresh(\n      mainContent,\n      async () => {\n        // Refresh current data\n        MobileAccessibilityManager.announce('Refreshing data...');\n\n        // Simulate refresh delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Re-apply optimizations\n        MobileCSSManager.optimizeCombatLogs();\n        MobileCSSManager.optimizeUnitCards();\n        MobileAccessibilityManager.addDynamicLabels();\n\n        MobileAccessibilityManager.announce('Data refreshed');\n      }\n    );\n  }\n\n  /**\n   * Add floating action button for quick access\n   */\n  private addFloatingActionButton(): void {\n    // Only show FAB when there are selected units\n    if (this.selectedUnits.size > 0) {\n      MobileUIPatterns.showFloatingActionButton({\n        icon: '⚡',\n        label: 'Quick Optimize',\n        onClick: () => {\n          MobileAccessibilityManager.announce('Starting quick optimization');\n          this.optimizeArmy();\n        },\n        position: 'bottom-right',\n        color: 'primary'\n      });\n    } else {\n      MobileUIPatterns.hideFloatingActionButton();\n    }\n  }\n\n  /**\n   * Initialize enemy units manager component\n   */\n  private initializeEnemyUnitsManager(): void {\n    const enemyUnitsContainer = document.getElementById('enemy-units-container');\n    if (!enemyUnitsContainer) return;\n\n    // Initialize enemy unit manager if not already done\n    if (!this.enemyUnitManager) {\n      this.enemyUnitManager = new EnemyUnitManager({\n        mode: 'embedded'\n      });\n    }\n\n    // Mount the enemy unit manager component\n    this.enemyUnitManager.mount(enemyUnitsContainer);\n  }\n\n  /**\n   * Open enemy unit selector for battle optimization\n   */\n  private openEnemyUnitSelector(): void {\n    // Get the current enemy groups count to determine max selections\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxSelections = parseInt(enemyCountInput?.value || '5');\n    \n    // Import the EnemyUnitSelector dynamically to avoid circular dependencies\n    import('../EnemyUnits/EnemyUnitSelector').then(({ EnemyUnitSelector }) => {\n      // Create a modal container for the enemy unit selector\n      const modalContainer = document.createElement('div');\n      modalContainer.id = 'enemy-unit-selector-modal';\n      modalContainer.style.position = 'fixed';\n      modalContainer.style.top = '0';\n      modalContainer.style.left = '0';\n      modalContainer.style.right = '0';\n      modalContainer.style.bottom = '0';\n      modalContainer.style.zIndex = '2000';\n      document.body.appendChild(modalContainer);\n\n      // Create the enemy unit selector with multiple selection mode\n      const selector = new EnemyUnitSelector({\n        onSelect: (enemyUnit) => {\n          this.handleEnemyUnitSelected(enemyUnit);\n          // Don't close the selector immediately in multiple mode - let user continue selecting\n          // The selector will handle the UI updates and user can close when done\n        },\n        onCancel: () => {\n          this.closeEnemyUnitSelector(modalContainer, selector);\n        },\n        mode: 'multiple',\n        title: `Select Enemy Units for Battle Optimization (${this.selectedEnemyUnits.length}/${maxSelections} selected)`,\n        maxSelections: maxSelections,\n        selectedUnits: [...this.selectedEnemyUnits]\n      });\n\n      // Store reference to the selector for updates\n      this.currentEnemyUnitSelector = selector;\n      this.currentEnemyUnitSelectorContainer = modalContainer;\n\n      // Mount the selector\n      selector.mount(modalContainer);\n    }).catch(error => {\n      console.error('Failed to load EnemyUnitSelector:', error);\n      alert('Failed to open enemy unit selector. Please try again.');\n    });\n  }\n\n  /**\n   * Handle enemy unit selection for damage optimization\n   */\n  private handleEnemyUnitSelected(enemyUnit: any): void {\n    // Get the current enemy groups count to determine max selections\n    const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n    const maxSelections = parseInt(enemyCountInput?.value || '5');\n    \n    // Check if this enemy unit is already selected\n    const existingIndex = this.selectedEnemyUnits.findIndex(unit => unit.name === enemyUnit.name);\n    \n    if (existingIndex >= 0) {\n      // Remove if already selected\n      this.selectedEnemyUnits.splice(existingIndex, 1);\n    } else if (this.selectedEnemyUnits.length < maxSelections) {\n      // Add if under the limit\n      this.selectedEnemyUnits.push(enemyUnit);\n    } else {\n      // At limit, replace the first selected unit\n      this.selectedEnemyUnits.shift(); // Remove first\n      this.selectedEnemyUnits.push(enemyUnit); // Add new\n    }\n    \n    // Update the UI to show the selected enemy units\n    this.updateEnemyUnitDisplay();\n    \n    // Update the modal title if the selector is open\n    this.updateEnemyUnitSelectorTitle();\n  }\n\n  /**\n   * Close the enemy unit selector modal\n   */\n  private closeEnemyUnitSelector(modalContainer: HTMLElement, selector: any): void {\n    try {\n      // Unmount the selector\n      if (selector && typeof selector.unmount === 'function') {\n        selector.unmount();\n      }\n      \n      // Remove the modal container\n      if (modalContainer && modalContainer.parentNode) {\n        modalContainer.parentNode.removeChild(modalContainer);\n      }\n      \n      // Clear references\n      this.currentEnemyUnitSelector = null;\n      this.currentEnemyUnitSelectorContainer = null;\n    } catch (error) {\n      console.error('Error closing enemy unit selector:', error);\n    }\n  }\n\n  /**\n   * Update the enemy unit selector title when selections change\n   */\n  private updateEnemyUnitSelectorTitle(): void {\n    if (this.currentEnemyUnitSelector && typeof this.currentEnemyUnitSelector.updateTitle === 'function') {\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const maxSelections = parseInt(enemyCountInput?.value || '5');\n      const newTitle = `Select Enemy Units for Battle Optimization (${this.selectedEnemyUnits.length}/${maxSelections} selected)`;\n      \n      this.currentEnemyUnitSelector.updateTitle(newTitle);\n      \n      // Also update the selected units in the selector to reflect any changes\n      if (typeof this.currentEnemyUnitSelector.updateSelectedUnits === 'function') {\n        this.currentEnemyUnitSelector.updateSelectedUnits(this.selectedEnemyUnits);\n      }\n    }\n  }\n\n  /**\n   * Handle changes to enemy groups count\n   */\n  private handleEnemyGroupsChange(): void {\n    if (this.currentMode === 'damage') {\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const enemyGroupsCount = enemyCountInput ? parseInt(enemyCountInput.value) || 1 : 1;\n      \n      // Trim selected units if we now have too many\n      if (this.selectedEnemyUnits.length > enemyGroupsCount) {\n        this.selectedEnemyUnits = this.selectedEnemyUnits.slice(0, enemyGroupsCount);\n      }\n      \n      // Always update the enemy unit display to reflect the new max selections count\n      this.updateEnemyUnitDisplay();\n      \n      // Update the selector if it's open\n      this.updateEnemyUnitSelectorTitle();\n    }\n  }\n\n  /**\n   * Update the enemy unit display in the damage optimization controls\n   */\n  private updateEnemyUnitDisplay(): void {\n    const selectEnemyBtn = document.getElementById('select-enemy-units-btn');\n    \n    if (selectEnemyBtn) {\n      // Always get the current enemy groups count\n      const enemyCountInput = document.getElementById('enemy-count') as HTMLInputElement;\n      const maxSelections = parseInt(enemyCountInput?.value || '5');\n      \n      if (this.selectedEnemyUnits.length === 0) {\n        // No enemy units selected\n        selectEnemyBtn.innerHTML = `\n          👹 Select Enemy Units\n        `;\n        selectEnemyBtn.classList.remove('enemy-selected');\n      } else if (this.selectedEnemyUnits.length === 1) {\n        // Single enemy unit selected\n        const enemyUnit = this.selectedEnemyUnits[0];\n        selectEnemyBtn.innerHTML = `\n          <span class=\"selected-enemy-indicator\">✅</span>\n          ${enemyUnit.name}\n          <small class=\"enemy-stats\">(STR: ${enemyUnit.strength.toLocaleString()}, HP: ${enemyUnit.health.toLocaleString()})</small>\n        `;\n        selectEnemyBtn.classList.add('enemy-selected');\n      } else {\n        // Multiple enemy units selected\n        selectEnemyBtn.innerHTML = `\n          <span class=\"selected-enemy-indicator\">✅</span>\n          ${this.selectedEnemyUnits.length} Enemy Units Selected\n          <small class=\"enemy-stats\">(${this.selectedEnemyUnits.length}/${maxSelections} selected)</small>\n        `;\n        selectEnemyBtn.classList.add('enemy-selected');\n      }\n    }\n  }\n\n\n}\n","/**\n * Main entry point for the TotalBattle Army Calculator\n */\n\nimport './style.css';\nimport { ArmyCalculatorApp } from './components/ArmyCalculator/ArmyCalculatorApp';\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n  const appContainer = document.getElementById('app');\n  \n  if (!appContainer) {\n    throw new Error('App container not found');\n  }\n\n  // Create and mount the main application\n  const app = new ArmyCalculatorApp();\n  app.mount(appContainer);\n\n  // Add global error handling\n  window.addEventListener('error', (event) => {\n    console.error('Global error:', event.error);\n    // You could add error reporting here\n  });\n\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('Unhandled promise rejection:', event.reason);\n    // You could add error reporting here\n  });\n\n  // Add service worker registration for PWA (future enhancement)\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      // Service worker registration would go here\n      console.log('Service worker support detected');\n    });\n  }\n\n  console.log('TotalBattle Army Calculator initialized');\n});\n"],"file":"assets/main-B1RYfdA-.js"}